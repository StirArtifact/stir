static	O
bool	bool
recutl_sort_p	bool
=	O
false	int
;	O
static	O
char	O
*	O
recutl_order_rset	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
recutl_order_by_field	pointer
=	O
NULL	O
;	O
static	O
bool	bool
recutl_interactive_p	bool
=	O
false	int
;	O
static	O
size_t	long
*	O
recutl_indexes	pointer
=	O
NULL	O
;	O
static	O
size_t	long
recutl_indexes_size	long
=	O
0	int
;	O
void	O
recutl_print_help	function
(	O
void	O
)	O
;	O
void	O
recutl_init	function
(	O
char	O
*	O
util_name	pointer
)	O
{	O
set_program_name	function
(	O
xstrdup	function
(	O
util_name	pointer
)	O
)	O
;	O
rec_init	function
(	O
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
recutl_interactive_p	bool
=	O
isatty	function
(	O
fileno	function
(	O
stdin	pointer
)	O
)	O
;	O
recutl_reset_indexes	function
(	O
)	O
;	O
}	O
bool	bool
recutl_interactive	function
(	O
void	O
)	O
{	O
return	O
recutl_interactive_p	bool
;	O
}	O
void	O
recutl_print_help_footer	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Report bugs to: %s\n"	pointer
)	O
,	O
PACKAGE_BUGREPORT	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"%s home page: <%s>\n"	pointer
)	O
,	O
PACKAGE_NAME	pointer
,	O
PACKAGE_URL	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"General help using GNU software: <http://www.gnu.org/gethelp/>\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
void	O
recutl_print_help_common	function
(	O
void	O
)	O
{	O
fputs	function
(	O
_	O
(	O
"      --help                          print a help message and exit.\n      --version                       show version and exit.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
void	O
recutl_print_help_record_selection	function
(	O
void	O
)	O
{	O
fputs	function
(	O
_	O
(	O
"Record selection options:\n  -i, --case-insensitive              make strings case-insensitive in selection\n                                        expressions.\n  -t, --type=TYPE                     operate on records of the specified type only.\n  -e, --expression=RECORD_EXPR        selection expression.\n  -q, --quick=STR                     select records with fields containing a string.\n  -n, --number=NUM,...                select specific records by position, with ranges.\n  -m, --random=NUM                    select a given number of random records.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
void	O
recutl_print_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
program_name	pointer
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
puts	function
(	O
""	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Jose E. Marchesi.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2010-2019"	pointer
)	O
;	O
puts	function
(	O
_	O
(	O
"\nWritten by Jose E. Marchesi."	pointer
)	O
)	O
;	O
}	O
void	O
recutl_fatal	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
fputs	function
(	O
program_name	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
": error: "	pointer
)	O
,	O
stderr	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
recutl_out_of_memory	function
(	O
void	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"out of memory\n"	pointer
)	O
)	O
;	O
}	O
void	O
recutl_error	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
fputs	function
(	O
program_name	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
": error: "	pointer
)	O
,	O
stderr	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
recutl_warning	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
fputs	function
(	O
program_name	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
": warning: "	pointer
)	O
,	O
stderr	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
bool	bool
recutl_parse_db_from_file	function
(	O
FILE	struct
*	O
in	pointer
,	O
char	O
*	O
file_name	pointer
,	O
rec_db_t	pointer
db	pointer
)	O
{	O
bool	bool
res	bool
;	O
rec_rset_t	pointer
rset	pointer
;	O
rec_parser_t	pointer
parser	pointer
;	O
res	bool
=	O
true	int
;	O
parser	pointer
=	O
rec_parser_new	function
(	O
in	pointer
,	O
file_name	pointer
)	O
;	O
while	O
(	O
rec_parse_rset	function
(	O
parser	pointer
,	O
&	O
rset	pointer
)	O
)	O
{	O
char	O
*	O
rset_type	pointer
;	O
rset_type	pointer
=	O
rec_rset_type	function
(	O
rset	pointer
)	O
;	O
if	O
(	O
rec_db_type_p	function
(	O
db	pointer
,	O
rset_type	pointer
)	O
)	O
{	O
if	O
(	O
rset_type	pointer
)	O
recutl_fatal	function
(	O
_	O
(	O
"duplicated record set '%s' from %s.\n"	pointer
)	O
,	O
rset_type	pointer
,	O
file_name	pointer
)	O
;	O
else	O
{	O
rec_rset_t	pointer
anon_rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
NULL	O
)	O
;	O
rec_mset_iterator_t	struct
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_ANY	int
,	O
NULL	O
,	O
&	O
elem	pointer
)	O
)	O
{	O
void	O
*	O
data	pointer
=	O
rec_mset_elem_dup_data	function
(	O
elem	pointer
)	O
;	O
if	O
(	O
!	O
data	pointer
||	O
!	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
anon_rset	pointer
)	O
,	O
rec_mset_elem_type	function
(	O
elem	pointer
)	O
,	O
data	pointer
,	O
MSET_ANY	int
)	O
)	O
return	O
false	int
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
true	int
;	O
}	O
}	O
if	O
(	O
!	O
rec_db_insert_rset	function
(	O
db	pointer
,	O
rset	pointer
,	O
rec_db_size	function
(	O
db	pointer
)	O
)	O
)	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
rec_parser_error	function
(	O
parser	pointer
)	O
)	O
{	O
rec_parser_perror	function
(	O
parser	pointer
,	O
"%s"	pointer
,	O
file_name	pointer
)	O
;	O
res	bool
=	O
false	int
;	O
}	O
rec_parser_destroy	function
(	O
parser	pointer
)	O
;	O
return	O
res	bool
;	O
}	O
rec_db_t	pointer
recutl_build_db	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
rec_db_t	pointer
db	pointer
;	O
char	O
*	O
file_name	pointer
;	O
FILE	struct
*	O
in	pointer
;	O
db	pointer
=	O
rec_db_new	function
(	O
)	O
;	O
if	O
(	O
!	O
db	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
file_name	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
if	O
(	O
!	O
(	O
in	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"cannot read file %s\n"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
recutl_parse_db_from_file	function
(	O
in	pointer
,	O
file_name	pointer
,	O
db	pointer
)	O
)	O
{	O
free	function
(	O
db	pointer
)	O
;	O
db	pointer
=	O
NULL	O
;	O
}	O
fclose	function
(	O
in	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
recutl_parse_db_from_file	function
(	O
stdin	pointer
,	O
"stdin"	pointer
,	O
db	pointer
)	O
)	O
{	O
free	function
(	O
db	pointer
)	O
;	O
db	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
db	pointer
;	O
}	O
rec_db_t	pointer
recutl_read_db_from_file	function
(	O
char	O
*	O
file_name	pointer
)	O
{	O
rec_db_t	pointer
db	pointer
;	O
FILE	struct
*	O
in	pointer
;	O
db	pointer
=	O
rec_db_new	function
(	O
)	O
;	O
if	O
(	O
file_name	pointer
)	O
{	O
in	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
in	pointer
==	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
file_name	pointer
=	O
"stdin"	pointer
;	O
in	pointer
=	O
stdin	pointer
;	O
}	O
if	O
(	O
!	O
recutl_parse_db_from_file	function
(	O
in	pointer
,	O
file_name	pointer
,	O
db	pointer
)	O
)	O
{	O
rec_db_destroy	function
(	O
db	pointer
)	O
;	O
db	pointer
=	O
NULL	O
;	O
}	O
return	O
db	pointer
;	O
}	O
bool	bool
recutl_file_is_writable	function
(	O
char	O
*	O
file_name	pointer
)	O
{	O
return	O
!	O
file_name	pointer
||	O
(	O
euidaccess	function
(	O
file_name	pointer
,	O
W_OK	int
)	O
==	O
0	int
)	O
;	O
}	O
void	O
recutl_write_db_to_file	function
(	O
rec_db_t	pointer
db	pointer
,	O
char	O
*	O
file_name	pointer
)	O
{	O
FILE	struct
*	O
out	pointer
;	O
char	O
tmp_file_name	array
[	O
PATH_MAX	int
]	O
;	O
rec_writer_t	pointer
writer	pointer
;	O
int	O
des	int
;	O
struct	O
stat	struct
st1	struct
;	O
int	O
stat_result	int
;	O
if	O
(	O
!	O
file_name	pointer
)	O
{	O
out	pointer
=	O
stdout	pointer
;	O
}	O
else	O
{	O
stat_result	int
=	O
stat	struct
(	O
file_name	pointer
,	O
&	O
st1	struct
)	O
;	O
if	O
(	O
(	O
path_search	function
(	O
tmp_file_name	array
,	O
PATH_MAX	int
,	O
NULL	O
,	O
"rec"	pointer
,	O
true	int
)	O
==	O
-	O
1	int
)	O
||	O
(	O
(	O
des	int
=	O
mkstemp	function
(	O
tmp_file_name	array
)	O
)	O
==	O
-	O
1	int
)	O
)	O
recutl_fatal	function
(	O
_	O
(	O
"cannot create a unique name.\n"	pointer
)	O
)	O
;	O
out	pointer
=	O
fdopen	function
(	O
des	int
,	O
"w+"	pointer
)	O
;	O
}	O
writer	pointer
=	O
rec_writer_new	function
(	O
out	pointer
)	O
;	O
rec_write_db	function
(	O
writer	pointer
,	O
db	pointer
)	O
;	O
if	O
(	O
file_name	pointer
)	O
{	O
fclose	function
(	O
out	pointer
)	O
;	O
}	O
rec_db_destroy	function
(	O
db	pointer
)	O
;	O
if	O
(	O
file_name	pointer
)	O
{	O
if	O
(	O
rename	function
(	O
tmp_file_name	array
,	O
file_name	pointer
)	O
==	O
-	O
1	int
)	O
{	O
remove	function
(	O
tmp_file_name	array
)	O
;	O
recutl_fatal	function
(	O
_	O
(	O
"renaming file %s to %s\n"	pointer
)	O
,	O
tmp_file_name	array
,	O
file_name	pointer
)	O
;	O
}	O
if	O
(	O
stat_result	int
!=	O
-	O
1	int
)	O
{	O
chmod	function
(	O
file_name	pointer
,	O
st1	struct
.	O
st_mode	int
)	O
;	O
}	O
}	O
}	O
char	O
*	O
recutl_read_file	function
(	O
char	O
*	O
file_name	pointer
)	O
{	O
char	O
*	O
result	pointer
;	O
FILE	struct
*	O
in	pointer
;	O
result	pointer
=	O
NULL	O
;	O
in	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
in	pointer
)	O
{	O
size_t	long
file_size	long
;	O
result	pointer
=	O
fread_file	function
(	O
in	pointer
,	O
&	O
file_size	long
)	O
;	O
fclose	function
(	O
in	pointer
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
void	O
recutl_check_integrity	function
(	O
rec_db_t	pointer
db	pointer
,	O
bool	bool
verbose_p	bool
,	O
bool	bool
external_p	bool
)	O
{	O
rec_buf_t	pointer
errors_buf	pointer
;	O
char	O
*	O
errors_str	pointer
;	O
size_t	long
errors_str_size	long
;	O
errors_buf	pointer
=	O
rec_buf_new	function
(	O
&	O
errors_str	pointer
,	O
&	O
errors_str_size	long
)	O
;	O
if	O
(	O
rec_int_check_db	function
(	O
db	pointer
,	O
true	int
,	O
external_p	bool
,	O
errors_buf	pointer
)	O
>	O
0	int
)	O
{	O
rec_buf_close	function
(	O
errors_buf	pointer
)	O
;	O
if	O
(	O
!	O
verbose_p	bool
)	O
{	O
recutl_error	function
(	O
_	O
(	O
"operation aborted due to integrity failures.\n"	pointer
)	O
)	O
;	O
recutl_error	function
(	O
_	O
(	O
"use --verbose to get a detailed report.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
errors_str	pointer
)	O
;	O
}	O
recutl_fatal	function
(	O
_	O
(	O
"use --force to skip the integrity check.\n"	pointer
)	O
)	O
;	O
}	O
}	O
bool	bool
recutl_yesno	function
(	O
char	O
*	O
prompt	pointer
)	O
{	O
bool	bool
res	bool
=	O
false	int
;	O
char	O
*	O
line	pointer
=	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
line	pointer
=	O
readline	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
line	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
line	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
{	O
res	bool
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
line	pointer
,	O
"no"	pointer
)	O
==	O
0	int
)	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
printf	function
(	O
"Please answer 'yes' or 'no'.\n"	pointer
)	O
;	O
}	O
return	O
res	bool
;	O
}	O
bool	bool
recutl_index_list_parse	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
regex_t	struct
regexp	struct
;	O
bool	bool
res	bool
=	O
true	int
;	O
const	O
char	O
*	O
p	pointer
;	O
long	O
int	O
number	long
;	O
char	O
*	O
end	pointer
;	O
size_t	long
i	long
;	O
free	function
(	O
recutl_indexes	pointer
)	O
;	O
recutl_indexes	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
(	O
strlen	function
(	O
str	pointer
)	O
*	O
2	int
+	O
2	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
strlen	function
(	O
str	pointer
)	O
*	O
2	int
+	O
2	int
)	O
;	O
i	long
++	O
)	O
{	O
recutl_indexes	pointer
[	O
i	long
]	O
=	O
REC_Q_NOINDEX	O
;	O
}	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	struct
,	O
"^"	pointer
INDEX_LIST_RE	O
"$"	pointer
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"internal error: recutl_index_list_parse: error compiling regexp.\n"	pointer
)	O
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
regexec	O
(	O
&	O
regexp	struct
,	O
str	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
regfree	O
(	O
&	O
regexp	struct
)	O
;	O
return	O
false	int
;	O
}	O
regfree	O
(	O
&	O
regexp	struct
)	O
;	O
p	pointer
=	O
str	pointer
;	O
while	O
(	O
true	int
)	O
{	O
number	long
=	O
strtol	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
;	O
recutl_indexes	pointer
[	O
recutl_indexes_size	long
]	O
=	O
(	O
size_t	long
)	O
number	long
;	O
p	pointer
=	O
end	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'-'	O
)	O
{	O
p	pointer
++	O
;	O
number	long
=	O
strtol	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
;	O
recutl_indexes	pointer
[	O
recutl_indexes_size	long
+	O
1	int
]	O
=	O
(	O
size_t	long
)	O
number	long
;	O
p	pointer
=	O
end	pointer
;	O
}	O
recutl_indexes_size	long
=	O
recutl_indexes_size	long
+	O
2	int
;	O
if	O
(	O
*	O
p	pointer
==	O
'\0'	O
)	O
{	O
break	O
;	O
}	O
else	O
{	O
p	pointer
++	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
void	O
recutl_reset_indexes	function
(	O
void	O
)	O
{	O
free	function
(	O
recutl_indexes	pointer
)	O
;	O
recutl_indexes	pointer
=	O
NULL	O
;	O
recutl_indexes_size	long
=	O
0	int
;	O
}	O
size_t	long
recutl_num_indexes	function
(	O
void	O
)	O
{	O
return	O
recutl_indexes_size	long
;	O
}	O
size_t	long
*	O
recutl_index	function
(	O
void	O
)	O
{	O
return	O
recutl_indexes	pointer
;	O
}	O
char	O
*	O
recutl_getpass	function
(	O
bool	bool
asktwice	bool
)	O
{	O
char	O
*	O
ret	pointer
=	O
NULL	O
;	O
char	O
*	O
pass	pointer
=	O
getpass	function
(	O
_	O
(	O
"Password: "	pointer
)	O
)	O
;	O
if	O
(	O
pass	pointer
)	O
{	O
ret	pointer
=	O
xstrdup	function
(	O
pass	pointer
)	O
;	O
if	O
(	O
asktwice	bool
)	O
{	O
pass	pointer
=	O
getpass	function
(	O
_	O
(	O
"Password again: "	pointer
)	O
)	O
;	O
if	O
(	O
pass	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
ret	pointer
,	O
pass	pointer
)	O
!=	O
0	int
)	O
{	O
recutl_fatal	function
(	O
_	O
(	O
"the provided passwords don't match.\n"	pointer
)	O
)	O
;	O
memset	function
(	O
ret	pointer
,	O
0	int
,	O
strlen	function
(	O
ret	pointer
)	O
)	O
;	O
memset	function
(	O
pass	pointer
,	O
0	int
,	O
strlen	function
(	O
pass	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
memset	function
(	O
ret	pointer
,	O
0	int
,	O
strlen	function
(	O
ret	pointer
)	O
)	O
;	O
free	function
(	O
ret	pointer
)	O
;	O
ret	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
return	O
ret	pointer
;	O
}	O
