char	O
*	O
program_name	pointer
;	O
void	O
bfd_nonfatal	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
enum	O
bfd_error	enum
err	pointer
=	O
bfd_get_error	function
(	O
)	O
;	O
if	O
(	O
err	pointer
==	O
bfd_error_no_error	int
)	O
errmsg	pointer
=	O
_	O
(	O
"cause of error unknown"	pointer
)	O
;	O
else	O
errmsg	pointer
=	O
bfd_errmsg	function
(	O
err	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
string	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
program_name	pointer
,	O
string	pointer
,	O
errmsg	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
program_name	pointer
,	O
errmsg	pointer
)	O
;	O
}	O
void	O
bfd_nonfatal_message	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
asection	struct
*	O
section	pointer
,	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
const	O
char	O
*	O
section_name	pointer
;	O
va_list	array
args	array
;	O
enum	O
bfd_error	enum
err	pointer
=	O
bfd_get_error	function
(	O
)	O
;	O
if	O
(	O
err	pointer
==	O
bfd_error_no_error	int
)	O
errmsg	pointer
=	O
_	O
(	O
"cause of error unknown"	pointer
)	O
;	O
else	O
errmsg	pointer
=	O
bfd_errmsg	function
(	O
err	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
section_name	pointer
=	O
NULL	O
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
program_name	pointer
)	O
;	O
if	O
(	O
abfd	pointer
)	O
{	O
if	O
(	O
!	O
filename	pointer
)	O
filename	pointer
=	O
bfd_get_archive_filename	function
(	O
abfd	pointer
)	O
;	O
if	O
(	O
section	pointer
)	O
section_name	pointer
=	O
bfd_section_name	function
(	O
section	pointer
)	O
;	O
}	O
if	O
(	O
section_name	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
": %s[%s]"	pointer
,	O
filename	pointer
,	O
section_name	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
": %s"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
format	enum
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
": "	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	enum
,	O
args	array
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
": %s\n"	pointer
,	O
errmsg	pointer
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
void	O
bfd_fatal	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
bfd_nonfatal	function
(	O
string	pointer
)	O
;	O
xexit	function
(	O
1	int
)	O
;	O
}	O
void	O
report	function
(	O
const	O
char	O
*	O
format	enum
,	O
va_list	array
args	array
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
program_name	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	enum
,	O
args	array
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
void	O
fatal	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
report	function
(	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
xexit	function
(	O
1	int
)	O
;	O
}	O
void	O
non_fatal	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
report	function
(	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
void	O
set_default_bfd_target	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
target	pointer
=	O
TARGET	pointer
;	O
if	O
(	O
!	O
bfd_set_default_target	function
(	O
target	pointer
)	O
)	O
fatal	function
(	O
_	O
(	O
"can't set BFD default target to `%s': %s"	pointer
)	O
,	O
target	pointer
,	O
bfd_errmsg	function
(	O
bfd_get_error	function
(	O
)	O
)	O
)	O
;	O
}	O
void	O
list_matching_formats	function
(	O
char	O
*	O
*	O
p	pointer
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Matching formats:"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
while	O
(	O
*	O
p	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
" %s"	pointer
,	O
*	O
p	pointer
++	O
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
void	O
list_supported_targets	function
(	O
const	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
int	O
t	int
;	O
const	O
char	O
*	O
*	O
targ_names	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
f	pointer
,	O
_	O
(	O
"Supported targets:"	pointer
)	O
)	O
;	O
else	O
fprintf	function
(	O
f	pointer
,	O
_	O
(	O
"%s: supported targets:"	pointer
)	O
,	O
name	pointer
)	O
;	O
targ_names	pointer
=	O
bfd_target_list	function
(	O
)	O
;	O
for	O
(	O
t	int
=	O
0	int
;	O
targ_names	pointer
[	O
t	int
]	O
!=	O
NULL	O
;	O
t	int
++	O
)	O
fprintf	function
(	O
f	pointer
,	O
" %s"	pointer
,	O
targ_names	pointer
[	O
t	int
]	O
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n"	pointer
)	O
;	O
free	function
(	O
targ_names	pointer
)	O
;	O
}	O
void	O
list_supported_architectures	function
(	O
const	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
const	O
char	O
*	O
*	O
arch	enum
;	O
const	O
char	O
*	O
*	O
arches	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
f	pointer
,	O
_	O
(	O
"Supported architectures:"	pointer
)	O
)	O
;	O
else	O
fprintf	function
(	O
f	pointer
,	O
_	O
(	O
"%s: supported architectures:"	pointer
)	O
,	O
name	pointer
)	O
;	O
for	O
(	O
arch	enum
=	O
arches	pointer
=	O
bfd_arch_list	function
(	O
)	O
;	O
*	O
arch	enum
;	O
arch	enum
++	O
)	O
fprintf	function
(	O
f	pointer
,	O
" %s"	pointer
,	O
*	O
arch	enum
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n"	pointer
)	O
;	O
free	function
(	O
arches	pointer
)	O
;	O
}	O
static	O
const	O
char	O
*	O
endian_string	function
(	O
enum	O
bfd_endian	enum
endian	enum
)	O
{	O
switch	O
(	O
endian	enum
)	O
{	O
case	O
BFD_ENDIAN_BIG	int
:	O
return	O
_	O
(	O
"big endian"	pointer
)	O
;	O
case	O
BFD_ENDIAN_LITTLE	int
:	O
return	O
_	O
(	O
"little endian"	pointer
)	O
;	O
default	O
:	O
return	O
_	O
(	O
"endianness unknown"	pointer
)	O
;	O
}	O
}	O
struct	O
display_target	struct
{	O
char	O
*	O
filename	pointer
;	O
int	O
error	int
;	O
int	O
count	int
;	O
size_t	long
alloc	long
;	O
struct	O
{	O
const	O
char	O
*	O
name	pointer
;	O
unsigned	O
char	O
arch	enum
[	O
bfd_arch_last	int
-	O
bfd_arch_obscure	int
-	O
1	int
]	O
;	O
}	O
*	O
info	pointer
;	O
}	O
;	O
static	O
int	O
do_display_target	function
(	O
const	O
bfd_target	struct
*	O
targ	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
display_target	struct
*	O
param	pointer
=	O
(	O
struct	O
display_target	struct
*	O
)	O
data	pointer
;	O
bfd	struct
*	O
abfd	pointer
;	O
size_t	long
amt	long
;	O
param	pointer
->	O
count	int
+=	O
1	int
;	O
amt	long
=	O
param	pointer
->	O
count	int
*	O
sizeof	O
(	O
*	O
param	pointer
->	O
info	pointer
)	O
;	O
if	O
(	O
param	pointer
->	O
alloc	long
<	O
amt	long
)	O
{	O
size_t	long
size	int
=	O
(	O
(	O
param	pointer
->	O
count	int
<	O
64	int
?	O
64	int
:	O
param	pointer
->	O
count	int
)	O
*	O
sizeof	O
(	O
*	O
param	pointer
->	O
info	pointer
)	O
*	O
2	int
)	O
;	O
param	pointer
->	O
info	pointer
=	O
xrealloc	function
(	O
param	pointer
->	O
info	pointer
,	O
size	int
)	O
;	O
memset	function
(	O
(	O
char	O
*	O
)	O
param	pointer
->	O
info	pointer
+	O
param	pointer
->	O
alloc	long
,	O
0	int
,	O
size	int
-	O
param	pointer
->	O
alloc	long
)	O
;	O
param	pointer
->	O
alloc	long
=	O
size	int
;	O
}	O
param	pointer
->	O
info	pointer
[	O
param	pointer
->	O
count	int
-	O
1	int
]	O
.	O
name	pointer
=	O
targ	pointer
->	O
name	pointer
;	O
printf	function
(	O
_	O
(	O
"%s\n (header %s, data %s)\n"	pointer
)	O
,	O
targ	pointer
->	O
name	pointer
,	O
endian_string	function
(	O
targ	pointer
->	O
header_byteorder	enum
)	O
,	O
endian_string	function
(	O
targ	pointer
->	O
byteorder	enum
)	O
)	O
;	O
abfd	pointer
=	O
bfd_openw	function
(	O
param	pointer
->	O
filename	pointer
,	O
targ	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
)	O
{	O
bfd_nonfatal	function
(	O
param	pointer
->	O
filename	pointer
)	O
;	O
param	pointer
->	O
error	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
bfd_set_format	function
(	O
abfd	pointer
,	O
bfd_object	int
)	O
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_invalid_operation	int
)	O
{	O
bfd_nonfatal	function
(	O
targ	pointer
->	O
name	pointer
)	O
;	O
param	pointer
->	O
error	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
enum	O
bfd_architecture	enum
a	pointer
;	O
for	O
(	O
a	pointer
=	O
bfd_arch_obscure	int
+	O
1	int
;	O
a	pointer
<	O
bfd_arch_last	int
;	O
a	pointer
++	O
)	O
if	O
(	O
bfd_set_arch_mach	O
(	O
abfd	pointer
,	O
a	pointer
,	O
0	int
)	O
)	O
{	O
printf	function
(	O
"  %s\n"	pointer
,	O
bfd_printable_arch_mach	function
(	O
a	pointer
,	O
0	int
)	O
)	O
;	O
param	pointer
->	O
info	pointer
[	O
param	pointer
->	O
count	int
-	O
1	int
]	O
.	O
arch	enum
[	O
a	pointer
-	O
bfd_arch_obscure	int
-	O
1	int
]	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
abfd	pointer
!=	O
NULL	O
)	O
bfd_close_all_done	function
(	O
abfd	pointer
)	O
;	O
return	O
param	pointer
->	O
error	int
;	O
}	O
static	O
void	O
display_target_list	function
(	O
struct	O
display_target	struct
*	O
arg	pointer
)	O
{	O
arg	pointer
->	O
filename	pointer
=	O
make_temp_file	function
(	O
NULL	O
)	O
;	O
arg	pointer
->	O
error	int
=	O
0	int
;	O
arg	pointer
->	O
count	int
=	O
0	int
;	O
arg	pointer
->	O
alloc	long
=	O
0	int
;	O
arg	pointer
->	O
info	pointer
=	O
NULL	O
;	O
bfd_iterate_over_targets	function
(	O
do_display_target	function
,	O
arg	pointer
)	O
;	O
unlink	function
(	O
arg	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
arg	pointer
->	O
filename	pointer
)	O
;	O
}	O
static	O
int	O
do_info_size	function
(	O
int	O
targ	pointer
,	O
int	O
width	int
,	O
const	O
struct	O
display_target	struct
*	O
arg	pointer
)	O
{	O
while	O
(	O
targ	pointer
<	O
arg	pointer
->	O
count	int
)	O
{	O
width	int
-=	O
strlen	function
(	O
arg	pointer
->	O
info	pointer
[	O
targ	pointer
]	O
.	O
name	pointer
)	O
+	O
1	int
;	O
if	O
(	O
width	int
<	O
0	int
)	O
return	O
targ	pointer
;	O
++	O
targ	pointer
;	O
}	O
return	O
targ	pointer
;	O
}	O
static	O
void	O
do_info_header	function
(	O
int	O
targ	pointer
,	O
int	O
stop_targ	int
,	O
const	O
struct	O
display_target	struct
*	O
arg	pointer
)	O
{	O
while	O
(	O
targ	pointer
!=	O
stop_targ	int
)	O
printf	function
(	O
"%s "	pointer
,	O
arg	pointer
->	O
info	pointer
[	O
targ	pointer
++	O
]	O
.	O
name	pointer
)	O
;	O
}	O
static	O
void	O
do_info_row	function
(	O
int	O
targ	pointer
,	O
int	O
stop_targ	int
,	O
enum	O
bfd_architecture	enum
a	pointer
,	O
const	O
struct	O
display_target	struct
*	O
arg	pointer
)	O
{	O
while	O
(	O
targ	pointer
!=	O
stop_targ	int
)	O
{	O
if	O
(	O
arg	pointer
->	O
info	pointer
[	O
targ	pointer
]	O
.	O
arch	enum
[	O
a	pointer
-	O
bfd_arch_obscure	int
-	O
1	int
]	O
)	O
fputs	function
(	O
arg	pointer
->	O
info	pointer
[	O
targ	pointer
]	O
.	O
name	pointer
,	O
stdout	pointer
)	O
;	O
else	O
{	O
int	O
l	int
=	O
strlen	function
(	O
arg	pointer
->	O
info	pointer
[	O
targ	pointer
]	O
.	O
name	pointer
)	O
;	O
while	O
(	O
l	int
--	O
)	O
putchar	function
(	O
'-'	O
)	O
;	O
}	O
++	O
targ	pointer
;	O
if	O
(	O
targ	pointer
!=	O
stop_targ	int
)	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
}	O
static	O
void	O
display_target_tables	function
(	O
const	O
struct	O
display_target	struct
*	O
arg	pointer
)	O
{	O
const	O
char	O
*	O
columns	pointer
;	O
int	O
width	int
,	O
start_targ	int
,	O
stop_targ	int
;	O
enum	O
bfd_architecture	enum
arch	enum
;	O
int	O
longest_arch	int
=	O
0	int
;	O
for	O
(	O
arch	enum
=	O
bfd_arch_obscure	int
+	O
1	int
;	O
arch	enum
<	O
bfd_arch_last	int
;	O
arch	enum
++	O
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
bfd_printable_arch_mach	function
(	O
arch	enum
,	O
0	int
)	O
;	O
int	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
len	long
>	O
longest_arch	int
)	O
longest_arch	int
=	O
len	long
;	O
}	O
width	int
=	O
0	int
;	O
columns	pointer
=	O
getenv	function
(	O
"COLUMNS"	pointer
)	O
;	O
if	O
(	O
columns	pointer
!=	O
NULL	O
)	O
width	int
=	O
atoi	function
(	O
columns	pointer
)	O
;	O
if	O
(	O
width	int
==	O
0	int
)	O
width	int
=	O
80	int
;	O
for	O
(	O
start_targ	int
=	O
0	int
;	O
start_targ	int
<	O
arg	pointer
->	O
count	int
;	O
start_targ	int
=	O
stop_targ	int
)	O
{	O
stop_targ	int
=	O
do_info_size	function
(	O
start_targ	int
,	O
width	int
-	O
longest_arch	int
-	O
1	int
,	O
arg	pointer
)	O
;	O
printf	function
(	O
"\n%*s"	pointer
,	O
longest_arch	int
+	O
1	int
,	O
" "	pointer
)	O
;	O
do_info_header	function
(	O
start_targ	int
,	O
stop_targ	int
,	O
arg	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
arch	enum
=	O
bfd_arch_obscure	int
+	O
1	int
;	O
arch	enum
<	O
bfd_arch_last	int
;	O
arch	enum
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
bfd_printable_arch_mach	function
(	O
arch	enum
,	O
0	int
)	O
,	O
"UNKNOWN!"	pointer
)	O
!=	O
0	int
)	O
{	O
printf	function
(	O
"%*s "	pointer
,	O
longest_arch	int
,	O
bfd_printable_arch_mach	function
(	O
arch	enum
,	O
0	int
)	O
)	O
;	O
do_info_row	function
(	O
start_targ	int
,	O
stop_targ	int
,	O
arch	enum
,	O
arg	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
}	O
}	O
}	O
int	O
display_info	function
(	O
void	O
)	O
{	O
struct	O
display_target	struct
arg	pointer
;	O
printf	function
(	O
_	O
(	O
"BFD header file version %s\n"	pointer
)	O
,	O
BFD_VERSION_STRING	O
)	O
;	O
display_target_list	function
(	O
&	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
arg	pointer
.	O
error	int
)	O
display_target_tables	function
(	O
&	O
arg	pointer
)	O
;	O
return	O
arg	pointer
.	O
error	int
;	O
}	O
void	O
print_arelt_descr	function
(	O
FILE	struct
*	O
file	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
verbose	int
,	O
bfd_boolean	int
offsets	int
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
verbose	int
)	O
{	O
if	O
(	O
bfd_stat_arch_elt	O
(	O
abfd	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
)	O
{	O
char	O
modebuf	array
[	O
11	int
]	O
;	O
char	O
timebuf	array
[	O
40	int
]	O
;	O
time_t	long
when	long
=	O
buf	pointer
.	O
st_mtime	O
;	O
const	O
char	O
*	O
ctime_result	pointer
=	O
(	O
const	O
char	O
*	O
)	O
ctime	function
(	O
&	O
when	long
)	O
;	O
bfd_size_type	long
size	int
;	O
if	O
(	O
ctime_result	pointer
==	O
NULL	O
)	O
sprintf	function
(	O
timebuf	array
,	O
_	O
(	O
"<time data corrupt>"	pointer
)	O
)	O
;	O
else	O
sprintf	function
(	O
timebuf	array
,	O
"%.12s %.4s"	pointer
,	O
ctime_result	pointer
+	O
4	int
,	O
ctime_result	pointer
+	O
20	int
)	O
;	O
mode_string	function
(	O
buf	pointer
.	O
st_mode	int
,	O
modebuf	array
)	O
;	O
modebuf	array
[	O
10	int
]	O
=	O
'\0'	O
;	O
size	int
=	O
buf	pointer
.	O
st_size	long
;	O
fprintf	function
(	O
file	pointer
,	O
"%s %ld/%ld %6"	pointer
BFD_VMA_FMT	pointer
"u %s "	pointer
,	O
modebuf	array
+	O
1	int
,	O
(	O
long	O
)	O
buf	pointer
.	O
st_uid	int
,	O
(	O
long	O
)	O
buf	pointer
.	O
st_gid	int
,	O
size	int
,	O
timebuf	array
)	O
;	O
}	O
}	O
fprintf	function
(	O
file	pointer
,	O
"%s"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
if	O
(	O
offsets	int
)	O
{	O
if	O
(	O
bfd_is_thin_archive	function
(	O
abfd	pointer
)	O
&&	O
abfd	pointer
->	O
proxy_origin	long
)	O
fprintf	function
(	O
file	pointer
,	O
" 0x%lx"	pointer
,	O
(	O
unsigned	O
long	O
)	O
abfd	pointer
->	O
proxy_origin	long
)	O
;	O
else	O
if	O
(	O
!	O
bfd_is_thin_archive	function
(	O
abfd	pointer
)	O
&&	O
abfd	pointer
->	O
origin	long
)	O
fprintf	function
(	O
file	pointer
,	O
" 0x%lx"	pointer
,	O
(	O
unsigned	O
long	O
)	O
abfd	pointer
->	O
origin	long
)	O
;	O
}	O
fprintf	function
(	O
file	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
char	O
*	O
template_in_dir	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
const	O
char	O
*	O
slash	pointer
=	O
strrchr	function
(	O
path	pointer
,	O
'/'	O
)	O
;	O
char	O
*	O
tmpname	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
slash	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
len	long
=	O
slash	pointer
-	O
path	pointer
;	O
tmpname	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
+	O
sizeof	O
(	O
template	pointer
)	O
+	O
2	int
)	O
;	O
memcpy	function
(	O
tmpname	pointer
,	O
path	pointer
,	O
len	long
)	O
;	O
tmpname	pointer
[	O
len	long
++	O
]	O
=	O
'/'	O
;	O
}	O
else	O
{	O
tmpname	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
template	pointer
)	O
)	O
;	O
len	long
=	O
0	int
;	O
}	O
memcpy	function
(	O
tmpname	pointer
+	O
len	long
,	O
template	pointer
,	O
sizeof	O
(	O
template	pointer
)	O
)	O
;	O
return	O
tmpname	pointer
;	O
}	O
char	O
*	O
make_tempname	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
tmpname	pointer
=	O
template_in_dir	function
(	O
filename	pointer
)	O
;	O
int	O
fd	int
;	O
fd	int
=	O
mkstemp	function
(	O
tmpname	pointer
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
free	function
(	O
tmpname	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
tmpname	pointer
;	O
}	O
char	O
*	O
make_tempdir	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
tmpname	pointer
=	O
template_in_dir	function
(	O
filename	pointer
)	O
;	O
return	O
mkdtemp	function
(	O
tmpname	pointer
)	O
;	O
}	O
bfd_vma	long
parse_vma	function
(	O
const	O
char	O
*	O
s	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
bfd_vma	long
ret	pointer
;	O
const	O
char	O
*	O
end	pointer
;	O
ret	pointer
=	O
bfd_scan_vma	function
(	O
s	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
end	pointer
!=	O
'\0'	O
)	O
fatal	function
(	O
_	O
(	O
"%s: bad number: %s"	pointer
)	O
,	O
arg	pointer
,	O
s	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
off_t	long
get_file_size	function
(	O
const	O
char	O
*	O
file_name	pointer
)	O
{	O
struct	O
stat	struct
statbuf	struct
;	O
if	O
(	O
file_name	pointer
==	O
NULL	O
)	O
return	O
(	O
off_t	long
)	O
-	O
1	int
;	O
if	O
(	O
stat	struct
(	O
file_name	pointer
,	O
&	O
statbuf	struct
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
non_fatal	function
(	O
_	O
(	O
"'%s': No such file"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
non_fatal	function
(	O
_	O
(	O
"Warning: could not locate '%s'.  reason: %s"	pointer
)	O
,	O
file_name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
non_fatal	function
(	O
_	O
(	O
"Warning: '%s' is a directory"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
if	O
(	O
!	O
S_ISREG	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
non_fatal	function
(	O
_	O
(	O
"Warning: '%s' is not an ordinary file"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
if	O
(	O
statbuf	struct
.	O
st_size	long
<	O
0	int
)	O
non_fatal	function
(	O
_	O
(	O
"Warning: '%s' has negative size, probably it is too large"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
else	O
return	O
statbuf	struct
.	O
st_size	long
;	O
return	O
(	O
off_t	long
)	O
-	O
1	int
;	O
}	O
const	O
char	O
*	O
bfd_get_archive_filename	function
(	O
const	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
static	O
size_t	long
curr	long
=	O
0	int
;	O
static	O
char	O
*	O
buf	pointer
;	O
size_t	long
needed	long
;	O
assert	O
(	O
abfd	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
abfd	pointer
->	O
my_archive	pointer
==	O
NULL	O
||	O
bfd_is_thin_archive	function
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
)	O
return	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
;	O
needed	long
=	O
(	O
strlen	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
)	O
+	O
strlen	function
(	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
+	O
3	int
)	O
;	O
if	O
(	O
needed	long
>	O
curr	long
)	O
{	O
if	O
(	O
curr	long
)	O
free	function
(	O
buf	pointer
)	O
;	O
curr	long
=	O
needed	long
+	O
(	O
needed	long
>>	O
1	int
)	O
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
curr	long
)	O
;	O
}	O
sprintf	function
(	O
buf	pointer
,	O
"%s(%s)"	pointer
,	O
bfd_get_filename	function
(	O
abfd	pointer
->	O
my_archive	pointer
)	O
,	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
)	O
;	O
return	O
buf	pointer
;	O
}	O
bfd_boolean	int
is_valid_archive_path	function
(	O
char	O
const	O
*	O
pathname	pointer
)	O
{	O
const	O
char	O
*	O
n	long
=	O
pathname	pointer
;	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
n	long
)	O
)	O
return	O
FALSE	int
;	O
while	O
(	O
*	O
n	long
)	O
{	O
if	O
(	O
*	O
n	long
==	O
'.'	O
&&	O
*	O
++	O
n	long
==	O
'.'	O
&&	O
(	O
!	O
*	O
++	O
n	long
||	O
IS_DIR_SEPARATOR	O
(	O
*	O
n	long
)	O
)	O
)	O
return	O
FALSE	int
;	O
while	O
(	O
*	O
n	long
&&	O
!	O
IS_DIR_SEPARATOR	O
(	O
*	O
n	long
)	O
)	O
n	long
++	O
;	O
while	O
(	O
IS_DIR_SEPARATOR	O
(	O
*	O
n	long
)	O
)	O
n	long
++	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
