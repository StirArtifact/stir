void	O
MHD_SHA256_init	function
(	O
void	O
*	O
ctx_	pointer
)	O
{	O
struct	O
sha256_ctx	struct
*	O
const	O
ctx	pointer
=	O
ctx_	pointer
;	O
ctx	pointer
->	O
H	array
[	O
0	int
]	O
=	O
0x6a09e667UL	int
;	O
ctx	pointer
->	O
H	array
[	O
1	int
]	O
=	O
0xbb67ae85UL	int
;	O
ctx	pointer
->	O
H	array
[	O
2	int
]	O
=	O
0x3c6ef372UL	int
;	O
ctx	pointer
->	O
H	array
[	O
3	int
]	O
=	O
0xa54ff53aUL	int
;	O
ctx	pointer
->	O
H	array
[	O
4	int
]	O
=	O
0x510e527fUL	int
;	O
ctx	pointer
->	O
H	array
[	O
5	int
]	O
=	O
0x9b05688cUL	int
;	O
ctx	pointer
->	O
H	array
[	O
6	int
]	O
=	O
0x1f83d9abUL	int
;	O
ctx	pointer
->	O
H	array
[	O
7	int
]	O
=	O
0x5be0cd19UL	int
;	O
ctx	pointer
->	O
count	long
=	O
0	int
;	O
}	O
static	O
void	O
sha256_transform	function
(	O
uint32_t	int
H	array
[	O
_SHA256_DIGEST_LENGTH	int
]	O
,	O
const	O
uint8_t	char
data	pointer
[	O
SHA256_BLOCK_SIZE	int
]	O
)	O
{	O
uint32_t	int
a	int
=	O
H	array
[	O
0	int
]	O
;	O
uint32_t	int
b	int
=	O
H	array
[	O
1	int
]	O
;	O
uint32_t	int
c	int
=	O
H	array
[	O
2	int
]	O
;	O
uint32_t	int
d	int
=	O
H	array
[	O
3	int
]	O
;	O
uint32_t	int
e	int
=	O
H	array
[	O
4	int
]	O
;	O
uint32_t	int
f	int
=	O
H	array
[	O
5	int
]	O
;	O
uint32_t	int
g	int
=	O
H	array
[	O
6	int
]	O
;	O
uint32_t	int
h	int
=	O
H	array
[	O
7	int
]	O
;	O
uint32_t	int
W	array
[	O
16	int
]	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0x428a2f98UL	int
,	O
W	array
[	O
0	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
0	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0x71374491UL	int
,	O
W	array
[	O
1	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
1	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0xb5c0fbcfUL	int
,	O
W	array
[	O
2	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
2	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0xe9b5dba5UL	int
,	O
W	array
[	O
3	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
3	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x3956c25bUL	int
,	O
W	array
[	O
4	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
4	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0x59f111f1UL	int
,	O
W	array
[	O
5	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
5	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x923f82a4UL	int
,	O
W	array
[	O
6	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
6	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0xab1c5ed5UL	int
,	O
W	array
[	O
7	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
7	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0xd807aa98UL	int
,	O
W	array
[	O
8	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
8	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0x12835b01UL	int
,	O
W	array
[	O
9	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
9	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0x243185beUL	int
,	O
W	array
[	O
10	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
10	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0x550c7dc3UL	int
,	O
W	array
[	O
11	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
11	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x72be5d74UL	int
,	O
W	array
[	O
12	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
12	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0x80deb1feUL	int
,	O
W	array
[	O
13	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
13	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x9bdc06a7UL	int
,	O
W	array
[	O
14	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
14	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0xc19bf174UL	int
,	O
W	array
[	O
15	int
]	O
=	O
GET_W_FROM_DATA	O
(	O
data	pointer
,	O
15	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0xe49b69c1UL	int
,	O
W	array
[	O
16	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
16	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0xefbe4786UL	int
,	O
W	array
[	O
17	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
17	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0x0fc19dc6UL	int
,	O
W	array
[	O
18	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
18	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0x240ca1ccUL	int
,	O
W	array
[	O
19	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
19	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x2de92c6fUL	int
,	O
W	array
[	O
20	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
20	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0x4a7484aaUL	int
,	O
W	array
[	O
21	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
21	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x5cb0a9dcUL	int
,	O
W	array
[	O
22	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
22	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0x76f988daUL	int
,	O
W	array
[	O
23	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
23	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0x983e5152UL	int
,	O
W	array
[	O
24	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
24	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0xa831c66dUL	int
,	O
W	array
[	O
25	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
25	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0xb00327c8UL	int
,	O
W	array
[	O
26	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
26	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0xbf597fc7UL	int
,	O
W	array
[	O
27	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
27	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0xc6e00bf3UL	int
,	O
W	array
[	O
28	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
28	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0xd5a79147UL	int
,	O
W	array
[	O
29	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
29	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x06ca6351UL	int
,	O
W	array
[	O
30	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
30	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0x14292967UL	int
,	O
W	array
[	O
31	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
31	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0x27b70a85UL	int
,	O
W	array
[	O
32	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
32	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0x2e1b2138UL	int
,	O
W	array
[	O
33	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
33	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0x4d2c6dfcUL	int
,	O
W	array
[	O
34	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
34	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0x53380d13UL	int
,	O
W	array
[	O
35	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
35	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x650a7354UL	int
,	O
W	array
[	O
36	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
36	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0x766a0abbUL	int
,	O
W	array
[	O
37	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
37	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x81c2c92eUL	int
,	O
W	array
[	O
38	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
38	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0x92722c85UL	int
,	O
W	array
[	O
39	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
39	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0xa2bfe8a1UL	int
,	O
W	array
[	O
40	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
40	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0xa81a664bUL	int
,	O
W	array
[	O
41	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
41	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0xc24b8b70UL	int
,	O
W	array
[	O
42	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
42	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0xc76c51a3UL	int
,	O
W	array
[	O
43	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
43	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0xd192e819UL	int
,	O
W	array
[	O
44	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
44	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0xd6990624UL	int
,	O
W	array
[	O
45	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
45	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0xf40e3585UL	int
,	O
W	array
[	O
46	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
46	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0x106aa070UL	int
,	O
W	array
[	O
47	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
47	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0x19a4c116UL	int
,	O
W	array
[	O
48	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
48	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0x1e376c08UL	int
,	O
W	array
[	O
49	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
49	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0x2748774cUL	int
,	O
W	array
[	O
50	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
50	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0x34b0bcb5UL	int
,	O
W	array
[	O
51	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
51	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x391c0cb3UL	int
,	O
W	array
[	O
52	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
52	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0x4ed8aa4aUL	int
,	O
W	array
[	O
53	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
53	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0x5b9cca4fUL	int
,	O
W	array
[	O
54	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
54	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0x682e6ff3UL	int
,	O
W	array
[	O
55	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
55	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
0x748f82eeUL	int
,	O
W	array
[	O
56	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
56	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
0x78a5636fUL	int
,	O
W	array
[	O
57	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
57	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
0x84c87814UL	int
,	O
W	array
[	O
58	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
58	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
0x8cc70208UL	int
,	O
W	array
[	O
59	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
59	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
0x90befffaUL	int
,	O
W	array
[	O
60	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
60	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
0xa4506cebUL	int
,	O
W	array
[	O
61	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
61	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
0xbef9a3f7UL	int
,	O
W	array
[	O
62	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
62	int
)	O
)	O
;	O
SHA2STEP32	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
0xc67178f2UL	int
,	O
W	array
[	O
63	int
&	O
0xf	int
]	O
=	O
Wgen	O
(	O
W	array
,	O
63	int
)	O
)	O
;	O
H	array
[	O
0	int
]	O
+=	O
a	int
;	O
H	array
[	O
1	int
]	O
+=	O
b	int
;	O
H	array
[	O
2	int
]	O
+=	O
c	int
;	O
H	array
[	O
3	int
]	O
+=	O
d	int
;	O
H	array
[	O
4	int
]	O
+=	O
e	int
;	O
H	array
[	O
5	int
]	O
+=	O
f	int
;	O
H	array
[	O
6	int
]	O
+=	O
g	int
;	O
H	array
[	O
7	int
]	O
+=	O
h	int
;	O
}	O
void	O
MHD_SHA256_update	function
(	O
void	O
*	O
ctx_	pointer
,	O
const	O
uint8_t	char
*	O
data	pointer
,	O
size_t	long
length	long
)	O
{	O
struct	O
sha256_ctx	struct
*	O
const	O
ctx	pointer
=	O
ctx_	pointer
;	O
unsigned	O
bytes_have	int
;	O
mhd_assert	O
(	O
(	O
data	pointer
!=	O
NULL	O
)	O
||	O
(	O
length	long
==	O
0	int
)	O
)	O
;	O
if	O
(	O
0	int
==	O
length	long
)	O
return	O
;	O
bytes_have	int
=	O
(	O
unsigned	O
)	O
(	O
ctx	pointer
->	O
count	long
&	O
(	O
SHA256_BLOCK_SIZE	int
-	O
1	int
)	O
)	O
;	O
ctx	pointer
->	O
count	long
+=	O
length	long
;	O
if	O
(	O
0	int
!=	O
bytes_have	int
)	O
{	O
unsigned	O
bytes_left	int
=	O
SHA256_BLOCK_SIZE	int
-	O
bytes_have	int
;	O
if	O
(	O
length	long
>=	O
bytes_left	int
)	O
{	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
+	O
bytes_have	int
,	O
data	pointer
,	O
bytes_left	int
)	O
;	O
data	pointer
+=	O
bytes_left	int
;	O
length	long
-=	O
bytes_left	int
;	O
sha256_transform	function
(	O
ctx	pointer
->	O
H	array
,	O
ctx	pointer
->	O
buffer	array
)	O
;	O
bytes_have	int
=	O
0	int
;	O
}	O
}	O
while	O
(	O
SHA256_BLOCK_SIZE	int
<=	O
length	long
)	O
{	O
sha256_transform	function
(	O
ctx	pointer
->	O
H	array
,	O
data	pointer
)	O
;	O
data	pointer
+=	O
SHA256_BLOCK_SIZE	int
;	O
length	long
-=	O
SHA256_BLOCK_SIZE	int
;	O
}	O
if	O
(	O
0	int
!=	O
length	long
)	O
{	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
+	O
bytes_have	int
,	O
data	pointer
,	O
length	long
)	O
;	O
}	O
}	O
void	O
sha256_finish	function
(	O
void	O
*	O
ctx_	pointer
,	O
uint8_t	char
digest	array
[	O
SHA256_DIGEST_SIZE	O
]	O
)	O
{	O
struct	O
sha256_ctx	struct
*	O
const	O
ctx	pointer
=	O
ctx_	pointer
;	O
uint64_t	long
num_bits	long
;	O
unsigned	O
bytes_have	int
;	O
num_bits	long
=	O
ctx	pointer
->	O
count	long
<<	O
3	int
;	O
bytes_have	int
=	O
(	O
unsigned	O
)	O
(	O
ctx	pointer
->	O
count	long
&	O
(	O
SHA256_BLOCK_SIZE	int
-	O
1	int
)	O
)	O
;	O
ctx	pointer
->	O
buffer	array
[	O
bytes_have	int
++	O
]	O
=	O
0x80	int
;	O
if	O
(	O
SHA256_BLOCK_SIZE	int
-	O
bytes_have	int
<	O
SHA256_SIZE_OF_LEN_ADD	O
)	O
{	O
while	O
(	O
bytes_have	int
<	O
SHA256_BLOCK_SIZE	int
)	O
ctx	pointer
->	O
buffer	array
[	O
bytes_have	int
++	O
]	O
=	O
0	int
;	O
sha256_transform	function
(	O
ctx	pointer
->	O
H	array
,	O
ctx	pointer
->	O
buffer	array
)	O
;	O
bytes_have	int
=	O
0	int
;	O
}	O
memset	function
(	O
ctx	pointer
->	O
buffer	array
+	O
bytes_have	int
,	O
0	int
,	O
SHA256_BLOCK_SIZE	int
-	O
SHA256_SIZE_OF_LEN_ADD	O
-	O
bytes_have	int
)	O
;	O
_MHD_PUT_64BIT_BE	O
(	O
ctx	pointer
->	O
buffer	array
+	O
SHA256_BLOCK_SIZE	int
-	O
SHA256_SIZE_OF_LEN_ADD	O
,	O
num_bits	long
)	O
;	O
sha256_transform	function
(	O
ctx	pointer
->	O
H	array
,	O
ctx	pointer
->	O
buffer	array
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
0	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
0	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
1	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
1	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
2	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
2	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
3	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
3	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
4	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
4	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
5	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
5	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
6	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
6	int
]	O
)	O
;	O
_MHD_PUT_32BIT_BE	O
(	O
digest	array
+	O
7	int
*	O
SHA256_BYTES_IN_WORD	int
,	O
ctx	pointer
->	O
H	array
[	O
7	int
]	O
)	O
;	O
memset	function
(	O
ctx	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
sha256_ctx	struct
)	O
)	O
;	O
}	O
