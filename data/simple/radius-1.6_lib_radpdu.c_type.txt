struct	O
radius_pdu	struct
{	O
grad_slist_t	pointer
slist	pointer
;	O
}	O
;	O
struct	O
radius_attr	struct
{	O
u_char	char
attrno	char
;	O
u_char	char
length	short
;	O
u_char	char
data	pointer
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
}	O
;	O
void	O
grad_pdu_destroy	function
(	O
struct	O
radius_pdu	struct
*	O
pdu	pointer
)	O
;	O
int	O
grad_attr_write	function
(	O
struct	O
radius_attr	struct
*	O
ap	array
,	O
void	O
*	O
data	pointer
,	O
size_t	long
size	int
)	O
;	O
int	O
grad_encode_pair	function
(	O
struct	O
radius_attr	struct
*	O
ap	array
,	O
grad_avp_t	struct
*	O
pair	pointer
)	O
;	O
static	O
void	O
grad_pdu_init	function
(	O
struct	O
radius_pdu	struct
*	O
pdu	pointer
)	O
{	O
pdu	pointer
->	O
slist	pointer
=	O
grad_slist_create	function
(	O
)	O
;	O
}	O
static	O
size_t	long
grad_pdu_finish	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
struct	O
radius_pdu	struct
*	O
pdu	pointer
,	O
int	O
code	char
,	O
int	O
id	char
,	O
u_char	char
*	O
authenticator	array
,	O
u_char	char
*	O
secret	pointer
)	O
{	O
grad_packet_header_t	struct
*	O
hdr	pointer
;	O
void	O
*	O
p	pointer
;	O
size_t	long
secretlen	long
=	O
0	int
;	O
size_t	long
size	int
=	O
grad_slist_size	function
(	O
pdu	pointer
->	O
slist	pointer
)	O
;	O
size_t	long
len	int
=	O
sizeof	O
(	O
grad_packet_header_t	struct
)	O
+	O
size	int
;	O
u_char	char
digest	array
[	O
GRAD_MD5_DIGEST_LENGTH	int
]	O
;	O
if	O
(	O
code	char
!=	O
RT_ACCESS_REQUEST	int
&&	O
code	char
!=	O
RT_STATUS_SERVER	int
)	O
{	O
secretlen	long
=	O
strlen	function
(	O
secret	pointer
)	O
;	O
grad_slist_append	function
(	O
pdu	pointer
->	O
slist	pointer
,	O
secret	pointer
,	O
secretlen	long
)	O
;	O
}	O
p	pointer
=	O
grad_slist_finish	function
(	O
pdu	pointer
->	O
slist	pointer
)	O
;	O
hdr	pointer
=	O
grad_emalloc	function
(	O
len	int
+	O
secretlen	long
)	O
;	O
hdr	pointer
->	O
code	char
=	O
code	char
;	O
hdr	pointer
->	O
id	char
=	O
id	char
;	O
hdr	pointer
->	O
length	short
=	O
htons	function
(	O
len	int
)	O
;	O
memcpy	function
(	O
hdr	pointer
+	O
1	int
,	O
p	pointer
,	O
size	int
+	O
secretlen	long
)	O
;	O
switch	O
(	O
code	char
)	O
{	O
case	O
RT_ACCESS_REQUEST	int
:	O
case	O
RT_STATUS_SERVER	int
:	O
memcpy	function
(	O
hdr	pointer
->	O
authenticator	array
,	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
break	O
;	O
case	O
RT_ACCOUNTING_REQUEST	int
:	O
secretlen	long
=	O
strlen	function
(	O
secret	pointer
)	O
;	O
grad_md5_calc	function
(	O
hdr	pointer
->	O
authenticator	array
,	O
(	O
u_char	char
*	O
)	O
hdr	pointer
,	O
len	int
+	O
secretlen	long
)	O
;	O
memcpy	function
(	O
authenticator	array
,	O
hdr	pointer
->	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
memset	function
(	O
(	O
char	O
*	O
)	O
hdr	pointer
+	O
len	int
,	O
0	int
,	O
secretlen	long
)	O
;	O
break	O
;	O
case	O
RT_ACCESS_ACCEPT	int
:	O
case	O
RT_ACCESS_REJECT	int
:	O
case	O
RT_ACCOUNTING_RESPONSE	int
:	O
case	O
RT_ACCESS_CHALLENGE	int
:	O
memcpy	function
(	O
hdr	pointer
->	O
authenticator	array
,	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
default	O
:	O
grad_md5_calc	function
(	O
digest	array
,	O
(	O
u_char	char
*	O
)	O
hdr	pointer
,	O
len	int
+	O
secretlen	long
)	O
;	O
memcpy	function
(	O
hdr	pointer
->	O
authenticator	array
,	O
digest	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
memset	function
(	O
(	O
char	O
*	O
)	O
hdr	pointer
+	O
len	int
,	O
0	int
,	O
secretlen	long
)	O
;	O
break	O
;	O
}	O
*	O
ptr	pointer
=	O
hdr	pointer
;	O
return	O
len	int
;	O
}	O
void	O
grad_pdu_destroy	function
(	O
struct	O
radius_pdu	struct
*	O
pdu	pointer
)	O
{	O
grad_slist_free	function
(	O
&	O
pdu	pointer
->	O
slist	pointer
)	O
;	O
}	O
int	O
grad_attr_write	function
(	O
struct	O
radius_attr	struct
*	O
ap	array
,	O
void	O
*	O
data	pointer
,	O
size_t	long
size	int
)	O
{	O
if	O
(	O
sizeof	O
(	O
ap	array
->	O
data	pointer
)	O
-	O
ap	array
->	O
length	short
+	O
2	int
<	O
size	int
)	O
return	O
0	int
;	O
memcpy	function
(	O
ap	array
->	O
data	pointer
+	O
ap	array
->	O
length	short
-	O
2	int
,	O
data	pointer
,	O
size	int
)	O
;	O
ap	array
->	O
length	short
+=	O
size	int
;	O
return	O
size	int
;	O
}	O
int	O
grad_encode_pair	function
(	O
struct	O
radius_attr	struct
*	O
ap	array
,	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
grad_uint32_t	int
lval	int
;	O
size_t	long
len	int
;	O
int	O
rc	int
;	O
switch	O
(	O
pair	pointer
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
if	O
(	O
pair	pointer
->	O
avp_strlength	O
==	O
0	int
&&	O
pair	pointer
->	O
avp_strvalue	O
[	O
0	int
]	O
!=	O
0	int
)	O
pair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
pair	pointer
->	O
avp_strvalue	O
)	O
;	O
len	int
=	O
pair	pointer
->	O
avp_strlength	O
;	O
if	O
(	O
len	int
>	O
GRAD_STRING_LENGTH	int
)	O
len	int
=	O
GRAD_STRING_LENGTH	int
;	O
rc	int
=	O
grad_attr_write	function
(	O
ap	array
,	O
pair	pointer
->	O
avp_strvalue	O
,	O
len	int
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
lval	int
=	O
htonl	function
(	O
pair	pointer
->	O
avp_lvalue	O
)	O
;	O
rc	int
=	O
grad_attr_write	function
(	O
ap	array
,	O
&	O
lval	int
,	O
sizeof	O
(	O
grad_uint32_t	int
)	O
)	O
;	O
break	O
;	O
default	O
:	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"Unknown pair type %d"	pointer
,	O
pair	pointer
->	O
type	int
)	O
;	O
rc	int
=	O
0	int
;	O
}	O
return	O
rc	int
;	O
}	O
size_t	long
grad_create_pdu	function
(	O
void	O
*	O
*	O
rptr	pointer
,	O
int	O
code	char
,	O
int	O
id	char
,	O
u_char	char
*	O
authenticator	array
,	O
u_char	char
*	O
secret	pointer
,	O
grad_avp_t	struct
*	O
pairlist	pointer
,	O
char	O
*	O
msg	pointer
)	O
{	O
struct	O
radius_pdu	struct
pdu	pointer
;	O
size_t	long
attrlen	long
=	O
0	int
;	O
int	O
status	int
=	O
0	int
;	O
int	O
len	int
;	O
grad_avp_t	struct
*	O
pair	pointer
;	O
grad_pdu_init	function
(	O
&	O
pdu	pointer
)	O
;	O
for	O
(	O
pair	pointer
=	O
pairlist	pointer
;	O
pair	pointer
;	O
pair	pointer
=	O
pair	pointer
->	O
next	pointer
)	O
{	O
struct	O
radius_attr	struct
attr	pointer
;	O
grad_uint32_t	int
lval	int
;	O
int	O
vendorcode	int
,	O
vendorpec	int
;	O
if	O
(	O
GRAD_DEBUG_LEVEL	O
(	O
10	int
)	O
)	O
{	O
char	O
*	O
save	pointer
;	O
grad_log	function
(	O
GRAD_LOG_DEBUG	int
,	O
"send: %s"	pointer
,	O
grad_format_pair	function
(	O
pair	pointer
,	O
1	int
,	O
&	O
save	pointer
)	O
)	O
;	O
free	function
(	O
save	pointer
)	O
;	O
}	O
grad_attr_init	O
(	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
(	O
vendorcode	int
=	O
GRAD_VENDOR_CODE	O
(	O
pair	pointer
->	O
attribute	int
)	O
)	O
>	O
0	int
&&	O
(	O
vendorpec	int
=	O
grad_vendor_id_to_pec	function
(	O
vendorcode	int
)	O
)	O
>	O
0	int
)	O
{	O
attr	pointer
.	O
attrno	char
=	O
DA_VENDOR_SPECIFIC	int
;	O
lval	int
=	O
htonl	function
(	O
vendorpec	int
)	O
;	O
grad_attr_write	function
(	O
&	O
attr	pointer
,	O
&	O
lval	int
,	O
4	int
)	O
;	O
if	O
(	O
vendorpec	int
==	O
429	int
)	O
{	O
grad_uint32_t	int
atval	int
=	O
htonl	function
(	O
pair	pointer
->	O
attribute	int
&	O
0xffff	int
)	O
;	O
grad_attr_write	function
(	O
&	O
attr	pointer
,	O
&	O
atval	int
,	O
4	int
)	O
;	O
attrlen	long
=	O
grad_encode_pair	function
(	O
&	O
attr	pointer
,	O
pair	pointer
)	O
;	O
}	O
else	O
{	O
u_char	char
c	pointer
=	O
pair	pointer
->	O
attribute	int
&	O
0xff	int
;	O
grad_attr_write	function
(	O
&	O
attr	pointer
,	O
&	O
c	pointer
,	O
1	int
)	O
;	O
grad_attr_write	function
(	O
&	O
attr	pointer
,	O
&	O
lval	int
,	O
1	int
)	O
;	O
attrlen	long
=	O
grad_encode_pair	function
(	O
&	O
attr	pointer
,	O
pair	pointer
)	O
;	O
attr	pointer
.	O
data	pointer
[	O
5	int
]	O
=	O
2	int
+	O
attrlen	long
;	O
}	O
}	O
else	O
if	O
(	O
pair	pointer
->	O
attribute	int
>	O
0xff	int
)	O
continue	O
;	O
else	O
{	O
attr	pointer
.	O
attrno	char
=	O
pair	pointer
->	O
attribute	int
;	O
attrlen	long
=	O
grad_encode_pair	function
(	O
&	O
attr	pointer
,	O
pair	pointer
)	O
;	O
}	O
if	O
(	O
attrlen	long
<	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"attrlen = %d"	pointer
,	O
attrlen	long
)	O
;	O
status	int
=	O
1	int
;	O
break	O
;	O
}	O
grad_pdu_add	O
(	O
&	O
pdu	pointer
,	O
attr	pointer
)	O
;	O
}	O
if	O
(	O
status	int
==	O
0	int
&&	O
msg	pointer
!=	O
NULL	O
&&	O
(	O
len	int
=	O
strlen	function
(	O
msg	pointer
)	O
)	O
>	O
0	int
)	O
{	O
int	O
block_len	int
;	O
struct	O
radius_attr	struct
attr	pointer
;	O
while	O
(	O
len	int
>	O
0	int
)	O
{	O
if	O
(	O
len	int
>	O
GRAD_STRING_LENGTH	int
)	O
block_len	int
=	O
GRAD_STRING_LENGTH	int
;	O
else	O
block_len	int
=	O
len	int
;	O
grad_attr_init	O
(	O
&	O
attr	pointer
)	O
;	O
attr	pointer
.	O
attrno	char
=	O
DA_REPLY_MESSAGE	int
;	O
attrlen	long
=	O
grad_attr_write	function
(	O
&	O
attr	pointer
,	O
msg	pointer
,	O
block_len	int
)	O
;	O
if	O
(	O
attrlen	long
<=	O
0	int
)	O
{	O
status	int
=	O
1	int
;	O
break	O
;	O
}	O
GRAD_DEBUG3	O
(	O
10	int
,	O
"send: Reply-Message = %*.*s"	pointer
,	O
block_len	int
,	O
block_len	int
,	O
attr	pointer
.	O
data	pointer
)	O
;	O
grad_pdu_add	O
(	O
&	O
pdu	pointer
,	O
attr	pointer
)	O
;	O
msg	pointer
+=	O
block_len	int
;	O
len	int
-=	O
block_len	int
;	O
}	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
attrlen	long
=	O
grad_pdu_finish	function
(	O
rptr	pointer
,	O
&	O
pdu	pointer
,	O
code	char
,	O
id	char
,	O
authenticator	array
,	O
secret	pointer
)	O
;	O
else	O
attrlen	long
=	O
0	int
;	O
grad_pdu_destroy	function
(	O
&	O
pdu	pointer
)	O
;	O
return	O
attrlen	long
;	O
}	O
static	O
grad_avp_t	struct
*	O
grad_decode_pair	function
(	O
grad_uint32_t	int
attrno	char
,	O
char	O
*	O
ptr	pointer
,	O
size_t	long
attrlen	long
)	O
{	O
grad_dict_attr_t	struct
*	O
attr	pointer
;	O
grad_avp_t	struct
*	O
pair	pointer
;	O
grad_uint32_t	int
lval	int
;	O
if	O
(	O
(	O
attr	pointer
=	O
grad_attr_number_to_dict	function
(	O
attrno	char
)	O
)	O
==	O
NULL	O
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"Received unknown attribute %d"	pointer
,	O
attrno	char
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
attrlen	long
>	O
GRAD_STRING_LENGTH	int
)	O
{	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"attribute %d too long, %d >= %d"	pointer
,	O
attrno	char
,	O
attrlen	long
,	O
GRAD_STRING_LENGTH	int
)	O
;	O
return	O
NULL	O
;	O
}	O
pair	pointer
=	O
grad_avp_alloc	function
(	O
)	O
;	O
pair	pointer
->	O
name	pointer
=	O
attr	pointer
->	O
name	pointer
;	O
pair	pointer
->	O
attribute	int
=	O
attr	pointer
->	O
value	pointer
;	O
pair	pointer
->	O
type	int
=	O
attr	pointer
->	O
type	int
;	O
pair	pointer
->	O
prop	int
=	O
attr	pointer
->	O
prop	int
;	O
pair	pointer
->	O
next	pointer
=	O
NULL	O
;	O
switch	O
(	O
attr	pointer
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
pair	pointer
->	O
avp_strlength	O
=	O
attrlen	long
;	O
pair	pointer
->	O
avp_strvalue	O
=	O
grad_emalloc	function
(	O
attrlen	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
pair	pointer
->	O
avp_strvalue	O
,	O
ptr	pointer
,	O
attrlen	long
)	O
;	O
pair	pointer
->	O
avp_strvalue	O
[	O
attrlen	long
]	O
=	O
0	int
;	O
if	O
(	O
GRAD_DEBUG_LEVEL	O
(	O
10	int
)	O
)	O
{	O
char	O
*	O
save	pointer
;	O
grad_log	function
(	O
GRAD_LOG_DEBUG	int
,	O
"recv: %s"	pointer
,	O
grad_format_pair	function
(	O
pair	pointer
,	O
1	int
,	O
&	O
save	pointer
)	O
)	O
;	O
free	function
(	O
save	pointer
)	O
;	O
}	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
memcpy	function
(	O
&	O
lval	int
,	O
ptr	pointer
,	O
sizeof	O
(	O
grad_uint32_t	int
)	O
)	O
;	O
pair	pointer
->	O
avp_lvalue	O
=	O
ntohl	function
(	O
lval	int
)	O
;	O
if	O
(	O
GRAD_DEBUG_LEVEL	O
(	O
10	int
)	O
)	O
{	O
char	O
*	O
save	pointer
;	O
grad_log	function
(	O
GRAD_LOG_DEBUG	int
,	O
"recv: %s"	pointer
,	O
grad_format_pair	function
(	O
pair	pointer
,	O
1	int
,	O
&	O
save	pointer
)	O
)	O
;	O
free	function
(	O
save	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s (Unknown Type %d)"	pointer
,	O
attr	pointer
->	O
name	pointer
,	O
attr	pointer
->	O
type	int
)	O
;	O
grad_avp_free	function
(	O
pair	pointer
)	O
;	O
pair	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
return	O
pair	pointer
;	O
}	O
static	O
int	O
decode_vsa	function
(	O
u_char	char
*	O
ptr	pointer
,	O
grad_uint32_t	int
attrlen	long
,	O
grad_uint32_t	int
*	O
vendorpec	int
,	O
grad_uint32_t	int
*	O
vendorcode	int
)	O
{	O
grad_uint32_t	int
x	int
;	O
if	O
(	O
attrlen	long
<	O
6	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Received a vendor-specific attribute with length < 6"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
memcpy	function
(	O
&	O
x	int
,	O
ptr	pointer
,	O
4	int
)	O
;	O
*	O
vendorpec	int
=	O
ntohl	function
(	O
x	int
)	O
;	O
*	O
vendorcode	int
=	O
grad_vendor_pec_to_id	function
(	O
*	O
vendorpec	int
)	O
;	O
return	O
*	O
vendorcode	int
==	O
0	int
;	O
}	O
grad_request_t	struct
*	O
grad_decode_pdu	function
(	O
grad_uint32_t	int
host	int
,	O
u_short	short
udp_port	short
,	O
u_char	char
*	O
buffer	pointer
,	O
size_t	long
length	short
)	O
{	O
u_char	char
*	O
ptr	pointer
;	O
grad_packet_header_t	struct
*	O
auth	pointer
;	O
grad_avp_t	struct
*	O
first_pair	pointer
;	O
grad_avp_t	struct
*	O
prev	pointer
;	O
grad_avp_t	struct
*	O
pair	pointer
;	O
grad_request_t	struct
*	O
radreq	pointer
;	O
grad_uint32_t	int
reported_len	int
;	O
u_char	char
*	O
endp	pointer
;	O
int	O
stop	int
;	O
radreq	pointer
=	O
grad_request_alloc	function
(	O
)	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"allocated radreq: %p"	pointer
,	O
radreq	pointer
)	O
;	O
auth	pointer
=	O
(	O
grad_packet_header_t	struct
*	O
)	O
buffer	pointer
;	O
reported_len	int
=	O
ntohs	function
(	O
auth	pointer
->	O
length	short
)	O
;	O
if	O
(	O
length	short
>	O
reported_len	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_WARN	int
,	O
_	O
(	O
"Actual request length does not match reported length (%d, %d)"	pointer
)	O
,	O
length	short
,	O
reported_len	int
)	O
;	O
length	short
=	O
reported_len	int
;	O
}	O
GRAD_DEBUG4	O
(	O
1	int
,	O
"%s from %s, id=%d, length=%d"	pointer
,	O
grad_request_code_to_name	function
(	O
auth	pointer
->	O
code	char
)	O
,	O
grad_ip_iptostr	function
(	O
host	int
,	O
NULL	O
)	O
,	O
auth	pointer
->	O
id	char
,	O
ntohs	function
(	O
auth	pointer
->	O
length	short
)	O
)	O
;	O
radreq	pointer
->	O
ipaddr	int
=	O
host	int
;	O
radreq	pointer
->	O
udp_port	short
=	O
udp_port	short
;	O
radreq	pointer
->	O
id	char
=	O
auth	pointer
->	O
id	char
;	O
radreq	pointer
->	O
code	char
=	O
auth	pointer
->	O
code	char
;	O
memcpy	function
(	O
radreq	pointer
->	O
authenticator	array
,	O
auth	pointer
->	O
authenticator	array
,	O
GRAD_AUTHENTICATOR_LENGTH	int
)	O
;	O
ptr	pointer
=	O
(	O
u_char	char
*	O
)	O
(	O
auth	pointer
+	O
1	int
)	O
;	O
first_pair	pointer
=	O
NULL	O
;	O
prev	pointer
=	O
NULL	O
;	O
endp	pointer
=	O
(	O
u_char	char
*	O
)	O
auth	pointer
+	O
length	short
;	O
stop	int
=	O
0	int
;	O
while	O
(	O
ptr	pointer
<	O
endp	pointer
&&	O
!	O
stop	int
)	O
{	O
grad_uint32_t	int
attrno	char
,	O
attrlen	long
,	O
vendorcode	int
,	O
vendorpec	int
;	O
attrno	char
=	O
*	O
ptr	pointer
++	O
;	O
attrlen	long
=	O
*	O
ptr	pointer
++	O
;	O
if	O
(	O
attrlen	long
<	O
2	int
)	O
{	O
GRAD_DEBUG	O
(	O
1	int
,	O
"exit from the loop"	pointer
)	O
;	O
stop	int
=	O
1	int
;	O
continue	O
;	O
}	O
attrlen	long
-=	O
2	int
;	O
length	short
-=	O
2	int
;	O
if	O
(	O
attrno	char
==	O
DA_VENDOR_SPECIFIC	int
&&	O
decode_vsa	function
(	O
ptr	pointer
,	O
attrlen	long
,	O
&	O
vendorpec	int
,	O
&	O
vendorcode	int
)	O
==	O
0	int
)	O
{	O
ptr	pointer
+=	O
4	int
;	O
attrlen	long
-=	O
4	int
;	O
while	O
(	O
attrlen	long
>	O
0	int
)	O
{	O
size_t	long
len	int
;	O
if	O
(	O
vendorpec	int
==	O
429	int
)	O
{	O
memcpy	function
(	O
&	O
attrno	char
,	O
ptr	pointer
,	O
4	int
)	O
;	O
attrno	char
=	O
GRAD_VSA_ATTR_NUMBER	O
(	O
ntohl	function
(	O
attrno	char
)	O
,	O
vendorcode	int
)	O
;	O
ptr	pointer
+=	O
4	int
;	O
attrlen	long
-=	O
4	int
;	O
len	int
=	O
attrlen	long
;	O
attrlen	long
=	O
0	int
;	O
}	O
else	O
{	O
attrno	char
=	O
GRAD_VSA_ATTR_NUMBER	O
(	O
*	O
ptr	pointer
++	O
,	O
vendorcode	int
)	O
;	O
len	int
=	O
*	O
ptr	pointer
++	O
-	O
2	int
;	O
attrlen	long
-=	O
len	int
+	O
2	int
;	O
}	O
pair	pointer
=	O
grad_decode_pair	function
(	O
attrno	char
,	O
ptr	pointer
,	O
len	int
)	O
;	O
if	O
(	O
pair	pointer
)	O
{	O
if	O
(	O
first_pair	pointer
==	O
NULL	O
)	O
first_pair	pointer
=	O
pair	pointer
;	O
else	O
prev	pointer
->	O
next	pointer
=	O
pair	pointer
;	O
prev	pointer
=	O
pair	pointer
;	O
}	O
ptr	pointer
+=	O
len	int
;	O
}	O
}	O
else	O
{	O
pair	pointer
=	O
grad_decode_pair	function
(	O
attrno	char
,	O
ptr	pointer
,	O
attrlen	long
)	O
;	O
ptr	pointer
+=	O
attrlen	long
;	O
if	O
(	O
pair	pointer
)	O
{	O
if	O
(	O
first_pair	pointer
==	O
NULL	O
)	O
first_pair	pointer
=	O
pair	pointer
;	O
else	O
prev	pointer
->	O
next	pointer
=	O
pair	pointer
;	O
prev	pointer
=	O
pair	pointer
;	O
}	O
}	O
}	O
radreq	pointer
->	O
avlist	pointer
=	O
first_pair	pointer
;	O
return	O
radreq	pointer
;	O
}	O
