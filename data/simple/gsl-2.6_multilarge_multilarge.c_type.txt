gsl_multilarge_linear_workspace	struct
*	O
gsl_multilarge_linear_alloc	function
(	O
const	O
gsl_multilarge_linear_type	struct
*	O
T	pointer
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
;	O
w	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_multilarge_linear_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
type	pointer
=	O
T	pointer
;	O
w	pointer
->	O
state	pointer
=	O
w	pointer
->	O
type	pointer
->	O
alloc	pointer
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
state	pointer
==	O
NULL	O
)	O
{	O
gsl_multilarge_linear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for multilarge state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
p	int
=	O
p	int
;	O
gsl_multilarge_linear_reset	function
(	O
w	pointer
)	O
;	O
return	O
w	pointer
;	O
}	O
void	O
gsl_multilarge_linear_free	function
(	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
state	pointer
)	O
w	pointer
->	O
type	pointer
->	O
free	function
(	O
w	pointer
->	O
state	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
const	O
char	O
*	O
gsl_multilarge_linear_name	function
(	O
const	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
type	pointer
->	O
name	pointer
;	O
}	O
int	O
gsl_multilarge_linear_reset	function
(	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
w	pointer
->	O
type	pointer
->	O
reset	pointer
(	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_accumulate	function
(	O
gsl_matrix	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
y	double
,	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
w	pointer
->	O
type	pointer
->	O
accumulate	pointer
(	O
X	pointer
,	O
y	double
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_solve	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
c	pointer
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
w	pointer
->	O
type	pointer
->	O
solve	pointer
(	O
lambda	double
,	O
c	pointer
,	O
rnorm	pointer
,	O
snorm	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_rcond	function
(	O
double	O
*	O
rcond	double
,	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
w	pointer
->	O
type	pointer
->	O
rcond	double
(	O
rcond	double
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_lcurve	function
(	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
rho	pointer
,	O
gsl_vector	struct
*	O
eta	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
len	long
=	O
reg_param	pointer
->	O
size	long
;	O
if	O
(	O
len	long
!=	O
rho	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"reg_param and rho have different sizes"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
len	long
!=	O
eta	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"reg_param and eta have different sizes"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
w	pointer
->	O
type	pointer
->	O
lcurve	pointer
(	O
reg_param	pointer
,	O
rho	pointer
,	O
eta	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_wstdform1	function
(	O
const	O
gsl_vector	struct
*	O
L	pointer
,	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
w	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_matrix	struct
*	O
Xs	pointer
,	O
gsl_vector	struct
*	O
ys	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	pointer
->	O
size2	long
;	O
(	O
void	O
)	O
work	pointer
;	O
if	O
(	O
L	pointer
!=	O
NULL	O
&&	O
p	int
!=	O
L	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
w	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector does not match X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Xs	pointer
->	O
size1	long
||	O
p	int
!=	O
Xs	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix dimensions do not match X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must be length n"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_multifit_linear_applyW	function
(	O
X	pointer
,	O
w	pointer
,	O
y	double
,	O
Xs	pointer
,	O
ys	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
L	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_view	struct
Xj	struct
=	O
gsl_matrix_column	function
(	O
Xs	pointer
,	O
j	long
)	O
;	O
double	O
lj	double
=	O
gsl_vector_get	function
(	O
L	pointer
,	O
j	long
)	O
;	O
if	O
(	O
lj	double
==	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is singular"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
gsl_vector_scale	function
(	O
&	O
Xj	struct
.	O
vector	struct
,	O
1.0	int
/	O
lj	double
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_stdform1	function
(	O
const	O
gsl_vector	struct
*	O
L	pointer
,	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_matrix	struct
*	O
Xs	pointer
,	O
gsl_vector	struct
*	O
ys	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multilarge_linear_wstdform1	function
(	O
L	pointer
,	O
X	pointer
,	O
NULL	O
,	O
y	double
,	O
Xs	pointer
,	O
ys	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_L_decomp	function
(	O
gsl_matrix	struct
*	O
L	pointer
,	O
gsl_vector	struct
*	O
tau	pointer
)	O
{	O
const	O
size_t	long
m	pointer
=	O
L	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
L	pointer
->	O
size2	long
;	O
if	O
(	O
m	pointer
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_L_decomp	function
(	O
L	pointer
,	O
tau	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_wstdform2	function
(	O
const	O
gsl_matrix	struct
*	O
LQR	pointer
,	O
const	O
gsl_vector	struct
*	O
Ltau	pointer
,	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
w	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_matrix	struct
*	O
Xs	pointer
,	O
gsl_vector	struct
*	O
ys	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
m	pointer
=	O
LQR	pointer
->	O
size1	long
;	O
const	O
size_t	long
n	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
X	pointer
->	O
size2	long
;	O
(	O
void	O
)	O
Ltau	pointer
;	O
if	O
(	O
p	int
!=	O
work	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"X has wrong number of columns"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
LQR	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LQR and X matrices have different numbers of columns"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
y	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"y vector does not match X"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
w	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weights vector must be length n"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	pointer
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
Xs	pointer
->	O
size1	long
||	O
p	int
!=	O
Xs	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Xs matrix must be n-by-p"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
ys	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"ys vector must have length n"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
gsl_matrix_const_view	struct
R	struct
=	O
gsl_matrix_const_submatrix	function
(	O
LQR	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_multifit_linear_applyW	function
(	O
X	pointer
,	O
w	pointer
,	O
y	double
,	O
Xs	pointer
,	O
ys	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_row	function
(	O
Xs	pointer
,	O
i	long
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	struct
.	O
matrix	struct
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_stdform2	function
(	O
const	O
gsl_matrix	struct
*	O
LQR	pointer
,	O
const	O
gsl_vector	struct
*	O
Ltau	pointer
,	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
y	double
,	O
gsl_matrix	struct
*	O
Xs	pointer
,	O
gsl_vector	struct
*	O
ys	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multilarge_linear_wstdform2	function
(	O
LQR	pointer
,	O
Ltau	pointer
,	O
X	pointer
,	O
NULL	O
,	O
y	double
,	O
Xs	pointer
,	O
ys	pointer
,	O
work	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_linear_genform1	function
(	O
const	O
gsl_vector	struct
*	O
L	pointer
,	O
const	O
gsl_vector	struct
*	O
cs	pointer
,	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
L	pointer
->	O
size	long
!=	O
work	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"L vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size	long
!=	O
cs	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector does not match L"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size	long
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match L"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
c	pointer
,	O
cs	pointer
)	O
;	O
gsl_vector_div	function
(	O
c	pointer
,	O
L	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_multilarge_linear_genform2	function
(	O
const	O
gsl_matrix	struct
*	O
LQR	pointer
,	O
const	O
gsl_vector	struct
*	O
Ltau	pointer
,	O
const	O
gsl_vector	struct
*	O
cs	pointer
,	O
gsl_vector	struct
*	O
c	pointer
,	O
gsl_multilarge_linear_workspace	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
m	pointer
=	O
LQR	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
LQR	pointer
->	O
size2	long
;	O
(	O
void	O
)	O
Ltau	pointer
;	O
(	O
void	O
)	O
work	pointer
;	O
if	O
(	O
p	int
!=	O
c	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"c vector does not match LQR"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
m	pointer
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"m < p not yet supported"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
cs	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"cs vector size does not match c"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
gsl_matrix_const_view	struct
R	struct
=	O
gsl_matrix_const_submatrix	function
(	O
LQR	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_memcpy	function
(	O
c	pointer
,	O
cs	pointer
)	O
;	O
s	pointer
=	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	struct
.	O
matrix	struct
,	O
c	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
