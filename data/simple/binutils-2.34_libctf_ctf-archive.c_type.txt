static	O
off_t	long
arc_write_one_ctf	function
(	O
ctf_file_t	struct
*	O
f	pointer
,	O
int	O
fd	int
,	O
size_t	long
threshold	long
)	O
;	O
static	O
ctf_file_t	struct
*	O
ctf_arc_open_by_offset	function
(	O
const	O
struct	O
ctf_archive	struct
*	O
arc	pointer
,	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
,	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
,	O
size_t	long
offset	long
,	O
int	O
*	O
errp	pointer
)	O
;	O
static	O
int	O
sort_modent_by_name	function
(	O
const	O
void	O
*	O
one	pointer
,	O
const	O
void	O
*	O
two	pointer
,	O
void	O
*	O
n	pointer
)	O
;	O
static	O
void	O
*	O
arc_mmap_header	function
(	O
int	O
fd	int
,	O
size_t	long
headersz	long
)	O
;	O
static	O
void	O
*	O
arc_mmap_file	function
(	O
int	O
fd	int
,	O
size_t	long
size	long
)	O
;	O
static	O
int	O
arc_mmap_writeout	function
(	O
int	O
fd	int
,	O
void	O
*	O
header	pointer
,	O
size_t	long
headersz	long
,	O
const	O
char	O
*	O
*	O
errmsg	pointer
)	O
;	O
static	O
int	O
arc_mmap_unmap	function
(	O
void	O
*	O
header	pointer
,	O
size_t	long
headersz	long
,	O
const	O
char	O
*	O
*	O
errmsg	pointer
)	O
;	O
static	O
__thread	O
char	O
*	O
search_nametbl	pointer
;	O
int	O
ctf_arc_write_fd	function
(	O
int	O
fd	int
,	O
ctf_file_t	struct
*	O
*	O
ctf_files	pointer
,	O
size_t	long
ctf_file_cnt	long
,	O
const	O
char	O
*	O
*	O
names	pointer
,	O
size_t	long
threshold	long
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
struct	O
ctf_archive	struct
*	O
archdr	pointer
;	O
size_t	long
i	pointer
;	O
char	O
dummy	char
=	O
0	int
;	O
size_t	long
headersz	long
;	O
ssize_t	long
namesz	array
;	O
size_t	long
ctf_startoffs	long
;	O
char	O
*	O
nametbl	pointer
=	O
NULL	O
;	O
char	O
*	O
np	pointer
;	O
off_t	long
nameoffs	long
;	O
struct	O
ctf_archive_modent	struct
*	O
modent	pointer
;	O
ctf_dprintf	function
(	O
"Writing CTF archive with %lu files\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
ctf_file_cnt	long
)	O
;	O
headersz	long
=	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
+	O
(	O
ctf_file_cnt	long
*	O
sizeof	O
(	O
uint64_t	long
)	O
*	O
2	int
)	O
;	O
ctf_dprintf	function
(	O
"headersz is %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
headersz	long
)	O
;	O
ctf_startoffs	long
=	O
headersz	long
;	O
if	O
(	O
lseek	function
(	O
fd	int
,	O
ctf_startoffs	long
-	O
1	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): cannot extend file while writing: %s\n"	pointer
;	O
goto	O
err	long
;	O
}	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
&	O
dummy	char
,	O
1	int
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): cannot extend file while writing: %s\n"	pointer
;	O
goto	O
err	long
;	O
}	O
if	O
(	O
(	O
archdr	pointer
=	O
arc_mmap_header	function
(	O
fd	int
,	O
headersz	long
)	O
)	O
==	O
NULL	O
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): Cannot mmap(): %s\n"	pointer
;	O
goto	O
err	long
;	O
}	O
archdr	pointer
->	O
ctfa_magic	long
=	O
htole64	O
(	O
CTFA_MAGIC	int
)	O
;	O
archdr	pointer
->	O
ctfa_nfiles	long
=	O
htole64	O
(	O
ctf_file_cnt	long
)	O
;	O
archdr	pointer
->	O
ctfa_ctfs	long
=	O
htole64	O
(	O
ctf_startoffs	long
)	O
;	O
if	O
(	O
ctf_file_cnt	long
>	O
0	int
)	O
archdr	pointer
->	O
ctfa_model	long
=	O
htole64	O
(	O
ctf_getmodel	function
(	O
ctf_files	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
,	O
namesz	array
=	O
0	int
;	O
i	pointer
<	O
le64toh	O
(	O
archdr	pointer
->	O
ctfa_nfiles	long
)	O
;	O
i	pointer
++	O
)	O
namesz	array
+=	O
strlen	function
(	O
names	pointer
[	O
i	pointer
]	O
)	O
+	O
1	int
;	O
nametbl	pointer
=	O
malloc	function
(	O
namesz	array
)	O
;	O
if	O
(	O
nametbl	pointer
==	O
NULL	O
)	O
{	O
errmsg	pointer
=	O
"Error writing named CTF to archive: %s\n"	pointer
;	O
goto	O
err_unmap	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
,	O
namesz	array
=	O
0	int
,	O
modent	pointer
=	O
(	O
ctf_archive_modent_t	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
archdr	pointer
+	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
)	O
;	O
i	pointer
<	O
le64toh	O
(	O
archdr	pointer
->	O
ctfa_nfiles	long
)	O
;	O
i	pointer
++	O
)	O
{	O
off_t	long
off	long
;	O
strcpy	function
(	O
&	O
nametbl	pointer
[	O
namesz	array
]	O
,	O
names	pointer
[	O
i	pointer
]	O
)	O
;	O
off	long
=	O
arc_write_one_ctf	function
(	O
ctf_files	pointer
[	O
i	pointer
]	O
,	O
fd	int
,	O
threshold	long
)	O
;	O
if	O
(	O
(	O
off	long
<	O
0	int
)	O
&&	O
(	O
off	long
>	O
-	O
ECTF_BASE	int
)	O
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): Cannot determine file "	pointer
"position while writing to archive: %s"	pointer
;	O
goto	O
err_free	O
;	O
}	O
if	O
(	O
off	long
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): Cannot write CTF file to archive: %s\n"	pointer
;	O
errno	O
=	O
off	long
*	O
-	O
1	int
;	O
goto	O
err_free	O
;	O
}	O
modent	pointer
->	O
name_offset	long
=	O
htole64	O
(	O
namesz	array
)	O
;	O
modent	pointer
->	O
ctf_offset	long
=	O
htole64	O
(	O
off	long
-	O
ctf_startoffs	long
)	O
;	O
namesz	array
+=	O
strlen	function
(	O
names	pointer
[	O
i	pointer
]	O
)	O
+	O
1	int
;	O
modent	pointer
++	O
;	O
}	O
ctf_qsort_r	function
(	O
(	O
ctf_archive_modent_t	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
archdr	pointer
+	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
)	O
,	O
le64toh	O
(	O
archdr	pointer
->	O
ctfa_nfiles	long
)	O
,	O
sizeof	O
(	O
struct	O
ctf_archive_modent	struct
)	O
,	O
sort_modent_by_name	function
,	O
nametbl	pointer
)	O
;	O
if	O
(	O
(	O
nameoffs	long
=	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): Cannot get current file position "	pointer
"in archive: %s\n"	pointer
;	O
goto	O
err_free	O
;	O
}	O
archdr	pointer
->	O
ctfa_names	long
=	O
htole64	O
(	O
nameoffs	long
)	O
;	O
np	pointer
=	O
nametbl	pointer
;	O
while	O
(	O
namesz	array
>	O
0	int
)	O
{	O
ssize_t	long
len	int
;	O
if	O
(	O
(	O
len	int
=	O
write	pointer
(	O
fd	int
,	O
np	pointer
,	O
namesz	array
)	O
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_write(): Cannot write name table to archive: %s\n"	pointer
;	O
goto	O
err_free	O
;	O
}	O
namesz	array
-=	O
len	int
;	O
np	pointer
+=	O
len	int
;	O
}	O
free	function
(	O
nametbl	pointer
)	O
;	O
if	O
(	O
arc_mmap_writeout	function
(	O
fd	int
,	O
archdr	pointer
,	O
headersz	long
,	O
&	O
errmsg	pointer
)	O
<	O
0	int
)	O
goto	O
err_unmap	O
;	O
if	O
(	O
arc_mmap_unmap	function
(	O
archdr	pointer
,	O
headersz	long
,	O
&	O
errmsg	pointer
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
return	O
0	int
;	O
err_free	O
:	O
free	function
(	O
nametbl	pointer
)	O
;	O
err_unmap	O
:	O
arc_mmap_unmap	function
(	O
archdr	pointer
,	O
headersz	long
,	O
NULL	O
)	O
;	O
err	long
:	O
ctf_dprintf	function
(	O
errmsg	pointer
,	O
errno	O
<	O
ECTF_BASE	int
?	O
strerror	function
(	O
errno	O
)	O
:	O
ctf_errmsg	function
(	O
errno	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
int	O
ctf_arc_write	function
(	O
const	O
char	O
*	O
file	pointer
,	O
ctf_file_t	struct
*	O
*	O
ctf_files	pointer
,	O
size_t	long
ctf_file_cnt	long
,	O
const	O
char	O
*	O
*	O
names	pointer
,	O
size_t	long
threshold	long
)	O
{	O
int	O
err	long
;	O
int	O
fd	int
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
file	pointer
,	O
O_RDWR	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_CLOEXEC	O
,	O
0666	int
)	O
)	O
<	O
0	int
)	O
{	O
ctf_dprintf	function
(	O
"ctf_arc_write(): cannot create %s: %s\n"	pointer
,	O
file	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
err	long
=	O
ctf_arc_write_fd	function
(	O
fd	int
,	O
ctf_files	pointer
,	O
ctf_file_cnt	long
,	O
names	pointer
,	O
threshold	long
)	O
;	O
if	O
(	O
err	long
)	O
goto	O
err	long
;	O
if	O
(	O
(	O
err	long
=	O
close	pointer
(	O
fd	int
)	O
)	O
<	O
0	int
)	O
{	O
ctf_dprintf	function
(	O
"ctf_arc_write(): Cannot close after writing to archive: "	pointer
"%s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
goto	O
err_close	O
;	O
}	O
err	long
:	O
close	pointer
(	O
fd	int
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
unlink	function
(	O
file	pointer
)	O
;	O
return	O
err	long
;	O
err_close	O
:	O
if	O
(	O
err	long
<	O
0	int
)	O
unlink	function
(	O
file	pointer
)	O
;	O
return	O
err	long
;	O
}	O
static	O
off_t	long
arc_write_one_ctf	function
(	O
ctf_file_t	struct
*	O
f	pointer
,	O
int	O
fd	int
,	O
size_t	long
threshold	long
)	O
{	O
off_t	long
off	long
,	O
end_off	long
;	O
uint64_t	long
ctfsz	long
=	O
0	int
;	O
char	O
*	O
ctfszp	pointer
;	O
size_t	long
ctfsz_len	long
;	O
int	O
(	O
*	O
writefn	pointer
)	O
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
int	O
fd	int
)	O
;	O
if	O
(	O
ctf_serialize	function
(	O
f	pointer
)	O
<	O
0	int
)	O
return	O
f	pointer
->	O
ctf_errno	function
*	O
-	O
1	int
;	O
if	O
(	O
(	O
off	long
=	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
if	O
(	O
f	pointer
->	O
ctf_size	long
>	O
threshold	long
)	O
writefn	pointer
=	O
ctf_compress_write	function
;	O
else	O
writefn	pointer
=	O
ctf_write	function
;	O
ctfsz_len	long
=	O
sizeof	O
(	O
ctfsz	long
)	O
;	O
ctfszp	pointer
=	O
(	O
char	O
*	O
)	O
&	O
ctfsz	long
;	O
while	O
(	O
ctfsz_len	long
>	O
0	int
)	O
{	O
ssize_t	long
writelen	long
=	O
write	pointer
(	O
fd	int
,	O
ctfszp	pointer
,	O
ctfsz_len	long
)	O
;	O
if	O
(	O
writelen	long
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
ctfsz_len	long
-=	O
writelen	long
;	O
ctfszp	pointer
+=	O
writelen	long
;	O
}	O
if	O
(	O
writefn	pointer
(	O
f	pointer
,	O
fd	int
)	O
!=	O
0	int
)	O
return	O
f	pointer
->	O
ctf_errno	function
*	O
-	O
1	int
;	O
if	O
(	O
(	O
end_off	long
=	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
ctfsz	long
=	O
htole64	O
(	O
end_off	long
-	O
off	long
)	O
;	O
if	O
(	O
(	O
lseek	function
(	O
fd	int
,	O
off	long
,	O
SEEK_SET	int
)	O
)	O
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
ctfsz_len	long
=	O
sizeof	O
(	O
ctfsz	long
)	O
;	O
ctfszp	pointer
=	O
(	O
char	O
*	O
)	O
&	O
ctfsz	long
;	O
while	O
(	O
ctfsz_len	long
>	O
0	int
)	O
{	O
ssize_t	long
writelen	long
=	O
write	pointer
(	O
fd	int
,	O
ctfszp	pointer
,	O
ctfsz_len	long
)	O
;	O
if	O
(	O
writelen	long
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
ctfsz_len	long
-=	O
writelen	long
;	O
ctfszp	pointer
+=	O
writelen	long
;	O
}	O
end_off	long
=	O
LCTF_ALIGN_OFFS	O
(	O
end_off	long
,	O
8	int
)	O
;	O
if	O
(	O
(	O
lseek	function
(	O
fd	int
,	O
end_off	long
,	O
SEEK_SET	int
)	O
)	O
<	O
0	int
)	O
return	O
errno	O
*	O
-	O
1	int
;	O
return	O
off	long
;	O
}	O
static	O
int	O
sort_modent_by_name	function
(	O
const	O
void	O
*	O
one	pointer
,	O
const	O
void	O
*	O
two	pointer
,	O
void	O
*	O
n	pointer
)	O
{	O
const	O
struct	O
ctf_archive_modent	struct
*	O
a	pointer
=	O
one	pointer
;	O
const	O
struct	O
ctf_archive_modent	struct
*	O
b	pointer
=	O
two	pointer
;	O
char	O
*	O
nametbl	pointer
=	O
n	pointer
;	O
return	O
strcmp	function
(	O
&	O
nametbl	pointer
[	O
le64toh	O
(	O
a	pointer
->	O
name_offset	long
)	O
]	O
,	O
&	O
nametbl	pointer
[	O
le64toh	O
(	O
b	pointer
->	O
name_offset	long
)	O
]	O
)	O
;	O
}	O
static	O
int	O
search_modent_by_name	function
(	O
const	O
void	O
*	O
key	pointer
,	O
const	O
void	O
*	O
ent	pointer
)	O
{	O
const	O
char	O
*	O
k	pointer
=	O
key	pointer
;	O
const	O
struct	O
ctf_archive_modent	struct
*	O
v	pointer
=	O
ent	pointer
;	O
return	O
strcmp	function
(	O
k	pointer
,	O
&	O
search_nametbl	pointer
[	O
le64toh	O
(	O
v	pointer
->	O
name_offset	long
)	O
]	O
)	O
;	O
}	O
struct	O
ctf_archive	struct
*	O
ctf_arc_bufopen	function
(	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
_libctf_unused_	O
,	O
int	O
*	O
errp	pointer
)	O
{	O
struct	O
ctf_archive	struct
*	O
arc	pointer
=	O
(	O
struct	O
ctf_archive	struct
*	O
)	O
buf	pointer
;	O
if	O
(	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_magic	long
)	O
!=	O
CTFA_MAGIC	int
)	O
{	O
if	O
(	O
errp	pointer
)	O
*	O
errp	pointer
=	O
ECTF_FMT	int
;	O
return	O
NULL	O
;	O
}	O
return	O
arc	pointer
;	O
}	O
struct	O
ctf_archive	struct
*	O
ctf_arc_open_internal	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
*	O
errp	pointer
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
int	O
fd	int
;	O
struct	O
stat	struct
s	pointer
;	O
struct	O
ctf_archive	struct
*	O
arc	pointer
;	O
libctf_init_debug	function
(	O
)	O
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
O_RDONLY	int
)	O
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_open(): cannot open %s: %s\n"	pointer
;	O
goto	O
err	long
;	O
}	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
s	pointer
)	O
<	O
0	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_open(): cannot stat %s: %s\n"	pointer
;	O
goto	O
err_close	O
;	O
}	O
if	O
(	O
(	O
arc	pointer
=	O
arc_mmap_file	function
(	O
fd	int
,	O
s	pointer
.	O
st_size	array
)	O
)	O
==	O
NULL	O
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_open(): Cannot read in %s: %s\n"	pointer
;	O
goto	O
err_close	O
;	O
}	O
if	O
(	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_magic	long
)	O
!=	O
CTFA_MAGIC	int
)	O
{	O
errmsg	pointer
=	O
"ctf_arc_open(): Invalid magic number"	pointer
;	O
errno	O
=	O
ECTF_FMT	int
;	O
goto	O
err_unmap	O
;	O
}	O
arc	pointer
->	O
ctfa_magic	long
=	O
s	pointer
.	O
st_size	array
;	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
arc	pointer
;	O
err_unmap	O
:	O
arc_mmap_unmap	function
(	O
arc	pointer
,	O
s	pointer
.	O
st_size	array
,	O
NULL	O
)	O
;	O
err_close	O
:	O
close	pointer
(	O
fd	int
)	O
;	O
err	long
:	O
if	O
(	O
errp	pointer
)	O
*	O
errp	pointer
=	O
errno	O
;	O
ctf_dprintf	function
(	O
errmsg	pointer
,	O
filename	pointer
,	O
errno	O
<	O
ECTF_BASE	int
?	O
strerror	function
(	O
errno	O
)	O
:	O
ctf_errmsg	function
(	O
errno	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
ctf_arc_close_internal	function
(	O
struct	O
ctf_archive	struct
*	O
arc	pointer
)	O
{	O
if	O
(	O
arc	pointer
==	O
NULL	O
)	O
return	O
;	O
arc_mmap_unmap	function
(	O
arc	pointer
,	O
arc	pointer
->	O
ctfa_magic	long
,	O
NULL	O
)	O
;	O
}	O
void	O
ctf_arc_close	function
(	O
ctf_archive_t	struct
*	O
arc	pointer
)	O
{	O
if	O
(	O
arc	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
arc	pointer
->	O
ctfi_is_archive	int
)	O
ctf_arc_close_internal	function
(	O
arc	pointer
->	O
ctfi_archive	pointer
)	O
;	O
else	O
ctf_file_close	function
(	O
arc	pointer
->	O
ctfi_file	pointer
)	O
;	O
free	function
(	O
(	O
void	O
*	O
)	O
arc	pointer
->	O
ctfi_symsect	struct
.	O
cts_data	pointer
)	O
;	O
free	function
(	O
arc	pointer
->	O
ctfi_data	pointer
)	O
;	O
if	O
(	O
arc	pointer
->	O
ctfi_bfd_close	pointer
)	O
arc	pointer
->	O
ctfi_bfd_close	pointer
(	O
arc	pointer
)	O
;	O
free	function
(	O
arc	pointer
)	O
;	O
}	O
static	O
ctf_file_t	struct
*	O
ctf_arc_open_by_name_internal	function
(	O
const	O
struct	O
ctf_archive	struct
*	O
arc	pointer
,	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
,	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
errp	pointer
)	O
{	O
struct	O
ctf_archive_modent	struct
*	O
modent	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
name	pointer
=	O
_CTF_SECTION	array
;	O
ctf_dprintf	function
(	O
"ctf_arc_open_by_name(%s): opening\n"	pointer
,	O
name	pointer
)	O
;	O
modent	pointer
=	O
(	O
ctf_archive_modent_t	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
)	O
;	O
search_nametbl	pointer
=	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_names	long
)	O
;	O
modent	pointer
=	O
bsearch	function
(	O
name	pointer
,	O
modent	pointer
,	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_nfiles	long
)	O
,	O
sizeof	O
(	O
struct	O
ctf_archive_modent	struct
)	O
,	O
search_modent_by_name	function
)	O
;	O
if	O
(	O
modent	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errp	pointer
)	O
*	O
errp	pointer
=	O
ECTF_ARNNAME	int
;	O
return	O
NULL	O
;	O
}	O
return	O
ctf_arc_open_by_offset	function
(	O
arc	pointer
,	O
symsect	pointer
,	O
strsect	pointer
,	O
le64toh	O
(	O
modent	pointer
->	O
ctf_offset	long
)	O
,	O
errp	pointer
)	O
;	O
}	O
ctf_file_t	struct
*	O
ctf_arc_open_by_name_sections	function
(	O
const	O
ctf_archive_t	struct
*	O
arc	pointer
,	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
,	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
errp	pointer
)	O
{	O
if	O
(	O
arc	pointer
->	O
ctfi_is_archive	int
)	O
{	O
ctf_file_t	struct
*	O
ret	pointer
;	O
ret	pointer
=	O
ctf_arc_open_by_name_internal	function
(	O
arc	pointer
->	O
ctfi_archive	pointer
,	O
symsect	pointer
,	O
strsect	pointer
,	O
name	pointer
,	O
errp	pointer
)	O
;	O
if	O
(	O
ret	pointer
)	O
ret	pointer
->	O
ctf_archive	struct
=	O
(	O
ctf_archive_t	struct
*	O
)	O
arc	pointer
;	O
return	O
ret	pointer
;	O
}	O
if	O
(	O
(	O
name	pointer
!=	O
NULL	O
)	O
&&	O
(	O
strcmp	function
(	O
name	pointer
,	O
_CTF_SECTION	array
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
errp	pointer
)	O
*	O
errp	pointer
=	O
ECTF_ARNNAME	int
;	O
return	O
NULL	O
;	O
}	O
arc	pointer
->	O
ctfi_file	pointer
->	O
ctf_archive	struct
=	O
(	O
ctf_archive_t	struct
*	O
)	O
arc	pointer
;	O
arc	pointer
->	O
ctfi_file	pointer
->	O
ctf_refcnt	int
++	O
;	O
return	O
arc	pointer
->	O
ctfi_file	pointer
;	O
}	O
ctf_file_t	struct
*	O
ctf_arc_open_by_name	function
(	O
const	O
ctf_archive_t	struct
*	O
arc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
errp	pointer
)	O
{	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
=	O
&	O
arc	pointer
->	O
ctfi_symsect	struct
;	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
=	O
&	O
arc	pointer
->	O
ctfi_strsect	struct
;	O
if	O
(	O
symsect	pointer
->	O
cts_name	pointer
==	O
NULL	O
)	O
symsect	pointer
=	O
NULL	O
;	O
if	O
(	O
strsect	pointer
->	O
cts_name	pointer
==	O
NULL	O
)	O
strsect	pointer
=	O
NULL	O
;	O
return	O
ctf_arc_open_by_name_sections	function
(	O
arc	pointer
,	O
symsect	pointer
,	O
strsect	pointer
,	O
name	pointer
,	O
errp	pointer
)	O
;	O
}	O
static	O
ctf_file_t	struct
*	O
ctf_arc_open_by_offset	function
(	O
const	O
struct	O
ctf_archive	struct
*	O
arc	pointer
,	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
,	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
,	O
size_t	long
offset	long
,	O
int	O
*	O
errp	pointer
)	O
{	O
ctf_sect_t	struct
ctfsect	struct
;	O
ctf_file_t	struct
*	O
fp	pointer
;	O
ctf_dprintf	function
(	O
"ctf_arc_open_by_offset(%lu): opening\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
offset	long
)	O
;	O
memset	function
(	O
&	O
ctfsect	struct
,	O
0	int
,	O
sizeof	O
(	O
ctf_sect_t	struct
)	O
)	O
;	O
offset	long
+=	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_ctfs	long
)	O
;	O
ctfsect	struct
.	O
cts_name	pointer
=	O
_CTF_SECTION	array
;	O
ctfsect	struct
.	O
cts_size	long
=	O
le64toh	O
(	O
*	O
(	O
(	O
uint64_t	long
*	O
)	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
offset	long
)	O
)	O
)	O
;	O
ctfsect	struct
.	O
cts_entsize	long
=	O
1	int
;	O
ctfsect	struct
.	O
cts_data	pointer
=	O
(	O
void	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
offset	long
+	O
sizeof	O
(	O
uint64_t	long
)	O
)	O
;	O
fp	pointer
=	O
ctf_bufopen	function
(	O
&	O
ctfsect	struct
,	O
symsect	pointer
,	O
strsect	pointer
,	O
errp	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
ctf_setmodel	function
(	O
fp	pointer
,	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_model	long
)	O
)	O
;	O
return	O
fp	pointer
;	O
}	O
static	O
int	O
ctf_archive_raw_iter_internal	function
(	O
const	O
struct	O
ctf_archive	struct
*	O
arc	pointer
,	O
ctf_archive_raw_member_f	function
*	O
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	pointer
;	O
struct	O
ctf_archive_modent	struct
*	O
modent	pointer
;	O
const	O
char	O
*	O
nametbl	pointer
;	O
modent	pointer
=	O
(	O
ctf_archive_modent_t	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
)	O
;	O
nametbl	pointer
=	O
(	O
(	O
(	O
const	O
char	O
*	O
)	O
arc	pointer
)	O
+	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_names	long
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_nfiles	long
)	O
;	O
i	pointer
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
char	O
*	O
fp	pointer
;	O
name	pointer
=	O
&	O
nametbl	pointer
[	O
le64toh	O
(	O
modent	pointer
[	O
i	pointer
]	O
.	O
name_offset	long
)	O
]	O
;	O
fp	pointer
=	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_ctfs	long
)	O
+	O
le64toh	O
(	O
modent	pointer
[	O
i	pointer
]	O
.	O
ctf_offset	long
)	O
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
name	pointer
,	O
(	O
void	O
*	O
)	O
(	O
fp	pointer
+	O
sizeof	O
(	O
uint64_t	long
)	O
)	O
,	O
le64toh	O
(	O
*	O
(	O
(	O
uint64_t	long
*	O
)	O
fp	pointer
)	O
)	O
,	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_archive_raw_iter	function
(	O
const	O
ctf_archive_t	struct
*	O
arc	pointer
,	O
ctf_archive_raw_member_f	function
*	O
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
arc	pointer
->	O
ctfi_is_archive	int
)	O
return	O
ctf_archive_raw_iter_internal	function
(	O
arc	pointer
->	O
ctfi_archive	pointer
,	O
func	pointer
,	O
data	pointer
)	O
;	O
return	O
-	O
EINVAL	int
;	O
}	O
static	O
int	O
ctf_archive_iter_internal	function
(	O
const	O
ctf_archive_t	struct
*	O
wrapper	pointer
,	O
const	O
struct	O
ctf_archive	struct
*	O
arc	pointer
,	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
,	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
,	O
ctf_archive_member_f	function
*	O
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	pointer
;	O
ctf_file_t	struct
*	O
f	pointer
;	O
struct	O
ctf_archive_modent	struct
*	O
modent	pointer
;	O
const	O
char	O
*	O
nametbl	pointer
;	O
modent	pointer
=	O
(	O
ctf_archive_modent_t	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
arc	pointer
+	O
sizeof	O
(	O
struct	O
ctf_archive	struct
)	O
)	O
;	O
nametbl	pointer
=	O
(	O
(	O
(	O
const	O
char	O
*	O
)	O
arc	pointer
)	O
+	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_names	long
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
le64toh	O
(	O
arc	pointer
->	O
ctfa_nfiles	long
)	O
;	O
i	pointer
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
name	pointer
=	O
&	O
nametbl	pointer
[	O
le64toh	O
(	O
modent	pointer
[	O
i	pointer
]	O
.	O
name_offset	long
)	O
]	O
;	O
if	O
(	O
(	O
f	pointer
=	O
ctf_arc_open_by_name_internal	function
(	O
arc	pointer
,	O
symsect	pointer
,	O
strsect	pointer
,	O
name	pointer
,	O
&	O
rc	int
)	O
)	O
==	O
NULL	O
)	O
return	O
rc	int
;	O
f	pointer
->	O
ctf_archive	struct
=	O
(	O
ctf_archive_t	struct
*	O
)	O
wrapper	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
f	pointer
,	O
name	pointer
,	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
ctf_file_close	function
(	O
f	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
ctf_file_close	function
(	O
f	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_archive_iter	function
(	O
const	O
ctf_archive_t	struct
*	O
arc	pointer
,	O
ctf_archive_member_f	function
*	O
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
const	O
ctf_sect_t	struct
*	O
symsect	pointer
=	O
&	O
arc	pointer
->	O
ctfi_symsect	struct
;	O
const	O
ctf_sect_t	struct
*	O
strsect	pointer
=	O
&	O
arc	pointer
->	O
ctfi_strsect	struct
;	O
if	O
(	O
symsect	pointer
->	O
cts_name	pointer
==	O
NULL	O
)	O
symsect	pointer
=	O
NULL	O
;	O
if	O
(	O
strsect	pointer
->	O
cts_name	pointer
==	O
NULL	O
)	O
strsect	pointer
=	O
NULL	O
;	O
if	O
(	O
arc	pointer
->	O
ctfi_is_archive	int
)	O
return	O
ctf_archive_iter_internal	function
(	O
arc	pointer
,	O
arc	pointer
->	O
ctfi_archive	pointer
,	O
symsect	pointer
,	O
strsect	pointer
,	O
func	pointer
,	O
data	pointer
)	O
;	O
return	O
func	pointer
(	O
arc	pointer
->	O
ctfi_file	pointer
,	O
_CTF_SECTION	array
,	O
data	pointer
)	O
;	O
}	O
static	O
void	O
*	O
arc_mmap_header	function
(	O
int	O
fd	int
,	O
size_t	long
headersz	long
)	O
{	O
void	O
*	O
hdr	pointer
;	O
if	O
(	O
(	O
hdr	pointer
=	O
mmap	function
(	O
NULL	O
,	O
headersz	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_SHARED	int
,	O
fd	int
,	O
0	int
)	O
)	O
==	O
MAP_FAILED	O
)	O
return	O
NULL	O
;	O
return	O
hdr	pointer
;	O
}	O
static	O
void	O
*	O
arc_mmap_file	function
(	O
int	O
fd	int
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
arc	pointer
;	O
if	O
(	O
(	O
arc	pointer
=	O
mmap	function
(	O
NULL	O
,	O
size	long
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_PRIVATE	int
,	O
fd	int
,	O
0	int
)	O
)	O
==	O
MAP_FAILED	O
)	O
return	O
NULL	O
;	O
return	O
arc	pointer
;	O
}	O
static	O
int	O
arc_mmap_writeout	function
(	O
int	O
fd	int
_libctf_unused_	O
,	O
void	O
*	O
header	pointer
,	O
size_t	long
headersz	long
,	O
const	O
char	O
*	O
*	O
errmsg	pointer
)	O
{	O
if	O
(	O
msync	function
(	O
header	pointer
,	O
headersz	long
,	O
MS_ASYNC	int
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errmsg	pointer
)	O
*	O
errmsg	pointer
=	O
"arc_mmap_writeout(): Cannot sync after writing to %s: %s\n"	pointer
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
arc_mmap_unmap	function
(	O
void	O
*	O
header	pointer
,	O
size_t	long
headersz	long
,	O
const	O
char	O
*	O
*	O
errmsg	pointer
)	O
{	O
if	O
(	O
munmap	function
(	O
header	pointer
,	O
headersz	long
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errmsg	pointer
)	O
*	O
errmsg	pointer
=	O
"arc_mmap_munmap(): Cannot unmap after writing to %s: %s\n"	pointer
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
