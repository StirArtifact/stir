struct	O
mailbox_iterator	struct
{	O
mu_mailbox_t	pointer
mbx	pointer
;	O
size_t	long
idx	long
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
mbx_first	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
return	O
mu_mailbox_messages_count	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
&	O
itr	pointer
->	O
idx	long
)	O
;	O
else	O
itr	pointer
->	O
idx	long
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
{	O
if	O
(	O
itr	pointer
->	O
idx	long
)	O
--	O
itr	pointer
->	O
idx	long
;	O
}	O
else	O
itr	pointer
->	O
idx	long
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
size_t	long
count	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
itr	pointer
->	O
idx	long
>	O
count	long
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
itr	pointer
->	O
idx	long
,	O
(	O
mu_message_t	pointer
*	O
)	O
pret	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mbx_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
return	O
itr	pointer
->	O
idx	long
==	O
0	int
;	O
else	O
{	O
size_t	long
count	long
;	O
if	O
(	O
mu_mailbox_messages_count	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
&	O
count	long
)	O
)	O
return	O
1	int
;	O
return	O
itr	pointer
->	O
idx	long
>	O
count	long
;	O
}	O
}	O
static	O
int	O
mbx_destroy	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
data	pointer
;	O
mu_iterator_detach	function
(	O
&	O
itr	pointer
->	O
mbx	pointer
->	O
iterator	pointer
,	O
iterator	pointer
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
ptr	pointer
;	O
if	O
(	O
mbx_getitem	function
(	O
owner	pointer
,	O
&	O
ptr	pointer
,	O
NULL	O
)	O
)	O
return	O
0	int
;	O
return	O
ptr	pointer
==	O
item	pointer
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
mbx_data_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
*	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
mailbox_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
ptr	pointer
,	O
owner	pointer
,	O
sizeof	O
(	O
struct	O
mailbox_iterator	struct
)	O
)	O
;	O
mu_iterator_attach	function
(	O
&	O
itr	pointer
->	O
mbx	pointer
->	O
iterator	pointer
,	O
*	O
ptr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mbx_itrctl	function
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
if	O
(	O
itr	pointer
->	O
idx	long
==	O
0	int
)	O
return	O
MU_ERR_NOENT	O
;	O
switch	O
(	O
req	enum
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
idx	long
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
itr	pointer
->	O
idx	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
itr	pointer
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_mailbox_messages_count	function
(	O
itr	pointer
->	O
mbx	pointer
,	O
arg	pointer
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_iterator	function
(	O
mu_mailbox_t	pointer
mbx	pointer
,	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
struct	O
mailbox_iterator	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
mbx	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
ENOMEM	int
;	O
itr	pointer
->	O
mbx	pointer
=	O
mbx	pointer
;	O
itr	pointer
->	O
idx	long
=	O
1	int
;	O
itr	pointer
->	O
backwards	int
=	O
0	int
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
itr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
mbx_first	function
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
mbx_next	function
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
mbx_getitem	function
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
mbx_finished_p	function
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
mbx_delitem	function
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	pointer
,	O
mbx_destroy	function
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
mbx_data_dup	function
)	O
;	O
mu_iterator_set_itrctl	function
(	O
iterator	pointer
,	O
mbx_itrctl	function
)	O
;	O
mu_iterator_attach	function
(	O
&	O
mbx	pointer
->	O
iterator	pointer
,	O
iterator	pointer
)	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
