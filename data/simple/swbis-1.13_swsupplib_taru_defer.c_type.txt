static	O
struct	O
deferment	struct
*	O
def_create_deferment	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
;	O
static	O
void	O
def_free_deferment	function
(	O
struct	O
deferment	struct
*	O
d	pointer
)	O
;	O
static	O
int	O
def_writeout_defered_file	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
header	struct
,	O
int	O
infd	int
,	O
int	O
outfd	int
,	O
int	O
format	pointer
)	O
{	O
int	O
ret	int
=	O
taru_write_out_header	function
(	O
(	O
TARU	struct
*	O
)	O
(	O
def	pointer
->	O
taruM	pointer
)	O
,	O
header	struct
,	O
outfd	int
,	O
format	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
,	O
0	int
)	O
;	O
ret	int
+=	O
taru_write_archive_member_data	function
(	O
(	O
TARU	struct
*	O
)	O
(	O
def	pointer
->	O
taruM	pointer
)	O
,	O
header	struct
,	O
outfd	int
,	O
infd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
format	pointer
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
struct	O
deferment	struct
*	O
def_create_deferment	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
d	pointer
=	O
(	O
struct	O
deferment	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
deferment	struct
)	O
)	O
;	O
d	pointer
->	O
headerP	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
taru_filehdr2filehdr	function
(	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
file_hdr	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
NULL	O
)	O
;	O
return	O
d	pointer
;	O
}	O
static	O
void	O
def_free_deferment	function
(	O
struct	O
deferment	struct
*	O
d	pointer
)	O
{	O
ahsStaticSetPaxLinkname	function
(	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
NULL	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
NULL	O
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
d	pointer
->	O
headerP	pointer
)	O
;	O
swbis_free	O
(	O
d	pointer
)	O
;	O
}	O
static	O
int	O
def_count_defered_links_to_dev_ino	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
struct	O
deferment	struct
*	O
d	pointer
;	O
int	O
ino	long
;	O
int	O
maj	int
;	O
int	O
min	int
;	O
int	O
count	long
;	O
ino	long
=	O
file_hdr	pointer
->	O
c_ino	short
;	O
maj	int
=	O
file_hdr	pointer
->	O
c_dev_maj	long
;	O
min	int
=	O
file_hdr	pointer
->	O
c_dev_min	long
;	O
count	long
=	O
0	int
;	O
for	O
(	O
d	pointer
=	O
def	pointer
->	O
deferoutsM	pointer
;	O
d	pointer
!=	O
NULL	O
;	O
d	pointer
=	O
d	pointer
->	O
nextP	pointer
)	O
{	O
if	O
(	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_ino	short
)	O
==	O
ino	long
)	O
&&	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_dev_maj	long
)	O
==	O
maj	int
)	O
&&	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_dev_min	long
)	O
==	O
min	int
)	O
)	O
++	O
count	long
;	O
}	O
return	O
count	long
;	O
}	O
static	O
int	O
def_writeout_defers	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
,	O
int	O
infd	int
,	O
int	O
is_final	int
)	O
{	O
int	O
ret	int
;	O
int	O
retval	int
=	O
0	int
;	O
struct	O
deferment	struct
*	O
d	pointer
;	O
struct	O
deferment	struct
*	O
d_prev	pointer
;	O
struct	O
deferment	struct
*	O
d_free	pointer
;	O
int	O
remaining_links	int
;	O
int	O
ino	long
;	O
int	O
maj	int
;	O
int	O
min	int
;	O
ino	long
=	O
file_hdr	pointer
->	O
c_ino	short
;	O
maj	int
=	O
file_hdr	pointer
->	O
c_dev_maj	long
;	O
min	int
=	O
file_hdr	pointer
->	O
c_dev_min	long
;	O
d_prev	pointer
=	O
NULL	O
;	O
d	pointer
=	O
def	pointer
->	O
deferoutsM	pointer
;	O
while	O
(	O
d	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_ino	short
)	O
==	O
ino	long
)	O
&&	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_dev_maj	long
)	O
==	O
maj	int
)	O
&&	O
(	O
(	O
int	O
)	O
(	O
d	pointer
->	O
headerP	pointer
->	O
c_dev_min	long
)	O
==	O
min	int
)	O
)	O
{	O
remaining_links	int
=	O
def_count_defered_links_to_dev_ino	function
(	O
def	pointer
,	O
d	pointer
->	O
headerP	pointer
)	O
;	O
if	O
(	O
is_final	int
==	O
0	int
||	O
(	O
is_final	int
==	O
1	int
&&	O
remaining_links	int
>	O
1	int
)	O
)	O
{	O
d	pointer
->	O
headerP	pointer
->	O
c_filesize	long
=	O
0	int
;	O
ret	int
=	O
taru_write_out_header	function
(	O
(	O
TARU	struct
*	O
)	O
(	O
def	pointer
->	O
taruM	pointer
)	O
,	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
out_des	int
,	O
def	pointer
->	O
formatM	int
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
,	O
0	int
)	O
;	O
retval	int
+=	O
ret	int
;	O
}	O
else	O
if	O
(	O
is_final	int
==	O
1	int
&&	O
remaining_links	int
==	O
1	int
)	O
{	O
ret	int
=	O
def_writeout_defered_file	function
(	O
def	pointer
,	O
(	O
d	pointer
->	O
headerP	pointer
)	O
,	O
infd	int
,	O
out_des	int
,	O
def	pointer
->	O
formatM	int
)	O
;	O
retval	int
+=	O
ret	int
;	O
}	O
if	O
(	O
d_prev	pointer
!=	O
NULL	O
)	O
d_prev	pointer
->	O
nextP	pointer
=	O
d	pointer
->	O
nextP	pointer
;	O
else	O
def	pointer
->	O
deferoutsM	pointer
=	O
d	pointer
->	O
nextP	pointer
;	O
d_free	pointer
=	O
d	pointer
;	O
d	pointer
=	O
d	pointer
->	O
nextP	pointer
;	O
def_free_deferment	function
(	O
d_free	pointer
)	O
;	O
}	O
else	O
{	O
d_prev	pointer
=	O
d	pointer
;	O
d	pointer
=	O
d	pointer
->	O
nextP	pointer
;	O
}	O
}	O
return	O
retval	int
;	O
}	O
void	O
defer_set_taru	function
(	O
DEFER	struct
*	O
defer	pointer
,	O
void	O
*	O
taru	pointer
)	O
{	O
defer	pointer
->	O
taruM	pointer
=	O
(	O
void	O
*	O
)	O
(	O
taru	pointer
)	O
;	O
}	O
DEFER	struct
*	O
defer_open	function
(	O
int	O
format	pointer
)	O
{	O
DEFER	struct
*	O
def	pointer
=	O
(	O
DEFER	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
DEFER	struct
)	O
)	O
;	O
def	pointer
->	O
deferoutsM	pointer
=	O
NULL	O
;	O
def	pointer
->	O
formatM	int
=	O
format	pointer
;	O
def	pointer
->	O
taruM	pointer
=	O
taru_create	function
(	O
)	O
;	O
return	O
def	pointer
;	O
}	O
void	O
defer_close	function
(	O
DEFER	struct
*	O
def	pointer
)	O
{	O
struct	O
deferment	struct
*	O
oldd	pointer
;	O
struct	O
deferment	struct
*	O
d	pointer
=	O
def	pointer
->	O
deferoutsM	pointer
;	O
while	O
(	O
d	pointer
)	O
{	O
oldd	pointer
=	O
d	pointer
;	O
d	pointer
=	O
d	pointer
->	O
nextP	pointer
;	O
def_free_deferment	function
(	O
oldd	pointer
)	O
;	O
}	O
swbis_free	O
(	O
def	pointer
)	O
;	O
return	O
;	O
}	O
void	O
defer_set_format	function
(	O
DEFER	struct
*	O
def	pointer
,	O
int	O
format	pointer
)	O
{	O
def	pointer
->	O
formatM	int
=	O
format	pointer
;	O
}	O
int	O
defer_is_last_link	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
int	O
other_files_sofar	int
;	O
other_files_sofar	int
=	O
def_count_defered_links_to_dev_ino	function
(	O
def	pointer
,	O
file_hdr	pointer
)	O
;	O
if	O
(	O
(	O
int	O
)	O
(	O
file_hdr	pointer
->	O
c_nlink	short
)	O
==	O
(	O
other_files_sofar	int
+	O
1	int
)	O
)	O
{	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
defer_add_link_defer	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
struct	O
deferment	struct
*	O
lasted	pointer
;	O
struct	O
deferment	struct
*	O
ed	pointer
;	O
struct	O
deferment	struct
*	O
d	pointer
;	O
d	pointer
=	O
def_create_deferment	function
(	O
file_hdr	pointer
)	O
;	O
ed	pointer
=	O
def	pointer
->	O
deferoutsM	pointer
;	O
lasted	pointer
=	O
NULL	O
;	O
while	O
(	O
ed	pointer
)	O
{	O
lasted	pointer
=	O
ed	pointer
;	O
ed	pointer
=	O
ed	pointer
->	O
nextP	pointer
;	O
}	O
if	O
(	O
lasted	pointer
)	O
{	O
lasted	pointer
->	O
nextP	pointer
=	O
d	pointer
;	O
}	O
else	O
{	O
def	pointer
->	O
deferoutsM	pointer
=	O
d	pointer
;	O
}	O
d	pointer
->	O
nextP	pointer
=	O
NULL	O
;	O
}	O
int	O
defer_writeout_zero_length_defers	function
(	O
DEFER	struct
*	O
def	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
out_des	int
)	O
{	O
return	O
def_writeout_defers	function
(	O
def	pointer
,	O
file_hdr	pointer
,	O
out_des	int
,	O
-	O
1	int
,	O
0	int
)	O
;	O
}	O
int	O
defer_writeout_final_defers	function
(	O
DEFER	struct
*	O
def	pointer
,	O
int	O
out_des	int
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
int	O
retval	int
=	O
0	int
;	O
while	O
(	O
def	pointer
->	O
deferoutsM	pointer
!=	O
NULL	O
&&	O
ret	int
>=	O
0	int
)	O
{	O
ret	int
=	O
def_writeout_defers	function
(	O
def	pointer
,	O
(	O
def	pointer
->	O
deferoutsM	pointer
->	O
headerP	pointer
)	O
,	O
out_des	int
,	O
-	O
1	int
,	O
1	int
)	O
;	O
retval	int
+=	O
ret	int
;	O
}	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
return	O
retval	int
;	O
}	O
