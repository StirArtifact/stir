static	O
bool	enum
same_colormap	function
(	O
plColor	struct
cmap1	array
[	O
256	int
]	O
,	O
plColor	struct
cmap2	array
[	O
256	int
]	O
,	O
int	O
num1	int
,	O
int	O
num2	int
)	O
;	O
bool	enum
_pl_i_end_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
==	O
1	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
i_header_written	enum
==	O
false	int
)	O
{	O
_pl_i_write_gif_header	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
i_header_written	enum
=	O
true	int
;	O
}	O
_pl_i_write_gif_image	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_i_write_gif_trailer	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
}	O
_pl_i_delete_image	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
return	O
true	int
;	O
}	O
void	O
_pl_i_write_gif_header	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
,	O
packed_bits	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_transparent	enum
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
i_animation	enum
)	O
{	O
_plotter	pointer
->	O
i_transparent	enum
=	O
true	int
;	O
_plotter	pointer
->	O
i_transparent_index	int
=	O
0	int
;	O
}	O
else	O
{	O
bool	enum
found	enum
=	O
false	int
;	O
plColor	struct
t_color	struct
;	O
t_color	struct
=	O
_plotter	pointer
->	O
i_transparent_color	struct
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
i_num_color_indices	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
red	int
==	O
t_color	struct
.	O
red	int
&&	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
green	int
==	O
t_color	struct
.	O
green	int
&&	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
blue	int
==	O
t_color	struct
.	O
blue	int
)	O
{	O
found	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
found	enum
)	O
{	O
_plotter	pointer
->	O
i_transparent	enum
=	O
true	int
;	O
_plotter	pointer
->	O
i_transparent_index	int
=	O
i	int
;	O
}	O
else	O
_plotter	pointer
->	O
i_transparent	enum
=	O
false	int
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
i_transparent	enum
||	O
(	O
_plotter	pointer
->	O
i_animation	enum
&&	O
_plotter	pointer
->	O
i_iterations	int
>	O
0	int
)	O
||	O
(	O
_plotter	pointer
->	O
i_animation	enum
&&	O
_plotter	pointer
->	O
i_delay	int
>	O
0	int
)	O
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"GIF89a"	pointer
)	O
;	O
else	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"GIF87a"	pointer
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
_plotter	pointer
->	O
i_xn	int
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
_plotter	pointer
->	O
i_yn	int
)	O
;	O
packed_bits	int
=	O
0x80	int
;	O
packed_bits	int
|=	O
(	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
-	O
1	int
,	O
0	int
)	O
)	O
<<	O
4	int
;	O
packed_bits	int
|=	O
(	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
-	O
1	int
,	O
0	int
)	O
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
packed_bits	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color_index	char
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
,	O
1	int
)	O
)	O
;	O
++	O
i	int
)	O
{	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
red	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
green	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
blue	int
)	O
;	O
_plotter	pointer
->	O
i_global_colormap	array
[	O
i	int
]	O
=	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
;	O
}	O
_plotter	pointer
->	O
i_num_global_color_indices	int
=	O
_plotter	pointer
->	O
i_num_color_indices	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_animation	enum
&&	O
_plotter	pointer
->	O
i_iterations	int
>	O
0	int
)	O
{	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
'!'	O
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0xff	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
11	int
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"NETSCAPE2.0"	pointer
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0x03	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0x01	int
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
(	O
_plotter	pointer
->	O
i_iterations	int
)	O
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0x00	int
)	O
;	O
}	O
}	O
void	O
_pl_i_write_gif_image	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
write_local_table	enum
;	O
int	O
i	int
,	O
min_code_size	int
,	O
packed_bits	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_transparent	enum
||	O
(	O
_plotter	pointer
->	O
i_animation	enum
&&	O
_plotter	pointer
->	O
i_delay	int
>	O
0	int
)	O
)	O
{	O
unsigned	O
char	O
packed_byte	char
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
'!'	O
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0xf9	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
4	int
)	O
;	O
packed_byte	char
=	O
0	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_transparent	enum
)	O
packed_byte	char
|=	O
1	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_transparent	enum
&&	O
_plotter	pointer
->	O
i_animation	enum
)	O
packed_byte	char
|=	O
(	O
DISP_RESTORE_TO_BACKGROUND	int
<<	O
2	int
)	O
;	O
else	O
packed_byte	char
|=	O
(	O
DISP_UNSPECIFIED	int
<<	O
2	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
packed_byte	char
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
(	O
_plotter	pointer
->	O
i_delay	int
)	O
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_transparent_index	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0	int
)	O
;	O
}	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
','	O
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
0	int
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
0	int
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
_plotter	pointer
->	O
i_xn	int
)	O
;	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
int	O
)	O
_plotter	pointer
->	O
i_yn	int
)	O
;	O
write_local_table	enum
=	O
same_colormap	function
(	O
_plotter	pointer
->	O
i_colormap	array
,	O
_plotter	pointer
->	O
i_global_colormap	array
,	O
_plotter	pointer
->	O
i_num_color_indices	int
,	O
_plotter	pointer
->	O
i_num_global_color_indices	int
)	O
?	O
false	int
:	O
true	int
;	O
packed_bits	int
=	O
0x00	int
;	O
if	O
(	O
write_local_table	enum
)	O
{	O
packed_bits	int
|=	O
0x80	int
;	O
packed_bits	int
|=	O
(	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
-	O
1	int
,	O
0	int
)	O
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
i_interlace	enum
)	O
packed_bits	int
|=	O
0x40	int
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
packed_bits	int
)	O
;	O
if	O
(	O
write_local_table	enum
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
1	int
<<	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
,	O
1	int
)	O
)	O
;	O
++	O
i	int
)	O
{	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
red	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
green	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
_plotter	pointer
->	O
i_colormap	array
[	O
i	int
]	O
.	O
blue	int
)	O
;	O
}	O
}	O
min_code_size	int
=	O
IMAX	O
(	O
_plotter	pointer
->	O
i_bit_depth	int
,	O
2	int
)	O
;	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
min_code_size	int
)	O
;	O
_pl_i_start_scan	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
{	O
rle_out	struct
*	O
rle	pointer
;	O
int	O
pixel	int
;	O
rle	pointer
=	O
_rle_init	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
,	O
_plotter	pointer
->	O
i_bit_depth	int
)	O
;	O
while	O
(	O
(	O
pixel	int
=	O
_pl_i_scan_pixel	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
)	O
!=	O
-	O
1	int
)	O
_rle_do_pixel	function
(	O
rle	pointer
,	O
pixel	int
)	O
;	O
_rle_terminate	function
(	O
rle	pointer
)	O
;	O
}	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
0	int
)	O
;	O
}	O
void	O
_pl_i_write_gif_trailer	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_write_byte	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
(	O
unsigned	O
char	O
)	O
';'	O
)	O
;	O
}	O
void	O
_pl_i_start_scan	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_plotter	pointer
->	O
i_pixels_scanned	int
=	O
0	int
;	O
_plotter	pointer
->	O
i_pass	int
=	O
0	int
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
x	double
=	O
0	int
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
=	O
0	int
;	O
}	O
int	O
_pl_i_scan_pixel	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
i_pixels_scanned	int
<	O
_plotter	pointer
->	O
i_num_pixels	int
)	O
{	O
miCanvas	struct
*	O
canvas	pointer
;	O
int	O
x	double
,	O
y	double
;	O
miPixel	struct
full_pixel	struct
;	O
int	O
pixel	int
;	O
canvas	pointer
=	O
(	O
miCanvas	struct
*	O
)	O
_plotter	pointer
->	O
i_canvas	pointer
;	O
x	double
=	O
_plotter	pointer
->	O
i_hot	struct
.	O
x	double
;	O
y	double
=	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
;	O
MI_GET_CANVAS_DRAWABLE_PIXEL	O
(	O
canvas	pointer
,	O
x	double
,	O
y	double
,	O
full_pixel	struct
)	O
pixel	int
=	O
full_pixel	struct
.	O
u	union
.	O
index	function
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
x	double
++	O
;	O
if	O
(	O
_plotter	pointer
->	O
i_hot	struct
.	O
x	double
==	O
_plotter	pointer
->	O
i_xn	int
)	O
{	O
_plotter	pointer
->	O
i_hot	struct
.	O
x	double
=	O
0	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_interlace	enum
==	O
false	int
)	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
++	O
;	O
else	O
{	O
switch	O
(	O
_plotter	pointer
->	O
i_pass	int
)	O
{	O
case	O
0	int
:	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
+=	O
8	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
>=	O
_plotter	pointer
->	O
i_yn	int
)	O
{	O
_plotter	pointer
->	O
i_pass	int
++	O
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
=	O
4	int
;	O
}	O
break	O
;	O
case	O
1	int
:	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
+=	O
8	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
>=	O
_plotter	pointer
->	O
i_yn	int
)	O
{	O
_plotter	pointer
->	O
i_pass	int
++	O
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
=	O
2	int
;	O
}	O
break	O
;	O
case	O
2	int
:	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
+=	O
4	int
;	O
if	O
(	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
>=	O
_plotter	pointer
->	O
i_yn	int
)	O
{	O
_plotter	pointer
->	O
i_pass	int
++	O
;	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
=	O
1	int
;	O
}	O
break	O
;	O
case	O
3	int
:	O
_plotter	pointer
->	O
i_hot	struct
.	O
y	double
+=	O
2	int
;	O
break	O
;	O
}	O
}	O
}	O
_plotter	pointer
->	O
i_pixels_scanned	int
++	O
;	O
return	O
pixel	int
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
void	O
_pl_i_write_short_int	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
unsigned	O
int	O
i	int
)	O
{	O
unsigned	O
char	O
bytes	array
[	O
2	int
]	O
;	O
bytes	array
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
i	int
&	O
0xff	int
)	O
;	O
bytes	array
[	O
1	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
i	int
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
_write_bytes	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
2	int
,	O
bytes	array
)	O
;	O
}	O
void	O
_pl_i_delete_image	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
miDeleteCanvas	O
(	O
(	O
miCanvas	struct
*	O
)	O
_plotter	pointer
->	O
i_canvas	pointer
)	O
;	O
_plotter	pointer
->	O
i_canvas	pointer
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
miDeletePaintedSet	O
(	O
(	O
miPaintedSet	struct
*	O
)	O
_plotter	pointer
->	O
i_painted_set	pointer
)	O
;	O
_plotter	pointer
->	O
i_painted_set	pointer
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
i_num_color_indices	int
=	O
0	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_pen_color_status	enum
=	O
false	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_fill_color_status	enum
=	O
false	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
i_bg_color_status	enum
=	O
false	int
;	O
}	O
static	O
bool	enum
same_colormap	function
(	O
plColor	struct
cmap1	array
[	O
256	int
]	O
,	O
plColor	struct
cmap2	array
[	O
256	int
]	O
,	O
int	O
num1	int
,	O
int	O
num2	int
)	O
{	O
int	O
i	int
;	O
if	O
(	O
num1	int
!=	O
num2	int
)	O
return	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num1	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
cmap1	array
[	O
i	int
]	O
.	O
red	int
!=	O
cmap2	array
[	O
i	int
]	O
.	O
red	int
)	O
||	O
(	O
cmap1	array
[	O
i	int
]	O
.	O
green	int
!=	O
cmap2	array
[	O
i	int
]	O
.	O
green	int
)	O
||	O
(	O
cmap1	array
[	O
i	int
]	O
.	O
blue	int
!=	O
cmap2	array
[	O
i	int
]	O
.	O
blue	int
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
