gsl_multilarge_nlinear_workspace	struct
*	O
gsl_multilarge_nlinear_alloc	function
(	O
const	O
gsl_multilarge_nlinear_type	struct
*	O
T	pointer
,	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"insufficient data points, n < p"	pointer
,	O
GSL_EINVAL	int
,	O
0	int
)	O
;	O
}	O
w	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_multilarge_nlinear_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
n	int
=	O
n	int
;	O
w	pointer
->	O
p	int
=	O
p	int
;	O
w	pointer
->	O
type	pointer
=	O
T	pointer
;	O
w	pointer
->	O
fdf	pointer
=	O
NULL	O
;	O
w	pointer
->	O
niter	long
=	O
0	int
;	O
w	pointer
->	O
params	pointer
=	O
*	O
params	pointer
;	O
if	O
(	O
w	pointer
->	O
params	pointer
.	O
trs	pointer
==	O
gsl_multilarge_nlinear_trs_cgst	pointer
)	O
{	O
w	pointer
->	O
params	pointer
.	O
solver	pointer
=	O
gsl_multilarge_nlinear_solver_none	pointer
;	O
}	O
w	pointer
->	O
x	double
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
x	double
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for x"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
f	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
f	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for f"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
dx	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
dx	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for dx"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
g	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
g	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for g"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
w	pointer
->	O
params	pointer
.	O
solver	pointer
==	O
gsl_multilarge_nlinear_solver_cholesky	pointer
||	O
w	pointer
->	O
params	pointer
.	O
solver	pointer
==	O
gsl_multilarge_nlinear_solver_mcholesky	pointer
)	O
{	O
w	pointer
->	O
JTJ	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
JTJ	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for JTJ"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
}	O
w	pointer
->	O
sqrt_wts_work	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
->	O
sqrt_wts_work	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for weights"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
state	pointer
=	O
(	O
T	pointer
->	O
alloc	pointer
)	O
(	O
&	O
(	O
w	pointer
->	O
params	pointer
)	O
,	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
w	pointer
->	O
state	pointer
==	O
0	int
)	O
{	O
gsl_multilarge_nlinear_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for state"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
return	O
w	pointer
;	O
}	O
void	O
gsl_multilarge_nlinear_free	function
(	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
state	pointer
)	O
(	O
w	pointer
->	O
type	pointer
->	O
free	function
)	O
(	O
w	pointer
->	O
state	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
dx	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
dx	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
x	double
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
x	double
)	O
;	O
if	O
(	O
w	pointer
->	O
f	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
f	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
sqrt_wts_work	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
sqrt_wts_work	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
g	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
g	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
JTJ	pointer
)	O
gsl_matrix_free	function
(	O
w	pointer
->	O
JTJ	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
gsl_multilarge_nlinear_parameters	struct
gsl_multilarge_nlinear_default_parameters	function
(	O
void	O
)	O
{	O
gsl_multilarge_nlinear_parameters	struct
params	pointer
;	O
params	pointer
.	O
trs	pointer
=	O
gsl_multilarge_nlinear_trs_lm	pointer
;	O
params	pointer
.	O
scale	pointer
=	O
gsl_multilarge_nlinear_scale_more	pointer
;	O
params	pointer
.	O
solver	pointer
=	O
gsl_multilarge_nlinear_solver_cholesky	pointer
;	O
params	pointer
.	O
fdtype	enum
=	O
GSL_MULTILARGE_NLINEAR_FWDIFF	int
;	O
params	pointer
.	O
factor_up	double
=	O
3.0	int
;	O
params	pointer
.	O
factor_down	double
=	O
2.0	int
;	O
params	pointer
.	O
avmax	double
=	O
0.75	int
;	O
params	pointer
.	O
h_df	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
params	pointer
.	O
h_fvv	double
=	O
0.01	int
;	O
params	pointer
.	O
max_iter	long
=	O
0	int
;	O
params	pointer
.	O
tol	double
=	O
1.0e-6	int
;	O
return	O
params	pointer
;	O
}	O
int	O
gsl_multilarge_nlinear_init	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
,	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
gsl_multilarge_nlinear_winit	function
(	O
x	double
,	O
NULL	O
,	O
fdf	pointer
,	O
w	pointer
)	O
;	O
}	O
int	O
gsl_multilarge_nlinear_winit	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
wts	pointer
,	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
,	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
f	pointer
->	O
size	long
;	O
if	O
(	O
n	int
!=	O
fdf	pointer
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
x	double
->	O
size	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
wts	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector length does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
fdf	pointer
->	O
nevalf	long
=	O
0	int
;	O
fdf	pointer
->	O
nevaldfu	long
=	O
0	int
;	O
fdf	pointer
->	O
nevaldf2	long
=	O
0	int
;	O
fdf	pointer
->	O
nevalfvv	long
=	O
0	int
;	O
w	pointer
->	O
fdf	pointer
=	O
fdf	pointer
;	O
gsl_vector_memcpy	function
(	O
w	pointer
->	O
x	double
,	O
x	double
)	O
;	O
w	pointer
->	O
niter	long
=	O
0	int
;	O
if	O
(	O
wts	pointer
)	O
{	O
w	pointer
->	O
sqrt_wts	pointer
=	O
w	pointer
->	O
sqrt_wts_work	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
wi	double
=	O
gsl_vector_get	function
(	O
wts	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
w	pointer
->	O
sqrt_wts	pointer
,	O
i	long
,	O
sqrt	function
(	O
wi	double
)	O
)	O
;	O
}	O
}	O
else	O
{	O
w	pointer
->	O
sqrt_wts	pointer
=	O
NULL	O
;	O
}	O
return	O
(	O
w	pointer
->	O
type	pointer
->	O
init	pointer
)	O
(	O
w	pointer
->	O
state	pointer
,	O
w	pointer
->	O
sqrt_wts	pointer
,	O
w	pointer
->	O
fdf	pointer
,	O
w	pointer
->	O
x	double
,	O
w	pointer
->	O
f	pointer
,	O
w	pointer
->	O
g	pointer
,	O
w	pointer
->	O
JTJ	pointer
)	O
;	O
}	O
}	O
int	O
gsl_multilarge_nlinear_iterate	function
(	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
(	O
w	pointer
->	O
type	pointer
->	O
iterate	pointer
)	O
(	O
w	pointer
->	O
state	pointer
,	O
w	pointer
->	O
sqrt_wts	pointer
,	O
w	pointer
->	O
fdf	pointer
,	O
w	pointer
->	O
x	double
,	O
w	pointer
->	O
f	pointer
,	O
w	pointer
->	O
g	pointer
,	O
w	pointer
->	O
JTJ	pointer
,	O
w	pointer
->	O
dx	pointer
)	O
;	O
w	pointer
->	O
niter	long
++	O
;	O
return	O
status	int
;	O
}	O
double	O
gsl_multilarge_nlinear_avratio	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
(	O
w	pointer
->	O
type	pointer
->	O
avratio	pointer
)	O
(	O
w	pointer
->	O
state	pointer
)	O
;	O
}	O
int	O
gsl_multilarge_nlinear_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
(	O
w	pointer
->	O
type	pointer
->	O
rcond	pointer
)	O
(	O
rcond	pointer
,	O
w	pointer
->	O
JTJ	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multilarge_nlinear_covar	function
(	O
gsl_matrix	struct
*	O
covar	pointer
,	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
covar	pointer
->	O
size1	long
!=	O
covar	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"covariance matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
covar	pointer
->	O
size1	long
!=	O
w	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"covariance matrix does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
(	O
w	pointer
->	O
type	pointer
->	O
covar	pointer
)	O
(	O
w	pointer
->	O
JTJ	pointer
,	O
covar	pointer
,	O
w	pointer
->	O
state	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_nlinear_driver	function
(	O
const	O
size_t	long
maxiter	long
,	O
const	O
double	O
xtol	double
,	O
const	O
double	O
gtol	double
,	O
const	O
double	O
ftol	double
,	O
void	O
(	O
*	O
callback	pointer
)	O
(	O
const	O
size_t	long
iter	long
,	O
void	O
*	O
params	pointer
,	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
,	O
void	O
*	O
callback_params	pointer
,	O
int	O
*	O
info	pointer
,	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
iter	long
=	O
0	int
;	O
if	O
(	O
callback	pointer
)	O
callback	pointer
(	O
iter	long
,	O
callback_params	pointer
,	O
w	pointer
)	O
;	O
do	O
{	O
status	int
=	O
gsl_multilarge_nlinear_iterate	function
(	O
w	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_ENOPROG	int
&&	O
iter	long
==	O
0	int
)	O
{	O
*	O
info	pointer
=	O
status	int
;	O
return	O
GSL_EMAXITER	int
;	O
}	O
++	O
iter	long
;	O
if	O
(	O
callback	pointer
)	O
callback	pointer
(	O
iter	long
,	O
callback_params	pointer
,	O
w	pointer
)	O
;	O
status	int
=	O
gsl_multilarge_nlinear_test	function
(	O
xtol	double
,	O
gtol	double
,	O
ftol	double
,	O
info	pointer
,	O
w	pointer
)	O
;	O
}	O
while	O
(	O
status	int
==	O
GSL_CONTINUE	int
&&	O
iter	long
<	O
maxiter	long
)	O
;	O
if	O
(	O
status	int
==	O
GSL_ETOLF	int
||	O
status	int
==	O
GSL_ETOLX	int
||	O
status	int
==	O
GSL_ETOLG	int
)	O
{	O
*	O
info	pointer
=	O
status	int
;	O
status	int
=	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
iter	long
>=	O
maxiter	long
&&	O
status	int
!=	O
GSL_SUCCESS	int
)	O
status	int
=	O
GSL_EMAXITER	int
;	O
return	O
status	int
;	O
}	O
const	O
char	O
*	O
gsl_multilarge_nlinear_name	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
type	pointer
->	O
name	pointer
;	O
}	O
gsl_vector	struct
*	O
gsl_multilarge_nlinear_position	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
x	double
;	O
}	O
gsl_vector	struct
*	O
gsl_multilarge_nlinear_residual	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
f	pointer
;	O
}	O
gsl_vector	struct
*	O
gsl_multilarge_nlinear_step	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
dx	pointer
;	O
}	O
size_t	long
gsl_multilarge_nlinear_niter	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
niter	long
;	O
}	O
const	O
char	O
*	O
gsl_multilarge_nlinear_trs_name	function
(	O
const	O
gsl_multilarge_nlinear_workspace	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
params	pointer
.	O
trs	pointer
->	O
name	pointer
;	O
}	O
int	O
gsl_multilarge_nlinear_eval_f	function
(	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_vector	struct
*	O
y	double
)	O
{	O
int	O
s	pointer
=	O
(	O
(	O
*	O
(	O
(	O
fdf	pointer
)	O
->	O
f	pointer
)	O
)	O
(	O
x	double
,	O
fdf	pointer
->	O
params	pointer
,	O
y	double
)	O
)	O
;	O
++	O
(	O
fdf	pointer
->	O
nevalf	long
)	O
;	O
if	O
(	O
swts	pointer
)	O
gsl_vector_mul	function
(	O
y	double
,	O
swts	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_multilarge_nlinear_eval_df	function
(	O
const	O
CBLAS_TRANSPOSE_t	enum
TransJ	enum
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
u	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
const	O
double	O
h	double
,	O
const	O
gsl_multilarge_nlinear_fdtype	enum
fdtype	enum
,	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
JTJ	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
fdf	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
fdf	pointer
->	O
p	int
;	O
if	O
(	O
u	pointer
!=	O
NULL	O
&&	O
(	O
(	O
TransJ	enum
==	O
CblasNoTrans	int
&&	O
u	pointer
->	O
size	long
!=	O
p	int
)	O
||	O
(	O
TransJ	enum
==	O
CblasTrans	int
&&	O
u	pointer
->	O
size	long
!=	O
n	int
)	O
)	O
)	O
{	O
GSL_ERROR	O
(	O
"u vector has wrong size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
v	pointer
!=	O
NULL	O
&&	O
(	O
(	O
TransJ	enum
==	O
CblasNoTrans	int
&&	O
v	pointer
->	O
size	long
!=	O
n	int
)	O
||	O
(	O
TransJ	enum
==	O
CblasTrans	int
&&	O
v	pointer
->	O
size	long
!=	O
p	int
)	O
)	O
)	O
{	O
GSL_ERROR	O
(	O
"v vector has wrong size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
JTJ	pointer
!=	O
NULL	O
&&	O
(	O
(	O
JTJ	pointer
->	O
size1	long
!=	O
p	int
)	O
||	O
(	O
JTJ	pointer
->	O
size2	long
!=	O
p	int
)	O
)	O
)	O
{	O
GSL_ERROR	O
(	O
"JTJ matrix has wrong size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
if	O
(	O
fdf	pointer
->	O
df	pointer
)	O
{	O
status	int
=	O
(	O
(	O
*	O
(	O
(	O
fdf	pointer
)	O
->	O
df	pointer
)	O
)	O
(	O
TransJ	enum
,	O
x	double
,	O
u	pointer
,	O
fdf	pointer
->	O
params	pointer
,	O
v	pointer
,	O
JTJ	pointer
)	O
)	O
;	O
if	O
(	O
v	pointer
)	O
++	O
(	O
fdf	pointer
->	O
nevaldfu	long
)	O
;	O
if	O
(	O
JTJ	pointer
)	O
++	O
(	O
fdf	pointer
->	O
nevaldf2	long
)	O
;	O
}	O
else	O
{	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multilarge_nlinear_eval_fvv	function
(	O
const	O
double	O
h	double
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
yvv	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
if	O
(	O
fdf	pointer
->	O
fvv	pointer
!=	O
NULL	O
)	O
{	O
status	int
=	O
(	O
(	O
*	O
(	O
(	O
fdf	pointer
)	O
->	O
fvv	pointer
)	O
)	O
(	O
x	double
,	O
v	pointer
,	O
fdf	pointer
->	O
params	pointer
,	O
yvv	pointer
)	O
)	O
;	O
++	O
(	O
fdf	pointer
->	O
nevalfvv	long
)	O
;	O
}	O
else	O
{	O
}	O
if	O
(	O
swts	pointer
)	O
gsl_vector_mul	function
(	O
yvv	pointer
,	O
swts	pointer
)	O
;	O
return	O
status	int
;	O
}	O
