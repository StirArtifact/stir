static	O
struct	O
timeval	struct
TIMEOUT	struct
=	O
{	O
25	int
,	O
0	int
}	O
;	O
extern	O
CLIENT	struct
*	O
simx_clnt	pointer
;	O
extern	O
bool_t	int
xdr_simx_lookup_complete_entity_type_result	function
(	O
register	O
XDR	struct
*	O
xdrs	pointer
,	O
simx_lookup_complete_entity_type_result	struct
*	O
objp	pointer
)	O
;	O
typedef	O
struct	O
_client_names_cache_entry	struct
{	O
dis_entity_type	struct
key	struct
;	O
simx_lookup_complete_entity_type_result	struct
result	char
;	O
struct	O
_client_names_cache_entry	struct
*	O
next	pointer
;	O
struct	O
_client_names_cache_entry	struct
*	O
prev	pointer
;	O
}	O
client_names_cache_entry	struct
;	O
static	O
client_names_cache_entry	struct
*	O
cache_list_head	pointer
=	O
0	int
,	O
*	O
cache_list_tail	pointer
=	O
0	int
;	O
static	O
int	O
cache_list_count	int
=	O
0	int
;	O
static	O
int	O
cache_list_max	int
=	O
32	int
;	O
int	O
SIMxLookupEntityName	function
(	O
dis_entity_type	struct
*	O
p	pointer
,	O
char	O
*	O
result	char
,	O
int	O
size	int
)	O
{	O
simx_lookup_entity_type_result	struct
res	struct
;	O
res	struct
.	O
value	int
=	O
NULL	O
;	O
if	O
(	O
clnt_call	O
(	O
simx_clnt	pointer
,	O
SIMxLookupEntityNameP	int
,	O
(	O
xdrproc_t	pointer
)	O
xdr_dis_entity_type	function
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
(	O
xdrproc_t	pointer
)	O
xdr_simx_lookup_entity_type_result	function
,	O
(	O
char	O
*	O
)	O
&	O
res	struct
,	O
TIMEOUT	struct
)	O
!=	O
RPC_SUCCESS	int
)	O
{	O
return	O
SIMx_TIMEOUT	int
;	O
}	O
strncpy	function
(	O
result	char
,	O
res	struct
.	O
value	int
,	O
size	int
)	O
;	O
free	function
(	O
res	struct
.	O
value	int
)	O
;	O
return	O
res	struct
.	O
status_code	enum
;	O
}	O
int	O
SIMxLookupEntityNames	function
(	O
dis_entity_type	struct
*	O
p	pointer
,	O
char	O
*	O
result	char
[	O
7	int
]	O
,	O
int	O
size	int
)	O
{	O
simx_lookup_complete_entity_type_result	struct
res	struct
;	O
client_names_cache_entry	struct
*	O
cp	pointer
;	O
for	O
(	O
cp	pointer
=	O
cache_list_head	pointer
;	O
cp	pointer
;	O
cp	pointer
=	O
cp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
memcmp	function
(	O
(	O
char	O
*	O
)	O
&	O
cp	pointer
->	O
key	struct
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
sizeof	O
(	O
cp	pointer
->	O
key	struct
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
cache_list_head	pointer
!=	O
cp	pointer
)	O
{	O
if	O
(	O
cache_list_tail	pointer
==	O
cp	pointer
)	O
{	O
cache_list_tail	pointer
=	O
cp	pointer
->	O
prev	pointer
;	O
}	O
if	O
(	O
cp	pointer
->	O
prev	pointer
)	O
{	O
cp	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
cp	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
cp	pointer
->	O
next	pointer
)	O
{	O
cp	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
cp	pointer
->	O
prev	pointer
;	O
}	O
cp	pointer
->	O
next	pointer
=	O
cache_list_head	pointer
;	O
cp	pointer
->	O
prev	pointer
=	O
0	int
;	O
cp	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
cp	pointer
;	O
cache_list_head	pointer
=	O
cp	pointer
;	O
}	O
res	struct
=	O
cp	pointer
->	O
result	char
;	O
strncpy	function
(	O
result	char
[	O
0	int
]	O
,	O
res	struct
.	O
kind_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
1	int
]	O
,	O
res	struct
.	O
domain_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
2	int
]	O
,	O
res	struct
.	O
country_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
3	int
]	O
,	O
res	struct
.	O
category_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
4	int
]	O
,	O
res	struct
.	O
subcategory_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
5	int
]	O
,	O
res	struct
.	O
specific_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
6	int
]	O
,	O
res	struct
.	O
extra_value	pointer
,	O
size	int
)	O
;	O
return	O
res	struct
.	O
status_code	enum
;	O
}	O
}	O
res	struct
.	O
status_code	enum
=	O
0	int
;	O
res	struct
.	O
kind_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
domain_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
country_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
category_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
subcategory_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
specific_value	pointer
=	O
NULL	O
;	O
res	struct
.	O
extra_value	pointer
=	O
NULL	O
;	O
if	O
(	O
clnt_call	O
(	O
simx_clnt	pointer
,	O
SIMxLookupEntityNamesP	int
,	O
(	O
xdrproc_t	pointer
)	O
xdr_dis_entity_type	function
,	O
(	O
char	O
*	O
)	O
p	pointer
,	O
(	O
xdrproc_t	pointer
)	O
xdr_simx_lookup_complete_entity_type_result	function
,	O
(	O
char	O
*	O
)	O
&	O
res	struct
,	O
TIMEOUT	struct
)	O
!=	O
RPC_SUCCESS	int
)	O
{	O
return	O
SIMx_TIMEOUT	int
;	O
}	O
strncpy	function
(	O
result	char
[	O
0	int
]	O
,	O
res	struct
.	O
kind_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
1	int
]	O
,	O
res	struct
.	O
domain_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
2	int
]	O
,	O
res	struct
.	O
country_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
3	int
]	O
,	O
res	struct
.	O
category_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
4	int
]	O
,	O
res	struct
.	O
subcategory_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
5	int
]	O
,	O
res	struct
.	O
specific_value	pointer
,	O
size	int
)	O
;	O
strncpy	function
(	O
result	char
[	O
6	int
]	O
,	O
res	struct
.	O
extra_value	pointer
,	O
size	int
)	O
;	O
if	O
(	O
cache_list_count	int
==	O
cache_list_max	int
)	O
{	O
cp	pointer
=	O
cache_list_tail	pointer
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
kind_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
domain_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
country_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
category_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
subcategory_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
specific_value	pointer
)	O
;	O
free	function
(	O
cp	pointer
->	O
result	char
.	O
extra_value	pointer
)	O
;	O
}	O
else	O
{	O
cp	pointer
=	O
(	O
client_names_cache_entry	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
client_names_cache_entry	struct
)	O
)	O
;	O
cp	pointer
->	O
next	pointer
=	O
0	int
;	O
cp	pointer
->	O
prev	pointer
=	O
cache_list_tail	pointer
;	O
cache_list_tail	pointer
=	O
cp	pointer
;	O
++	O
cache_list_count	int
;	O
}	O
cp	pointer
->	O
key	struct
=	O
*	O
p	pointer
;	O
cp	pointer
->	O
result	char
=	O
res	struct
;	O
return	O
res	struct
.	O
status_code	enum
;	O
}	O
