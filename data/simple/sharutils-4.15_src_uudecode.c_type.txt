static	O
char	O
const	O
cright_years_z	array
[	O
]	O
=	O
"1994-2015"	pointer
;	O
struct	O
passwd	struct
*	O
getpwnam	function
(	O
)	O
;	O
static	O
uudecode_exit_code_t	enum
read_stduu	function
(	O
const	O
char	O
*	O
inname	pointer
,	O
const	O
char	O
*	O
outname	pointer
)	O
;	O
static	O
uudecode_exit_code_t	enum
read_base64	function
(	O
const	O
char	O
*	O
inname	pointer
,	O
const	O
char	O
*	O
outname	pointer
)	O
;	O
static	O
uudecode_exit_code_t	enum
decode	function
(	O
const	O
char	O
*	O
in_name	pointer
)	O
;	O
static	O
uudecode_exit_code_t	enum
read_stduu	function
(	O
char	O
const	O
*	O
inname	pointer
,	O
char	O
const	O
*	O
outname	pointer
)	O
{	O
char	O
buf	array
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
n	int
;	O
char	O
*	O
p	pointer
=	O
buf	array
;	O
if	O
(	O
fgets	function
(	O
(	O
char	O
*	O
)	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Short file"	pointer
)	O
,	O
inname	pointer
)	O
;	O
n	int
=	O
DEC	O
(	O
*	O
p	pointer
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
break	O
;	O
for	O
(	O
++	O
p	pointer
;	O
n	int
>=	O
3	int
;	O
p	pointer
+=	O
4	int
,	O
n	int
-=	O
3	int
)	O
{	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	pointer
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
1	int
]	O
)	O
<<	O
4	int
|	O
DEC	O
(	O
p	pointer
[	O
2	int
]	O
)	O
>>	O
2	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
2	int
]	O
)	O
<<	O
6	int
|	O
DEC	O
(	O
p	pointer
[	O
3	int
]	O
)	O
)	O
;	O
}	O
switch	O
(	O
n	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	pointer
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	pointer
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	pointer
[	O
1	int
]	O
)	O
<<	O
4	int
|	O
DEC	O
(	O
p	pointer
[	O
2	int
]	O
)	O
>>	O
2	int
)	O
;	O
break	O
;	O
}	O
}	O
do	O
{	O
if	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
buf	array
[	O
0	int
]	O
!=	O
'e'	O
)	O
break	O
;	O
if	O
(	O
buf	array
[	O
1	int
]	O
!=	O
'n'	O
)	O
break	O
;	O
if	O
(	O
buf	array
[	O
2	int
]	O
!=	O
'd'	O
)	O
break	O
;	O
if	O
(	O
buf	array
[	O
3	int
]	O
==	O
'\n'	O
)	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
if	O
(	O
buf	array
[	O
3	int
]	O
!=	O
'\r'	O
)	O
break	O
;	O
if	O
(	O
buf	array
[	O
4	int
]	O
==	O
'\n'	O
)	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
while	O
(	O
0	int
)	O
;	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: No `end' line"	pointer
)	O
,	O
inname	pointer
)	O
;	O
return	O
UUDECODE_EXIT_INVALID	int
;	O
}	O
static	O
uudecode_exit_code_t	enum
read_base64	function
(	O
char	O
const	O
*	O
inname	pointer
,	O
char	O
const	O
*	O
outname	pointer
)	O
{	O
char	O
buf_in	array
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
char	O
buf_out	array
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
struct	O
base64_decode_context	struct
ctx	pointer
;	O
base64_decode_ctx_init	function
(	O
&	O
ctx	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
outlen	long
=	O
sizeof	O
(	O
buf_out	array
)	O
;	O
if	O
(	O
fgets	function
(	O
buf_in	array
,	O
sizeof	O
(	O
buf_in	array
)	O
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
fserr	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Short file"	pointer
)	O
,	O
inname	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
buf_in	array
,	O
"===="	pointer
,	O
4	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
base64_decode_ctx	function
(	O
&	O
ctx	pointer
,	O
buf_in	array
,	O
strlen	function
(	O
buf_in	array
)	O
,	O
buf_out	array
,	O
&	O
outlen	long
)	O
)	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: invalid input"	pointer
)	O
,	O
inname	pointer
)	O
;	O
if	O
(	O
fwrite	function
(	O
buf_out	array
,	O
outlen	long
,	O
1	int
,	O
stdout	pointer
)	O
!=	O
1	int
)	O
fserr	function
(	O
UUDECODE_EXIT_NO_OUTPUT	int
,	O
"fwrite"	pointer
,	O
outname	pointer
)	O
;	O
}	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
static	O
char	O
const	O
*	O
get_env_homedir	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
res	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
res	pointer
==	O
NULL	O
)	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"cannot expand $HOME"	pointer
)	O
)	O
;	O
return	O
res	pointer
;	O
}	O
static	O
char	O
*	O
expand_tilde	function
(	O
char	O
*	O
buf	array
)	O
{	O
char	O
*	O
outname	pointer
;	O
char	O
const	O
*	O
homedir	pointer
;	O
if	O
(	O
buf	array
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
homedir	pointer
=	O
get_env_homedir	function
(	O
)	O
;	O
buf	array
+=	O
2	int
;	O
}	O
else	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
char	O
*	O
pz	pointer
=	O
buf	array
+	O
1	int
;	O
while	O
(	O
*	O
pz	pointer
!=	O
'/'	O
)	O
++	O
pz	pointer
;	O
if	O
(	O
*	O
pz	pointer
==	O
NUL	char
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: Illegal file name: %s"	pointer
)	O
,	O
program_name	pointer
,	O
buf	array
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
pz	pointer
++	O
=	O
NUL	char
;	O
pw	pointer
=	O
getpwnam	function
(	O
buf	array
+	O
1	int
)	O
;	O
if	O
(	O
pw	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"No user '%s'"	pointer
)	O
,	O
buf	array
+	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
homedir	pointer
=	O
pw	pointer
->	O
pw_dir	pointer
;	O
buf	array
=	O
pz	pointer
;	O
}	O
{	O
size_t	long
sz	long
=	O
strlen	function
(	O
homedir	pointer
)	O
+	O
strlen	function
(	O
buf	array
)	O
+	O
2	int
;	O
outname	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
outname	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UUDECODE_EXIT_NO_MEM	int
,	O
"malloc"	pointer
,	O
_	O
(	O
"output file name"	pointer
)	O
)	O
;	O
}	O
sprintf	function
(	O
outname	pointer
,	O
"%s/%s"	pointer
,	O
homedir	pointer
,	O
buf	array
)	O
;	O
return	O
outname	pointer
;	O
}	O
static	O
uudecode_exit_code_t	enum
reopen_output	function
(	O
char	O
const	O
*	O
outname	pointer
,	O
int	O
mode	int
)	O
{	O
if	O
(	O
!	O
access	function
(	O
outname	pointer
,	O
F_OK	int
)	O
)	O
{	O
struct	O
stat	struct
attr	struct
;	O
if	O
(	O
lstat	function
(	O
outname	pointer
,	O
&	O
attr	struct
)	O
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"cannot access %s"	pointer
)	O
,	O
outname	pointer
)	O
;	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
}	O
{	O
FILE	struct
*	O
fp	pointer
=	O
freopen	function
(	O
outname	pointer
,	O
FOPEN_WRITE_BINARY	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
stdout	pointer
)	O
fserr	function
(	O
UUDECODE_EXIT_NO_OUTPUT	int
,	O
"freopen"	pointer
,	O
outname	pointer
)	O
;	O
}	O
if	O
(	O
UU_CHMOD	O
(	O
outname	pointer
,	O
STDOUT_FILENO	int
,	O
mode	int
)	O
!=	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"chmod of %s"	pointer
)	O
,	O
outname	pointer
)	O
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
IGNORE_CHMOD	O
)	O
)	O
{	O
char	O
const	O
*	O
p	pointer
=	O
getenv	function
(	O
"POSIXLY_CORRECT"	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
}	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
static	O
void	O
decode_fname	function
(	O
char	O
*	O
buf	array
)	O
{	O
size_t	long
sz	long
=	O
strlen	function
(	O
buf	array
)	O
;	O
char	O
*	O
out	pointer
=	O
malloc	function
(	O
2	int
*	O
sz	long
+	O
4	int
)	O
;	O
if	O
(	O
sz	long
==	O
0	int
)	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"output name is empty"	pointer
)	O
)	O
;	O
{	O
char	O
*	O
tmp	pointer
=	O
out	pointer
+	O
sz	long
+	O
4	int
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UUDECODE_EXIT_NO_MEM	int
,	O
"malloc"	pointer
,	O
_	O
(	O
"output file name"	pointer
)	O
)	O
;	O
memcpy	function
(	O
out	pointer
,	O
buf	array
,	O
sz	long
)	O
;	O
out	pointer
[	O
sz	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
base64_decode	O
(	O
out	pointer
,	O
sz	long
,	O
tmp	pointer
,	O
&	O
sz	long
)	O
)	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"invalid base64 encoded name: %s"	pointer
)	O
,	O
buf	array
)	O
;	O
memcpy	function
(	O
buf	array
,	O
tmp	pointer
,	O
sz	long
)	O
;	O
buf	array
[	O
sz	long
]	O
=	O
'\0'	O
;	O
}	O
free	function
(	O
out	pointer
)	O
;	O
}	O
static	O
uudecode_exit_code_t	enum
decode	function
(	O
char	O
const	O
*	O
inname	pointer
)	O
{	O
char	O
*	O
pz	pointer
;	O
int	O
mode	int
;	O
char	O
buf	array
[	O
2	int
*	O
BUFSIZ	int
]	O
=	O
{	O
NUL	char
}	O
;	O
char	O
*	O
outname	pointer
;	O
bool	bool
allocated_outname	bool
=	O
false	int
;	O
bool	bool
encoded_fname	bool
=	O
false	int
;	O
uudecode_exit_code_t	enum
rval	enum
;	O
bool	bool
do_base64	bool
=	O
false	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
{	O
bad_beginning	O
:	O
die	function
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Invalid or missing 'begin' line\n"	pointer
)	O
,	O
inname	pointer
)	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
buf	array
,	O
"begin"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
scan	pointer
=	O
buf	array
+	O
5	int
;	O
if	O
(	O
*	O
scan	pointer
==	O
'-'	O
)	O
{	O
static	O
char	O
const	O
base64	array
[	O
]	O
=	O
"ase64"	pointer
;	O
static	O
char	O
const	O
encoded	array
[	O
]	O
=	O
"encoded"	pointer
;	O
check_begin_option	O
:	O
if	O
(	O
*	O
++	O
scan	pointer
==	O
'b'	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
scan	pointer
+	O
1	int
,	O
base64	array
,	O
sizeof	O
(	O
base64	array
)	O
-	O
1	int
)	O
!=	O
0	int
)	O
goto	O
bad_beginning	O
;	O
if	O
(	O
do_base64	bool
)	O
goto	O
bad_beginning	O
;	O
do_base64	bool
=	O
true	int
;	O
scan	pointer
+=	O
sizeof	O
(	O
base64	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
strncmp	function
(	O
scan	pointer
,	O
encoded	array
,	O
sizeof	O
(	O
encoded	array
)	O
-	O
1	int
)	O
!=	O
0	int
)	O
goto	O
bad_beginning	O
;	O
if	O
(	O
encoded_fname	bool
)	O
goto	O
bad_beginning	O
;	O
encoded_fname	bool
=	O
true	int
;	O
scan	pointer
+=	O
sizeof	O
(	O
encoded	array
)	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
scan	pointer
)	O
{	O
case	O
' '	O
:	O
break	O
;	O
case	O
'-'	O
:	O
goto	O
check_begin_option	O
;	O
default	O
:	O
goto	O
bad_beginning	O
;	O
}	O
}	O
if	O
(	O
sscanf	function
(	O
scan	pointer
,	O
" %o %[^\n]"	pointer
,	O
&	O
mode	int
,	O
buf	array
)	O
==	O
2	int
)	O
break	O
;	O
goto	O
bad_beginning	O
;	O
}	O
}	O
if	O
(	O
HAVE_OPT	O
(	O
OUTPUT_FILE	O
)	O
)	O
outname	pointer
=	O
(	O
char	O
*	O
)	O
OPT_ARG	O
(	O
OUTPUT_FILE	O
)	O
;	O
else	O
{	O
if	O
(	O
encoded_fname	bool
)	O
decode_fname	function
(	O
buf	array
)	O
;	O
if	O
(	O
buf	array
[	O
0	int
]	O
!=	O
'~'	O
)	O
outname	pointer
=	O
buf	array
;	O
else	O
{	O
outname	pointer
=	O
expand_tilde	function
(	O
buf	array
)	O
;	O
if	O
(	O
outname	pointer
==	O
NULL	O
)	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
allocated_outname	bool
=	O
true	int
;	O
}	O
pz	pointer
=	O
outname	pointer
+	O
strlen	function
(	O
outname	pointer
)	O
;	O
while	O
(	O
(	O
pz	pointer
>	O
outname	pointer
)	O
&&	O
isspace	function
(	O
(	O
int	O
)	O
pz	pointer
[	O
-	O
1	int
]	O
)	O
)	O
pz	pointer
--	O
;	O
*	O
pz	pointer
=	O
NUL	char
;	O
}	O
if	O
(	O
(	O
strcmp	function
(	O
outname	pointer
,	O
"/dev/stdout"	pointer
)	O
!=	O
0	int
)	O
&&	O
(	O
strcmp	function
(	O
outname	pointer
,	O
"-"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
rval	enum
=	O
reopen_output	function
(	O
outname	pointer
,	O
mode	int
)	O
;	O
if	O
(	O
rval	enum
!=	O
UUDECODE_EXIT_SUCCESS	int
)	O
goto	O
fail_return	O
;	O
}	O
if	O
(	O
do_base64	bool
)	O
rval	enum
=	O
read_base64	function
(	O
inname	pointer
,	O
outname	pointer
)	O
;	O
else	O
rval	enum
=	O
read_stduu	function
(	O
inname	pointer
,	O
outname	pointer
)	O
;	O
if	O
(	O
(	O
rval	enum
==	O
UUDECODE_EXIT_SUCCESS	int
)	O
&&	O
(	O
ferror	function
(	O
stdout	pointer
)	O
||	O
fflush	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: Write error"	pointer
)	O
,	O
outname	pointer
)	O
;	O
rval	enum
=	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
fail_return	O
:	O
if	O
(	O
allocated_outname	bool
)	O
free	function
(	O
outname	pointer
)	O
;	O
return	O
rval	enum
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
const	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
uudecode_exit_code_t	enum
exit_status	enum
=	O
UUDECODE_EXIT_SUCCESS	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
{	O
int	O
ct	int
=	O
optionProcess	function
(	O
&	O
uudecodeOptions	struct
,	O
argc	int
,	O
(	O
char	O
*	O
*	O
)	O
(	O
void	O
*	O
)	O
argv	pointer
)	O
;	O
argc	int
-=	O
ct	int
;	O
argv	pointer
+=	O
ct	int
;	O
}	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
exit_status	enum
=	O
decode	function
(	O
_	O
(	O
"standard input"	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
HAVE_OPT	O
(	O
OUTPUT_FILE	O
)	O
)	O
{	O
usage_message	function
(	O
_	O
(	O
"You cannot specify an output file when processing\nmultiple input files.\n"	pointer
)	O
)	O
;	O
}	O
case	O
1	int
:	O
while	O
(	O
--	O
argc	int
>=	O
0	int
)	O
{	O
char	O
const	O
*	O
f	pointer
=	O
*	O
(	O
argv	pointer
++	O
)	O
;	O
if	O
(	O
freopen	function
(	O
f	pointer
,	O
"r"	pointer
,	O
stdin	pointer
)	O
!=	O
NULL	O
)	O
{	O
exit_status	enum
|=	O
decode	function
(	O
f	pointer
)	O
;	O
}	O
else	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
f	pointer
)	O
;	O
exit_status	enum
|=	O
UUDECODE_EXIT_NO_INPUT	int
;	O
}	O
}	O
}	O
exit	function
(	O
exit_status	enum
)	O
;	O
}	O
