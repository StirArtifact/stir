WGET_GCC_NONNULL_ALL	O
static	O
int	O
compare_pin	function
(	O
wget_hpkp_pin	struct
*	O
p1	pointer
,	O
wget_hpkp_pin	struct
*	O
p2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
strcmp	function
(	O
p1	pointer
->	O
hash_type	pointer
,	O
p2	pointer
->	O
hash_type	pointer
)	O
)	O
)	O
return	O
n	long
;	O
if	O
(	O
p1	pointer
->	O
pinsize	long
<	O
p2	pointer
->	O
pinsize	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p1	pointer
->	O
pinsize	long
>	O
p2	pointer
->	O
pinsize	long
)	O
return	O
1	int
;	O
return	O
memcmp	function
(	O
p1	pointer
->	O
pin	pointer
,	O
p2	pointer
->	O
pin	pointer
,	O
p1	pointer
->	O
pinsize	long
)	O
;	O
}	O
static	O
void	O
hpkp_pin_free	function
(	O
void	O
*	O
pin	pointer
)	O
{	O
wget_hpkp_pin	struct
*	O
p	pointer
=	O
pin	pointer
;	O
if	O
(	O
p	pointer
)	O
{	O
xfree	O
(	O
p	pointer
->	O
hash_type	pointer
)	O
;	O
xfree	O
(	O
p	pointer
->	O
pin	pointer
)	O
;	O
xfree	O
(	O
p	pointer
->	O
pin_b64	pointer
)	O
;	O
xfree	O
(	O
p	pointer
)	O
;	O
}	O
}	O
void	O
wget_hpkp_pin_add	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
const	O
char	O
*	O
pin_type	pointer
,	O
const	O
char	O
*	O
pin_b64	pointer
)	O
{	O
wget_hpkp_pin	struct
*	O
pin	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_hpkp_pin	struct
)	O
)	O
;	O
size_t	long
len_b64	long
=	O
strlen	function
(	O
pin_b64	pointer
)	O
;	O
pin	pointer
->	O
hash_type	pointer
=	O
wget_strdup	function
(	O
pin_type	pointer
)	O
;	O
pin	pointer
->	O
pin_b64	pointer
=	O
wget_strdup	function
(	O
pin_b64	pointer
)	O
;	O
pin	pointer
->	O
pin	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
wget_base64_decode_alloc	function
(	O
pin_b64	pointer
,	O
len_b64	long
,	O
&	O
pin	pointer
->	O
pinsize	long
)	O
;	O
if	O
(	O
!	O
hpkp	pointer
->	O
pins	pointer
)	O
{	O
hpkp	pointer
->	O
pins	pointer
=	O
wget_vector_create	function
(	O
5	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
compare_pin	function
)	O
;	O
wget_vector_set_destructor	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
hpkp_pin_free	function
)	O
;	O
}	O
wget_vector_add	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
pin	pointer
)	O
;	O
}	O
void	O
wget_hpkp_free	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
if	O
(	O
hpkp	pointer
)	O
{	O
xfree	O
(	O
hpkp	pointer
->	O
host	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
hpkp	pointer
->	O
pins	pointer
)	O
;	O
xfree	O
(	O
hpkp	pointer
)	O
;	O
}	O
}	O
wget_hpkp	struct
*	O
wget_hpkp_new	function
(	O
void	O
)	O
{	O
wget_hpkp	struct
*	O
hpkp	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_hpkp	struct
)	O
)	O
;	O
hpkp	pointer
->	O
created	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
return	O
hpkp	pointer
;	O
}	O
void	O
wget_hpkp_set_host	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
const	O
char	O
*	O
host	pointer
)	O
{	O
xfree	O
(	O
hpkp	pointer
->	O
host	pointer
)	O
;	O
hpkp	pointer
->	O
host	pointer
=	O
wget_strdup	function
(	O
host	pointer
)	O
;	O
}	O
void	O
wget_hpkp_set_maxage	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
time_t	long
maxage	long
)	O
{	O
int64_t	long
now	long
;	O
if	O
(	O
maxage	long
<=	O
0	int
||	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
||	O
(	O
now	long
=	O
time	struct
(	O
NULL	O
)	O
)	O
<	O
0	int
||	O
now	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
{	O
hpkp	pointer
->	O
maxage	long
=	O
0	int
;	O
hpkp	pointer
->	O
expires	long
=	O
0	int
;	O
}	O
else	O
{	O
hpkp	pointer
->	O
maxage	long
=	O
maxage	long
;	O
hpkp	pointer
->	O
expires	long
=	O
now	long
+	O
maxage	long
;	O
}	O
}	O
void	O
wget_hpkp_set_include_subdomains	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
bool	bool
include_subdomains	int
)	O
{	O
hpkp	pointer
->	O
include_subdomains	int
=	O
include_subdomains	int
;	O
}	O
int	O
wget_hpkp_get_n_pins	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
return	O
wget_vector_size	function
(	O
hpkp	pointer
->	O
pins	pointer
)	O
;	O
}	O
void	O
wget_hpkp_get_pins_b64	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
const	O
char	O
*	O
*	O
pin_types	pointer
,	O
const	O
char	O
*	O
*	O
pins_b64	pointer
)	O
{	O
int	O
i	int
,	O
n_pins	int
;	O
n_pins	int
=	O
wget_vector_size	function
(	O
hpkp	pointer
->	O
pins	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_pins	int
;	O
i	int
++	O
)	O
{	O
wget_hpkp_pin	struct
*	O
pin	pointer
=	O
(	O
wget_hpkp_pin	struct
*	O
)	O
wget_vector_get	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
i	int
)	O
;	O
pin_types	pointer
[	O
i	int
]	O
=	O
pin	pointer
->	O
hash_type	pointer
;	O
pins_b64	pointer
[	O
i	int
]	O
=	O
pin	pointer
->	O
pin_b64	pointer
;	O
}	O
}	O
void	O
wget_hpkp_get_pins	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
,	O
const	O
char	O
*	O
*	O
pin_types	pointer
,	O
size_t	long
*	O
sizes	pointer
,	O
const	O
void	O
*	O
*	O
pins	pointer
)	O
{	O
int	O
i	int
,	O
n_pins	int
;	O
n_pins	int
=	O
wget_vector_size	function
(	O
hpkp	pointer
->	O
pins	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_pins	int
;	O
i	int
++	O
)	O
{	O
wget_hpkp_pin	struct
*	O
pin	pointer
=	O
(	O
wget_hpkp_pin	struct
*	O
)	O
wget_vector_get	function
(	O
hpkp	pointer
->	O
pins	pointer
,	O
i	int
)	O
;	O
pin_types	pointer
[	O
i	int
]	O
=	O
pin	pointer
->	O
hash_type	pointer
;	O
sizes	pointer
[	O
i	int
]	O
=	O
pin	pointer
->	O
pinsize	long
;	O
pins	pointer
[	O
i	int
]	O
=	O
pin	pointer
->	O
pin	pointer
;	O
}	O
}	O
const	O
char	O
*	O
wget_hpkp_get_host	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
return	O
hpkp	pointer
->	O
host	pointer
;	O
}	O
time_t	long
wget_hpkp_get_maxage	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
return	O
hpkp	pointer
->	O
maxage	long
;	O
}	O
bool	bool
wget_hpkp_get_include_subdomains	function
(	O
wget_hpkp	struct
*	O
hpkp	pointer
)	O
{	O
return	O
hpkp	pointer
->	O
include_subdomains	int
;	O
}	O
