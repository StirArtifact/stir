bool	enum
check	function
(	O
void	O
)	O
{	O
struct	O
sym	struct
*	O
sp	pointer
,	O
*	O
ivp	pointer
,	O
*	O
prevp	pointer
;	O
struct	O
prt	struct
*	O
pp	pointer
;	O
prevp	pointer
=	O
NULL	O
;	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
;	O
sp	pointer
!=	O
NULL	O
;	O
sp	pointer
=	O
sp	pointer
->	O
sy_link	pointer
)	O
{	O
if	O
(	O
strncmp	function
(	O
sp	pointer
->	O
sy_name	array
,	O
"(indep)"	pointer
,	O
NAMMAX	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
prevp	pointer
==	O
NULL	O
)	O
symtab	pointer
=	O
sp	pointer
->	O
sy_link	pointer
;	O
else	O
prevp	pointer
->	O
sy_link	pointer
=	O
sp	pointer
->	O
sy_link	pointer
;	O
sfree	function
(	O
sp	pointer
)	O
;	O
break	O
;	O
}	O
prevp	pointer
=	O
sp	pointer
;	O
}	O
ivp	pointer
=	O
prevp	pointer
=	O
NULL	O
;	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
;	O
sp	pointer
!=	O
NULL	O
;	O
sp	pointer
=	O
sp	pointer
->	O
sy_link	pointer
)	O
{	O
if	O
(	O
!	O
(	O
sp	pointer
->	O
sy_flags	int
&	O
SF_DEPV	O
)	O
)	O
{	O
if	O
(	O
ivp	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: both `%.*s' and `%.*s' are independent\n"	pointer
,	O
progname	pointer
,	O
NAMMAX	int
,	O
sp	pointer
->	O
sy_name	array
,	O
NAMMAX	int
,	O
ivp	pointer
->	O
sy_name	array
)	O
;	O
return	O
false	int
;	O
}	O
ivp	pointer
=	O
sp	pointer
;	O
}	O
if	O
(	O
ivp	pointer
==	O
NULL	O
)	O
prevp	pointer
=	O
sp	pointer
;	O
}	O
if	O
(	O
ivp	pointer
==	O
NULL	O
)	O
{	O
ivp	pointer
=	O
salloc	function
(	O
)	O
;	O
strncpy	function
(	O
ivp	pointer
->	O
sy_name	array
,	O
"(indep)"	pointer
,	O
NAMMAX	int
)	O
;	O
}	O
else	O
if	O
(	O
prevp	pointer
!=	O
NULL	O
)	O
{	O
prevp	pointer
->	O
sy_link	pointer
=	O
ivp	pointer
->	O
sy_link	pointer
;	O
ivp	pointer
->	O
sy_link	pointer
=	O
symtab	pointer
;	O
symtab	pointer
=	O
ivp	pointer
;	O
}	O
if	O
(	O
!	O
sawprint	enum
)	O
{	O
for	O
(	O
pp	pointer
=	O
pqueue	pointer
;	O
pp	pointer
!=	O
NULL	O
;	O
pp	pointer
=	O
pp	pointer
->	O
pr_link	pointer
)	O
if	O
(	O
pp	pointer
->	O
pr_sym	pointer
==	O
ivp	pointer
)	O
goto	O
found	O
;	O
pp	pointer
=	O
palloc	function
(	O
)	O
;	O
pp	pointer
->	O
pr_link	pointer
=	O
pqueue	pointer
;	O
pqueue	pointer
=	O
pp	pointer
;	O
pp	pointer
->	O
pr_sym	pointer
=	O
ivp	pointer
;	O
}	O
found	O
:	O
ivp	pointer
->	O
sy_expr	pointer
=	O
&	O
exprone	struct
;	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
;	O
sp	pointer
!=	O
NULL	O
;	O
sp	pointer
=	O
sp	pointer
->	O
sy_link	pointer
)	O
{	O
switch	O
(	O
sp	pointer
->	O
sy_flags	int
&	O
SF_DEPV	O
)	O
{	O
case	O
SF_INIT	int
:	O
sp	pointer
->	O
sy_expr	pointer
=	O
&	O
exprzero	struct
;	O
sp	pointer
->	O
sy_flags	int
|=	O
SF_ISEQN	int
;	O
break	O
;	O
case	O
SF_ISEQN	int
:	O
sp	pointer
->	O
sy_value	double
=	O
0	int
;	O
sp	pointer
->	O
sy_flags	int
|=	O
SF_INIT	int
;	O
break	O
;	O
}	O
}	O
dqueue	pointer
=	O
symtab	pointer
->	O
sy_link	pointer
;	O
return	O
true	int
;	O
}	O
void	O
defalt	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
sawfrom	enum
)	O
tfrom	double
=	O
tstart	double
;	O
if	O
(	O
!	O
sawevery	enum
)	O
tevery	int
=	O
1	int
;	O
if	O
(	O
tstart	double
>	O
tstop	double
&&	O
tstep	double
>	O
0	int
)	O
tstep	double
=	O
-	O
tstep	double
;	O
else	O
if	O
(	O
tstart	double
<	O
tstop	double
&&	O
tstep	double
<	O
0	int
)	O
tstep	double
=	O
-	O
tstep	double
;	O
printnum	enum
=	O
false	int
;	O
}	O
void	O
field	function
(	O
void	O
)	O
{	O
for	O
(	O
fsp	pointer
=	O
symtab	pointer
->	O
sy_link	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
fsp	pointer
->	O
sy_prime	double
=	O
eval	function
(	O
fsp	pointer
->	O
sy_expr	pointer
)	O
;	O
}	O
void	O
panic	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s panic: %s\n"	pointer
,	O
progname	pointer
,	O
s	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
panicn	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
int	O
n	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s panic: "	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
n	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
printq	function
(	O
void	O
)	O
{	O
double	O
f	double
=	O
0.0	int
;	O
double	O
t	double
;	O
struct	O
prt	struct
*	O
pp	pointer
;	O
t	double
=	O
symtab	pointer
->	O
sy_value	double
;	O
if	O
(	O
!	O
printnum	enum
&&	O
PRFROM	O
)	O
printnum	enum
=	O
true	int
;	O
if	O
(	O
(	O
(	O
it	long
%	O
tevery	int
==	O
0	int
)	O
&&	O
printnum	enum
)	O
||	O
LASTVAL	O
)	O
{	O
pp	pointer
=	O
pqueue	pointer
;	O
if	O
(	O
pp	pointer
!=	O
NULL	O
)	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
pp	pointer
->	O
pr_which	enum
)	O
{	O
case	O
P_VALUE	int
:	O
f	double
=	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_value	double
;	O
break	O
;	O
case	O
P_PRIME	int
:	O
f	double
=	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_prime	double
;	O
break	O
;	O
case	O
P_ACERR	int
:	O
f	double
=	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_acerr	double
;	O
break	O
;	O
case	O
P_ABERR	int
:	O
f	double
=	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_aberr	double
;	O
break	O
;	O
case	O
P_SSERR	int
:	O
f	double
=	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_sserr	double
;	O
break	O
;	O
default	O
:	O
panicn	function
(	O
"bad cell spec (%d) in printq()"	pointer
,	O
(	O
int	O
)	O
(	O
pp	pointer
->	O
pr_which	enum
)	O
)	O
;	O
break	O
;	O
}	O
prval	function
(	O
f	double
)	O
;	O
pp	pointer
=	O
pp	pointer
->	O
pr_link	pointer
;	O
if	O
(	O
pp	pointer
==	O
NULL	O
)	O
break	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
it	long
==	O
LONGMAX	O
)	O
it	long
=	O
0	int
;	O
}	O
void	O
prval	function
(	O
double	O
x	double
)	O
{	O
if	O
(	O
prec	int
<	O
0	int
)	O
{	O
char	O
outbuf	array
[	O
20	int
]	O
;	O
if	O
(	O
x	double
<	O
0	int
)	O
{	O
putchar	function
(	O
'-'	O
)	O
;	O
x	double
=	O
-	O
x	double
;	O
}	O
sprintf	function
(	O
outbuf	array
,	O
"%.7g"	pointer
,	O
x	double
)	O
;	O
if	O
(	O
*	O
outbuf	array
==	O
'.'	O
)	O
putchar	function
(	O
'0'	O
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
outbuf	array
)	O
;	O
}	O
else	O
printf	function
(	O
"%*.*e"	pointer
,	O
fwd	int
,	O
prec	int
,	O
x	double
)	O
;	O
}	O
void	O
rterror	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
fsp	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
progname	pointer
,	O
s	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s while calculating %.*s'\n"	pointer
,	O
progname	pointer
,	O
s	pointer
,	O
NAMMAX	int
,	O
fsp	pointer
->	O
sy_name	array
)	O
;	O
longjmp	function
(	O
mark	array
,	O
1	int
)	O
;	O
}	O
}	O
void	O
rterrors	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
fsp	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
s	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" while calculating %.*s'\n"	pointer
,	O
NAMMAX	int
,	O
fsp	pointer
->	O
sy_name	array
)	O
;	O
longjmp	function
(	O
mark	array
,	O
1	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
s	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
void	O
rtsquawks	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
fsp	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
" while calculating %.*s'"	pointer
,	O
NAMMAX	int
,	O
fsp	pointer
->	O
sy_name	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
return	O
;	O
}	O
void	O
solve	function
(	O
void	O
)	O
{	O
struct	O
sym	struct
*	O
sp	pointer
;	O
bool	enum
adapt	enum
;	O
if	O
(	O
check	function
(	O
)	O
==	O
false	int
)	O
return	O
;	O
defalt	function
(	O
)	O
;	O
if	O
(	O
tflag	enum
)	O
title	function
(	O
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
setflt	function
(	O
)	O
;	O
if	O
(	O
!	O
setjmp	function
(	O
mark	array
)	O
)	O
{	O
adapt	enum
=	O
eflag	enum
|	O
rflag	enum
|	O
!	O
conflag	enum
?	O
true	int
:	O
false	int
;	O
if	O
(	O
tstart	double
==	O
tstop	double
)	O
trivial	function
(	O
)	O
;	O
else	O
switch	O
(	O
algorithm	enum
)	O
{	O
case	O
A_EULER	int
:	O
eu	function
(	O
)	O
;	O
break	O
;	O
case	O
A_ADAMS_MOULTON	int
:	O
if	O
(	O
adapt	enum
||	O
prerr	enum
)	O
ama	function
(	O
)	O
;	O
else	O
am	function
(	O
)	O
;	O
break	O
;	O
case	O
A_RUNGE_KUTTA_FEHLBERG	int
:	O
default	O
:	O
if	O
(	O
adapt	enum
||	O
prerr	enum
)	O
rka	function
(	O
)	O
;	O
else	O
rk	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
resetflt	function
(	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
for	O
(	O
sp	pointer
=	O
symtab	pointer
;	O
sp	pointer
!=	O
NULL	O
;	O
sp	pointer
=	O
sp	pointer
->	O
sy_link	pointer
)	O
{	O
sp	pointer
->	O
sy_prime	double
=	O
sp	pointer
->	O
sy_pri	array
[	O
0	int
]	O
;	O
sp	pointer
->	O
sy_value	double
=	O
sp	pointer
->	O
sy_val	array
[	O
0	int
]	O
;	O
}	O
}	O
void	O
startstep	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
hflag	enum
)	O
hmax	double
=	O
fabs	function
(	O
(	O
tstop	double
-	O
tstart	double
)	O
/	O
2	int
)	O
;	O
tstep	double
=	O
fabs	function
(	O
(	O
tstop	double
-	O
tstart	double
)	O
/	O
MESH	O
)	O
;	O
if	O
(	O
tstep	double
>	O
hmax	double
)	O
tstep	double
=	O
hmax	double
;	O
if	O
(	O
tstep	double
<	O
hmin	double
)	O
tstep	double
=	O
hmin	double
;	O
while	O
(	O
tstep	double
>=	O
HMAX	O
)	O
tstep	double
*=	O
HALF	O
;	O
while	O
(	O
tstart	double
+	O
tstep	double
==	O
tstart	double
)	O
tstep	double
*=	O
TWO	O
;	O
}	O
void	O
title	function
(	O
void	O
)	O
{	O
struct	O
prt	struct
*	O
pp	pointer
;	O
char	O
tag	char
=	O
'\0'	O
;	O
pp	pointer
=	O
pqueue	pointer
;	O
if	O
(	O
pp	pointer
!=	O
NULL	O
)	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
pp	pointer
->	O
pr_which	enum
)	O
{	O
case	O
P_PRIME	int
:	O
tag	char
=	O
'\''	O
;	O
break	O
;	O
case	O
P_VALUE	int
:	O
tag	char
=	O
' '	O
;	O
break	O
;	O
case	O
P_SSERR	int
:	O
tag	char
=	O
'?'	O
;	O
break	O
;	O
case	O
P_ABERR	int
:	O
tag	char
=	O
'!'	O
;	O
break	O
;	O
case	O
P_ACERR	int
:	O
tag	char
=	O
'~'	O
;	O
break	O
;	O
default	O
:	O
panicn	function
(	O
"bad cell spec (%d) in title()"	pointer
,	O
(	O
int	O
)	O
(	O
pp	pointer
->	O
pr_which	enum
)	O
)	O
;	O
break	O
;	O
}	O
printf	function
(	O
" %*.*s%c"	pointer
,	O
fwd	int
-	O
2	int
,	O
NAMMAX	int
,	O
pp	pointer
->	O
pr_sym	pointer
->	O
sy_name	array
,	O
tag	char
)	O
;	O
if	O
(	O
(	O
pp	pointer
=	O
pp	pointer
->	O
pr_link	pointer
)	O
==	O
NULL	O
)	O
break	O
;	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
