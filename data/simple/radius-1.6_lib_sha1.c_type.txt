void	O
SHA1Transform	O
(	O
unsigned	O
long	O
state	array
[	O
5	int
]	O
,	O
const	O
unsigned	O
char	O
buffer	array
[	O
64	int
]	O
)	O
{	O
unsigned	O
long	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
;	O
typedef	O
union	O
{	O
unsigned	O
char	O
c	long
[	O
64	int
]	O
;	O
unsigned	O
long	O
l	array
[	O
16	int
]	O
;	O
}	O
CHAR64LONG16	union
;	O
CHAR64LONG16	union
*	O
block	pointer
;	O
static	O
unsigned	O
char	O
workspace	array
[	O
64	int
]	O
;	O
block	pointer
=	O
(	O
CHAR64LONG16	union
*	O
)	O
workspace	array
;	O
memcpy	function
(	O
block	pointer
,	O
buffer	array
,	O
64	int
)	O
;	O
a	long
=	O
state	array
[	O
0	int
]	O
;	O
b	long
=	O
state	array
[	O
1	int
]	O
;	O
c	long
=	O
state	array
[	O
2	int
]	O
;	O
d	long
=	O
state	array
[	O
3	int
]	O
;	O
e	long
=	O
state	array
[	O
4	int
]	O
;	O
R0	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
0	int
)	O
;	O
R0	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
1	int
)	O
;	O
R0	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
2	int
)	O
;	O
R0	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
3	int
)	O
;	O
R0	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
4	int
)	O
;	O
R0	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
5	int
)	O
;	O
R0	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
6	int
)	O
;	O
R0	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
7	int
)	O
;	O
R0	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
8	int
)	O
;	O
R0	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
9	int
)	O
;	O
R0	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
10	int
)	O
;	O
R0	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
11	int
)	O
;	O
R0	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
12	int
)	O
;	O
R0	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
13	int
)	O
;	O
R0	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
14	int
)	O
;	O
R0	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
15	int
)	O
;	O
R1	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
16	int
)	O
;	O
R1	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
17	int
)	O
;	O
R1	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
18	int
)	O
;	O
R1	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
19	int
)	O
;	O
R2	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
20	int
)	O
;	O
R2	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
21	int
)	O
;	O
R2	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
22	int
)	O
;	O
R2	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
23	int
)	O
;	O
R2	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
24	int
)	O
;	O
R2	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
25	int
)	O
;	O
R2	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
26	int
)	O
;	O
R2	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
27	int
)	O
;	O
R2	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
28	int
)	O
;	O
R2	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
29	int
)	O
;	O
R2	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
30	int
)	O
;	O
R2	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
31	int
)	O
;	O
R2	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
32	int
)	O
;	O
R2	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
33	int
)	O
;	O
R2	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
34	int
)	O
;	O
R2	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
35	int
)	O
;	O
R2	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
36	int
)	O
;	O
R2	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
37	int
)	O
;	O
R2	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
38	int
)	O
;	O
R2	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
39	int
)	O
;	O
R3	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
40	int
)	O
;	O
R3	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
41	int
)	O
;	O
R3	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
42	int
)	O
;	O
R3	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
43	int
)	O
;	O
R3	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
44	int
)	O
;	O
R3	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
45	int
)	O
;	O
R3	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
46	int
)	O
;	O
R3	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
47	int
)	O
;	O
R3	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
48	int
)	O
;	O
R3	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
49	int
)	O
;	O
R3	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
50	int
)	O
;	O
R3	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
51	int
)	O
;	O
R3	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
52	int
)	O
;	O
R3	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
53	int
)	O
;	O
R3	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
54	int
)	O
;	O
R3	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
55	int
)	O
;	O
R3	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
56	int
)	O
;	O
R3	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
57	int
)	O
;	O
R3	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
58	int
)	O
;	O
R3	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
59	int
)	O
;	O
R4	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
60	int
)	O
;	O
R4	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
61	int
)	O
;	O
R4	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
62	int
)	O
;	O
R4	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
63	int
)	O
;	O
R4	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
64	int
)	O
;	O
R4	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
65	int
)	O
;	O
R4	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
66	int
)	O
;	O
R4	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
67	int
)	O
;	O
R4	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
68	int
)	O
;	O
R4	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
69	int
)	O
;	O
R4	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
70	int
)	O
;	O
R4	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
71	int
)	O
;	O
R4	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
72	int
)	O
;	O
R4	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
73	int
)	O
;	O
R4	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
74	int
)	O
;	O
R4	O
(	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
75	int
)	O
;	O
R4	O
(	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
d	long
,	O
76	int
)	O
;	O
R4	O
(	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
c	long
,	O
77	int
)	O
;	O
R4	O
(	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
b	long
,	O
78	int
)	O
;	O
R4	O
(	O
b	long
,	O
c	long
,	O
d	long
,	O
e	long
,	O
a	long
,	O
79	int
)	O
;	O
state	array
[	O
0	int
]	O
+=	O
a	long
;	O
state	array
[	O
1	int
]	O
+=	O
b	long
;	O
state	array
[	O
2	int
]	O
+=	O
c	long
;	O
state	array
[	O
3	int
]	O
+=	O
d	long
;	O
state	array
[	O
4	int
]	O
+=	O
e	long
;	O
a	long
=	O
b	long
=	O
c	long
=	O
d	long
=	O
e	long
=	O
0	int
;	O
}	O
void	O
SHA1Init	O
(	O
SHA1_CTX	O
*	O
context	pointer
)	O
{	O
context	pointer
->	O
state	array
[	O
0	int
]	O
=	O
0x67452301	int
;	O
context	pointer
->	O
state	array
[	O
1	int
]	O
=	O
0xEFCDAB89	int
;	O
context	pointer
->	O
state	array
[	O
2	int
]	O
=	O
0x98BADCFE	int
;	O
context	pointer
->	O
state	array
[	O
3	int
]	O
=	O
0x10325476	int
;	O
context	pointer
->	O
state	array
[	O
4	int
]	O
=	O
0xC3D2E1F0	int
;	O
context	pointer
->	O
count	array
[	O
0	int
]	O
=	O
context	pointer
->	O
count	array
[	O
1	int
]	O
=	O
0	int
;	O
}	O
void	O
SHA1Update	O
(	O
SHA1_CTX	O
*	O
context	pointer
,	O
const	O
unsigned	O
char	O
*	O
data	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
;	O
j	int
=	O
(	O
context	pointer
->	O
count	array
[	O
0	int
]	O
>>	O
3	int
)	O
&	O
63	int
;	O
if	O
(	O
(	O
context	pointer
->	O
count	array
[	O
0	int
]	O
+=	O
len	int
<<	O
3	int
)	O
<	O
(	O
len	int
<<	O
3	int
)	O
)	O
context	pointer
->	O
count	array
[	O
1	int
]	O
++	O
;	O
context	pointer
->	O
count	array
[	O
1	int
]	O
+=	O
(	O
len	int
>>	O
29	int
)	O
;	O
if	O
(	O
(	O
j	int
+	O
len	int
)	O
>	O
63	int
)	O
{	O
memcpy	function
(	O
&	O
context	pointer
->	O
buffer	array
[	O
j	int
]	O
,	O
data	pointer
,	O
(	O
i	int
=	O
64	int
-	O
j	int
)	O
)	O
;	O
SHA1Transform	O
(	O
context	pointer
->	O
state	array
,	O
context	pointer
->	O
buffer	array
)	O
;	O
for	O
(	O
;	O
i	int
+	O
63	int
<	O
len	int
;	O
i	int
+=	O
64	int
)	O
{	O
SHA1Transform	O
(	O
context	pointer
->	O
state	array
,	O
&	O
data	pointer
[	O
i	int
]	O
)	O
;	O
}	O
j	int
=	O
0	int
;	O
}	O
else	O
i	int
=	O
0	int
;	O
memcpy	function
(	O
&	O
context	pointer
->	O
buffer	array
[	O
j	int
]	O
,	O
&	O
data	pointer
[	O
i	int
]	O
,	O
len	int
-	O
i	int
)	O
;	O
}	O
void	O
SHA1Final	O
(	O
unsigned	O
char	O
digest	array
[	O
20	int
]	O
,	O
SHA1_CTX	O
*	O
context	pointer
)	O
{	O
unsigned	O
long	O
i	int
,	O
j	int
;	O
unsigned	O
char	O
finalcount	array
[	O
8	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
finalcount	array
[	O
i	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
context	pointer
->	O
count	array
[	O
(	O
i	int
>=	O
4	int
?	O
0	int
:	O
1	int
)	O
]	O
>>	O
(	O
(	O
3	int
-	O
(	O
i	int
&	O
3	int
)	O
)	O
*	O
8	int
)	O
)	O
&	O
255	int
)	O
;	O
}	O
SHA1Update	O
(	O
context	pointer
,	O
"\200"	pointer
,	O
1	int
)	O
;	O
while	O
(	O
(	O
context	pointer
->	O
count	array
[	O
0	int
]	O
&	O
504	int
)	O
!=	O
448	int
)	O
{	O
SHA1Update	O
(	O
context	pointer
,	O
"\0"	pointer
,	O
1	int
)	O
;	O
}	O
SHA1Update	O
(	O
context	pointer
,	O
finalcount	array
,	O
8	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
20	int
;	O
i	int
++	O
)	O
{	O
digest	array
[	O
i	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
(	O
context	pointer
->	O
state	array
[	O
i	int
>>	O
2	int
]	O
>>	O
(	O
(	O
3	int
-	O
(	O
i	int
&	O
3	int
)	O
)	O
*	O
8	int
)	O
)	O
&	O
255	int
)	O
;	O
}	O
i	int
=	O
j	int
=	O
0	int
;	O
memset	function
(	O
context	pointer
->	O
buffer	array
,	O
0	int
,	O
64	int
)	O
;	O
memset	function
(	O
context	pointer
->	O
state	array
,	O
0	int
,	O
20	int
)	O
;	O
memset	function
(	O
context	pointer
->	O
count	array
,	O
0	int
,	O
8	int
)	O
;	O
memset	function
(	O
&	O
finalcount	array
,	O
0	int
,	O
8	int
)	O
;	O
}	O
