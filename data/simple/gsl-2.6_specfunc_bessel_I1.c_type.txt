static	O
double	O
bi1_data	array
[	O
11	int
]	O
=	O
{	O
-	O
0.001971713261099859	int
,	O
0.407348876675464810	int
,	O
0.034838994299959456	int
,	O
0.001545394556300123	int
,	O
0.000041888521098377	int
,	O
0.000000764902676483	int
,	O
0.000000010042493924	int
,	O
0.000000000099322077	int
,	O
0.000000000000766380	int
,	O
0.000000000000004741	int
,	O
0.000000000000000024	int
}	O
;	O
static	O
cheb_series	struct
bi1_cs	struct
=	O
{	O
bi1_data	array
,	O
10	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
ai1_data	array
[	O
21	int
]	O
=	O
{	O
-	O
0.02846744181881479	int
,	O
-	O
0.01922953231443221	int
,	O
-	O
0.00061151858579437	int
,	O
-	O
0.00002069971253350	int
,	O
0.00000858561914581	int
,	O
0.00000104949824671	int
,	O
-	O
0.00000029183389184	int
,	O
-	O
0.00000001559378146	int
,	O
0.00000001318012367	int
,	O
-	O
0.00000000144842341	int
,	O
-	O
0.00000000029085122	int
,	O
0.00000000012663889	int
,	O
-	O
0.00000000001664947	int
,	O
-	O
0.00000000000166665	int
,	O
0.00000000000124260	int
,	O
-	O
0.00000000000027315	int
,	O
0.00000000000002023	int
,	O
0.00000000000000730	int
,	O
-	O
0.00000000000000333	int
,	O
0.00000000000000071	int
,	O
-	O
0.00000000000000006	int
}	O
;	O
static	O
cheb_series	struct
ai1_cs	struct
=	O
{	O
ai1_data	array
,	O
20	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
double	O
ai12_data	array
[	O
22	int
]	O
=	O
{	O
0.02857623501828014	int
,	O
-	O
0.00976109749136147	int
,	O
-	O
0.00011058893876263	int
,	O
-	O
0.00000388256480887	int
,	O
-	O
0.00000025122362377	int
,	O
-	O
0.00000002631468847	int
,	O
-	O
0.00000000383538039	int
,	O
-	O
0.00000000055897433	int
,	O
-	O
0.00000000001897495	int
,	O
0.00000000003252602	int
,	O
0.00000000001412580	int
,	O
0.00000000000203564	int
,	O
-	O
0.00000000000071985	int
,	O
-	O
0.00000000000040836	int
,	O
-	O
0.00000000000002101	int
,	O
0.00000000000004273	int
,	O
0.00000000000001041	int
,	O
-	O
0.00000000000000382	int
,	O
-	O
0.00000000000000186	int
,	O
0.00000000000000033	int
,	O
0.00000000000000028	int
,	O
-	O
0.00000000000000003	int
}	O
;	O
static	O
cheb_series	struct
ai12_cs	struct
=	O
{	O
ai12_data	array
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
int	O
gsl_sf_bessel_I1_scaled_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
xmin	double
=	O
2.0	int
*	O
GSL_DBL_MIN	int
;	O
const	O
double	O
x_small	double
=	O
ROOT_EIGHT	O
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
const	O
double	O
y	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
y	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<	O
xmin	double
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
y	double
<	O
x_small	double
)	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<=	O
3.0	int
)	O
{	O
const	O
double	O
ey	double
=	O
exp	function
(	O
-	O
y	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
bi1_cs	struct
,	O
y	double
*	O
y	double
/	O
4.5	int
-	O
1.0	int
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
ey	double
*	O
(	O
0.875	int
+	O
c	pointer
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
ey	double
*	O
c	pointer
.	O
err	double
+	O
y	double
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<=	O
8.0	int
)	O
{	O
const	O
double	O
sy	double
=	O
sqrt	function
(	O
y	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
double	O
b	double
;	O
double	O
s	int
;	O
cheb_eval_e	function
(	O
&	O
ai1_cs	struct
,	O
(	O
48.0	int
/	O
y	double
-	O
11.0	int
)	O
/	O
5.0	int
,	O
&	O
c	pointer
)	O
;	O
b	double
=	O
(	O
0.375	int
+	O
c	pointer
.	O
val	double
)	O
/	O
sy	double
;	O
s	int
=	O
(	O
x	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
result	pointer
->	O
val	double
=	O
s	int
*	O
b	double
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
/	O
sy	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
sy	double
=	O
sqrt	function
(	O
y	double
)	O
;	O
gsl_sf_result	struct
c	pointer
;	O
double	O
b	double
;	O
double	O
s	int
;	O
cheb_eval_e	function
(	O
&	O
ai12_cs	struct
,	O
16.0	int
/	O
y	double
-	O
1.0	int
,	O
&	O
c	pointer
)	O
;	O
b	double
=	O
(	O
0.375	int
+	O
c	pointer
.	O
val	double
)	O
/	O
sy	double
;	O
s	int
=	O
(	O
x	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
result	pointer
->	O
val	double
=	O
s	int
*	O
b	double
;	O
result	pointer
->	O
err	double
=	O
c	pointer
.	O
err	double
/	O
sy	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_I1_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
xmin	double
=	O
2.0	int
*	O
GSL_DBL_MIN	int
;	O
const	O
double	O
x_small	double
=	O
ROOT_EIGHT	O
*	O
GSL_SQRT_DBL_EPSILON	int
;	O
const	O
double	O
y	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
y	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<	O
xmin	double
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
y	double
<	O
x_small	double
)	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<=	O
3.0	int
)	O
{	O
gsl_sf_result	struct
c	pointer
;	O
cheb_eval_e	function
(	O
&	O
bi1_cs	struct
,	O
y	double
*	O
y	double
/	O
4.5	int
-	O
1.0	int
,	O
&	O
c	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
*	O
(	O
0.875	int
+	O
c	pointer
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
y	double
*	O
c	pointer
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<	O
GSL_LOG_DBL_MAX	int
)	O
{	O
const	O
double	O
ey	double
=	O
exp	function
(	O
y	double
)	O
;	O
gsl_sf_result	struct
I1_scaled	struct
;	O
gsl_sf_bessel_I1_scaled_e	function
(	O
x	double
,	O
&	O
I1_scaled	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
ey	double
*	O
I1_scaled	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
ey	double
*	O
I1_scaled	struct
.	O
err	double
+	O
y	double
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_I1_scaled	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_I1_scaled_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_I1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_I1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
