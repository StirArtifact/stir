const	O
char	O
version_etc_copyright	array
[	O
]	O
=	O
"Copyright %s %d Simon Josefsson."	pointer
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
GSS_ATTR_NO_RETRUN	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try `%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s OPTIONS...\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Command line interface to GSS, used to explain error codes.\n\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -h, --help        Print help and exit.\n  -V, --version     Print version and exit.\n  -l, --list-mechanisms\n                    List information about supported mechanisms\n                    in a human readable format.\n  -m, --major=LONG  Describe a `major status' error code value.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -a, --accept-sec-context[=MECH]\n                    Accept a security context as server.\n                    If MECH is not specified, no credentials\n                    will be acquired.  Use \"*\" to use library\n                    default mechanism.\n  -i, --init-sec-context=MECH\n                    Initialize a security context as client.\n                    MECH is the SASL name of mechanism, use -l\n                    to list supported mechanisms.\n  -n, --server-name=SERVICE@HOSTNAME\n                    For -i and -a, set the name of the remote host.\n                    For example, \"imap@mail.example.com\".\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -q, --quiet       Silent operation (default=off).\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
emit_bug_reporting_address	function
(	O
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
int	O
describe_major	function
(	O
unsigned	O
int	O
quiet	int
,	O
long	O
major	long
)	O
{	O
gss_buffer_desc	struct
status_string	pointer
;	O
OM_uint32	int
message_context	pointer
=	O
0	int
;	O
OM_uint32	int
maj	int
=	O
0	int
,	O
min	int
;	O
size_t	long
i	int
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
quiet	int
)	O
{	O
printf	function
(	O
_	O
(	O
"GSS-API major status code %ld (0x%lx).\n\n"	pointer
)	O
,	O
major	long
,	O
major	long
)	O
;	O
printf	function
(	O
_	O
(	O
"   MSB                               "	pointer
"                                  LSB\n"	pointer
"   +-----------------+---------------"	pointer
"--+---------------------------------+\n"	pointer
"   |  Calling Error  |  Routine Error"	pointer
"  |       Supplementary Info        |\n   | "	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
printf	function
(	O
"%ld "	pointer
,	O
(	O
major	long
>>	O
(	O
31	int
-	O
i	int
)	O
)	O
&	O
1	int
)	O
;	O
printf	function
(	O
"| "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
printf	function
(	O
"%ld "	pointer
,	O
(	O
major	long
>>	O
(	O
23	int
-	O
i	int
)	O
)	O
&	O
1	int
)	O
;	O
printf	function
(	O
"| "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
16	int
;	O
i	int
++	O
)	O
printf	function
(	O
"%ld "	pointer
,	O
(	O
major	long
>>	O
(	O
15	int
-	O
i	int
)	O
)	O
&	O
1	int
)	O
;	O
printf	function
(	O
_	O
(	O
"|\n"	pointer
"   +-----------------+---------------"	pointer
"--+---------------------------------+\n"	pointer
"Bit 31            24  23            1"	pointer
"6  15                             0\n\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
)	O
{	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
_	O
(	O
"Masked routine error %ld (0x%lx) shifted "	pointer
"into %ld (0x%lx):\n"	pointer
)	O
,	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
,	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
,	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
>>	O
GSS_C_ROUTINE_ERROR_OFFSET	int
,	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
>>	O
GSS_C_ROUTINE_ERROR_OFFSET	int
)	O
;	O
message_context	pointer
=	O
0	int
;	O
do	O
{	O
maj	int
=	O
gss_display_status	function
(	O
&	O
min	int
,	O
GSS_ROUTINE_ERROR	O
(	O
major	long
)	O
,	O
GSS_C_GSS_CODE	int
,	O
GSS_C_NO_OID	O
,	O
&	O
message_context	pointer
,	O
&	O
status_string	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"displaying status code failed (%d)"	pointer
)	O
,	O
maj	int
)	O
;	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
printf	function
(	O
"%.*s\n"	pointer
,	O
(	O
int	O
)	O
status_string	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
status_string	pointer
.	O
value	pointer
)	O
;	O
gss_release_buffer	function
(	O
&	O
min	int
,	O
&	O
status_string	pointer
)	O
;	O
}	O
while	O
(	O
message_context	pointer
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
)	O
{	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
_	O
(	O
"Masked calling error %ld (0x%lx) shifted into %ld (0x%lx):\n"	pointer
)	O
,	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
,	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
,	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
>>	O
GSS_C_CALLING_ERROR_OFFSET	int
,	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
>>	O
GSS_C_CALLING_ERROR_OFFSET	int
)	O
;	O
message_context	pointer
=	O
0	int
;	O
do	O
{	O
maj	int
=	O
gss_display_status	function
(	O
&	O
min	int
,	O
GSS_CALLING_ERROR	O
(	O
major	long
)	O
,	O
GSS_C_GSS_CODE	int
,	O
GSS_C_NO_OID	O
,	O
&	O
message_context	pointer
,	O
&	O
status_string	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"displaying status code failed (%d)"	pointer
)	O
,	O
maj	int
)	O
;	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
printf	function
(	O
"%.*s\n"	pointer
,	O
(	O
int	O
)	O
status_string	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
status_string	pointer
.	O
value	pointer
)	O
;	O
gss_release_buffer	function
(	O
&	O
min	int
,	O
&	O
status_string	pointer
)	O
;	O
}	O
while	O
(	O
message_context	pointer
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
)	O
{	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
_	O
(	O
"Masked supplementary info %ld (0x%lx) shifted "	pointer
"into %ld (0x%lx):\n"	pointer
)	O
,	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
,	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
,	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
>>	O
GSS_C_SUPPLEMENTARY_OFFSET	int
,	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
>>	O
GSS_C_SUPPLEMENTARY_OFFSET	int
)	O
;	O
message_context	pointer
=	O
0	int
;	O
do	O
{	O
maj	int
=	O
gss_display_status	function
(	O
&	O
min	int
,	O
GSS_SUPPLEMENTARY_INFO	O
(	O
major	long
)	O
,	O
GSS_C_GSS_CODE	int
,	O
GSS_C_NO_OID	O
,	O
&	O
message_context	pointer
,	O
&	O
status_string	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"displaying status code failed (%d)"	pointer
)	O
,	O
maj	int
)	O
;	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
printf	function
(	O
"%.*s\n"	pointer
,	O
(	O
int	O
)	O
status_string	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
status_string	pointer
.	O
value	pointer
)	O
;	O
gss_release_buffer	function
(	O
&	O
min	int
,	O
&	O
status_string	pointer
)	O
;	O
}	O
while	O
(	O
message_context	pointer
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
major	long
==	O
GSS_S_COMPLETE	int
)	O
printf	function
(	O
_	O
(	O
"No error\n"	pointer
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
list_mechanisms	function
(	O
unsigned	O
quiet	int
)	O
{	O
OM_uint32	int
maj	int
,	O
min	int
;	O
gss_OID_set	pointer
mech_set	pointer
;	O
size_t	long
i	int
;	O
gss_buffer_desc	struct
sasl_mech_name	pointer
;	O
gss_buffer_desc	struct
mech_name	pointer
;	O
gss_buffer_desc	struct
mech_description	pointer
;	O
maj	int
=	O
gss_indicate_mechs	function
(	O
&	O
min	int
,	O
&	O
mech_set	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"indicating mechanisms failed (%d)"	pointer
)	O
,	O
maj	int
)	O
;	O
return	O
1	int
;	O
}	O
printf	function
(	O
"Found %lu supported mechanisms.\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mech_set	pointer
->	O
count	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mech_set	pointer
->	O
count	long
;	O
i	int
++	O
)	O
{	O
printf	function
(	O
"\nMechanism %lu:\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
i	int
)	O
;	O
maj	int
=	O
gss_inquire_saslname_for_mech	function
(	O
&	O
min	int
,	O
mech_set	pointer
->	O
elements	pointer
++	O
,	O
&	O
sasl_mech_name	pointer
,	O
&	O
mech_name	pointer
,	O
&	O
mech_description	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"inquiring information about mechanism failed (%d)"	pointer
)	O
,	O
maj	int
)	O
;	O
continue	O
;	O
}	O
printf	function
(	O
"\tMechanism name: %.*s\n"	pointer
,	O
(	O
int	O
)	O
mech_name	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
mech_name	pointer
.	O
value	pointer
)	O
;	O
printf	function
(	O
"\tMechanism description: %.*s\n"	pointer
,	O
(	O
int	O
)	O
mech_description	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
mech_description	pointer
.	O
value	pointer
)	O
;	O
printf	function
(	O
"\tSASL Mechanism name: %.*s\n"	pointer
,	O
(	O
int	O
)	O
sasl_mech_name	pointer
.	O
length	int
,	O
(	O
char	O
*	O
)	O
sasl_mech_name	pointer
.	O
value	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
ssize_t	long
gettrimline	function
(	O
char	O
*	O
*	O
line	pointer
,	O
size_t	long
*	O
n	pointer
,	O
FILE	struct
*	O
fh	pointer
)	O
{	O
ssize_t	long
s	long
=	O
getline	function
(	O
line	pointer
,	O
n	pointer
,	O
fh	pointer
)	O
;	O
if	O
(	O
s	long
>=	O
2	int
)	O
{	O
if	O
(	O
(	O
*	O
line	pointer
)	O
[	O
strlen	function
(	O
*	O
line	pointer
)	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
(	O
*	O
line	pointer
)	O
[	O
strlen	function
(	O
*	O
line	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
*	O
line	pointer
)	O
[	O
strlen	function
(	O
*	O
line	pointer
)	O
-	O
1	int
]	O
==	O
'\r'	O
)	O
(	O
*	O
line	pointer
)	O
[	O
strlen	function
(	O
*	O
line	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
return	O
s	long
;	O
}	O
static	O
int	O
init_sec_context	function
(	O
unsigned	O
quiet	int
,	O
const	O
char	O
*	O
mech	pointer
,	O
const	O
char	O
*	O
server	pointer
)	O
{	O
OM_uint32	int
maj	int
,	O
min	int
;	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
GSS_C_NO_CONTEXT	O
;	O
gss_name_t	pointer
servername	pointer
=	O
GSS_C_NO_NAME	O
;	O
gss_buffer_desc	struct
inbuf_desc	struct
;	O
gss_buffer_t	pointer
inbuf	pointer
=	O
GSS_C_NO_BUFFER	O
;	O
gss_buffer_desc	struct
bufdesc	struct
;	O
gss_buffer_desc	struct
sasl_mech_name	pointer
;	O
gss_OID	pointer
mech_type	pointer
;	O
size_t	long
outlen	long
;	O
char	O
*	O
out	pointer
;	O
ssize_t	long
s	long
;	O
char	O
*	O
line	pointer
=	O
NULL	O
;	O
size_t	long
n	pointer
=	O
0	int
;	O
bool	bool
ok	bool
;	O
OM_uint32	int
ret_flags	pointer
;	O
sasl_mech_name	pointer
.	O
length	int
=	O
strlen	function
(	O
mech	pointer
)	O
;	O
sasl_mech_name	pointer
.	O
value	pointer
=	O
(	O
void	O
*	O
)	O
mech	pointer
;	O
maj	int
=	O
gss_inquire_mech_for_saslname	function
(	O
&	O
min	int
,	O
&	O
sasl_mech_name	pointer
,	O
&	O
mech_type	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"inquiring mechanism for SASL name (%d/%d)"	pointer
)	O
,	O
maj	int
,	O
min	int
)	O
;	O
if	O
(	O
server	pointer
)	O
{	O
gss_buffer_desc	struct
namebuf	struct
;	O
namebuf	struct
.	O
length	int
=	O
strlen	function
(	O
server	pointer
)	O
;	O
namebuf	struct
.	O
value	pointer
=	O
(	O
void	O
*	O
)	O
server	pointer
;	O
maj	int
=	O
gss_import_name	function
(	O
&	O
min	int
,	O
&	O
namebuf	struct
,	O
GSS_C_NT_HOSTBASED_SERVICE	pointer
,	O
&	O
servername	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"could not import server name \"%s\" (%d/%d)"	pointer
)	O
,	O
server	pointer
,	O
maj	int
,	O
min	int
)	O
;	O
}	O
do	O
{	O
maj	int
=	O
gss_init_sec_context	function
(	O
&	O
min	int
,	O
GSS_C_NO_CREDENTIAL	O
,	O
&	O
ctx	pointer
,	O
servername	pointer
,	O
mech_type	pointer
,	O
GSS_C_MUTUAL_FLAG	int
|	O
GSS_C_REPLAY_FLAG	int
|	O
GSS_C_SEQUENCE_FLAG	int
,	O
0	int
,	O
GSS_C_NO_CHANNEL_BINDINGS	O
,	O
inbuf	pointer
,	O
NULL	O
,	O
&	O
bufdesc	struct
,	O
&	O
ret_flags	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"initializing security context failed (%d/%d)"	pointer
)	O
,	O
maj	int
,	O
min	int
)	O
;	O
outlen	long
=	O
base64_encode_alloc	function
(	O
bufdesc	struct
.	O
value	pointer
,	O
bufdesc	struct
.	O
length	int
,	O
&	O
out	pointer
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
&&	O
outlen	long
==	O
0	int
&&	O
bufdesc	struct
.	O
length	int
!=	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"base64 input too long"	pointer
)	O
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"malloc"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
{	O
if	O
(	O
maj	int
==	O
GSS_S_COMPLETE	int
&&	O
bufdesc	struct
.	O
length	int
==	O
0	int
)	O
printf	function
(	O
"Context has been initialized.\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_COMPLETE	int
)	O
printf	function
(	O
"Context has been initialized.  Final context token:\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
&&	O
(	O
ret_flags	pointer
&	O
GSS_C_PROT_READY_FLAG	int
)	O
)	O
printf	function
(	O
"Context token (protection is available):\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
)	O
printf	function
(	O
"Context token:\n"	pointer
)	O
;	O
}	O
if	O
(	O
bufdesc	struct
.	O
length	int
!=	O
0	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
out	pointer
)	O
;	O
free	function
(	O
out	pointer
)	O
;	O
if	O
(	O
maj	int
==	O
GSS_S_COMPLETE	int
)	O
break	O
;	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
"Input context token:\n"	pointer
)	O
;	O
s	long
=	O
gettrimline	function
(	O
&	O
line	pointer
,	O
&	O
n	pointer
,	O
stdin	pointer
)	O
;	O
if	O
(	O
s	long
==	O
-	O
1	int
&&	O
!	O
feof	function
(	O
stdin	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"getline"	pointer
)	O
)	O
;	O
if	O
(	O
s	long
==	O
-	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"end of file"	pointer
)	O
)	O
;	O
ok	bool
=	O
base64_decode_alloc	O
(	O
line	pointer
,	O
strlen	function
(	O
line	pointer
)	O
,	O
&	O
out	pointer
,	O
&	O
outlen	long
)	O
;	O
if	O
(	O
!	O
ok	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"base64 fail"	pointer
)	O
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"malloc"	pointer
)	O
)	O
;	O
inbuf_desc	struct
.	O
value	pointer
=	O
out	pointer
;	O
inbuf_desc	struct
.	O
length	int
=	O
outlen	long
;	O
inbuf	pointer
=	O
&	O
inbuf_desc	struct
;	O
}	O
while	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
accept_sec_context	function
(	O
unsigned	O
quiet	int
,	O
const	O
char	O
*	O
mech	pointer
,	O
const	O
char	O
*	O
server	pointer
)	O
{	O
OM_uint32	int
maj	int
,	O
min	int
;	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
GSS_C_NO_CONTEXT	O
;	O
gss_cred_id_t	pointer
cred	pointer
=	O
GSS_C_NO_CREDENTIAL	O
;	O
gss_name_t	pointer
client	pointer
=	O
GSS_C_NO_NAME	O
;	O
gss_buffer_desc	struct
bufdesc	struct
,	O
bufdesc2	struct
;	O
gss_OID	pointer
mech_type	pointer
=	O
GSS_C_NO_OID	O
;	O
char	O
*	O
out	pointer
;	O
size_t	long
outlen	long
;	O
ssize_t	long
s	long
;	O
char	O
*	O
line	pointer
=	O
NULL	O
;	O
size_t	long
n	pointer
=	O
0	int
;	O
bool	bool
ok	bool
;	O
OM_uint32	int
ret_flags	pointer
;	O
if	O
(	O
mech	pointer
||	O
server	pointer
)	O
{	O
gss_name_t	pointer
servername	pointer
=	O
GSS_C_NO_NAME	O
;	O
gss_OID_set	pointer
mech_types	pointer
=	O
GSS_C_NULL_OID_SET	O
;	O
if	O
(	O
mech	pointer
&&	O
strcmp	function
(	O
mech	pointer
,	O
"*"	pointer
)	O
!=	O
0	int
)	O
{	O
gss_buffer_desc	struct
sasl_mech_name	pointer
;	O
sasl_mech_name	pointer
.	O
length	int
=	O
strlen	function
(	O
mech	pointer
)	O
;	O
sasl_mech_name	pointer
.	O
value	pointer
=	O
(	O
void	O
*	O
)	O
mech	pointer
;	O
printf	function
(	O
"Inquiring mechanism OID for SASL name \"%s\"...\n"	pointer
,	O
mech	pointer
)	O
;	O
maj	int
=	O
gss_inquire_mech_for_saslname	function
(	O
&	O
min	int
,	O
&	O
sasl_mech_name	pointer
,	O
&	O
mech_type	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"inquiring mechanism for SASL name (%d/%d)"	pointer
)	O
,	O
maj	int
,	O
min	int
)	O
;	O
}	O
if	O
(	O
server	pointer
)	O
{	O
gss_buffer_desc	struct
namebuf	struct
;	O
namebuf	struct
.	O
length	int
=	O
strlen	function
(	O
server	pointer
)	O
;	O
namebuf	struct
.	O
value	pointer
=	O
(	O
void	O
*	O
)	O
server	pointer
;	O
printf	function
(	O
"Importing name \"%s\"...\n"	pointer
,	O
server	pointer
)	O
;	O
maj	int
=	O
gss_import_name	function
(	O
&	O
min	int
,	O
&	O
namebuf	struct
,	O
GSS_C_NT_HOSTBASED_SERVICE	pointer
,	O
&	O
servername	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"could not import server name \"%s\" (%d/%d)"	pointer
)	O
,	O
server	pointer
,	O
maj	int
,	O
min	int
)	O
;	O
}	O
if	O
(	O
mech_type	pointer
!=	O
GSS_C_NO_OID	O
)	O
{	O
maj	int
=	O
gss_create_empty_oid_set	function
(	O
&	O
min	int
,	O
&	O
mech_types	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"gss_create_empty_oid_set (%d/%d)"	pointer
,	O
maj	int
,	O
min	int
)	O
;	O
maj	int
=	O
gss_add_oid_set_member	function
(	O
&	O
min	int
,	O
mech_type	pointer
,	O
&	O
mech_types	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"gss_add_oid_set_member (%d/%d)"	pointer
,	O
maj	int
,	O
min	int
)	O
;	O
}	O
printf	function
(	O
"Acquiring credentials...\n"	pointer
)	O
;	O
maj	int
=	O
gss_acquire_cred	function
(	O
&	O
min	int
,	O
servername	pointer
,	O
0	int
,	O
mech_types	pointer
,	O
GSS_C_ACCEPT	int
,	O
&	O
cred	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"could not acquire server credentials (%d/%d)"	pointer
)	O
,	O
maj	int
,	O
min	int
)	O
;	O
if	O
(	O
mech_type	pointer
!=	O
GSS_C_NO_OID	O
)	O
{	O
maj	int
=	O
gss_release_oid_set	function
(	O
&	O
min	int
,	O
&	O
mech_types	pointer
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"gss_release_oid_set (%d/%d)"	pointer
,	O
maj	int
,	O
min	int
)	O
;	O
}	O
}	O
do	O
{	O
if	O
(	O
!	O
quiet	int
)	O
printf	function
(	O
"Input context token:\n"	pointer
)	O
;	O
s	long
=	O
gettrimline	function
(	O
&	O
line	pointer
,	O
&	O
n	pointer
,	O
stdin	pointer
)	O
;	O
if	O
(	O
s	long
==	O
-	O
1	int
&&	O
!	O
feof	function
(	O
stdin	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"getline"	pointer
)	O
)	O
;	O
if	O
(	O
s	long
==	O
-	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"end of file"	pointer
)	O
)	O
;	O
ok	bool
=	O
base64_decode_alloc	O
(	O
line	pointer
,	O
strlen	function
(	O
line	pointer
)	O
,	O
&	O
out	pointer
,	O
&	O
outlen	long
)	O
;	O
if	O
(	O
!	O
ok	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"base64 fail"	pointer
)	O
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"malloc"	pointer
)	O
)	O
;	O
bufdesc	struct
.	O
value	pointer
=	O
out	pointer
;	O
bufdesc	struct
.	O
length	int
=	O
outlen	long
;	O
maj	int
=	O
gss_accept_sec_context	function
(	O
&	O
min	int
,	O
&	O
ctx	pointer
,	O
cred	pointer
,	O
&	O
bufdesc	struct
,	O
GSS_C_NO_CHANNEL_BINDINGS	O
,	O
&	O
client	pointer
,	O
&	O
mech_type	pointer
,	O
&	O
bufdesc2	struct
,	O
&	O
ret_flags	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"accepting security context failed (%d/%d)"	pointer
)	O
,	O
maj	int
,	O
min	int
)	O
;	O
outlen	long
=	O
base64_encode_alloc	function
(	O
bufdesc2	struct
.	O
value	pointer
,	O
bufdesc2	struct
.	O
length	int
,	O
&	O
out	pointer
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
&&	O
outlen	long
==	O
0	int
&&	O
bufdesc2	struct
.	O
length	int
!=	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"base64 input too long"	pointer
)	O
)	O
;	O
if	O
(	O
out	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"malloc"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
{	O
if	O
(	O
maj	int
==	O
GSS_S_COMPLETE	int
&&	O
bufdesc2	struct
.	O
length	int
==	O
0	int
)	O
printf	function
(	O
"Context has been accepted.\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_COMPLETE	int
)	O
printf	function
(	O
"Context has been accepted.  Final context token:\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
&&	O
(	O
ret_flags	pointer
&	O
GSS_C_PROT_READY_FLAG	int
)	O
)	O
printf	function
(	O
"Context token (protection is available):\n"	pointer
)	O
;	O
else	O
if	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
)	O
printf	function
(	O
"Context token:\n"	pointer
)	O
;	O
}	O
if	O
(	O
bufdesc2	struct
.	O
length	int
!=	O
0	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
out	pointer
)	O
;	O
free	function
(	O
out	pointer
)	O
;	O
}	O
while	O
(	O
maj	int
==	O
GSS_S_CONTINUE_NEEDED	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
struct	O
gengetopt_args_info	struct
args	struct
;	O
int	O
rc	int
=	O
0	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
if	O
(	O
cmdline_parser	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
args	struct
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
args	struct
.	O
version_given	int
)	O
{	O
version_etc	function
(	O
stdout	pointer
,	O
"gss"	pointer
,	O
PACKAGE_NAME	pointer
,	O
VERSION	pointer
,	O
"Simon Josefsson"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
args	struct
.	O
help_given	int
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
else	O
if	O
(	O
args	struct
.	O
major_given	int
)	O
rc	int
=	O
describe_major	function
(	O
args	struct
.	O
quiet_given	int
,	O
args	struct
.	O
major_arg	long
)	O
;	O
else	O
if	O
(	O
args	struct
.	O
list_mechanisms_given	int
)	O
rc	int
=	O
list_mechanisms	function
(	O
args	struct
.	O
quiet_given	int
)	O
;	O
else	O
if	O
(	O
args	struct
.	O
init_sec_context_given	int
)	O
rc	int
=	O
init_sec_context	function
(	O
args	struct
.	O
quiet_given	int
,	O
args	struct
.	O
init_sec_context_arg	pointer
,	O
args	struct
.	O
server_name_arg	pointer
)	O
;	O
else	O
if	O
(	O
args	struct
.	O
accept_sec_context_given	int
)	O
rc	int
=	O
accept_sec_context	function
(	O
args	struct
.	O
quiet_given	int
,	O
args	struct
.	O
accept_sec_context_arg	pointer
,	O
args	struct
.	O
server_name_arg	pointer
)	O
;	O
else	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
return	O
rc	int
;	O
}	O
