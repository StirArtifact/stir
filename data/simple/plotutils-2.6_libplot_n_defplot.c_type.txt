const	O
Plotter	struct
_pl_n_default_plotter	struct
=	O
{	O
_pl_n_initialize	function
,	O
_pl_n_terminate	function
,	O
_pl_b_begin_page	function
,	O
_pl_b_erase_page	function
,	O
_pl_b_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_b_paint_path	function
,	O
_pl_b_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_b_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_g_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
,	O
}	O
;	O
void	O
_pl_n_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_b_initialize	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_PNM	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_VIA_CUSTOM_ROUTINES	int
;	O
_plotter	pointer
->	O
n_portable_output	enum
=	O
false	int
;	O
{	O
const	O
char	O
*	O
portable_s	pointer
;	O
portable_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"PNM_PORTABLE"	pointer
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
portable_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
n_portable_output	enum
=	O
true	int
;	O
else	O
_plotter	pointer
->	O
n_portable_output	enum
=	O
false	int
;	O
}	O
}	O
void	O
_pl_n_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_b_terminate	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
