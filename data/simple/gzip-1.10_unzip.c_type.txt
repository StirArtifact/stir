static	O
int	O
decrypt	int
;	O
static	O
int	O
pkzip	int
=	O
0	int
;	O
static	O
int	O
ext_header	int
=	O
0	int
;	O
int	O
check_zipfile	function
(	O
in	int
)	O
int	O
in	int
;	O
{	O
uch	char
*	O
h	pointer
=	O
inbuf	array
+	O
inptr	int
;	O
ifd	int
=	O
in	int
;	O
inptr	int
+=	O
LOCHDR	int
+	O
SH	O
(	O
h	pointer
+	O
LOCFIL	int
)	O
+	O
SH	O
(	O
h	pointer
+	O
LOCEXT	int
)	O
;	O
if	O
(	O
inptr	int
>	O
insize	int
||	O
LG	O
(	O
h	pointer
)	O
!=	O
LOCSIG	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: %s: not a valid zip file\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
exit_code	int
=	O
ERROR	int
;	O
return	O
ERROR	int
;	O
}	O
method	int
=	O
h	pointer
[	O
LOCHOW	int
]	O
;	O
if	O
(	O
method	int
!=	O
STORED	int
&&	O
method	int
!=	O
DEFLATED	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: %s: first entry not deflated or stored -- use unzip\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
exit_code	int
=	O
ERROR	int
;	O
return	O
ERROR	int
;	O
}	O
if	O
(	O
(	O
decrypt	int
=	O
h	pointer
[	O
LOCFLG	int
]	O
&	O
CRPFLG	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: %s: encrypted file -- use unzip\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
exit_code	int
=	O
ERROR	int
;	O
return	O
ERROR	int
;	O
}	O
ext_header	int
=	O
(	O
h	pointer
[	O
LOCFLG	int
]	O
&	O
EXTFLG	int
)	O
!=	O
0	int
;	O
pkzip	int
=	O
1	int
;	O
return	O
OK	int
;	O
}	O
int	O
unzip	function
(	O
in	int
,	O
out	int
)	O
int	O
in	int
,	O
out	int
;	O
{	O
ulg	long
orig_crc	long
=	O
0	int
;	O
ulg	long
orig_len	long
=	O
0	int
;	O
int	O
n	int
;	O
uch	char
buf	pointer
[	O
EXTHDR	int
]	O
;	O
int	O
err	int
=	O
OK	int
;	O
ifd	int
=	O
in	int
;	O
ofd	int
=	O
out	int
;	O
updcrc	function
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
pkzip	int
&&	O
!	O
ext_header	int
)	O
{	O
orig_crc	long
=	O
LG	O
(	O
inbuf	array
+	O
LOCCRC	int
)	O
;	O
orig_len	long
=	O
LG	O
(	O
inbuf	array
+	O
LOCLEN	int
)	O
;	O
}	O
if	O
(	O
method	int
==	O
DEFLATED	int
)	O
{	O
int	O
res	int
=	O
inflate	function
(	O
)	O
;	O
if	O
(	O
res	int
==	O
3	int
)	O
{	O
xalloc_die	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
res	int
!=	O
0	int
)	O
{	O
gzip_error	function
(	O
"invalid compressed data--format violated"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
pkzip	int
&&	O
method	int
==	O
STORED	int
)	O
{	O
register	O
ulg	long
n	int
=	O
LG	O
(	O
inbuf	array
+	O
LOCLEN	int
)	O
;	O
if	O
(	O
n	int
!=	O
LG	O
(	O
inbuf	array
+	O
LOCSIZ	int
)	O
-	O
(	O
decrypt	int
?	O
RAND_HEAD_LEN	int
:	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"len %lu, siz %lu\n"	pointer
,	O
n	int
,	O
LG	O
(	O
inbuf	array
+	O
LOCSIZ	int
)	O
)	O
;	O
gzip_error	function
(	O
"invalid compressed data--length mismatch"	pointer
)	O
;	O
}	O
while	O
(	O
n	int
--	O
)	O
{	O
uch	char
c	char
=	O
(	O
uch	char
)	O
get_byte	O
(	O
)	O
;	O
put_ubyte	O
(	O
c	char
)	O
;	O
}	O
flush_window	function
(	O
)	O
;	O
}	O
else	O
{	O
gzip_error	function
(	O
"internal error, invalid method"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
pkzip	int
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
8	int
;	O
n	int
++	O
)	O
{	O
buf	pointer
[	O
n	int
]	O
=	O
(	O
uch	char
)	O
get_byte	O
(	O
)	O
;	O
}	O
orig_crc	long
=	O
LG	O
(	O
buf	pointer
)	O
;	O
orig_len	long
=	O
LG	O
(	O
buf	pointer
+	O
4	int
)	O
;	O
}	O
else	O
if	O
(	O
ext_header	int
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
EXTHDR	int
;	O
n	int
++	O
)	O
{	O
buf	pointer
[	O
n	int
]	O
=	O
(	O
uch	char
)	O
get_byte	O
(	O
)	O
;	O
}	O
orig_crc	long
=	O
LG	O
(	O
buf	pointer
+	O
4	int
)	O
;	O
orig_len	long
=	O
LG	O
(	O
buf	pointer
+	O
12	int
)	O
;	O
}	O
if	O
(	O
orig_crc	long
!=	O
updcrc	function
(	O
outbuf	array
,	O
0	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: %s: invalid compressed data--crc error\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
err	int
=	O
ERROR	int
;	O
}	O
if	O
(	O
orig_len	long
!=	O
(	O
ulg	long
)	O
(	O
bytes_out	long
&	O
0xffffffff	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n%s: %s: invalid compressed data--length error\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
err	int
=	O
ERROR	int
;	O
}	O
if	O
(	O
pkzip	int
&&	O
inptr	int
+	O
4	int
<	O
insize	int
&&	O
LG	O
(	O
inbuf	array
+	O
inptr	int
)	O
==	O
LOCSIG	int
)	O
{	O
if	O
(	O
to_stdout	int
)	O
{	O
WARN	O
(	O
(	O
stderr	pointer
,	O
"%s: %s has more than one entry--rest ignored\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s has more than one entry -- unchanged\n"	pointer
,	O
program_name	pointer
,	O
ifname	array
)	O
;	O
err	int
=	O
ERROR	int
;	O
}	O
}	O
ext_header	int
=	O
pkzip	int
=	O
0	int
;	O
if	O
(	O
err	int
==	O
OK	int
)	O
return	O
OK	int
;	O
exit_code	int
=	O
ERROR	int
;	O
if	O
(	O
!	O
test	int
)	O
abort_gzip	function
(	O
)	O
;	O
return	O
err	int
;	O
}	O
