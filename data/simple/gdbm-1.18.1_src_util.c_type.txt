char	O
*	O
mkfilename	function
(	O
const	O
char	O
*	O
dir	long
,	O
const	O
char	O
*	O
file	pointer
,	O
const	O
char	O
*	O
suf	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
size_t	long
dirlen	long
=	O
strlen	function
(	O
dir	long
)	O
;	O
size_t	long
suflen	long
=	O
suf	pointer
?	O
strlen	function
(	O
suf	pointer
)	O
:	O
0	int
;	O
size_t	long
fillen	long
=	O
strlen	function
(	O
file	pointer
)	O
;	O
size_t	long
len	long
;	O
while	O
(	O
dirlen	long
>	O
0	int
&&	O
dir	long
[	O
dirlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
dirlen	long
--	O
;	O
len	long
=	O
dirlen	long
+	O
(	O
dir	long
[	O
0	int
]	O
?	O
1	int
:	O
0	int
)	O
+	O
fillen	long
+	O
suflen	long
;	O
tmp	pointer
=	O
emalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
dir	long
,	O
dirlen	long
)	O
;	O
if	O
(	O
dir	long
[	O
0	int
]	O
)	O
tmp	pointer
[	O
dirlen	long
++	O
]	O
=	O
'/'	O
;	O
memcpy	function
(	O
tmp	pointer
+	O
dirlen	long
,	O
file	pointer
,	O
fillen	long
)	O
;	O
if	O
(	O
suf	pointer
)	O
memcpy	function
(	O
tmp	pointer
+	O
dirlen	long
+	O
fillen	long
,	O
suf	pointer
,	O
suflen	long
)	O
;	O
tmp	pointer
[	O
len	long
]	O
=	O
0	int
;	O
return	O
tmp	pointer
;	O
}	O
char	O
*	O
tildexpand	function
(	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
char	O
*	O
p	pointer
=	O
s	pointer
+	O
1	int
;	O
size_t	long
len	long
=	O
strcspn	function
(	O
p	pointer
,	O
"/"	pointer
)	O
;	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
if	O
(	O
len	long
==	O
0	int
)	O
pw	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
else	O
{	O
char	O
*	O
user	pointer
=	O
emalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
user	pointer
,	O
p	pointer
,	O
len	long
)	O
;	O
user	pointer
[	O
len	long
]	O
=	O
0	int
;	O
pw	pointer
=	O
getpwnam	function
(	O
user	pointer
)	O
;	O
free	function
(	O
user	pointer
)	O
;	O
}	O
if	O
(	O
pw	pointer
)	O
return	O
mkfilename	function
(	O
pw	pointer
->	O
pw_dir	pointer
,	O
p	pointer
+	O
len	long
+	O
1	int
,	O
NULL	O
)	O
;	O
}	O
return	O
estrdup	function
(	O
s	pointer
)	O
;	O
}	O
int	O
vgetyn	function
(	O
const	O
char	O
*	O
prompt	pointer
,	O
va_list	array
ap	array
)	O
{	O
int	O
state	pointer
=	O
0	int
;	O
int	O
c	int
,	O
resp	int
;	O
do	O
{	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
1	int
:	O
if	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
continue	O
;	O
resp	int
=	O
c	int
;	O
state	pointer
=	O
2	int
;	O
case	O
2	int
:	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
switch	O
(	O
resp	int
)	O
{	O
case	O
'y'	O
:	O
case	O
'Y'	O
:	O
return	O
1	int
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
return	O
0	int
;	O
default	O
:	O
fprintf	function
(	O
stdout	pointer
,	O
"%s\n"	pointer
,	O
_	O
(	O
"Please, reply 'y' or 'n'"	pointer
)	O
)	O
;	O
}	O
}	O
else	O
break	O
;	O
case	O
0	int
:	O
vfprintf	function
(	O
stdout	pointer
,	O
prompt	pointer
,	O
ap	array
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
" [y/n]?"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
state	pointer
=	O
1	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
(	O
c	int
=	O
getchar	function
(	O
)	O
)	O
!=	O
EOF	O
)	O
;	O
exit	function
(	O
EXIT_USAGE	int
)	O
;	O
}	O
int	O
getyn	function
(	O
const	O
char	O
*	O
prompt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
int	O
rc	int
;	O
va_start	O
(	O
ap	array
,	O
prompt	pointer
)	O
;	O
rc	int
=	O
vgetyn	function
(	O
prompt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
return	O
rc	int
;	O
}	O
