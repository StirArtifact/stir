static	O
void	O
write_svg_transform	function
(	O
plOutbuf	struct
*	O
outbuf	pointer
,	O
const	O
double	O
m	array
[	O
6	int
]	O
)	O
;	O
bool	enum
_pl_s_end_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
plOutbuf	struct
*	O
svg_header	pointer
,	O
*	O
svg_trailer	pointer
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
!=	O
1	int
)	O
return	O
true	int
;	O
svg_header	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
->	O
metric	enum
)	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<svg version=\"1.1\" baseProfile=\"full\" id=\"body\" width=\"%.5gcm\" height=\"%.5gcm\" "	pointer
,	O
2.54	int
*	O
FABS	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xsize	double
)	O
,	O
2.54	int
*	O
FABS	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_ysize	double
)	O
)	O
;	O
else	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<svg version=\"1.1\" baseProfile=\"full\" id=\"body\" width=\"%.5gin\" height=\"%.5gin\" "	pointer
,	O
FABS	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xsize	double
)	O
,	O
FABS	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_ysize	double
)	O
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"%s %s %s %s %s>\n"	pointer
,	O
"viewBox=\"0 0 1 1\""	pointer
,	O
"preserveAspectRatio=\"none\""	pointer
,	O
"xmlns=\"http://www.w3.org/2000/svg\""	pointer
,	O
"xmlns:xlink=\"http://www.w3.org/1999/xlink\""	pointer
,	O
"xmlns:ev=\"http://www.w3.org/2001/xml-events\""	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<title>SVG drawing</title>\n"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<desc>This was produced by version %s of GNU libplot, a free library for exporting 2-D vector graphics.</desc>\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
s_bgcolor_suppressed	enum
==	O
false	int
)	O
{	O
char	O
color_buf	array
[	O
8	int
]	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<rect id=\"background\" x=\"0\" y=\"0\" width=\"1\" height=\"1\" stroke=\"none\" fill=\"%s\"/>\n"	pointer
,	O
_libplot_color_to_svg_color	function
(	O
_plotter	pointer
->	O
s_bgcolor	struct
,	O
color_buf	array
)	O
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
}	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"<g id=\"content\" "	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
s_matrix_is_unknown	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
s_matrix_is_bogus	enum
==	O
false	int
)	O
{	O
double	O
product	array
[	O
6	int
]	O
;	O
_matrix_product	function
(	O
_plotter	pointer
->	O
s_matrix	array
,	O
_plotter	pointer
->	O
data	pointer
->	O
m_ndc_to_device	array
,	O
product	array
)	O
;	O
write_svg_transform	function
(	O
svg_header	pointer
,	O
product	array
)	O
;	O
}	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"xml:space=\"preserve\" "	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke=\"%s\" "	pointer
,	O
"black"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-linecap=\"%s\" "	pointer
,	O
"butt"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-linejoin=\"%s\" "	pointer
,	O
"miter"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-miterlimit=\"%.5g\" "	pointer
,	O
PL_DEFAULT_MITER_LIMIT	int
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-dasharray=\"%s\" "	pointer
,	O
"none"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-dashoffset=\"%.5g\" "	pointer
,	O
0.0	int
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"stroke-opacity=\"%.5g\" "	pointer
,	O
1.0	int
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"fill=\"%s\" "	pointer
,	O
"none"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"fill-rule=\"%s\" "	pointer
,	O
"evenodd"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"fill-opacity=\"%.5g\" "	pointer
,	O
1.0	int
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"font-style=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"font-variant=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"font-weight=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"font-stretch=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"font-size-adjust=\"%s\" "	pointer
,	O
"none"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"letter-spacing=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"word-spacing=\"%s\" "	pointer
,	O
"normal"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
"text-anchor=\"%s\""	pointer
,	O
"start"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
sprintf	function
(	O
svg_header	pointer
->	O
point	pointer
,	O
">\n"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_header	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
header	pointer
=	O
svg_header	pointer
;	O
svg_trailer	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
sprintf	function
(	O
svg_trailer	pointer
->	O
point	pointer
,	O
"</g>\n"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_trailer	pointer
)	O
;	O
sprintf	function
(	O
svg_trailer	pointer
->	O
point	pointer
,	O
"</svg>\n"	pointer
)	O
;	O
_update_buffer	function
(	O
svg_trailer	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
trailer	pointer
=	O
svg_trailer	pointer
;	O
return	O
true	int
;	O
}	O
void	O
_pl_s_set_matrix	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
double	O
m_local	array
[	O
6	int
]	O
)	O
{	O
double	O
m_base	array
[	O
6	int
]	O
,	O
m	array
[	O
6	int
]	O
;	O
const	O
double	O
*	O
m_emitted	pointer
=	O
(	O
const	O
double	O
*	O
)	O
NULL	O
;	O
bool	enum
need_transform_attribute	enum
=	O
false	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
m_base	array
[	O
i	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
i	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
s_matrix_is_unknown	enum
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
s_matrix	array
[	O
i	int
]	O
=	O
m_base	array
[	O
i	int
]	O
;	O
_plotter	pointer
->	O
s_matrix_is_unknown	enum
=	O
false	int
;	O
if	O
(	O
m_base	array
[	O
0	int
]	O
*	O
m_base	array
[	O
3	int
]	O
-	O
m_base	array
[	O
1	int
]	O
*	O
m_base	array
[	O
2	int
]	O
==	O
0.0	int
)	O
_plotter	pointer
->	O
s_matrix_is_bogus	enum
=	O
true	int
;	O
}	O
_matrix_product	function
(	O
m_local	array
,	O
m_base	array
,	O
m	array
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
s_matrix_is_bogus	enum
==	O
false	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
m	array
[	O
i	int
]	O
!=	O
_plotter	pointer
->	O
s_matrix	array
[	O
i	int
]	O
)	O
{	O
need_transform_attribute	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
need_transform_attribute	enum
)	O
{	O
double	O
inverse_of_global	array
[	O
6	int
]	O
,	O
product	array
[	O
6	int
]	O
;	O
_matrix_inverse	function
(	O
_plotter	pointer
->	O
s_matrix	array
,	O
inverse_of_global	array
)	O
;	O
_matrix_product	function
(	O
m	array
,	O
inverse_of_global	array
,	O
product	array
)	O
;	O
m_emitted	pointer
=	O
product	array
;	O
}	O
}	O
else	O
{	O
need_transform_attribute	enum
=	O
true	int
;	O
m_emitted	pointer
=	O
m	array
;	O
}	O
if	O
(	O
need_transform_attribute	enum
)	O
write_svg_transform	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
m_emitted	pointer
)	O
;	O
}	O
static	O
void	O
write_svg_transform	function
(	O
plOutbuf	struct
*	O
outbuf	pointer
,	O
const	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
double	O
mm	array
[	O
6	int
]	O
;	O
double	O
max_value	double
=	O
0.0	int
;	O
int	O
i	int
;	O
int	O
type	enum
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
max_value	double
=	O
DMAX	O
(	O
max_value	double
,	O
FABS	O
(	O
m	array
[	O
i	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
if	O
(	O
i	int
<	O
4	int
&&	O
FABS	O
(	O
m	array
[	O
i	int
]	O
)	O
<	O
VERY_SMALL_FACTOR	int
*	O
max_value	double
)	O
mm	array
[	O
i	int
]	O
=	O
0	int
;	O
else	O
mm	array
[	O
i	int
]	O
=	O
m	array
[	O
i	int
]	O
;	O
if	O
(	O
mm	array
[	O
0	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
1	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
3	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
4	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
5	int
]	O
==	O
0.0	int
)	O
return	O
;	O
if	O
(	O
mm	array
[	O
1	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
0.0	int
)	O
type	enum
=	O
1	int
;	O
else	O
if	O
(	O
mm	array
[	O
0	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
1	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
-	O
1.0	int
&&	O
mm	array
[	O
3	int
]	O
==	O
0.0	int
)	O
type	enum
=	O
2	int
;	O
else	O
if	O
(	O
mm	array
[	O
0	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
1	int
]	O
==	O
-	O
1.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
3	int
]	O
==	O
0.0	int
)	O
type	enum
=	O
3	int
;	O
else	O
if	O
(	O
mm	array
[	O
0	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
1	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
1.0	int
&&	O
mm	array
[	O
3	int
]	O
==	O
0.0	int
)	O
type	enum
=	O
4	int
;	O
else	O
if	O
(	O
mm	array
[	O
0	int
]	O
==	O
0.0	int
&&	O
mm	array
[	O
1	int
]	O
==	O
-	O
1.0	int
&&	O
mm	array
[	O
2	int
]	O
==	O
-	O
1.0	int
&&	O
mm	array
[	O
3	int
]	O
==	O
0.0	int
)	O
type	enum
=	O
5	int
;	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"transform=\""	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
if	O
(	O
type	enum
!=	O
0	int
)	O
{	O
if	O
(	O
mm	array
[	O
4	int
]	O
!=	O
0.0	int
||	O
mm	array
[	O
5	int
]	O
!=	O
0.0	int
)	O
{	O
if	O
(	O
mm	array
[	O
5	int
]	O
==	O
0.0	int
)	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"translate(%.5g) "	pointer
,	O
mm	array
[	O
4	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"translate(%.5g,%.5g) "	pointer
,	O
mm	array
[	O
4	int
]	O
,	O
mm	array
[	O
5	int
]	O
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
}	O
switch	O
(	O
type	enum
)	O
{	O
case	O
1	int
:	O
if	O
(	O
mm	array
[	O
0	int
]	O
!=	O
1.0	int
||	O
mm	array
[	O
3	int
]	O
!=	O
1.0	int
)	O
{	O
if	O
(	O
mm	array
[	O
3	int
]	O
==	O
mm	array
[	O
0	int
]	O
)	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"scale(%.5g) "	pointer
,	O
mm	array
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
mm	array
[	O
3	int
]	O
==	O
-	O
mm	array
[	O
0	int
]	O
)	O
{	O
if	O
(	O
mm	array
[	O
0	int
]	O
!=	O
1.0	int
)	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"scale(1,-1) scale(%.5g) "	pointer
,	O
mm	array
[	O
0	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"scale(1,-1) "	pointer
)	O
;	O
}	O
else	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"scale(%.5g,%.5g) "	pointer
,	O
mm	array
[	O
0	int
]	O
,	O
mm	array
[	O
3	int
]	O
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"rotate(90) "	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"rotate(270) "	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"rotate(90) scale(1,-1) "	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
break	O
;	O
case	O
5	int
:	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"rotate(270) scale(1,-1) "	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
else	O
{	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"matrix(%.5g %.5g %.5g %.5g %.5g %.5g) "	pointer
,	O
mm	array
[	O
0	int
]	O
,	O
mm	array
[	O
1	int
]	O
,	O
mm	array
[	O
2	int
]	O
,	O
mm	array
[	O
3	int
]	O
,	O
mm	array
[	O
4	int
]	O
,	O
mm	array
[	O
5	int
]	O
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
}	O
sprintf	function
(	O
outbuf	pointer
->	O
point	pointer
,	O
"\" "	pointer
)	O
;	O
_update_buffer	function
(	O
outbuf	pointer
)	O
;	O
}	O
