char	O
*	O
pmap_service_name	pointer
=	O
"sunrpc"	pointer
;	O
short	O
pmap_service_number	short
=	O
PMAPPORT	O
;	O
int	O
mount_program	int
=	O
MOUNTPROG	O
;	O
int	O
mount_version	int
=	O
MOUNTVERS	O
;	O
short	O
mount_port	short
=	O
0	int
;	O
int	O
mount_port_override	int
=	O
0	int
;	O
int	O
nfs_program	int
=	O
NFS_PROGRAM	O
;	O
int	O
nfs_version	int
=	O
NFS_VERSION	O
;	O
short	O
nfs_port	short
=	O
NFS_PORT	int
;	O
int	O
nfs_port_override	int
=	O
0	int
;	O
const	O
char	O
*	O
mounted_hostname	pointer
;	O
uint16_t	short
mounted_nfs_port	short
;	O
int	O
protocol_version	int
=	O
2	int
;	O
static	O
int	O
*	O
pmap_initialize_rpc	function
(	O
int	O
procnum	int
,	O
void	O
*	O
*	O
buf	pointer
)	O
{	O
return	O
initialize_rpc	function
(	O
PMAPPROG	O
,	O
PMAPVERS	O
,	O
procnum	int
,	O
0	int
,	O
buf	pointer
,	O
0	int
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
*	O
mount_initialize_rpc	function
(	O
int	O
procnum	int
,	O
void	O
*	O
*	O
buf	pointer
)	O
{	O
return	O
initialize_rpc	function
(	O
MOUNTPROG	O
,	O
MOUNTVERS	O
,	O
procnum	int
,	O
0	int
,	O
buf	pointer
,	O
0	int
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
struct	O
node	O
*	O
mount_root	function
(	O
char	O
*	O
name	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
struct	O
hostent	struct
*	O
h	pointer
;	O
int	O
*	O
p	pointer
;	O
void	O
*	O
rpcbuf	pointer
;	O
int	O
port	int
;	O
error_t	int
err	long
;	O
struct	O
node	O
*	O
np	pointer
;	O
short	O
pmapport	short
;	O
if	O
(	O
pmap_service_name	pointer
)	O
{	O
struct	O
servent	struct
*	O
s	pointer
;	O
s	pointer
=	O
getservbyname	function
(	O
"sunrpc"	pointer
,	O
pmap_service_name	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
pmapport	short
=	O
s	pointer
->	O
s_port	int
;	O
else	O
pmapport	short
=	O
htons	function
(	O
pmap_service_number	short
)	O
;	O
}	O
else	O
pmapport	short
=	O
htons	function
(	O
pmap_service_number	short
)	O
;	O
h	pointer
=	O
gethostbyname	function
(	O
host	pointer
)	O
;	O
if	O
(	O
!	O
h	pointer
)	O
{	O
herror	function
(	O
host	pointer
)	O
;	O
return	O
0	int
;	O
}	O
addr	struct
.	O
sin_family	short
=	O
h	pointer
->	O
h_addrtype	int
;	O
memcpy	function
(	O
&	O
addr	struct
.	O
sin_addr	struct
,	O
h	pointer
->	O
h_addr_list	pointer
[	O
0	int
]	O
,	O
h	pointer
->	O
h_length	int
)	O
;	O
addr	struct
.	O
sin_port	short
=	O
pmapport	short
;	O
if	O
(	O
mount_port_override	int
)	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
mount_port	short
)	O
;	O
else	O
{	O
if	O
(	O
connect	function
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"server mount program"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
p	pointer
=	O
pmap_initialize_rpc	function
(	O
PMAPPROC_GETPORT	O
,	O
&	O
rpcbuf	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"creating rpc packet"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
MOUNTPROG	O
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
MOUNTVERS	O
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
IPPROTO_UDP	int
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
0	int
)	O
;	O
err	long
=	O
conduct_rpc	function
(	O
&	O
rpcbuf	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
port	int
=	O
ntohl	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
}	O
else	O
if	O
(	O
mount_port	short
)	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
mount_port	short
)	O
;	O
else	O
{	O
error	function
(	O
0	int
,	O
err	long
,	O
"portmap of mount"	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
free	function
(	O
rpcbuf	pointer
)	O
;	O
}	O
if	O
(	O
connect	function
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"connect"	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
p	pointer
=	O
mount_initialize_rpc	function
(	O
MOUNTPROC_MNT	O
,	O
&	O
rpcbuf	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"rpc"	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
p	pointer
=	O
xdr_encode_string	function
(	O
p	pointer
,	O
name	pointer
)	O
;	O
err	long
=	O
conduct_rpc	function
(	O
&	O
rpcbuf	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
err	long
)	O
{	O
error	function
(	O
0	int
,	O
err	long
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
err	long
=	O
nfs_error_trans	function
(	O
htonl	function
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
++	O
;	O
if	O
(	O
err	long
)	O
{	O
error	function
(	O
0	int
,	O
err	long
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
xdr_decode_fhandle	function
(	O
p	pointer
,	O
&	O
np	pointer
)	O
;	O
free	function
(	O
rpcbuf	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
np	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
nfs_port_override	int
)	O
port	int
=	O
nfs_port	short
;	O
else	O
{	O
addr	struct
.	O
sin_port	short
=	O
pmapport	short
;	O
if	O
(	O
connect	function
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"connect"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
p	pointer
=	O
pmap_initialize_rpc	function
(	O
PMAPPROC_GETPORT	O
,	O
&	O
rpcbuf	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"rpc"	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
NFS_PROGRAM	O
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
NFS_VERSION	O
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
IPPROTO_UDP	int
)	O
;	O
*	O
(	O
p	pointer
++	O
)	O
=	O
htonl	function
(	O
0	int
)	O
;	O
err	long
=	O
conduct_rpc	function
(	O
&	O
rpcbuf	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
port	int
=	O
ntohl	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
;	O
}	O
else	O
if	O
(	O
nfs_port	short
)	O
port	int
=	O
nfs_port	short
;	O
else	O
{	O
error	function
(	O
0	int
,	O
err	long
,	O
"portmap of nfs server"	pointer
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
free	function
(	O
rpcbuf	pointer
)	O
;	O
}	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	int
)	O
;	O
if	O
(	O
connect	function
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"connect"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
mounted_hostname	pointer
=	O
host	pointer
;	O
mounted_nfs_port	short
=	O
port	int
;	O
return	O
np	pointer
;	O
error_with_rpcbuf	O
:	O
free	function
(	O
rpcbuf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
