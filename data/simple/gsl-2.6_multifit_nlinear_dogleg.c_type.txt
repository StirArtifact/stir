typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct
*	O
dx_gn	pointer
;	O
gsl_vector	struct
*	O
dx_sd	pointer
;	O
double	O
norm_Dgn	double
;	O
double	O
norm_Dsd	double
;	O
double	O
norm_Dinvg	double
;	O
double	O
norm_JDinv2g	double
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
workn	pointer
;	O
gsl_multifit_nlinear_parameters	struct
params	pointer
;	O
}	O
dogleg_state_t	struct
;	O
static	O
void	O
*	O
dogleg_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
dogleg_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_double_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
dogleg_calc_gn	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
double	O
dogleg_beta	function
(	O
const	O
double	O
t	double
,	O
const	O
double	O
delta	double
,	O
const	O
gsl_vector	struct
*	O
diag	pointer
,	O
dogleg_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
void	O
*	O
dogleg_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
mparams	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
)	O
params	pointer
;	O
dogleg_state_t	struct
*	O
state	pointer
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
dogleg_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate dogleg state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dx_gn	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_gn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_gn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dx_sd	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_sd	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_sd"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
params	pointer
=	O
*	O
mparams	pointer
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
dogleg_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
dogleg_state_t	struct
*	O
state	pointer
=	O
(	O
dogleg_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
dx_gn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
dx_sd	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
dogleg_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
(	O
void	O
)	O
vstate	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
dogleg_state_t	struct
*	O
state	pointer
=	O
(	O
dogleg_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
u	pointer
;	O
double	O
alpha	long double
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
g	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
state	pointer
->	O
norm_Dinvg	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
trust_state	pointer
->	O
J	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
0.0	int
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
state	pointer
->	O
norm_JDinv2g	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
u	pointer
=	O
state	pointer
->	O
norm_Dinvg	double
/	O
state	pointer
->	O
norm_JDinv2g	double
;	O
alpha	long double
=	O
u	pointer
*	O
u	pointer
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_vector_scale	function
(	O
state	pointer
->	O
dx_sd	pointer
,	O
-	O
alpha	long double
)	O
;	O
state	pointer
->	O
norm_Dsd	double
=	O
scaled_enorm	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
state	pointer
->	O
norm_Dgn	double
=	O
-	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
dogleg_state_t	struct
*	O
state	pointer
=	O
(	O
dogleg_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
norm_Dsd	double
>=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
gsl_vector_scale	function
(	O
dx	pointer
,	O
delta	double
/	O
state	pointer
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
<	O
0.0	int
)	O
{	O
int	O
status	int
=	O
dogleg_calc_gn	function
(	O
trust_state	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	pointer
->	O
norm_Dgn	double
=	O
scaled_enorm	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
}	O
else	O
{	O
double	O
beta	long double
=	O
dogleg_beta	function
(	O
1.0	int
,	O
delta	double
,	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
)	O
;	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
dx_gn	pointer
,	O
-	O
1.0	int
,	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
scaled_addition	function
(	O
beta	long double
,	O
state	pointer
->	O
workp	pointer
,	O
1.0	int
,	O
state	pointer
->	O
dx_sd	pointer
,	O
dx	pointer
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_double_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
double	O
alpha_fac	double
=	O
0.8	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
dogleg_state_t	struct
*	O
state	pointer
=	O
(	O
dogleg_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
norm_Dsd	double
>=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_sd	pointer
)	O
;	O
gsl_vector_scale	function
(	O
dx	pointer
,	O
delta	double
/	O
state	pointer
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
<	O
0.0	int
)	O
{	O
int	O
status	int
=	O
dogleg_calc_gn	function
(	O
trust_state	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	pointer
->	O
norm_Dgn	double
=	O
scaled_enorm	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
}	O
else	O
{	O
double	O
t	double
,	O
u	pointer
,	O
v	pointer
,	O
c	pointer
;	O
v	pointer
=	O
state	pointer
->	O
norm_Dinvg	double
/	O
state	pointer
->	O
norm_JDinv2g	double
;	O
u	pointer
=	O
v	pointer
*	O
v	pointer
;	O
gsl_blas_ddot	function
(	O
trust_state	pointer
->	O
g	pointer
,	O
state	pointer
->	O
dx_gn	pointer
,	O
&	O
v	pointer
)	O
;	O
c	pointer
=	O
u	pointer
*	O
(	O
state	pointer
->	O
norm_Dinvg	double
/	O
fabs	function
(	O
v	pointer
)	O
)	O
*	O
state	pointer
->	O
norm_Dinvg	double
;	O
t	double
=	O
1.0	int
-	O
alpha_fac	double
*	O
(	O
1.0	int
-	O
c	pointer
)	O
;	O
if	O
(	O
t	double
*	O
state	pointer
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
dx_gn	pointer
)	O
;	O
gsl_vector_scale	function
(	O
dx	pointer
,	O
delta	double
/	O
state	pointer
->	O
norm_Dgn	double
)	O
;	O
}	O
else	O
{	O
double	O
beta	long double
=	O
dogleg_beta	function
(	O
t	double
,	O
delta	double
,	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
)	O
;	O
scaled_addition	function
(	O
t	double
,	O
state	pointer
->	O
dx_gn	pointer
,	O
-	O
1.0	int
,	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
scaled_addition	function
(	O
beta	long double
,	O
state	pointer
->	O
workp	pointer
,	O
1.0	int
,	O
state	pointer
->	O
dx_sd	pointer
,	O
dx	pointer
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
dogleg_state_t	struct
*	O
state	pointer
=	O
(	O
dogleg_state_t	struct
*	O
)	O
vstate	pointer
;	O
*	O
pred	pointer
=	O
quadratic_preduction	function
(	O
trust_state	pointer
->	O
f	pointer
,	O
trust_state	pointer
->	O
J	pointer
,	O
dx	pointer
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
dogleg_calc_gn	function
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_parameters	struct
*	O
params	pointer
=	O
trust_state	pointer
->	O
params	pointer
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
init	pointer
)	O
(	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
presolve	pointer
)	O
(	O
0.0	int
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
solve	pointer
)	O
(	O
trust_state	pointer
->	O
f	pointer
,	O
dx	pointer
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
dogleg_beta	function
(	O
const	O
double	O
t	double
,	O
const	O
double	O
delta	double
,	O
const	O
gsl_vector	struct
*	O
diag	pointer
,	O
dogleg_state_t	struct
*	O
state	pointer
)	O
{	O
double	O
beta	long double
;	O
double	O
a	double
,	O
b	double
,	O
c	pointer
;	O
scaled_addition	function
(	O
t	double
,	O
state	pointer
->	O
dx_gn	pointer
,	O
-	O
1.0	int
,	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
a	double
=	O
scaled_enorm	function
(	O
diag	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
a	double
*=	O
a	double
;	O
gsl_vector_mul	function
(	O
state	pointer
->	O
workp	pointer
,	O
diag	pointer
)	O
;	O
gsl_vector_mul	function
(	O
state	pointer
->	O
workp	pointer
,	O
diag	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
state	pointer
->	O
dx_sd	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
&	O
b	double
)	O
;	O
b	double
*=	O
2.0	int
;	O
c	pointer
=	O
(	O
state	pointer
->	O
norm_Dsd	double
+	O
delta	double
)	O
*	O
(	O
state	pointer
->	O
norm_Dsd	double
-	O
delta	double
)	O
;	O
if	O
(	O
b	double
>	O
0.0	int
)	O
{	O
beta	long double
=	O
(	O
-	O
2.0	int
*	O
c	pointer
)	O
/	O
(	O
b	double
+	O
sqrt	function
(	O
b	double
*	O
b	double
-	O
4.0	int
*	O
a	double
*	O
c	pointer
)	O
)	O
;	O
}	O
else	O
{	O
beta	long double
=	O
(	O
-	O
b	double
+	O
sqrt	function
(	O
b	double
*	O
b	double
-	O
4.0	int
*	O
a	double
*	O
c	pointer
)	O
)	O
/	O
(	O
2.0	int
*	O
a	double
)	O
;	O
}	O
return	O
beta	long double
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_trs	struct
dogleg_type	struct
=	O
{	O
"dogleg"	pointer
,	O
dogleg_alloc	function
,	O
dogleg_init	function
,	O
dogleg_preloop	function
,	O
dogleg_step	function
,	O
dogleg_preduction	function
,	O
dogleg_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct
*	O
gsl_multifit_nlinear_trs_dogleg	pointer
=	O
&	O
dogleg_type	struct
;	O
static	O
const	O
gsl_multifit_nlinear_trs	struct
ddogleg_type	struct
=	O
{	O
"double-dogleg"	pointer
,	O
dogleg_alloc	function
,	O
dogleg_init	function
,	O
dogleg_preloop	function
,	O
dogleg_double_step	function
,	O
dogleg_preduction	function
,	O
dogleg_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct
*	O
gsl_multifit_nlinear_trs_ddogleg	pointer
=	O
&	O
ddogleg_type	struct
;	O
