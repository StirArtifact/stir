static	O
void	O
FFN	function
(	O
Floop	int
)	O
(	O
object	int
form	int
)	O
{	O
object	int
x	O
;	O
object	int
*	O
oldlex	O
=	O
lex_env	O
;	O
object	int
*	O
top	O
;	O
make_nil_block	function
(	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
return	O
;	O
}	O
top	O
=	O
vs_top	O
;	O
for	O
(	O
x	O
=	O
form	int
;	O
!	O
endp	function
(	O
x	O
)	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
)	O
{	O
vs_top	O
=	O
top	O
;	O
eval	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
}	O
LOOP	O
:	O
for	O
(	O
x	O
=	O
form	int
;	O
x	O
!=	O
Cnil	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
)	O
{	O
vs_top	O
=	O
top	O
;	O
eval	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
}	O
goto	O
LOOP	O
;	O
}	O
static	O
void	O
do_var_list	function
(	O
object	int
var_list	int
)	O
{	O
object	int
is	O
,	O
x	O
,	O
y	O
;	O
for	O
(	O
is	O
=	O
var_list	int
;	O
!	O
endp	function
(	O
is	O
)	O
;	O
is	O
=	O
MMcdr	function
(	O
is	O
)	O
)	O
{	O
x	O
=	O
MMcar	function
(	O
is	O
)	O
;	O
if	O
(	O
type_of	function
(	O
x	O
)	O
==	O
t_symbol	O
)	O
{	O
vs_push	function
(	O
x	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
x	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
type_of	function
(	O
x	O
)	O
!=	O
t_cons	O
)	O
FEinvalid_form	function
(	O
"The index, ~S, is illegal."	pointer
,	O
x	O
)	O
;	O
y	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
check_var	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
if	O
(	O
endp	function
(	O
MMcdr	function
(	O
x	O
)	O
)	O
)	O
{	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
y	O
)	O
;	O
}	O
else	O
{	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
if	O
(	O
endp	function
(	O
MMcdr	function
(	O
x	O
)	O
)	O
)	O
vs_push	function
(	O
y	O
)	O
;	O
else	O
{	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcdr	function
(	O
x	O
)	O
)	O
)	O
FEerror	function
(	O
"Too many forms to the index ~S."	pointer
,	O
1	int
,	O
y	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
FFN	function
(	O
Fdo	int
)	O
(	O
VOL	O
object	int
arg	O
)	O
{	O
object	int
*	O
oldlex	O
=	O
lex_env	O
;	O
object	int
*	O
old_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
,	O
*	O
end	pointer
,	O
*	O
bt	pointer
;	O
object	int
end_test	O
,	O
body	O
;	O
VOL	O
object	int
result	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
if	O
(	O
endp	function
(	O
arg	O
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
arg	O
)	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	O
)	O
;	O
if	O
(	O
endp	function
(	O
MMcadr	function
(	O
arg	O
)	O
)	O
)	O
FEinvalid_form	function
(	O
"The DO end-test, ~S, is illegal."	pointer
,	O
MMcadr	function
(	O
arg	O
)	O
)	O
;	O
end_test	O
=	O
MMcaadr	function
(	O
arg	O
)	O
;	O
result	O
=	O
MMcdadr	function
(	O
arg	O
)	O
;	O
make_nil_block	function
(	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
goto	O
END	O
;	O
}	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
do_var_list	function
(	O
MMcar	function
(	O
arg	O
)	O
)	O
;	O
end	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
body	O
=	O
let_bind	function
(	O
MMcddr	function
(	O
arg	O
)	O
,	O
start	pointer
,	O
end	pointer
)	O
;	O
vs_push	function
(	O
body	O
)	O
;	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
if	O
(	O
(	O
enum	O
stype	O
)	O
bt	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_stype	O
!=	O
stp_ordinary	O
)	O
bt	pointer
->	O
bt_spp	O
=	O
Ct	O
;	O
else	O
if	O
(	O
bt	pointer
->	O
bt_spp	O
==	O
Cnil	O
)	O
bt	pointer
->	O
bt_spp	O
=	O
assoc_eq	function
(	O
bt	pointer
->	O
bt_var	O
,	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
old_top	O
=	O
vs_top	O
;	O
LOOP	O
:	O
vs_top	O
=	O
old_top	O
;	O
eval	function
(	O
end_test	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
endp	function
(	O
result	O
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
old_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
else	O
do	O
{	O
vs_top	O
=	O
old_top	O
;	O
eval	function
(	O
MMcar	function
(	O
result	O
)	O
)	O
;	O
result	O
=	O
MMcdr	function
(	O
result	O
)	O
;	O
}	O
while	O
(	O
!	O
endp	function
(	O
result	O
)	O
)	O
;	O
goto	O
END	O
;	O
}	O
vs_top	O
=	O
old_top	O
;	O
Ftagbody	function
(	O
body	O
)	O
;	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
{	O
if	O
(	O
bt	pointer
->	O
bt_aux	O
!=	O
bt	pointer
->	O
bt_var	O
)	O
{	O
eval_assign	function
(	O
bt	pointer
->	O
bt_init	O
,	O
bt	pointer
->	O
bt_aux	O
)	O
;	O
}	O
}	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
{	O
if	O
(	O
bt	pointer
->	O
bt_aux	O
!=	O
bt	pointer
->	O
bt_var	O
)	O
{	O
if	O
(	O
bt	pointer
->	O
bt_spp	O
==	O
Ct	O
)	O
bt	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
=	O
bt	pointer
->	O
bt_init	O
;	O
else	O
MMcadr	function
(	O
bt	pointer
->	O
bt_spp	O
)	O
=	O
bt	pointer
->	O
bt_init	O
;	O
}	O
}	O
goto	O
LOOP	O
;	O
END	O
:	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
FdoA	int
)	O
(	O
VOL	O
object	int
arg	O
)	O
{	O
object	int
*	O
oldlex	O
=	O
lex_env	O
;	O
object	int
*	O
old_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
,	O
*	O
end	pointer
,	O
*	O
bt	pointer
;	O
object	int
end_test	O
,	O
body	O
;	O
VOL	O
object	int
result	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
if	O
(	O
endp	function
(	O
arg	O
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
arg	O
)	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	O
)	O
;	O
if	O
(	O
endp	function
(	O
MMcadr	function
(	O
arg	O
)	O
)	O
)	O
FEinvalid_form	function
(	O
"The DO* end-test, ~S, is illegal."	pointer
,	O
MMcadr	function
(	O
arg	O
)	O
)	O
;	O
end_test	O
=	O
MMcaadr	function
(	O
arg	O
)	O
;	O
result	O
=	O
MMcdadr	function
(	O
arg	O
)	O
;	O
make_nil_block	function
(	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
goto	O
END	O
;	O
}	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
do_var_list	function
(	O
MMcar	function
(	O
arg	O
)	O
)	O
;	O
end	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
body	O
=	O
letA_bind	function
(	O
MMcddr	function
(	O
arg	O
)	O
,	O
start	pointer
,	O
end	pointer
)	O
;	O
vs_push	function
(	O
body	O
)	O
;	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
if	O
(	O
(	O
enum	O
stype	O
)	O
bt	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_stype	O
!=	O
stp_ordinary	O
)	O
bt	pointer
->	O
bt_spp	O
=	O
Ct	O
;	O
else	O
if	O
(	O
bt	pointer
->	O
bt_spp	O
==	O
Cnil	O
)	O
bt	pointer
->	O
bt_spp	O
=	O
assoc_eq	function
(	O
bt	pointer
->	O
bt_var	O
,	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
old_top	O
=	O
vs_top	O
;	O
LOOP	O
:	O
eval	function
(	O
end_test	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
endp	function
(	O
result	O
)	O
)	O
{	O
vs_base	O
=	O
vs_top	O
=	O
old_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
else	O
do	O
{	O
vs_top	O
=	O
old_top	O
;	O
eval	function
(	O
MMcar	function
(	O
result	O
)	O
)	O
;	O
result	O
=	O
MMcdr	function
(	O
result	O
)	O
;	O
}	O
while	O
(	O
!	O
endp	function
(	O
result	O
)	O
)	O
;	O
goto	O
END	O
;	O
}	O
vs_top	O
=	O
old_top	O
;	O
Ftagbody	function
(	O
body	O
)	O
;	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
if	O
(	O
bt	pointer
->	O
bt_aux	O
!=	O
bt	pointer
->	O
bt_var	O
)	O
{	O
if	O
(	O
bt	pointer
->	O
bt_spp	O
==	O
Ct	O
)	O
{	O
eval_assign	function
(	O
bt	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
,	O
bt	pointer
->	O
bt_aux	O
)	O
;	O
}	O
else	O
{	O
eval_assign	function
(	O
MMcadr	function
(	O
bt	pointer
->	O
bt_spp	O
)	O
,	O
bt	pointer
->	O
bt_aux	O
)	O
;	O
}	O
}	O
goto	O
LOOP	O
;	O
END	O
:	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fdolist	int
)	O
(	O
VOL	O
object	int
arg	O
)	O
{	O
object	int
*	O
oldlex	O
=	O
lex_env	O
;	O
object	int
*	O
old_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
;	O
object	int
x	O
,	O
listform	O
,	O
body	O
;	O
VOL	O
object	int
result	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
if	O
(	O
endp	function
(	O
arg	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	O
)	O
;	O
x	O
=	O
MMcar	function
(	O
arg	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
FEerror	function
(	O
"No variable."	pointer
,	O
0	int
)	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
FEerror	function
(	O
"No listform."	pointer
,	O
0	int
)	O
;	O
listform	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
result	O
=	O
Cnil	O
;	O
else	O
{	O
result	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcdr	function
(	O
x	O
)	O
)	O
)	O
FEerror	function
(	O
"Too many resultforms."	pointer
,	O
0	int
)	O
;	O
}	O
make_nil_block	function
(	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
goto	O
END	O
;	O
}	O
eval_assign	function
(	O
start	pointer
->	O
bt_init	O
,	O
listform	O
)	O
;	O
body	O
=	O
find_special	function
(	O
MMcdr	function
(	O
arg	O
)	O
,	O
start	pointer
,	O
start	pointer
+	O
1	int
)	O
;	O
vs_push	function
(	O
body	O
)	O
;	O
bind_var	function
(	O
start	pointer
->	O
bt_var	O
,	O
Cnil	O
,	O
start	pointer
->	O
bt_spp	O
)	O
;	O
if	O
(	O
(	O
enum	O
stype	O
)	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_stype	O
!=	O
stp_ordinary	O
)	O
start	pointer
->	O
bt_spp	O
=	O
Ct	O
;	O
else	O
if	O
(	O
start	pointer
->	O
bt_spp	O
==	O
Cnil	O
)	O
start	pointer
->	O
bt_spp	O
=	O
assoc_eq	function
(	O
start	pointer
->	O
bt_var	O
,	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
old_top	O
=	O
vs_top	O
;	O
LOOP	O
:	O
if	O
(	O
endp	function
(	O
start	pointer
->	O
bt_init	O
)	O
)	O
{	O
if	O
(	O
start	pointer
->	O
bt_spp	O
==	O
Ct	O
)	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
=	O
Cnil	O
;	O
else	O
MMcadr	function
(	O
start	pointer
->	O
bt_spp	O
)	O
=	O
Cnil	O
;	O
eval	function
(	O
result	O
)	O
;	O
goto	O
END	O
;	O
}	O
if	O
(	O
start	pointer
->	O
bt_spp	O
==	O
Ct	O
)	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
=	O
MMcar	function
(	O
start	pointer
->	O
bt_init	O
)	O
;	O
else	O
MMcadr	function
(	O
start	pointer
->	O
bt_spp	O
)	O
=	O
MMcar	function
(	O
start	pointer
->	O
bt_init	O
)	O
;	O
start	pointer
->	O
bt_init	O
=	O
MMcdr	function
(	O
start	pointer
->	O
bt_init	O
)	O
;	O
vs_top	O
=	O
old_top	O
;	O
Ftagbody	function
(	O
body	O
)	O
;	O
goto	O
LOOP	O
;	O
END	O
:	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fdotimes	int
)	O
(	O
VOL	O
object	int
arg	O
)	O
{	O
object	int
*	O
oldlex	O
=	O
lex_env	O
;	O
object	int
*	O
old_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
;	O
object	int
x	O
,	O
countform	O
,	O
body	O
;	O
VOL	O
object	int
result	O
;	O
bds_ptr	O
old_bds_top	O
=	O
bds_top	O
;	O
if	O
(	O
endp	function
(	O
arg	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	O
)	O
;	O
x	O
=	O
MMcar	function
(	O
arg	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
FEerror	function
(	O
"No variable."	pointer
,	O
0	int
)	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
FEerror	function
(	O
"No countform."	pointer
,	O
0	int
)	O
;	O
countform	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
result	O
=	O
Cnil	O
;	O
else	O
{	O
result	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcdr	function
(	O
x	O
)	O
)	O
)	O
FEerror	function
(	O
"Too many resultforms."	pointer
,	O
0	int
)	O
;	O
}	O
make_nil_block	function
(	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
goto	O
END	O
;	O
}	O
eval_assign	function
(	O
start	pointer
->	O
bt_init	O
,	O
countform	O
)	O
;	O
if	O
(	O
type_of	function
(	O
start	pointer
->	O
bt_init	O
)	O
!=	O
t_fixnum	O
&&	O
type_of	function
(	O
start	pointer
->	O
bt_init	O
)	O
!=	O
t_bignum	O
)	O
FEwrong_type_argument	function
(	O
sLinteger	O
,	O
start	pointer
->	O
bt_init	O
)	O
;	O
body	O
=	O
find_special	function
(	O
MMcdr	function
(	O
arg	O
)	O
,	O
start	pointer
,	O
start	pointer
+	O
1	int
)	O
;	O
vs_push	function
(	O
body	O
)	O
;	O
bind_var	function
(	O
start	pointer
->	O
bt_var	O
,	O
make_fixnum	function
(	O
0	int
)	O
,	O
start	pointer
->	O
bt_spp	O
)	O
;	O
if	O
(	O
(	O
enum	O
stype	O
)	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_stype	O
!=	O
stp_ordinary	O
)	O
{	O
start	pointer
->	O
bt_spp	O
=	O
Ct	O
;	O
x	O
=	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
;	O
}	O
else	O
if	O
(	O
start	pointer
->	O
bt_spp	O
==	O
Cnil	O
)	O
{	O
start	pointer
->	O
bt_spp	O
=	O
assoc_eq	function
(	O
start	pointer
->	O
bt_var	O
,	O
lex_env	O
[	O
0	int
]	O
)	O
;	O
x	O
=	O
MMcadr	function
(	O
start	pointer
->	O
bt_spp	O
)	O
;	O
}	O
else	O
x	O
=	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
;	O
old_top	O
=	O
vs_top	O
;	O
LOOP	O
:	O
if	O
(	O
number_compare	function
(	O
x	O
,	O
start	pointer
->	O
bt_init	O
)	O
>=	O
0	int
)	O
{	O
eval	function
(	O
result	O
)	O
;	O
goto	O
END	O
;	O
}	O
vs_top	O
=	O
old_top	O
;	O
Ftagbody	function
(	O
body	O
)	O
;	O
if	O
(	O
start	pointer
->	O
bt_spp	O
==	O
Ct	O
)	O
x	O
=	O
start	pointer
->	O
bt_var	O
->	O
s	O
.	O
s_dbind	O
=	O
one_plus	function
(	O
x	O
)	O
;	O
else	O
x	O
=	O
MMcadr	function
(	O
start	pointer
->	O
bt_spp	O
)	O
=	O
one_plus	function
(	O
x	O
)	O
;	O
goto	O
LOOP	O
;	O
END	O
:	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
}	O
void	O
gcl_init_iteration	function
(	O
void	O
)	O
{	O
make_special_form	function
(	O
"LOOP"	pointer
,	O
Floop	int
)	O
;	O
make_special_form	function
(	O
"DO"	pointer
,	O
Fdo	int
)	O
;	O
make_special_form	function
(	O
"DO*"	pointer
,	O
FdoA	int
)	O
;	O
make_special_form	function
(	O
"DOLIST"	pointer
,	O
Fdolist	int
)	O
;	O
make_special_form	function
(	O
"DOTIMES"	pointer
,	O
Fdotimes	int
)	O
;	O
}	O
