extern	O
char	O
*	O
STARTUP_FILE_NAME	pointer
;	O
extern	O
void	O
checkFileExtension	function
(	O
)	O
;	O
void	O
drawScrollBar	function
(	O
)	O
;	O
int	O
isKeyword	function
(	O
int	O
pos	int
,	O
int	O
start	int
,	O
int	O
*	O
wordlen	pointer
)	O
;	O
static	O
sig_atomic_t	int
end	int
=	O
0	int
;	O
FILE	struct
*	O
NULL_DEV	pointer
;	O
char	O
*	O
open_file_name	pointer
;	O
struct	O
termios	struct
oldtio	struct
,	O
curtio	struct
;	O
struct	O
sigaction	struct
sa	struct
;	O
void	O
confirmEOL	function
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
selectedChar	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
selectedChar	int
=	O
MAX_CHARS_PER_LINE	int
-	O
1	int
;	O
if	O
(	O
selectedChar	int
>=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
{	O
selectedChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
selectedChar	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
selectedChar	int
--	O
;	O
}	O
}	O
void	O
gotoNextWord	function
(	O
int	O
pos	int
,	O
int	O
startAt	int
)	O
{	O
int	O
i	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
startAt	int
;	O
selectedChar	int
=	O
charsToBytes	function
(	O
pos	int
,	O
startAt	int
)	O
;	O
while	O
(	O
is_whitespace	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
,	O
selectedChar	int
++	O
;	O
if	O
(	O
*	O
s	pointer
==	O
'\n'	O
||	O
*	O
s	pointer
==	O
'\0'	O
)	O
return	O
;	O
while	O
(	O
*	O
s	pointer
&&	O
!	O
is_whitespace	function
(	O
*	O
s	pointer
)	O
)	O
{	O
if	O
(	O
(	O
*	O
s	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
selectedChar	int
++	O
;	O
s	pointer
++	O
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
'\n'	O
||	O
*	O
s	pointer
==	O
'\0'	O
)	O
return	O
;	O
while	O
(	O
is_whitespace	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
,	O
selectedChar	int
++	O
;	O
}	O
void	O
gotoPrevWord	function
(	O
int	O
pos	int
,	O
int	O
startAt	int
)	O
{	O
int	O
i	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
;	O
selectedChar	int
=	O
0	int
;	O
while	O
(	O
is_whitespace	function
(	O
s	pointer
[	O
startAt	int
]	O
)	O
)	O
startAt	int
--	O
;	O
if	O
(	O
startAt	int
<=	O
0	int
)	O
return	O
;	O
while	O
(	O
!	O
is_whitespace	function
(	O
s	pointer
[	O
startAt	int
]	O
)	O
)	O
startAt	int
--	O
;	O
if	O
(	O
is_whitespace	function
(	O
s	pointer
[	O
startAt	int
]	O
)	O
)	O
startAt	int
++	O
;	O
if	O
(	O
startAt	int
<=	O
0	int
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
startAt	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
*	O
s	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
selectedChar	int
++	O
;	O
}	O
}	O
void	O
sighandler	function
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
signo	int
==	O
2	int
)	O
{	O
editMenu_Copy	function
(	O
)	O
;	O
}	O
else	O
{	O
end	int
=	O
1	int
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
NULL_DEV	pointer
=	O
fopen	function
(	O
"/dev/null"	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
NULL_DEV	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to open NULL device\n"	pointer
)	O
;	O
parseLineArgs	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
init	function
(	O
STARTUP_FILE_NAME	pointer
)	O
;	O
clearScreen	function
(	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
drawMenuBar	function
(	O
1	int
,	O
1	int
,	O
SCREEN_W	int
)	O
;	O
drawBox	function
(	O
2	int
,	O
1	int
,	O
SCREEN_H	int
-	O
1	int
,	O
SCREEN_W	int
,	O
documentTitle	pointer
,	O
YES	int
,	O
1	int
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
if	O
(	O
open_file_at_startup	int
)	O
{	O
open_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
STARTUP_FILE_NAME	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
open_file_name	pointer
)	O
goto	O
memerr	O
;	O
strcpy	function
(	O
open_file_name	pointer
,	O
STARTUP_FILE_NAME	pointer
)	O
;	O
if	O
(	O
!	O
openSaveFile	function
(	O
OPEN	int
,	O
NO	int
,	O
open_file_name	pointer
)	O
)	O
{	O
__initNewDocument	function
(	O
)	O
;	O
NEW_FILE	int
=	O
1	int
;	O
FILE_STATE	enum
=	O
NEW	int
;	O
checkFileExtension	function
(	O
open_file_name	pointer
)	O
;	O
}	O
getScreenSize	function
(	O
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
if	O
(	O
SHOW_README	int
)	O
showREADMEOnStartup	function
(	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[3;2H"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
int	O
char_inserted	int
=	O
0	int
;	O
char	O
*	O
ch	pointer
;	O
int	O
pos	int
,	O
len	int
,	O
i	int
;	O
int	O
refreshAll	int
;	O
while	O
(	O
!	O
end	int
)	O
{	O
ch	pointer
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
ch	pointer
[	O
0	int
]	O
)	O
{	O
case	O
(	O
ESC_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_esc	O
:	O
SELECTED	int
=	O
0	int
;	O
SELECTING	int
=	O
0	int
;	O
refreshView	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
SHIFT_DOWN	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
do_shift_down	O
:	O
SELECTING	int
=	O
1	int
;	O
SELECTED	int
=	O
0	int
;	O
sel_range_start	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_start	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
refreshBottomView	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
SHIFT_UP	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
SELECTING	int
=	O
0	int
;	O
SELECTED	int
=	O
1	int
;	O
if	O
(	O
char_inserted	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
char_inserted	int
=	O
0	int
;	O
}	O
refreshBottomView	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
INS_KEY	int
)	O
:	O
INSERT	int
=	O
!	O
INSERT	int
;	O
char_inserted	int
=	O
0	int
;	O
refreshBottomView	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
CAPS_KEY	int
)	O
:	O
CAPS	int
=	O
!	O
CAPS	int
;	O
char_inserted	int
=	O
0	int
;	O
refreshBottomView	function
(	O
)	O
;	O
break	O
;	O
case	O
(	O
PGUP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_pg_up	O
:	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
firstVisLine	int
==	O
0	int
)	O
selectedLine	int
=	O
0	int
;	O
else	O
if	O
(	O
firstVisLine	int
-	O
totalVisLines	int
<	O
0	int
)	O
{	O
selectedLine	int
=	O
firstVisLine	int
;	O
firstVisLine	int
=	O
0	int
;	O
}	O
else	O
firstVisLine	int
-=	O
totalVisLines	int
;	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
selectedChar	int
>	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
selectedChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
if	O
(	O
SELECTED	int
)	O
SELECTED	int
=	O
0	int
;	O
refreshView	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
PGDOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_pg_down	O
:	O
char_inserted	int
=	O
0	int
;	O
firstVisLine	int
+=	O
totalVisLines	int
;	O
if	O
(	O
firstVisLine	int
+	O
totalVisLines	int
>=	O
totalLines	int
)	O
{	O
firstVisLine	int
=	O
totalLines	int
-	O
totalVisLines	int
;	O
selectedLine	int
=	O
totalVisLines	int
-	O
1	int
;	O
}	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
selectedChar	int
>	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
selectedChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
if	O
(	O
SELECTED	int
)	O
SELECTED	int
=	O
0	int
;	O
refreshView	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
HOME_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_home	O
:	O
refreshAll	int
=	O
0	int
;	O
char_inserted	int
=	O
0	int
;	O
selectedCharCarry	int
=	O
0	int
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
||	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
>=	O
3	int
&&	O
ch	pointer
[	O
0	int
]	O
==	O
'>'	O
)	O
)	O
{	O
selectedLine	int
=	O
0	int
;	O
firstVisLine	int
=	O
0	int
;	O
refreshAll	int
=	O
1	int
;	O
}	O
else	O
{	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
while	O
(	O
pos	int
&&	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
)	O
pos	int
--	O
;	O
if	O
(	O
pos	int
<	O
firstVisLine	int
)	O
{	O
firstVisLine	int
=	O
pos	int
;	O
selectedLine	int
=	O
0	int
;	O
refreshAll	int
=	O
1	int
;	O
}	O
else	O
{	O
selectedLine	int
=	O
pos	int
-	O
firstVisLine	int
;	O
}	O
}	O
selectedChar	int
=	O
0	int
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
}	O
if	O
(	O
refreshAll	int
)	O
refreshView	function
(	O
)	O
;	O
else	O
refreshSelectedLine	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
END_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_end	O
:	O
refreshAll	int
=	O
0	int
;	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
||	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
>=	O
3	int
&&	O
ch	pointer
[	O
0	int
]	O
==	O
'<'	O
)	O
)	O
{	O
if	O
(	O
totalLines	int
<=	O
totalVisLines	int
)	O
{	O
selectedLine	int
=	O
totalLines	int
-	O
1	int
;	O
firstVisLine	int
=	O
0	int
;	O
}	O
else	O
{	O
firstVisLine	int
=	O
totalLines	int
-	O
totalVisLines	int
;	O
selectedLine	int
=	O
totalVisLines	int
-	O
1	int
;	O
refreshAll	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
while	O
(	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
)	O
pos	int
++	O
;	O
if	O
(	O
pos	int
>	O
firstVisLine	int
+	O
totalVisLines	int
)	O
{	O
selectedLine	int
=	O
totalVisLines	int
-	O
1	int
;	O
firstVisLine	int
=	O
pos	int
-	O
totalVisLines	int
;	O
refreshAll	int
=	O
1	int
;	O
}	O
else	O
{	O
selectedLine	int
=	O
pos	int
-	O
firstVisLine	int
;	O
}	O
}	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
len	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
selectedChar	int
=	O
len	int
;	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
}	O
if	O
(	O
refreshAll	int
)	O
refreshView	function
(	O
)	O
;	O
else	O
refreshSelectedLine	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_right	O
:	O
char_inserted	int
=	O
0	int
;	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
WRAP_LINES	int
)	O
{	O
int	O
oldChar	int
=	O
selectedChar	int
;	O
len	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
if	O
(	O
selectedChar	int
>=	O
len	int
||	O
selectedChar	int
+	O
selectedCharCarry	int
>=	O
MAX_CHARS_PER_LINE	int
-	O
1	int
)	O
{	O
if	O
(	O
(	O
selectedLine	int
+	O
firstVisLine	int
)	O
>=	O
(	O
totalLines	int
-	O
1	int
)	O
)	O
break	O
;	O
selectedCharCarry	int
=	O
0	int
;	O
if	O
(	O
selectedLine	int
==	O
totalVisLines	int
-	O
1	int
)	O
{	O
firstVisLine	int
++	O
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoNextWord	function
(	O
pos	int
+	O
1	int
,	O
0	int
)	O
;	O
if	O
(	O
selectedChar	int
==	O
oldChar	int
)	O
selectedChar	int
=	O
i	int
;	O
}	O
else	O
selectedChar	int
=	O
0	int
;	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
else	O
{	O
selectedLine	int
++	O
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoNextWord	function
(	O
pos	int
+	O
1	int
,	O
0	int
)	O
;	O
if	O
(	O
selectedChar	int
==	O
oldChar	int
)	O
selectedChar	int
=	O
i	int
;	O
}	O
else	O
selectedChar	int
=	O
0	int
;	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
refreshSelectedLine	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoNextWord	function
(	O
pos	int
,	O
selectedChar	int
+	O
1	int
)	O
;	O
if	O
(	O
selectedChar	int
==	O
oldChar	int
)	O
{	O
selectedChar	int
=	O
i	int
;	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
selectedChar	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
selectedChar	int
--	O
;	O
}	O
}	O
else	O
selectedChar	int
++	O
;	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
refreshSelectedLine	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
refreshView	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_left	O
:	O
char_inserted	int
=	O
0	int
;	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
if	O
(	O
selectedChar	int
==	O
0	int
)	O
{	O
if	O
(	O
selectedLine	int
==	O
0	int
)	O
{	O
if	O
(	O
firstVisLine	int
==	O
0	int
)	O
break	O
;	O
firstVisLine	int
--	O
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoPrevWord	function
(	O
pos	int
-	O
1	int
,	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
charCount	int
-	O
1	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
selectedChar	int
=	O
0	int
;	O
}	O
else	O
{	O
selectedChar	int
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
charCount	int
;	O
if	O
(	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
[	O
selectedChar	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
selectedChar	int
--	O
;	O
}	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
calcCharCarry	function
(	O
pos	int
-	O
1	int
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
else	O
{	O
selectedLine	int
--	O
;	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoPrevWord	function
(	O
pos	int
-	O
1	int
,	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
charCount	int
-	O
1	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
selectedChar	int
=	O
0	int
;	O
}	O
else	O
{	O
selectedChar	int
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
charCount	int
;	O
if	O
(	O
selectedChar	int
&&	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
[	O
selectedChar	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
selectedChar	int
--	O
;	O
}	O
calcCharCarry	function
(	O
pos	int
-	O
1	int
)	O
;	O
if	O
(	O
selectedChar	int
+	O
selectedCharCarry	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
selectedChar	int
--	O
;	O
if	O
(	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
charCount	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
1	int
+	O
selectedCharCarry	int
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
refreshView	function
(	O
)	O
;	O
}	O
else	O
{	O
refreshSelectedLine	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
==	O
1	int
)	O
||	O
(	O
ALT	int
&&	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
)	O
{	O
gotoPrevWord	function
(	O
pos	int
,	O
selectedChar	int
-	O
1	int
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
selectedChar	int
=	O
0	int
;	O
}	O
else	O
selectedChar	int
--	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
refreshSelectedLine	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
}	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
refreshView	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
selectedLine	int
>	O
0	int
)	O
{	O
selectedLine	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
firstVisLine	int
>	O
0	int
)	O
firstVisLine	int
--	O
;	O
else	O
{	O
break	O
;	O
}	O
if	O
(	O
!	O
SELECTING	int
)	O
refreshView	function
(	O
)	O
;	O
}	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
}	O
refreshView	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
(	O
firstVisLine	int
+	O
selectedLine	int
)	O
>=	O
totalLines	int
-	O
1	int
)	O
break	O
;	O
if	O
(	O
selectedLine	int
<	O
totalVisLines	int
-	O
1	int
)	O
{	O
selectedLine	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
firstVisLine	int
<	O
totalLines	int
-	O
totalVisLines	int
)	O
firstVisLine	int
++	O
;	O
else	O
break	O
;	O
if	O
(	O
!	O
SELECTING	int
)	O
refreshView	function
(	O
)	O
;	O
}	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
confirmEOL	function
(	O
pos	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
{	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
selectedChar	int
;	O
}	O
if	O
(	O
SELECTED	int
)	O
{	O
SELECTED	int
=	O
0	int
;	O
}	O
refreshView	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
BACKSPACE_KEY	int
)	O
:	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
else	O
{	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
<	O
4	int
)	O
||	O
ALT	int
)	O
deletePrevWord	function
(	O
)	O
;	O
else	O
deletePrevChar	function
(	O
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
DEL_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
do_del	O
:	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
else	O
{	O
if	O
(	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
<	O
4	int
)	O
||	O
ALT	int
)	O
deleteNextWord	function
(	O
)	O
;	O
else	O
deleteNextChar	function
(	O
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
char_inserted	int
=	O
1	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
insertEnter	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
TAB_KEY	int
)	O
:	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
char_inserted	int
=	O
1	int
;	O
insertTab	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
default	O
:	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'f'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_right	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
showMenu	function
(	O
0	int
,	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'e'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
showMenu	function
(	O
1	int
,	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'h'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
showMenu	function
(	O
3	int
,	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'o'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
showMenu	function
(	O
2	int
,	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'b'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_left	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'W'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
4	int
)	O
break	O
;	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
char_inserted	int
=	O
0	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
' '	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
goto	O
do_shift_down	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'G'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_esc	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'v'	O
&&	O
ALT	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_pg_up	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'V'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_pg_down	O
;	O
editMenu_Paste	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'C'	O
&&	O
CTRL	int
)	O
{	O
editMenu_Copy	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'X'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_STATUS_BAR	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
SCREEN_H	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[C-f] [C-e] [C-o] [C-h] [C-c] [C-s] [C-u] [C-g]"	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
ch	pointer
=	O
getKey	function
(	O
)	O
;	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'f'	O
&&	O
CTRL	int
)	O
{	O
showMenu	function
(	O
0	int
,	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'e'	O
&&	O
CTRL	int
)	O
{	O
showMenu	function
(	O
1	int
,	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'o'	O
&&	O
CTRL	int
)	O
{	O
showMenu	function
(	O
2	int
,	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'h'	O
&&	O
CTRL	int
)	O
{	O
showMenu	function
(	O
3	int
,	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'c'	O
&&	O
CTRL	int
)	O
{	O
fileMenu_Exit	function
(	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
's'	O
&&	O
CTRL	int
)	O
{	O
fileMenu_Save	function
(	O
open_file_name	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'u'	O
)	O
{	O
editMenu_Undo	function
(	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'g'	O
&&	O
CTRL	int
)	O
{	O
break	O
;	O
}	O
}	O
refreshBottomView	function
(	O
)	O
;	O
break	O
;	O
}	O
else	O
editMenu_Cut	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
editMenu_Undo	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'_'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
editMenu_Undo	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'A'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_home	O
;	O
editMenu_SelectAll	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'Z'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
editMenu_Undo	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'Y'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
editMenu_Paste	function
(	O
)	O
;	O
else	O
editMenu_Redo	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'R'	O
&&	O
CTRL	int
)	O
{	O
editMenu_Replace	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'F'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_right	O
;	O
editMenu_Find	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'E'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_end	O
;	O
editMenu_ToggleSelectMode	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'O'	O
&&	O
CTRL	int
)	O
{	O
fileMenu_Open	function
(	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'S'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
editMenu_Find	function
(	O
)	O
;	O
else	O
fileMenu_Save	function
(	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'N'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_down	O
;	O
fileMenu_New	function
(	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'P'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_up	O
;	O
fileMenu_Print	function
(	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'Q'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
fileMenu_Exit	function
(	O
open_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'D'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
goto	O
do_del	O
;	O
deleteLine	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'K'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
deleteLine	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
==	O
'B'	O
&&	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_left	O
;	O
}	O
else	O
{	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
{	O
if	O
(	O
sel_range_start	struct
.	O
nchar	int
==	O
sel_range_end	struct
.	O
nchar	int
)	O
if	O
(	O
sel_range_start	struct
.	O
nline	int
!=	O
sel_range_end	struct
.	O
nline	int
)	O
remove_selected_text	function
(	O
1	int
)	O
;	O
SELECTED	int
=	O
SELECTING	int
=	O
0	int
;	O
}	O
if	O
(	O
CAPS	int
)	O
{	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
>=	O
'a'	O
&&	O
ch	pointer
[	O
0	int
]	O
<=	O
'z'	O
)	O
ch	pointer
[	O
0	int
]	O
-=	O
32	int
;	O
else	O
if	O
(	O
ch	pointer
[	O
0	int
]	O
>=	O
'A'	O
&&	O
ch	pointer
[	O
0	int
]	O
<=	O
'Z'	O
)	O
ch	pointer
[	O
0	int
]	O
+=	O
32	int
;	O
else	O
insertChar	function
(	O
ch	pointer
)	O
;	O
}	O
else	O
insertChar	function
(	O
ch	pointer
)	O
;	O
char_inserted	int
=	O
1	int
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
restoreTerminal	function
(	O
)	O
;	O
fcloseall	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
memerr	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Fatal error: Insufficient memory\n"	pointer
)	O
;	O
EXIT	O
(	O
)	O
;	O
}	O
void	O
deleteLine	function
(	O
)	O
{	O
int	O
pos	int
=	O
selectedLine	int
+	O
firstVisLine	int
;	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
int	O
chr	int
=	O
selectedChar	int
;	O
selectedChar	int
=	O
0	int
;	O
sel_range_start	struct
.	O
nline	int
=	O
pos	int
;	O
sel_range_end	struct
.	O
nline	int
=	O
pos	int
+	O
1	int
;	O
sel_range_start	struct
.	O
nchar	int
=	O
0	int
;	O
sel_range_end	struct
.	O
nchar	int
=	O
0	int
;	O
remove_selected_text	function
(	O
1	int
)	O
;	O
selectedChar	int
=	O
chr	int
;	O
if	O
(	O
selectedChar	int
>	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
selectedChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
refreshView	function
(	O
)	O
;	O
}	O
int	O
is_whitespace	function
(	O
char	O
c	char
)	O
{	O
if	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\v'	O
||	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
'\f'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
findNextChar	function
(	O
int	O
pos	int
,	O
int	O
selByte	int
)	O
{	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
selByte	int
;	O
char	O
*	O
s2	pointer
=	O
s	pointer
;	O
while	O
(	O
(	O
*	O
(	O
++	O
s2	pointer
)	O
&	O
0xc0	int
)	O
==	O
0x80	int
)	O
;	O
return	O
s2	pointer
-	O
s	pointer
;	O
}	O
int	O
findPrevChar	function
(	O
int	O
pos	int
,	O
int	O
selByte	int
)	O
{	O
if	O
(	O
selByte	int
==	O
0	int
)	O
return	O
0	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
selByte	int
;	O
char	O
*	O
s2	pointer
=	O
s	pointer
;	O
while	O
(	O
(	O
*	O
(	O
--	O
s2	pointer
)	O
&	O
0xc0	int
)	O
==	O
0x80	int
)	O
;	O
return	O
s2	pointer
-	O
s	pointer
;	O
}	O
void	O
copyInLine	function
(	O
int	O
pos	int
,	O
int	O
to	int
,	O
int	O
from	int
,	O
int	O
calcTotalChars	int
)	O
{	O
int	O
len	int
=	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
-	O
from	int
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
{	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
to	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
char	O
tmp	O
[	O
len	int
+	O
1	int
]	O
;	O
strcpy	function
(	O
tmp	O
,	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
from	int
)	O
;	O
strcpy	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
to	int
,	O
tmp	O
)	O
;	O
}	O
if	O
(	O
calcTotalChars	int
)	O
calcTotalCharsInLine	function
(	O
pos	int
)	O
;	O
}	O
int	O
charsToBytes	function
(	O
int	O
pos	int
,	O
int	O
selChar	int
)	O
{	O
if	O
(	O
selChar	int
==	O
0	int
)	O
return	O
0	int
;	O
int	O
selByte	int
=	O
0	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
;	O
while	O
(	O
selChar	int
)	O
{	O
if	O
(	O
(	O
*	O
s	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
selChar	int
--	O
;	O
selByte	int
++	O
;	O
}	O
return	O
selByte	int
;	O
}	O
int	O
extendLineText	function
(	O
int	O
pos	int
,	O
int	O
newSize	int
)	O
{	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
bytesAlloced	int
>=	O
newSize	int
)	O
return	O
1	int
;	O
char	O
*	O
s	pointer
=	O
(	O
char	O
*	O
)	O
realloc	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
,	O
newSize	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
0	int
;	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
=	O
s	pointer
;	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
]	O
=	O
'\0'	O
;	O
lines	array
[	O
pos	int
]	O
->	O
bytesAlloced	int
=	O
newSize	int
;	O
return	O
1	int
;	O
}	O
void	O
checkLineBounds	function
(	O
int	O
pos	int
)	O
{	O
int	O
carry	pointer
=	O
0	int
;	O
calcTotalCharsInLineC	function
(	O
pos	int
,	O
&	O
carry	pointer
)	O
;	O
int	O
len	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
+	O
carry	pointer
;	O
if	O
(	O
len	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
{	O
pos	int
++	O
;	O
move_lines_down	function
(	O
totalLines	int
,	O
pos	int
)	O
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
;	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
int	O
selCharCarry	int
=	O
0	int
;	O
int	O
i	int
=	O
0	int
,	O
j	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
;	O
for	O
(	O
;	O
i	int
<	O
MAX_CHARS_PER_LINE	int
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'\t'	O
)	O
{	O
j	int
=	O
TABSPACES	O
(	O
i	int
+	O
selCharCarry	int
+	O
1	int
)	O
;	O
selCharCarry	int
+=	O
j	int
;	O
i	int
+=	O
j	int
;	O
}	O
if	O
(	O
(	O
*	O
s	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
i	int
++	O
;	O
}	O
j	int
=	O
s	pointer
-	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
;	O
strcpy	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
,	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
+	O
j	int
)	O
;	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
calcTotalCharsInLine	function
(	O
pos	int
-	O
1	int
)	O
;	O
checkLineBounds	function
(	O
pos	int
)	O
;	O
}	O
else	O
{	O
postDeleteWord	function
(	O
pos	int
)	O
;	O
calcTotalCharsInLine	function
(	O
pos	int
)	O
;	O
}	O
}	O
int	O
appendToLine	function
(	O
int	O
posTo	int
,	O
int	O
posFrom	int
,	O
int	O
count	int
)	O
{	O
extendLineText	function
(	O
posTo	int
,	O
maxLen	int
)	O
;	O
char	O
*	O
to	int
=	O
lines	array
[	O
posTo	int
]	O
->	O
text	pointer
+	O
lines	array
[	O
posTo	int
]	O
->	O
byteCount	int
;	O
char	O
*	O
from	int
=	O
lines	array
[	O
posFrom	int
]	O
->	O
text	pointer
;	O
int	O
bytes	int
=	O
0	int
;	O
char	O
c	char
;	O
while	O
(	O
count	int
--	O
>	O
0	int
)	O
{	O
c	char
=	O
*	O
from	int
++	O
;	O
*	O
to	int
++	O
=	O
c	char
;	O
if	O
(	O
!	O
c	char
)	O
break	O
;	O
bytes	int
++	O
;	O
while	O
(	O
(	O
*	O
from	int
&	O
0xc0	int
)	O
==	O
0x80	int
)	O
*	O
to	int
++	O
=	O
*	O
from	int
++	O
,	O
bytes	int
++	O
;	O
}	O
return	O
bytes	int
;	O
}	O
void	O
postDeleteWord	function
(	O
int	O
pos	int
)	O
{	O
int	O
j	int
;	O
while	O
(	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
)	O
{	O
int	O
carry	pointer
=	O
0	int
;	O
calcTotalCharsInLineC	function
(	O
pos	int
,	O
&	O
carry	pointer
)	O
;	O
j	int
=	O
MAX_CHARS_PER_LINE	int
-	O
(	O
carry	pointer
+	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
;	O
j	int
=	O
appendToLine	function
(	O
pos	int
,	O
pos	int
+	O
1	int
,	O
j	int
)	O
;	O
copyInLine	function
(	O
pos	int
+	O
1	int
,	O
0	int
,	O
j	int
,	O
1	int
)	O
;	O
pos	int
++	O
;	O
if	O
(	O
pos	int
>=	O
totalLines	int
)	O
break	O
;	O
}	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
==	O
0	int
)	O
{	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
=	O
0	int
;	O
move_lines_up	function
(	O
pos	int
,	O
totalLines	int
-	O
1	int
)	O
;	O
}	O
}	O
void	O
deleteNextWord	function
(	O
)	O
{	O
int	O
i	int
,	O
j	int
,	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
int	O
chr	int
=	O
charsToBytes	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
int	O
oF	int
=	O
firstVisLine	int
;	O
int	O
oS	int
=	O
selectedLine	int
;	O
int	O
oC	int
=	O
selectedChar	int
;	O
if	O
(	O
selectedChar	int
>=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
)	O
{	O
if	O
(	O
pos	int
>=	O
totalLines	int
-	O
1	int
)	O
return	O
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
pos	int
++	O
;	O
chr	int
=	O
0	int
;	O
selectedChar	int
=	O
0	int
;	O
firstVisLine	int
++	O
;	O
}	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
i	int
=	O
findNextChar	function
(	O
pos	int
,	O
chr	int
)	O
;	O
while	O
(	O
is_whitespace	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
for	O
(	O
;	O
i	int
<	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
is_whitespace	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
)	O
)	O
break	O
;	O
else	O
{	O
int	O
j	int
=	O
undoAddUtfChar	function
(	O
UNDO_ACTION_DELETE	int
,	O
pos	int
,	O
i	int
,	O
NULL	O
)	O
;	O
i	int
+=	O
(	O
j	int
-	O
1	int
)	O
;	O
selectedChar	int
++	O
;	O
}	O
}	O
if	O
(	O
i	int
>=	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
)	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
chr	int
]	O
=	O
'\0'	O
;	O
else	O
copyInLine	function
(	O
pos	int
,	O
chr	int
,	O
i	int
,	O
1	int
)	O
;	O
firstVisLine	int
=	O
oF	int
;	O
selectedLine	int
=	O
oS	int
;	O
selectedChar	int
=	O
oC	int
;	O
postDeleteWord	function
(	O
firstVisLine	int
+	O
selectedLine	int
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
void	O
deletePrevWord	function
(	O
)	O
{	O
int	O
i	int
,	O
j	int
,	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
int	O
chr	int
=	O
charsToBytes	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
int	O
oF	int
=	O
firstVisLine	int
;	O
int	O
oS	int
=	O
selectedLine	int
;	O
int	O
oC	int
=	O
selectedChar	int
;	O
int	O
deleteNL	int
=	O
0	int
;	O
if	O
(	O
selectedChar	int
<=	O
0	int
)	O
{	O
if	O
(	O
pos	int
<=	O
0	int
)	O
return	O
;	O
pos	int
--	O
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
chr	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
selectedChar	int
=	O
chr	int
;	O
firstVisLine	int
--	O
;	O
deleteNL	int
=	O
1	int
;	O
}	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
i	int
=	O
chr	int
;	O
while	O
(	O
i	int
&&	O
is_whitespace	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
)	O
)	O
i	int
--	O
;	O
while	O
(	O
i	int
&&	O
!	O
is_whitespace	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
)	O
)	O
{	O
i	int
--	O
;	O
if	O
(	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
selectedChar	int
--	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
)	O
i	int
=	O
0	int
;	O
for	O
(	O
;	O
i	int
<	O
chr	int
;	O
i	int
++	O
)	O
{	O
int	O
j	int
=	O
undoAddUtfChar	function
(	O
UNDO_ACTION_DELETE	int
,	O
pos	int
,	O
i	int
,	O
NULL	O
)	O
;	O
i	int
+=	O
(	O
j	int
-	O
1	int
)	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
)	O
i	int
=	O
0	int
;	O
else	O
copyInLine	function
(	O
pos	int
,	O
i	int
,	O
chr	int
,	O
1	int
)	O
;	O
firstVisLine	int
=	O
oF	int
;	O
selectedLine	int
=	O
oS	int
;	O
selectedChar	int
=	O
oC	int
;	O
postDeleteWord	function
(	O
firstVisLine	int
+	O
selectedLine	int
)	O
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
void	O
deleteNextChar	function
(	O
)	O
{	O
int	O
i	int
,	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
char	O
deleteNL	int
=	O
0	int
;	O
char	O
refreshAll	int
=	O
0	int
;	O
char	O
c	char
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
selectedChar	int
]	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
'\0'	O
)	O
deleteNL	int
=	O
1	int
;	O
undoAddUtfChar	function
(	O
UNDO_ACTION_DELETE	int
,	O
pos	int
,	O
selectedChar	int
,	O
NULL	O
)	O
;	O
int	O
newChar	int
=	O
findNextChar	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
copyInLine	function
(	O
pos	int
,	O
selectedChar	int
,	O
newChar	int
,	O
1	int
)	O
;	O
if	O
(	O
deleteNL	int
)	O
{	O
if	O
(	O
pos	int
==	O
totalLines	int
-	O
1	int
)	O
return	O
;	O
if	O
(	O
lines	array
[	O
pos	int
+	O
1	int
]	O
->	O
charCount	int
==	O
0	int
||	O
lines	array
[	O
pos	int
+	O
1	int
]	O
->	O
text	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
{	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
0	int
;	O
move_lines_up	function
(	O
pos	int
+	O
1	int
,	O
totalLines	int
-	O
1	int
)	O
;	O
refreshAll	int
=	O
1	int
;	O
}	O
else	O
{	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
)	O
{	O
postDeleteWord	function
(	O
pos	int
)	O
;	O
refreshAll	int
=	O
1	int
;	O
}	O
if	O
(	O
refreshAll	int
)	O
refreshView	function
(	O
)	O
;	O
else	O
refreshSelectedLine	function
(	O
)	O
;	O
}	O
void	O
deletePrevChar	function
(	O
)	O
{	O
int	O
i	int
,	O
pos	int
;	O
int	O
selChar	int
;	O
if	O
(	O
selectedChar	int
==	O
0	int
)	O
{	O
if	O
(	O
selectedLine	int
==	O
0	int
)	O
{	O
if	O
(	O
firstVisLine	int
==	O
0	int
)	O
return	O
;	O
firstVisLine	int
--	O
;	O
}	O
else	O
{	O
selectedLine	int
--	O
;	O
}	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
selChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
;	O
selChar	int
=	O
findPrevChar	function
(	O
pos	int
,	O
selChar	int
)	O
;	O
selectedChar	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
-	O
1	int
;	O
}	O
else	O
{	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
selectedChar	int
--	O
;	O
selChar	int
=	O
charsToBytes	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
}	O
undoAddUtfChar	function
(	O
UNDO_ACTION_DELETE	int
,	O
pos	int
,	O
selChar	int
,	O
NULL	O
)	O
;	O
char	O
c	char
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
selChar	int
]	O
;	O
i	int
=	O
findNextChar	function
(	O
pos	int
,	O
selChar	int
)	O
;	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
==	O
'\0'	O
)	O
{	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
=	O
0	int
;	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
=	O
0	int
;	O
}	O
else	O
copyInLine	function
(	O
pos	int
,	O
selChar	int
,	O
i	int
,	O
1	int
)	O
;	O
postDeleteWord	function
(	O
pos	int
)	O
;	O
if	O
(	O
c	char
==	O
'\t'	O
)	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
)	O
refreshView	function
(	O
)	O
;	O
else	O
refreshSelectedLine	function
(	O
)	O
;	O
}	O
void	O
insertEnter	function
(	O
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
int	O
autoIndentLen	int
=	O
0	int
;	O
if	O
(	O
AUTO_INDENT	int
)	O
{	O
for	O
(	O
;	O
i	int
<	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
;	O
i	int
++	O
)	O
{	O
char	O
c	char
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
;	O
if	O
(	O
is_whitespace	function
(	O
c	char
)	O
)	O
{	O
autoIndentStr	pointer
[	O
i	int
]	O
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
;	O
}	O
else	O
break	O
;	O
}	O
autoIndentStr	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
autoIndentLen	int
=	O
i	int
;	O
}	O
int	O
j	int
=	O
charsToBytes	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
undoAddChar	function
(	O
UNDO_ACTION_INSERT	int
,	O
pos	int
,	O
j	int
,	O
'\n'	O
)	O
;	O
int	O
count	int
=	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
-	O
j	int
+	O
i	int
;	O
char	O
*	O
newLine	pointer
=	O
malloc	function
(	O
count	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newLine	pointer
)	O
return	O
;	O
newLine	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
AUTO_INDENT	int
)	O
{	O
strcpy	function
(	O
newLine	pointer
,	O
autoIndentStr	pointer
)	O
;	O
int	O
k	int
=	O
j	int
;	O
while	O
(	O
i	int
--	O
)	O
{	O
undoAddChar	function
(	O
UNDO_ACTION_INSERT	int
,	O
pos	int
+	O
1	int
,	O
k	int
,	O
autoIndentStr	pointer
[	O
k	int
-	O
j	int
]	O
)	O
;	O
k	int
++	O
;	O
}	O
}	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
j	int
]	O
)	O
strcat	function
(	O
newLine	pointer
,	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
j	int
)	O
;	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
j	int
]	O
=	O
'\n'	O
;	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
j	int
+	O
1	int
]	O
=	O
'\0'	O
;	O
calcTotalCharsInLine	function
(	O
pos	int
)	O
;	O
pos	int
++	O
;	O
move_lines_downl	function
(	O
totalLines	int
+	O
1	int
,	O
pos	int
,	O
newLine	pointer
)	O
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
;	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
=	O
0	int
;	O
if	O
(	O
count	int
>=	O
maxLen	int
)	O
{	O
pos	int
++	O
;	O
move_lines_down	function
(	O
totalLines	int
+	O
1	int
,	O
pos	int
)	O
;	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
=	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
;	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
linkedToNext	int
=	O
1	int
;	O
j	int
=	O
charsToBytes	function
(	O
pos	int
-	O
1	int
,	O
MAX_CHARS_PER_LINE	int
)	O
;	O
strcpy	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
,	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
+	O
j	int
)	O
;	O
lines	array
[	O
pos	int
-	O
1	int
]	O
->	O
text	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
calcTotalCharsInLine	function
(	O
pos	int
-	O
1	int
)	O
;	O
}	O
postDeleteWord	function
(	O
pos	int
)	O
;	O
if	O
(	O
selectedLine	int
==	O
totalVisLines	int
-	O
1	int
)	O
firstVisLine	int
++	O
;	O
else	O
selectedLine	int
++	O
;	O
selectedChar	int
=	O
autoIndentLen	int
;	O
calcCharCarry	function
(	O
pos	int
)	O
;	O
refreshView	function
(	O
)	O
;	O
}	O
void	O
insertTab	function
(	O
)	O
{	O
static	O
char	O
*	O
t	pointer
=	O
"\t"	pointer
;	O
insertChar	function
(	O
t	pointer
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
return	O
;	O
}	O
int	O
getUtfCharLength	function
(	O
char	O
*	O
ch	pointer
)	O
{	O
int	O
len	int
=	O
0	int
;	O
if	O
(	O
(	O
*	O
ch	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
ch	pointer
++	O
,	O
len	int
++	O
;	O
while	O
(	O
(	O
*	O
ch	pointer
&	O
0xc0	int
)	O
==	O
0x80	int
)	O
ch	pointer
++	O
,	O
len	int
++	O
;	O
return	O
len	int
;	O
}	O
void	O
replaceChar	function
(	O
int	O
pos	int
,	O
int	O
i	int
,	O
char	O
*	O
ch	pointer
,	O
int	O
calcTotalChars	int
)	O
{	O
char	O
*	O
orig	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
i	int
;	O
int	O
len1	int
=	O
getUtfCharLength	function
(	O
orig	pointer
)	O
;	O
int	O
len2	int
=	O
getUtfCharLength	function
(	O
ch	pointer
)	O
;	O
int	O
diff	int
=	O
len2	int
-	O
len1	int
;	O
if	O
(	O
diff	int
==	O
0	int
)	O
{	O
while	O
(	O
len1	int
--	O
)	O
*	O
orig	pointer
++	O
=	O
*	O
ch	pointer
++	O
;	O
}	O
else	O
if	O
(	O
diff	int
<	O
0	int
)	O
{	O
while	O
(	O
len2	int
--	O
)	O
*	O
orig	pointer
++	O
=	O
*	O
ch	pointer
++	O
;	O
int	O
to	int
=	O
orig	pointer
-	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
;	O
int	O
from	int
=	O
i	int
+	O
len1	int
;	O
copyInLine	function
(	O
pos	int
,	O
to	int
,	O
from	int
,	O
calcTotalChars	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
extendLineText	function
(	O
pos	int
,	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
+	O
diff	int
+	O
1	int
)	O
)	O
return	O
;	O
copyInLine	function
(	O
pos	int
,	O
i	int
+	O
len2	int
,	O
i	int
+	O
len1	int
,	O
0	int
)	O
;	O
while	O
(	O
len2	int
--	O
)	O
*	O
orig	pointer
++	O
=	O
*	O
ch	pointer
++	O
;	O
if	O
(	O
calcTotalChars	int
)	O
calcTotalCharsInLine	function
(	O
pos	int
)	O
;	O
}	O
}	O
void	O
insertChar	function
(	O
char	O
*	O
ch	pointer
)	O
{	O
int	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
int	O
i	int
=	O
charsToBytes	function
(	O
pos	int
,	O
selectedChar	int
)	O
;	O
int	O
refreshAll	int
=	O
0	int
;	O
if	O
(	O
WRAP_LINES	int
)	O
{	O
if	O
(	O
INSERT	int
)	O
{	O
char	O
c1	char
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
i	int
]	O
;	O
char	O
c2	char
=	O
*	O
ch	pointer
;	O
undoAddUtfChar	function
(	O
UNDO_ACTION_REPLACE	int
,	O
pos	int
,	O
i	int
,	O
ch	pointer
)	O
;	O
replaceChar	function
(	O
pos	int
,	O
i	int
,	O
ch	pointer
,	O
1	int
)	O
;	O
if	O
(	O
c1	char
==	O
'\t'	O
||	O
c2	char
==	O
'\t'	O
)	O
{	O
checkLineBounds	function
(	O
pos	int
)	O
;	O
refreshAll	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
undoAddUtfChar	function
(	O
UNDO_ACTION_INSERT	int
,	O
pos	int
,	O
i	int
,	O
ch	pointer
)	O
;	O
int	O
len2	int
=	O
getUtfCharLength	function
(	O
ch	pointer
)	O
;	O
if	O
(	O
!	O
extendLineText	function
(	O
pos	int
,	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
+	O
len2	int
+	O
1	int
)	O
)	O
return	O
;	O
char	O
*	O
orig	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
i	int
;	O
copyInLine	function
(	O
pos	int
,	O
i	int
+	O
len2	int
,	O
i	int
,	O
0	int
)	O
;	O
while	O
(	O
len2	int
--	O
)	O
*	O
orig	pointer
++	O
=	O
*	O
ch	pointer
++	O
;	O
checkLineBounds	function
(	O
pos	int
)	O
;	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
linkedToNext	int
)	O
refreshAll	int
=	O
1	int
;	O
}	O
}	O
selectedChar	int
++	O
;	O
if	O
(	O
selectedChar	int
+	O
selectedCharCarry	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
{	O
if	O
(	O
selectedLine	int
==	O
totalVisLines	int
-	O
1	int
)	O
firstVisLine	int
--	O
;	O
else	O
selectedLine	int
++	O
;	O
selectedChar	int
=	O
0	int
;	O
refreshAll	int
=	O
1	int
;	O
}	O
calcCharCarry	function
(	O
firstVisLine	int
+	O
selectedLine	int
)	O
;	O
if	O
(	O
refreshAll	int
)	O
refreshView	function
(	O
)	O
;	O
else	O
refreshSelectedLine	function
(	O
)	O
;	O
}	O
void	O
refreshSelectedLine	function
(	O
)	O
{	O
int	O
pos	int
=	O
firstVisLine	int
+	O
selectedLine	int
;	O
refreshViewLines	function
(	O
pos	int
,	O
pos	int
,	O
selectedLine	int
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
outputEmptyLine	function
(	O
int	O
i	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
i	int
+	O
3	int
,	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
MAX_CHARS_PER_LINE	int
,	O
" "	pointer
)	O
;	O
}	O
void	O
padLineWithSpaces	function
(	O
int	O
len	int
)	O
{	O
if	O
(	O
len	int
<	O
MAX_CHARS_PER_LINE	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
MAX_CHARS_PER_LINE	int
-	O
len	int
,	O
" "	pointer
)	O
;	O
}	O
void	O
putuchar	function
(	O
int	O
pos	int
,	O
int	O
index	function
,	O
int	O
*	O
carry	pointer
)	O
{	O
if	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
index	function
]	O
==	O
'\t'	O
)	O
{	O
int	O
k	int
=	O
TABSPACES	O
(	O
index	function
+	O
(	O
*	O
carry	pointer
)	O
+	O
1	int
)	O
;	O
(	O
*	O
carry	pointer
)	O
+=	O
k	int
;	O
if	O
(	O
k	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
k	int
+	O
1	int
,	O
" "	pointer
)	O
;	O
return	O
;	O
}	O
static	O
char	O
c	char
[	O
5	int
]	O
;	O
memset	function
(	O
c	char
,	O
0	int
,	O
5	int
)	O
;	O
c	char
[	O
0	int
]	O
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
index	function
]	O
;	O
if	O
(	O
c	char
[	O
0	int
]	O
==	O
'\n'	O
)	O
return	O
;	O
if	O
(	O
(	O
c	char
[	O
0	int
]	O
&	O
mask	array
[	O
0	int
]	O
)	O
==	O
mask	array
[	O
0	int
]	O
)	O
c	char
[	O
1	int
]	O
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
index	function
+	O
1	int
]	O
;	O
if	O
(	O
(	O
c	char
[	O
0	int
]	O
&	O
mask	array
[	O
1	int
]	O
)	O
==	O
mask	array
[	O
1	int
]	O
)	O
c	char
[	O
2	int
]	O
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
index	function
+	O
2	int
]	O
;	O
if	O
(	O
(	O
c	char
[	O
0	int
]	O
&	O
mask	array
[	O
2	int
]	O
)	O
==	O
mask	array
[	O
2	int
]	O
)	O
c	char
[	O
3	int
]	O
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
index	function
+	O
3	int
]	O
;	O
c	char
[	O
4	int
]	O
=	O
'0'	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
c	char
)	O
;	O
}	O
int	O
strStartsWith	function
(	O
const	O
char	O
*	O
pre	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
return	O
strncmp	function
(	O
pre	pointer
,	O
str	pointer
,	O
strlen	function
(	O
pre	pointer
)	O
)	O
==	O
0	int
;	O
}	O
int	O
strStartsWithL	function
(	O
const	O
char	O
*	O
pre	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
prelen	int
)	O
{	O
return	O
strncmp	function
(	O
pre	pointer
,	O
str	pointer
,	O
prelen	int
)	O
==	O
0	int
;	O
}	O
char	O
*	O
specialCharsString	pointer
=	O
"[]{}()<>:;,*+-=%_!#$^&`~\\"	pointer
;	O
int	O
isBraceChar	function
(	O
char	O
c	char
)	O
{	O
char	O
*	O
s	pointer
=	O
specialCharsString	pointer
;	O
while	O
(	O
*	O
s	pointer
)	O
{	O
if	O
(	O
c	char
==	O
*	O
s	pointer
++	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
isQuoteChar	function
(	O
char	O
c	char
)	O
{	O
if	O
(	O
c	char
==	O
'"'	O
||	O
c	char
==	O
'\''	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
isSpaceChar	function
(	O
char	O
c	char
)	O
{	O
if	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\f'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\v'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
indexOf	function
(	O
char	O
*	O
str	pointer
,	O
char	O
*	O
substr	pointer
)	O
{	O
if	O
(	O
!	O
str	pointer
||	O
!	O
substr	pointer
)	O
return	O
-	O
1	int
;	O
char	O
*	O
s	pointer
=	O
strstr	function
(	O
str	pointer
,	O
substr	pointer
)	O
;	O
return	O
s	pointer
?	O
s	pointer
-	O
str	pointer
:	O
-	O
1	int
;	O
}	O
void	O
refreshSelectedLineInColor	function
(	O
int	O
pos	int
,	O
int	O
*	O
incomment	pointer
)	O
{	O
int	O
j	int
,	O
carry	pointer
=	O
0	int
;	O
char	O
STRING_STARTED	char
=	O
0	int
;	O
char	O
quoteChar	char
;	O
char	O
*	O
line	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
;	O
int	O
len	int
=	O
lines	array
[	O
pos	int
]	O
->	O
charCount	int
;	O
int	O
mcstart	int
=	O
indexOf	function
(	O
line	pointer
,	O
curmodule	pointer
->	O
mlCommentStart	pointer
)	O
;	O
int	O
mcend	int
=	O
indexOf	function
(	O
line	pointer
,	O
curmodule	pointer
->	O
mlCommentEnd	pointer
)	O
;	O
int	O
scstart	int
=	O
indexOf	function
(	O
line	pointer
,	O
curmodule	pointer
->	O
slCommentStart	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
j	int
]	O
&	O
0xc0	int
)	O
==	O
0x80	int
)	O
continue	O
;	O
if	O
(	O
mcstart	int
>=	O
0	int
&&	O
j	int
==	O
mcstart	int
)	O
{	O
setScreenColors	function
(	O
COLOR_HCOMMENT	int
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
*	O
incomment	pointer
=	O
1	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
mcend	int
>=	O
0	int
&&	O
j	int
==	O
mcend	int
)	O
{	O
char	O
*	O
mc	pointer
=	O
curmodule	pointer
->	O
mlCommentEnd	pointer
;	O
while	O
(	O
*	O
mc	pointer
++	O
)	O
putuchar	function
(	O
pos	int
,	O
j	int
++	O
,	O
&	O
carry	pointer
)	O
;	O
j	int
--	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
*	O
incomment	pointer
=	O
0	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
*	O
incomment	pointer
)	O
{	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
scstart	int
>=	O
0	int
&&	O
j	int
==	O
scstart	int
)	O
{	O
setScreenColors	function
(	O
COLOR_HCOMMENT	int
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
for	O
(	O
;	O
j	int
<	O
lines	array
[	O
pos	int
]	O
->	O
byteCount	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
[	O
j	int
]	O
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
STRING_STARTED	char
)	O
{	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
if	O
(	O
quoteChar	char
==	O
line	pointer
[	O
j	int
]	O
)	O
{	O
STRING_STARTED	char
=	O
0	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
}	O
else	O
{	O
char	O
c	char
=	O
line	pointer
[	O
j	int
]	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
continue	O
;	O
if	O
(	O
isBraceChar	function
(	O
c	char
)	O
||	O
isSpaceChar	function
(	O
c	char
)	O
)	O
{	O
setScreenColors	function
(	O
COLOR_HBRACES	int
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
else	O
if	O
(	O
isQuoteChar	function
(	O
c	char
)	O
)	O
{	O
if	O
(	O
STRING_STARTED	char
)	O
{	O
STRING_STARTED	char
=	O
0	int
;	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
else	O
{	O
STRING_STARTED	char
=	O
1	int
;	O
quoteChar	char
=	O
c	char
;	O
setScreenColors	function
(	O
COLOR_HSTRING	int
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
putuchar	function
(	O
pos	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
}	O
}	O
else	O
{	O
int	O
i	int
;	O
if	O
(	O
isKeyword	function
(	O
pos	int
,	O
j	int
,	O
&	O
i	int
)	O
)	O
{	O
setScreenColors	function
(	O
COLOR_HKEYWORD	int
,	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
while	O
(	O
i	int
--	O
)	O
putuchar	function
(	O
pos	int
,	O
j	int
++	O
,	O
&	O
carry	pointer
)	O
;	O
j	int
--	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
i	int
--	O
)	O
putuchar	function
(	O
pos	int
,	O
j	int
++	O
,	O
&	O
carry	pointer
)	O
;	O
j	int
--	O
;	O
}	O
}	O
}	O
}	O
padLineWithSpaces	function
(	O
len	int
+	O
carry	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
int	O
isKeyword	function
(	O
int	O
pos	int
,	O
int	O
start	int
,	O
int	O
*	O
wordlen	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
result	int
=	O
0	int
;	O
char	O
*	O
p	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
start	int
;	O
while	O
(	O
*	O
p	pointer
&&	O
!	O
isSpaceChar	function
(	O
*	O
p	pointer
)	O
&&	O
!	O
isBraceChar	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
,	O
i	int
++	O
;	O
if	O
(	O
p	pointer
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
i	int
--	O
;	O
char	O
word	O
[	O
i	int
+	O
1	int
]	O
;	O
memcpy	function
(	O
word	O
,	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
+	O
start	int
,	O
i	int
)	O
;	O
word	O
[	O
i	int
]	O
=	O
'\0'	O
;	O
*	O
wordlen	pointer
=	O
strlen	function
(	O
word	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
curmodule	pointer
->	O
keywordCount	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
wordlen	pointer
!=	O
strlen	function
(	O
curmodule	pointer
->	O
keywords	pointer
[	O
i	int
]	O
)	O
)	O
continue	O
;	O
if	O
(	O
curmodule	pointer
->	O
caseSensitive	char
)	O
result	int
=	O
strcmp	function
(	O
word	O
,	O
curmodule	pointer
->	O
keywords	pointer
[	O
i	int
]	O
)	O
;	O
else	O
result	int
=	O
strcasecmp	function
(	O
word	O
,	O
curmodule	pointer
->	O
keywords	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
result	int
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
refreshView	function
(	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[?25l"	pointer
)	O
;	O
int	O
i	int
;	O
if	O
(	O
totalLines	int
-	O
firstVisLine	int
<	O
totalVisLines	int
&&	O
totalLines	int
>	O
totalVisLines	int
)	O
{	O
i	int
=	O
firstVisLine	int
;	O
firstVisLine	int
=	O
totalLines	int
-	O
totalVisLines	int
;	O
selectedLine	int
+=	O
i	int
-	O
firstVisLine	int
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
WRAP_LINES	int
)	O
{	O
if	O
(	O
totalLines	int
<	O
totalVisLines	int
)	O
{	O
refreshViewLines	function
(	O
0	int
,	O
totalLines	int
-	O
1	int
,	O
0	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
for	O
(	O
i	int
=	O
totalLines	int
;	O
i	int
<	O
totalVisLines	int
;	O
i	int
++	O
)	O
outputEmptyLine	function
(	O
i	int
)	O
;	O
}	O
else	O
{	O
refreshViewLines	function
(	O
firstVisLine	int
,	O
firstVisLine	int
+	O
totalVisLines	int
-	O
1	int
,	O
0	int
)	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
}	O
drawMenuBar	function
(	O
1	int
,	O
1	int
,	O
SCREEN_W	int
)	O
;	O
drawBox	function
(	O
2	int
,	O
1	int
,	O
SCREEN_H	int
-	O
1	int
,	O
SCREEN_W	int
,	O
documentTitle	pointer
,	O
NO	int
,	O
1	int
)	O
;	O
drawScrollBar	function
(	O
)	O
;	O
refreshBottomView	function
(	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[?25h"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
int	O
commentStatus	function
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
!	O
curmodule	pointer
->	O
mlCommentStart	pointer
)	O
return	O
0	int
;	O
if	O
(	O
pos	int
)	O
pos	int
--	O
;	O
for	O
(	O
;	O
pos	int
>=	O
0	int
;	O
pos	int
--	O
)	O
{	O
char	O
*	O
ce	pointer
=	O
strstr	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
,	O
curmodule	pointer
->	O
mlCommentEnd	pointer
)	O
;	O
char	O
*	O
cs	short
=	O
strstr	function
(	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
,	O
curmodule	pointer
->	O
mlCommentStart	pointer
)	O
;	O
if	O
(	O
ce	pointer
&&	O
cs	short
)	O
{	O
if	O
(	O
cs	short
>=	O
ce	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
cs	short
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
refreshViewLines	function
(	O
int	O
start	int
,	O
int	O
end	int
,	O
int	O
startOutputAt	int
)	O
{	O
int	O
swap	int
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
SELECTING	int
||	O
SELECTED	int
)	O
{	O
if	O
(	O
sel_range_start	struct
.	O
nline	int
>	O
sel_range_end	struct
.	O
nline	int
)	O
{	O
swap	int
=	O
1	int
;	O
swap_lines	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
sel_range_start	struct
.	O
nline	int
==	O
sel_range_end	struct
.	O
nline	int
&&	O
sel_range_start	struct
.	O
nchar	int
>	O
sel_range_end	struct
.	O
nchar	int
)	O
{	O
swap	int
=	O
2	int
;	O
swap_chars	function
(	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
startOutputAt	int
;	O
start	int
<=	O
end	int
;	O
i	int
++	O
,	O
start	int
++	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
i	int
+	O
3	int
,	O
2	int
)	O
;	O
int	O
len	int
=	O
lines	array
[	O
start	int
]	O
->	O
charCount	int
;	O
int	O
j	int
,	O
k	int
,	O
l	int
;	O
if	O
(	O
start	int
==	O
sel_range_start	struct
.	O
nline	int
)	O
{	O
k	int
=	O
sel_range_start	struct
.	O
nchar	int
;	O
l	int
=	O
len	int
-	O
1	int
;	O
}	O
else	O
if	O
(	O
start	int
==	O
sel_range_end	struct
.	O
nline	int
)	O
{	O
k	int
=	O
0	int
;	O
l	int
=	O
sel_range_end	struct
.	O
nchar	int
;	O
}	O
else	O
{	O
k	int
=	O
0	int
;	O
if	O
(	O
start	int
>	O
sel_range_start	struct
.	O
nline	int
&&	O
start	int
<	O
sel_range_end	struct
.	O
nline	int
)	O
l	int
=	O
len	int
-	O
1	int
;	O
else	O
l	int
=	O
-	O
1	int
;	O
}	O
int	O
carry	pointer
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
lines	array
[	O
start	int
]	O
->	O
byteCount	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
j	int
>=	O
k	int
&&	O
j	int
<=	O
l	int
)	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
else	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
(	O
lines	array
[	O
start	int
]	O
->	O
text	pointer
[	O
j	int
]	O
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
putuchar	function
(	O
start	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
}	O
len	int
+=	O
carry	pointer
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
len	int
<	O
MAX_CHARS_PER_LINE	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
MAX_CHARS_PER_LINE	int
-	O
len	int
,	O
" "	pointer
)	O
;	O
}	O
if	O
(	O
swap	int
==	O
1	int
)	O
swap_lines	function
(	O
)	O
;	O
if	O
(	O
swap	int
==	O
2	int
)	O
swap_chars	function
(	O
)	O
;	O
}	O
else	O
{	O
int	O
incomment	pointer
=	O
commentStatus	function
(	O
start	int
)	O
;	O
int	O
j	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
for	O
(	O
i	int
=	O
startOutputAt	int
;	O
start	int
<=	O
end	int
;	O
i	int
++	O
,	O
start	int
++	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
i	int
+	O
3	int
,	O
2	int
)	O
;	O
int	O
carry	pointer
=	O
0	int
;	O
int	O
len	int
=	O
lines	array
[	O
start	int
]	O
->	O
charCount	int
;	O
if	O
(	O
AUTO_HIGHLIGHTING	int
)	O
refreshSelectedLineInColor	function
(	O
firstVisLine	int
+	O
i	int
,	O
&	O
incomment	pointer
)	O
;	O
else	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
lines	array
[	O
start	int
]	O
->	O
byteCount	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
(	O
lines	array
[	O
start	int
]	O
->	O
text	pointer
[	O
j	int
]	O
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
putuchar	function
(	O
start	int
,	O
j	int
,	O
&	O
carry	pointer
)	O
;	O
}	O
padLineWithSpaces	function
(	O
len	int
+	O
carry	pointer
)	O
;	O
}	O
}	O
}	O
}	O
void	O
drawScrollBar	function
(	O
)	O
{	O
int	O
h	int
=	O
SCREEN_H	int
-	O
5	int
;	O
int	O
i	int
;	O
setScreenColorsI	function
(	O
COLOR_MENU_BAR	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
h	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH "	pointer
,	O
i	int
+	O
3	int
,	O
SCREEN_W	int
)	O
;	O
double	O
h2	double
;	O
h2	double
=	O
firstVisLine	int
+	O
selectedLine	int
+	O
1	int
;	O
h2	double
/=	O
totalLines	int
;	O
h2	double
*=	O
h	int
;	O
if	O
(	O
h2	double
<	O
0	int
)	O
h2	double
=	O
0	int
;	O
if	O
(	O
h2	double
>	O
(	O
SCREEN_H	int
-	O
5	int
)	O
)	O
h2	double
=	O
SCREEN_H	int
-	O
5	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH%c"	pointer
,	O
(	O
int	O
)	O
(	O
h2	double
)	O
+	O
3	int
,	O
SCREEN_W	int
,	O
177	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
}	O
void	O
refreshBottomView	function
(	O
)	O
{	O
setScreenColorsI	function
(	O
COLOR_STATUS_BAR	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
SCREEN_H	int
,	O
0	int
)	O
;	O
printf	function
(	O
"%*s"	pointer
,	O
SCREEN_W	int
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
SCREEN_H	int
,	O
SCREEN_W	int
-	O
19	int
)	O
;	O
printf	function
(	O
"| LINE:%-3d COL:%-3d"	pointer
,	O
firstVisLine	int
+	O
selectedLine	int
+	O
1	int
,	O
selectedChar	int
+	O
1	int
)	O
;	O
if	O
(	O
CAPS	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHCAPS"	pointer
,	O
SCREEN_H	int
,	O
SCREEN_W	int
-	O
24	int
)	O
;	O
if	O
(	O
INSERT	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHINS"	pointer
,	O
SCREEN_H	int
,	O
SCREEN_W	int
-	O
28	int
)	O
;	O
if	O
(	O
SELECTING	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHSEL"	pointer
,	O
SCREEN_H	int
,	O
SCREEN_W	int
-	O
32	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
SCREEN_H	int
,	O
2	int
)	O
;	O
switch	O
(	O
FILE_STATE	enum
)	O
{	O
case	O
(	O
MODIFIED	int
)	O
:	O
printf	function
(	O
"Modified"	pointer
)	O
;	O
break	O
;	O
case	O
(	O
NEW	int
)	O
:	O
printf	function
(	O
"New"	pointer
)	O
;	O
break	O
;	O
case	O
(	O
SAVED	int
)	O
:	O
printf	function
(	O
"Saved"	pointer
)	O
;	O
break	O
;	O
case	O
(	O
OPENED	int
)	O
:	O
printf	function
(	O
"Opened"	pointer
)	O
;	O
break	O
;	O
case	O
(	O
IDLE	int
)	O
:	O
printf	function
(	O
"Idle"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
selectedChar	int
+	O
selectedCharCarry	int
>	O
MAX_CHARS_PER_LINE	int
-	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
1	int
+	O
selectedCharCarry	int
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
selectedLine	int
+	O
3	int
,	O
selectedChar	int
+	O
2	int
+	O
selectedCharCarry	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
drawMenuBar	function
(	O
int	O
x	int
,	O
int	O
y	int
,	O
int	O
w	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_MENU_BAR	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
,	O
y	int
)	O
;	O
int	O
i	int
,	O
j	int
,	O
lastChar	int
=	O
y	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
fputc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x	int
,	O
y	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
totalMainMenus	int
;	O
i	int
++	O
)	O
{	O
j	int
=	O
0	int
;	O
lastChar	int
++	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
" "	pointer
)	O
;	O
while	O
(	O
menu	array
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
menu	array
[	O
i	int
]	O
[	O
j	int
]	O
==	O
'&'	O
)	O
{	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%c"	pointer
,	O
menu	array
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_MENU_BAR	int
)	O
;	O
}	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%c"	pointer
,	O
menu	array
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
;	O
lastChar	int
++	O
;	O
j	int
++	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
" "	pointer
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[24m"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
catchSignals	function
(	O
)	O
{	O
if	O
(	O
signal	function
(	O
SIGINT	int
,	O
sighandler	function
)	O
==	O
SIG_ERR	O
)	O
{	O
printf	function
(	O
"Error interrupting SIGINT.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
signal	function
(	O
SIGQUIT	int
,	O
sighandler	function
)	O
==	O
SIG_ERR	O
)	O
{	O
printf	function
(	O
"Error interrupting SIGQUIT.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
signal	function
(	O
SIGABRT	int
,	O
sighandler	function
)	O
==	O
SIG_ERR	O
)	O
{	O
printf	function
(	O
"Error interrupting SIGABRT.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
signal	function
(	O
SIGTERM	int
,	O
sighandler	function
)	O
==	O
SIG_ERR	O
)	O
{	O
printf	function
(	O
"Error interrupting SIGTERM.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
signal	function
(	O
SIGTSTP	int
,	O
sighandler	function
)	O
==	O
SIG_ERR	O
)	O
{	O
}	O
}	O
void	O
drawBox	function
(	O
int	O
x1	int
,	O
int	O
y1	int
,	O
int	O
x2	int
,	O
int	O
y2	int
,	O
char	O
*	O
title	pointer
,	O
int	O
clearArea	int
,	O
int	O
isMainWindow	int
)	O
{	O
char	O
spaces	O
[	O
y2	int
-	O
y1	int
]	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
y2	int
-	O
y1	int
-	O
1	int
;	O
i	int
++	O
)	O
spaces	O
[	O
i	int
]	O
=	O
' '	O
;	O
spaces	O
[	O
i	int
]	O
=	O
'\0'	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x1	int
,	O
y1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e)0\x0e"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
putchar	function
(	O
ULC	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
y2	int
-	O
y1	int
)	O
-	O
1	int
;	O
i	int
++	O
)	O
{	O
putchar	function
(	O
HB	int
)	O
;	O
}	O
putchar	function
(	O
URC	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
x2	int
-	O
x1	int
)	O
-	O
1	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x1	int
+	O
i	int
+	O
1	int
,	O
y1	int
)	O
;	O
if	O
(	O
clearArea	int
==	O
YES	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%s%c"	pointer
,	O
VB	int
,	O
spaces	O
,	O
VB	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%c\x1b[%d;%dH%c"	pointer
,	O
VB	int
,	O
x1	int
+	O
i	int
+	O
1	int
,	O
y2	int
,	O
VB	int
)	O
;	O
}	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH"	pointer
,	O
x2	int
,	O
y1	int
)	O
;	O
putchar	function
(	O
LLC	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
y2	int
-	O
y1	int
)	O
-	O
1	int
;	O
i	int
++	O
)	O
{	O
putchar	function
(	O
HB	int
)	O
;	O
}	O
putchar	function
(	O
LRC	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x0f"	pointer
)	O
;	O
if	O
(	O
title	pointer
!=	O
NULL	O
)	O
{	O
int	O
tmp1	int
=	O
(	O
y2	int
-	O
y1	int
)	O
/	O
2	int
;	O
int	O
tmp2	int
=	O
strlen	function
(	O
title	pointer
)	O
/	O
2	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[%d;%dH%s"	pointer
,	O
x1	int
,	O
y1	int
+	O
tmp1	int
-	O
tmp2	int
,	O
title	pointer
)	O
;	O
if	O
(	O
FILE_STATE	enum
==	O
MODIFIED	int
&&	O
isMainWindow	int
)	O
fputc	function
(	O
'*'	O
,	O
stdout	pointer
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
move_lines_up	function
(	O
int	O
first	int
,	O
int	O
last	int
)	O
{	O
if	O
(	O
first	int
==	O
last	int
)	O
return	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
first	int
;	O
i	int
<	O
last	int
;	O
i	int
++	O
)	O
{	O
copyLineStruct	function
(	O
i	int
,	O
i	int
+	O
1	int
)	O
;	O
}	O
if	O
(	O
lines	array
[	O
last	int
]	O
->	O
text	pointer
)	O
free	function
(	O
lines	array
[	O
last	int
]	O
->	O
text	pointer
)	O
;	O
free	function
(	O
lines	array
[	O
last	int
]	O
)	O
;	O
lines	array
[	O
last	int
]	O
=	O
NULL	O
;	O
totalLines	int
--	O
;	O
}	O
void	O
move_lines_upd	function
(	O
int	O
first	int
,	O
int	O
diff	int
)	O
{	O
int	O
i	int
=	O
first	int
;	O
if	O
(	O
diff	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
first	int
==	O
totalLines	int
-	O
diff	int
)	O
goto	O
finish	O
;	O
for	O
(	O
;	O
i	int
<	O
totalLines	int
-	O
diff	int
;	O
i	int
++	O
)	O
{	O
copyLineStruct	function
(	O
i	int
,	O
i	int
+	O
diff	int
)	O
;	O
}	O
finish	O
:	O
for	O
(	O
;	O
i	int
<	O
totalLines	int
;	O
i	int
++	O
)	O
{	O
free	function
(	O
lines	array
[	O
i	int
]	O
)	O
;	O
lines	array
[	O
i	int
]	O
=	O
NULL	O
;	O
}	O
totalLines	int
-=	O
diff	int
;	O
}	O
void	O
move_lines_downl	function
(	O
int	O
first	int
,	O
int	O
last	int
,	O
char	O
*	O
newLineText	pointer
)	O
{	O
if	O
(	O
first	int
==	O
last	int
)	O
return	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
first	int
;	O
i	int
>	O
last	int
;	O
i	int
--	O
)	O
{	O
copyLineStruct	function
(	O
i	int
,	O
i	int
-	O
1	int
)	O
;	O
}	O
totalLines	int
++	O
;	O
if	O
(	O
newLineText	pointer
)	O
{	O
lines	array
[	O
last	int
]	O
=	O
allocLineStruct	function
(	O
)	O
;	O
lines	array
[	O
last	int
]	O
->	O
text	pointer
=	O
newLineText	pointer
;	O
calcTotalCharsInLine	function
(	O
last	int
)	O
;	O
}	O
else	O
lines	array
[	O
last	int
]	O
=	O
allocLineStructB	function
(	O
maxLen	int
)	O
;	O
}	O
void	O
move_lines_down	function
(	O
int	O
first	int
,	O
int	O
last	int
)	O
{	O
move_lines_downl	function
(	O
first	int
,	O
last	int
,	O
NULL	O
)	O
;	O
}	O
void	O
calcCharCarry	function
(	O
int	O
pos	int
)	O
{	O
selectedCharCarry	int
=	O
0	int
;	O
int	O
i	int
=	O
0	int
,	O
j	int
;	O
char	O
*	O
s	pointer
=	O
lines	array
[	O
pos	int
]	O
->	O
text	pointer
;	O
for	O
(	O
;	O
i	int
<	O
selectedChar	int
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'\t'	O
)	O
{	O
j	int
=	O
TABSPACES	O
(	O
i	int
+	O
selectedCharCarry	int
+	O
1	int
)	O
;	O
selectedCharCarry	int
+=	O
j	int
;	O
}	O
if	O
(	O
(	O
*	O
s	pointer
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
i	int
++	O
;	O
}	O
}	O
