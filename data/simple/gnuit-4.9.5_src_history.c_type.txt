extern	O
char	O
*	O
strcpy	function
(	O
)	O
;	O
extern	O
char	O
*	O
strchr	function
(	O
)	O
;	O
static	O
char	O
error_pointer	char
;	O
static	O
char	O
*	O
subst_lhs	pointer
;	O
static	O
char	O
*	O
subst_rhs	pointer
;	O
static	O
int	O
subst_lhs_len	int
=	O
0	int
;	O
static	O
int	O
subst_rhs_len	int
=	O
0	int
;	O
static	O
char	O
*	O
get_history_word_specifier	function
(	O
)	O
;	O
static	O
HIST_ENTRY	struct
*	O
*	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
NULL	O
;	O
int	O
history_stifled	int
=	O
0	int
;	O
int	O
max_input_history	int
;	O
static	O
int	O
history_offset	int
=	O
0	int
;	O
int	O
history_length	int
=	O
0	int
;	O
static	O
int	O
history_size	int
=	O
0	int
;	O
char	O
history_expansion_char	char
=	O
'!'	O
;	O
char	O
history_subst_char	char
=	O
'^'	O
;	O
char	O
history_comment_char	char
=	O
'\0'	O
;	O
char	O
*	O
history_no_expand_chars	pointer
=	O
" \t\n\r="	pointer
;	O
int	O
history_base	int
=	O
1	int
;	O
HISTORY_STATE	struct
*	O
history_get_history_state	function
(	O
)	O
{	O
HISTORY_STATE	struct
*	O
state	pointer
;	O
state	pointer
=	O
(	O
HISTORY_STATE	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HISTORY_STATE	struct
)	O
)	O
;	O
state	pointer
->	O
entries	pointer
=	O
the_history	pointer
;	O
state	pointer
->	O
offset	int
=	O
history_offset	int
;	O
state	pointer
->	O
length	int
=	O
history_length	int
;	O
state	pointer
->	O
size	int
=	O
history_size	int
;	O
return	O
(	O
state	pointer
)	O
;	O
}	O
void	O
history_set_history_state	function
(	O
state	pointer
)	O
HISTORY_STATE	struct
*	O
state	pointer
;	O
{	O
the_history	pointer
=	O
state	pointer
->	O
entries	pointer
;	O
history_offset	int
=	O
state	pointer
->	O
offset	int
;	O
history_length	int
=	O
state	pointer
->	O
length	int
;	O
history_size	int
=	O
state	pointer
->	O
size	int
;	O
}	O
void	O
using_history	function
(	O
)	O
{	O
history_offset	int
=	O
history_length	int
;	O
}	O
int	O
history_total_bytes	function
(	O
)	O
{	O
register	O
int	O
i	int
,	O
result	int
;	O
result	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
the_history	pointer
&&	O
the_history	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
result	int
+=	O
strlen	function
(	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
)	O
;	O
return	O
(	O
result	int
)	O
;	O
}	O
void	O
add_history	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
temp	pointer
;	O
if	O
(	O
history_stifled	int
&&	O
(	O
history_length	int
==	O
max_input_history	int
)	O
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
history_length	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
the_history	pointer
[	O
0	int
]	O
)	O
{	O
xfree	function
(	O
the_history	pointer
[	O
0	int
]	O
->	O
line	pointer
)	O
;	O
xfree	function
(	O
the_history	pointer
[	O
0	int
]	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
the_history	pointer
[	O
i	int
]	O
=	O
the_history	pointer
[	O
i	int
+	O
1	int
]	O
;	O
history_base	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
history_size	int
)	O
{	O
history_size	int
=	O
DEFAULT_HISTORY_GROW_SIZE	int
;	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
xmalloc	function
(	O
history_size	int
*	O
sizeof	O
(	O
HIST_ENTRY	struct
*	O
)	O
)	O
;	O
history_length	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
history_length	int
==	O
(	O
history_size	int
-	O
1	int
)	O
)	O
{	O
history_size	int
+=	O
DEFAULT_HISTORY_GROW_SIZE	int
;	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
xrealloc	function
(	O
the_history	pointer
,	O
history_size	int
*	O
sizeof	O
(	O
HIST_ENTRY	struct
*	O
)	O
)	O
;	O
}	O
history_length	int
++	O
;	O
}	O
}	O
temp	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HIST_ENTRY	struct
)	O
)	O
;	O
temp	pointer
->	O
line	pointer
=	O
savestring	O
(	O
string	pointer
)	O
;	O
temp	pointer
->	O
data	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
the_history	pointer
[	O
history_length	int
]	O
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
the_history	pointer
[	O
history_length	int
-	O
1	int
]	O
=	O
temp	pointer
;	O
}	O
HIST_ENTRY	struct
*	O
replace_history_entry	function
(	O
which	int
,	O
line	pointer
,	O
data	pointer
)	O
int	O
which	int
;	O
char	O
*	O
line	pointer
;	O
char	O
*	O
data	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
temp	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HIST_ENTRY	struct
)	O
)	O
;	O
HIST_ENTRY	struct
*	O
old_value	pointer
;	O
if	O
(	O
which	int
>=	O
history_length	int
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
old_value	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
temp	pointer
->	O
line	pointer
=	O
savestring	O
(	O
line	pointer
)	O
;	O
temp	pointer
->	O
data	pointer
=	O
data	pointer
;	O
the_history	pointer
[	O
which	int
]	O
=	O
temp	pointer
;	O
return	O
(	O
old_value	pointer
)	O
;	O
}	O
int	O
where_history	function
(	O
)	O
{	O
return	O
(	O
history_offset	int
)	O
;	O
}	O
static	O
int	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
anchored	int
)	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
,	O
anchored	int
;	O
{	O
register	O
int	O
i	int
,	O
reverse	int
;	O
register	O
char	O
*	O
line	pointer
;	O
register	O
int	O
line_index	int
;	O
int	O
string_len	int
;	O
i	int
=	O
history_offset	int
;	O
reverse	int
=	O
(	O
direction	int
<	O
0	int
)	O
;	O
if	O
(	O
!	O
history_length	int
||	O
(	O
(	O
i	int
==	O
history_length	int
)	O
&&	O
!	O
reverse	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
if	O
(	O
reverse	int
&&	O
(	O
i	int
==	O
history_length	int
)	O
)	O
i	int
--	O
;	O
string_len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
(	O
reverse	int
&&	O
i	int
<	O
0	int
)	O
||	O
(	O
!	O
reverse	int
&&	O
i	int
==	O
history_length	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
line	pointer
=	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
;	O
line_index	int
=	O
strlen	function
(	O
line	pointer
)	O
;	O
if	O
(	O
string_len	int
>	O
line_index	int
)	O
{	O
NEXT_LINE	O
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
anchored	int
==	O
ANCHORED_SEARCH	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
NEXT_LINE	O
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
reverse	int
)	O
{	O
line_index	int
-=	O
string_len	int
;	O
while	O
(	O
line_index	int
>=	O
0	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
+	O
line_index	int
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
line_index	int
)	O
;	O
}	O
line_index	int
--	O
;	O
}	O
}	O
else	O
{	O
register	O
int	O
limit	int
=	O
line_index	int
-	O
string_len	int
+	O
1	int
;	O
line_index	int
=	O
0	int
;	O
while	O
(	O
line_index	int
<	O
limit	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
+	O
line_index	int
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
line_index	int
)	O
;	O
}	O
line_index	int
++	O
;	O
}	O
}	O
NEXT_LINE	O
(	O
)	O
;	O
}	O
}	O
int	O
history_search	function
(	O
string	pointer
,	O
direction	int
)	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
;	O
{	O
return	O
(	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
NON_ANCHORED_SEARCH	int
)	O
)	O
;	O
}	O
int	O
history_search_prefix	function
(	O
string	pointer
,	O
direction	int
)	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
;	O
{	O
return	O
(	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
ANCHORED_SEARCH	int
)	O
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
remove_history	function
(	O
which	int
)	O
int	O
which	int
;	O
{	O
HIST_ENTRY	struct
*	O
return_value	pointer
;	O
if	O
(	O
which	int
>=	O
history_length	int
||	O
!	O
history_length	int
)	O
return_value	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
else	O
{	O
register	O
int	O
i	int
;	O
return_value	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
for	O
(	O
i	int
=	O
which	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
the_history	pointer
[	O
i	int
]	O
=	O
the_history	pointer
[	O
i	int
+	O
1	int
]	O
;	O
history_length	int
--	O
;	O
}	O
return	O
(	O
return_value	pointer
)	O
;	O
}	O
void	O
stifle_history	function
(	O
max	int
)	O
int	O
max	int
;	O
{	O
if	O
(	O
max	int
<	O
0	int
)	O
max	int
=	O
0	int
;	O
if	O
(	O
history_length	int
>	O
max	int
)	O
{	O
register	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
history_length	int
-	O
max	int
)	O
;	O
i	int
++	O
)	O
{	O
xfree	function
(	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
)	O
;	O
xfree	function
(	O
the_history	pointer
[	O
i	int
]	O
)	O
;	O
}	O
history_base	int
=	O
i	int
;	O
for	O
(	O
j	int
=	O
0	int
,	O
i	int
=	O
history_length	int
-	O
max	int
;	O
j	int
<	O
max	int
;	O
i	int
++	O
,	O
j	int
++	O
)	O
the_history	pointer
[	O
j	int
]	O
=	O
the_history	pointer
[	O
i	int
]	O
;	O
the_history	pointer
[	O
j	int
]	O
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
history_length	int
=	O
j	int
;	O
}	O
history_stifled	int
=	O
1	int
;	O
max_input_history	int
=	O
max	int
;	O
}	O
int	O
unstifle_history	function
(	O
)	O
{	O
int	O
result	int
=	O
max_input_history	int
;	O
if	O
(	O
history_stifled	int
)	O
{	O
result	int
=	O
-	O
result	int
;	O
history_stifled	int
=	O
0	int
;	O
}	O
return	O
(	O
result	int
)	O
;	O
}	O
static	O
char	O
*	O
history_filename	function
(	O
filename	pointer
)	O
char	O
*	O
filename	pointer
;	O
{	O
char	O
*	O
return_val	pointer
=	O
filename	pointer
?	O
savestring	O
(	O
filename	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
!	O
return_val	pointer
)	O
{	O
char	O
*	O
home	pointer
;	O
int	O
home_len	int
;	O
home	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
!	O
home	pointer
)	O
home	pointer
=	O
"."	pointer
;	O
home_len	int
=	O
strlen	function
(	O
home	pointer
)	O
;	O
return_val	pointer
=	O
xmalloc	function
(	O
2	int
+	O
home_len	int
+	O
8	int
)	O
;	O
strcpy	function
(	O
return_val	pointer
,	O
home	pointer
)	O
;	O
return_val	pointer
[	O
home_len	int
]	O
=	O
'/'	O
;	O
strcpy	function
(	O
return_val	pointer
+	O
home_len	int
+	O
1	int
,	O
".history"	pointer
)	O
;	O
}	O
return	O
(	O
return_val	pointer
)	O
;	O
}	O
int	O
read_history	function
(	O
filename	pointer
)	O
char	O
*	O
filename	pointer
;	O
{	O
return	O
(	O
read_history_range	function
(	O
filename	pointer
,	O
0	int
,	O
-	O
1	int
)	O
)	O
;	O
}	O
int	O
read_history_range	function
(	O
filename	pointer
,	O
from	int
,	O
to	int
)	O
char	O
*	O
filename	pointer
;	O
int	O
from	int
,	O
to	int
;	O
{	O
register	O
int	O
line_start	int
,	O
line_end	int
;	O
char	O
*	O
input	pointer
,	O
*	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
file	int
,	O
current_line	int
;	O
struct	O
stat	struct
finfo	struct
;	O
input	pointer
=	O
history_filename	function
(	O
filename	pointer
)	O
;	O
file	int
=	O
open	function
(	O
input	pointer
,	O
O_RDONLY	int
,	O
0666	int
)	O
;	O
if	O
(	O
(	O
file	int
<	O
0	int
)	O
||	O
(	O
xfstat	function
(	O
file	int
,	O
&	O
finfo	struct
)	O
==	O
-	O
1	int
)	O
)	O
goto	O
error_and_exit	O
;	O
buffer	pointer
=	O
xmalloc	function
(	O
(	O
int	O
)	O
finfo	struct
.	O
st_size	long
+	O
1	int
)	O
;	O
if	O
(	O
read	pointer
(	O
file	int
,	O
buffer	pointer
,	O
finfo	struct
.	O
st_size	long
)	O
!=	O
finfo	struct
.	O
st_size	long
)	O
{	O
error_and_exit	O
:	O
if	O
(	O
file	int
>=	O
0	int
)	O
close	pointer
(	O
file	int
)	O
;	O
if	O
(	O
input	pointer
)	O
xfree	function
(	O
input	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
xfree	function
(	O
buffer	pointer
)	O
;	O
return	O
(	O
errno	O
)	O
;	O
}	O
close	pointer
(	O
file	int
)	O
;	O
if	O
(	O
to	int
<	O
0	int
)	O
to	int
=	O
finfo	struct
.	O
st_size	long
;	O
line_start	int
=	O
line_end	int
=	O
current_line	int
=	O
0	int
;	O
while	O
(	O
line_start	int
<	O
finfo	struct
.	O
st_size	long
&&	O
current_line	int
<	O
from	int
)	O
{	O
for	O
(	O
line_end	int
=	O
line_start	int
;	O
line_end	int
<	O
finfo	struct
.	O
st_size	long
;	O
line_end	int
++	O
)	O
if	O
(	O
buffer	pointer
[	O
line_end	int
]	O
==	O
'\n'	O
)	O
{	O
current_line	int
++	O
;	O
line_start	int
=	O
line_end	int
+	O
1	int
;	O
if	O
(	O
current_line	int
==	O
from	int
)	O
break	O
;	O
}	O
}	O
for	O
(	O
line_end	int
=	O
line_start	int
;	O
line_end	int
<	O
finfo	struct
.	O
st_size	long
;	O
line_end	int
++	O
)	O
if	O
(	O
buffer	pointer
[	O
line_end	int
]	O
==	O
'\n'	O
)	O
{	O
buffer	pointer
[	O
line_end	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
buffer	pointer
[	O
line_start	int
]	O
)	O
add_history	function
(	O
buffer	pointer
+	O
line_start	int
)	O
;	O
current_line	int
++	O
;	O
if	O
(	O
current_line	int
>=	O
to	int
)	O
break	O
;	O
line_start	int
=	O
line_end	int
+	O
1	int
;	O
}	O
if	O
(	O
input	pointer
)	O
xfree	function
(	O
input	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
xfree	function
(	O
buffer	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
history_truncate_file	function
(	O
fname	pointer
,	O
lines	int
)	O
char	O
*	O
fname	pointer
;	O
register	O
int	O
lines	int
;	O
{	O
register	O
int	O
i	int
;	O
int	O
file	int
,	O
chars_read	int
;	O
char	O
*	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
,	O
*	O
filename	pointer
;	O
struct	O
stat	struct
finfo	struct
;	O
filename	pointer
=	O
history_filename	function
(	O
fname	pointer
)	O
;	O
file	int
=	O
open	function
(	O
filename	pointer
,	O
O_RDONLY	int
,	O
0666	int
)	O
;	O
if	O
(	O
file	int
==	O
-	O
1	int
||	O
xfstat	function
(	O
file	int
,	O
&	O
finfo	struct
)	O
==	O
-	O
1	int
)	O
goto	O
truncate_exit	O
;	O
buffer	pointer
=	O
xmalloc	function
(	O
(	O
int	O
)	O
finfo	struct
.	O
st_size	long
+	O
1	int
)	O
;	O
chars_read	int
=	O
read	pointer
(	O
file	int
,	O
buffer	pointer
,	O
finfo	struct
.	O
st_size	long
)	O
;	O
close	pointer
(	O
file	int
)	O
;	O
if	O
(	O
chars_read	int
<=	O
0	int
)	O
goto	O
truncate_exit	O
;	O
for	O
(	O
i	int
=	O
chars_read	int
-	O
1	int
;	O
lines	int
&&	O
i	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
buffer	pointer
[	O
i	int
]	O
==	O
'\n'	O
)	O
lines	int
--	O
;	O
}	O
for	O
(	O
;	O
i	int
;	O
i	int
--	O
)	O
if	O
(	O
buffer	pointer
[	O
i	int
]	O
==	O
'\n'	O
)	O
{	O
i	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
i	int
&&	O
(	O
(	O
file	int
=	O
open	function
(	O
filename	pointer
,	O
O_WRONLY	int
|	O
O_TRUNC	int
,	O
0666	int
)	O
)	O
!=	O
-	O
1	int
)	O
)	O
{	O
write	pointer
(	O
file	int
,	O
buffer	pointer
+	O
i	int
,	O
finfo	struct
.	O
st_size	long
-	O
i	int
)	O
;	O
close	pointer
(	O
file	int
)	O
;	O
}	O
truncate_exit	O
:	O
if	O
(	O
buffer	pointer
)	O
xfree	function
(	O
buffer	pointer
)	O
;	O
xfree	function
(	O
filename	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
history_do_write	function
(	O
filename	pointer
,	O
nelements	int
,	O
overwrite	int
)	O
char	O
*	O
filename	pointer
;	O
int	O
nelements	int
,	O
overwrite	int
;	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
output	pointer
=	O
history_filename	function
(	O
filename	pointer
)	O
;	O
int	O
file	int
,	O
mode	int
;	O
mode	int
=	O
overwrite	int
?	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
:	O
O_WRONLY	int
|	O
O_APPEND	int
;	O
if	O
(	O
(	O
file	int
=	O
open	function
(	O
output	pointer
,	O
mode	int
,	O
0666	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
output	pointer
)	O
xfree	function
(	O
output	pointer
)	O
;	O
return	O
(	O
errno	O
)	O
;	O
}	O
if	O
(	O
nelements	int
>	O
history_length	int
)	O
nelements	int
=	O
history_length	int
;	O
{	O
register	O
int	O
j	int
=	O
0	int
;	O
int	O
buffer_size	int
=	O
0	int
;	O
char	O
*	O
buffer	pointer
;	O
for	O
(	O
i	int
=	O
history_length	int
-	O
nelements	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
buffer_size	int
+=	O
1	int
+	O
strlen	function
(	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
)	O
;	O
buffer	pointer
=	O
xmalloc	function
(	O
buffer_size	int
)	O
;	O
for	O
(	O
i	int
=	O
history_length	int
-	O
nelements	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
buffer	pointer
+	O
j	int
,	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
)	O
;	O
j	int
+=	O
strlen	function
(	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
)	O
;	O
buffer	pointer
[	O
j	int
++	O
]	O
=	O
'\n'	O
;	O
}	O
write	pointer
(	O
file	int
,	O
buffer	pointer
,	O
buffer_size	int
)	O
;	O
xfree	function
(	O
buffer	pointer
)	O
;	O
}	O
close	pointer
(	O
file	int
)	O
;	O
if	O
(	O
output	pointer
)	O
xfree	function
(	O
output	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
append_history	function
(	O
nelements	int
,	O
filename	pointer
)	O
int	O
nelements	int
;	O
char	O
*	O
filename	pointer
;	O
{	O
return	O
(	O
history_do_write	function
(	O
filename	pointer
,	O
nelements	int
,	O
HISTORY_APPEND	int
)	O
)	O
;	O
}	O
int	O
write_history	function
(	O
filename	pointer
)	O
char	O
*	O
filename	pointer
;	O
{	O
return	O
(	O
history_do_write	function
(	O
filename	pointer
,	O
history_length	int
,	O
HISTORY_OVERWRITE	int
)	O
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
current_history	function
(	O
)	O
{	O
if	O
(	O
(	O
history_offset	int
==	O
history_length	int
)	O
||	O
!	O
the_history	pointer
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
else	O
return	O
(	O
the_history	pointer
[	O
history_offset	int
]	O
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
previous_history	function
(	O
)	O
{	O
if	O
(	O
!	O
history_offset	int
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
else	O
return	O
(	O
the_history	pointer
[	O
--	O
history_offset	int
]	O
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
next_history	function
(	O
)	O
{	O
if	O
(	O
history_offset	int
==	O
history_length	int
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
else	O
return	O
(	O
the_history	pointer
[	O
++	O
history_offset	int
]	O
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
*	O
history_list	function
(	O
)	O
{	O
return	O
(	O
the_history	pointer
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
history_get	function
(	O
offset	int
)	O
int	O
offset	int
;	O
{	O
int	O
local_index	int
=	O
offset	int
-	O
history_base	int
;	O
if	O
(	O
local_index	int
>=	O
history_length	int
||	O
local_index	int
<	O
0	int
||	O
!	O
the_history	pointer
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
return	O
(	O
the_history	pointer
[	O
local_index	int
]	O
)	O
;	O
}	O
int	O
history_search_pos	function
(	O
string	pointer
,	O
dir	int
,	O
pos	int
)	O
char	O
*	O
string	pointer
;	O
int	O
dir	int
,	O
pos	int
;	O
{	O
int	O
ret	int
,	O
old	int
=	O
where_history	function
(	O
)	O
;	O
history_set_pos	function
(	O
pos	int
)	O
;	O
if	O
(	O
history_search	function
(	O
string	pointer
,	O
dir	int
)	O
==	O
-	O
1	int
)	O
{	O
history_set_pos	function
(	O
old	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
ret	int
=	O
where_history	function
(	O
)	O
;	O
history_set_pos	function
(	O
old	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
history_set_pos	function
(	O
pos	int
)	O
int	O
pos	int
;	O
{	O
if	O
(	O
pos	int
>	O
history_length	int
||	O
pos	int
<	O
0	int
||	O
!	O
the_history	pointer
)	O
return	O
(	O
0	int
)	O
;	O
history_offset	int
=	O
pos	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
char	O
*	O
search_string	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
get_history_event	function
(	O
string	pointer
,	O
caller_index	pointer
,	O
delimiting_quote	int
)	O
char	O
*	O
string	pointer
;	O
int	O
*	O
caller_index	pointer
;	O
int	O
delimiting_quote	int
;	O
{	O
register	O
int	O
i	int
=	O
*	O
caller_index	pointer
;	O
register	O
char	O
c	char
;	O
HIST_ENTRY	struct
*	O
entry	pointer
;	O
int	O
which	int
,	O
sign	int
=	O
1	int
;	O
int	O
local_index	int
,	O
search_mode	int
,	O
substring_okay	int
=	O
0	int
;	O
char	O
*	O
temp	pointer
;	O
if	O
(	O
string	pointer
[	O
i	int
]	O
!=	O
history_expansion_char	char
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
i	int
++	O
;	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
history_expansion_char	char
)	O
{	O
i	int
++	O
;	O
which	int
=	O
history_base	int
+	O
(	O
history_length	int
-	O
1	int
)	O
;	O
*	O
caller_index	pointer
=	O
i	int
;	O
RETURN_ENTRY	O
(	O
entry	pointer
,	O
which	int
)	O
;	O
}	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'-'	O
)	O
{	O
sign	int
=	O
-	O
1	int
;	O
i	int
++	O
;	O
}	O
if	O
(	O
digit	O
(	O
string	pointer
[	O
i	int
]	O
)	O
)	O
{	O
for	O
(	O
which	int
=	O
0	int
;	O
digit	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
which	int
=	O
(	O
which	int
*	O
10	int
)	O
+	O
digit_value	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
*	O
caller_index	pointer
=	O
i	int
;	O
if	O
(	O
sign	int
<	O
0	int
)	O
which	int
=	O
(	O
history_length	int
+	O
history_base	int
)	O
-	O
which	int
;	O
RETURN_ENTRY	O
(	O
entry	pointer
,	O
which	int
)	O
;	O
}	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'?'	O
)	O
{	O
substring_okay	int
++	O
;	O
i	int
++	O
;	O
}	O
for	O
(	O
local_index	int
=	O
i	int
;	O
(	O
c	char
=	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
if	O
(	O
(	O
!	O
substring_okay	int
&&	O
(	O
whitespace	O
(	O
c	char
)	O
||	O
c	char
==	O
':'	O
||	O
string	pointer
[	O
i	int
]	O
==	O
delimiting_quote	int
)	O
)	O
||	O
string	pointer
[	O
i	int
]	O
==	O
'\n'	O
||	O
(	O
substring_okay	int
&&	O
string	pointer
[	O
i	int
]	O
==	O
'?'	O
)	O
)	O
break	O
;	O
temp	pointer
=	O
xmalloc	function
(	O
1	int
+	O
(	O
i	int
-	O
local_index	int
)	O
)	O
;	O
strncpy	function
(	O
temp	pointer
,	O
&	O
string	pointer
[	O
local_index	int
]	O
,	O
(	O
i	int
-	O
local_index	int
)	O
)	O
;	O
temp	pointer
[	O
i	int
-	O
local_index	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
substring_okay	int
&&	O
string	pointer
[	O
i	int
]	O
==	O
'?'	O
)	O
i	int
++	O
;	O
*	O
caller_index	pointer
=	O
i	int
;	O
search_mode	int
=	O
substring_okay	int
?	O
NON_ANCHORED_SEARCH	int
:	O
ANCHORED_SEARCH	int
;	O
while	O
(	O
1	int
)	O
{	O
local_index	int
=	O
history_search_internal	function
(	O
temp	pointer
,	O
-	O
1	int
,	O
search_mode	int
)	O
;	O
if	O
(	O
local_index	int
<	O
0	int
)	O
FAIL_SEARCH	O
(	O
)	O
;	O
if	O
(	O
local_index	int
==	O
0	int
||	O
substring_okay	int
)	O
{	O
entry	pointer
=	O
current_history	function
(	O
)	O
;	O
history_offset	int
=	O
history_length	int
;	O
if	O
(	O
substring_okay	int
)	O
{	O
if	O
(	O
search_string	pointer
)	O
xfree	function
(	O
search_string	pointer
)	O
;	O
search_string	pointer
=	O
temp	pointer
;	O
}	O
else	O
xfree	function
(	O
temp	pointer
)	O
;	O
return	O
(	O
entry	pointer
->	O
line	pointer
)	O
;	O
}	O
if	O
(	O
history_offset	int
)	O
history_offset	int
--	O
;	O
else	O
FAIL_SEARCH	O
(	O
)	O
;	O
}	O
}	O
static	O
char	O
*	O
hist_error	function
(	O
s	long
,	O
start	int
,	O
current	int
,	O
errtype	int
)	O
char	O
*	O
s	long
;	O
int	O
start	int
,	O
current	int
,	O
errtype	int
;	O
{	O
char	O
*	O
temp	pointer
,	O
*	O
emsg	pointer
;	O
int	O
ll	int
,	O
elen	int
;	O
ll	int
=	O
current	int
-	O
start	int
;	O
switch	O
(	O
errtype	int
)	O
{	O
case	O
EVENT_NOT_FOUND	int
:	O
emsg	pointer
=	O
"event not found"	pointer
;	O
elen	int
=	O
15	int
;	O
break	O
;	O
case	O
BAD_WORD_SPEC	int
:	O
emsg	pointer
=	O
"bad word specifier"	pointer
;	O
elen	int
=	O
18	int
;	O
break	O
;	O
case	O
SUBST_FAILED	int
:	O
emsg	pointer
=	O
"substitution failed"	pointer
;	O
elen	int
=	O
19	int
;	O
break	O
;	O
case	O
BAD_MODIFIER	int
:	O
emsg	pointer
=	O
"unrecognized history modifier"	pointer
;	O
elen	int
=	O
29	int
;	O
break	O
;	O
default	O
:	O
emsg	pointer
=	O
"unknown expansion error"	pointer
;	O
elen	int
=	O
23	int
;	O
break	O
;	O
}	O
temp	pointer
=	O
xmalloc	function
(	O
ll	int
+	O
elen	int
+	O
3	int
)	O
;	O
strncpy	function
(	O
temp	pointer
,	O
s	long
+	O
start	int
,	O
ll	int
)	O
;	O
temp	pointer
[	O
ll	int
]	O
=	O
':'	O
;	O
temp	pointer
[	O
ll	int
+	O
1	int
]	O
=	O
' '	O
;	O
strcpy	function
(	O
temp	pointer
+	O
ll	int
+	O
2	int
,	O
emsg	pointer
)	O
;	O
return	O
(	O
temp	pointer
)	O
;	O
}	O
static	O
char	O
*	O
get_subst_pattern	function
(	O
str	pointer
,	O
iptr	pointer
,	O
delimiter	int
,	O
is_rhs	int
,	O
lenptr	pointer
)	O
char	O
*	O
str	pointer
;	O
int	O
*	O
iptr	pointer
,	O
delimiter	int
,	O
is_rhs	int
,	O
*	O
lenptr	pointer
;	O
{	O
register	O
int	O
si	int
,	O
i	int
,	O
j	int
,	O
k	int
;	O
char	O
*	O
s	long
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
i	int
=	O
*	O
iptr	pointer
;	O
for	O
(	O
si	int
=	O
i	int
;	O
str	pointer
[	O
si	int
]	O
&&	O
str	pointer
[	O
si	int
]	O
!=	O
delimiter	int
;	O
si	int
++	O
)	O
if	O
(	O
str	pointer
[	O
si	int
]	O
==	O
'\\'	O
&&	O
str	pointer
[	O
si	int
+	O
1	int
]	O
==	O
delimiter	int
)	O
si	int
++	O
;	O
if	O
(	O
si	int
>	O
i	int
||	O
is_rhs	int
)	O
{	O
s	long
=	O
xmalloc	function
(	O
si	int
-	O
i	int
+	O
1	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
,	O
k	int
=	O
i	int
;	O
k	int
<	O
si	int
;	O
j	int
++	O
,	O
k	int
++	O
)	O
{	O
if	O
(	O
str	pointer
[	O
k	int
]	O
==	O
'\\'	O
&&	O
str	pointer
[	O
k	int
+	O
1	int
]	O
==	O
delimiter	int
)	O
k	int
++	O
;	O
s	long
[	O
j	int
]	O
=	O
str	pointer
[	O
k	int
]	O
;	O
}	O
s	long
[	O
j	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
lenptr	pointer
)	O
*	O
lenptr	pointer
=	O
j	int
;	O
}	O
i	int
=	O
si	int
;	O
if	O
(	O
str	pointer
[	O
i	int
]	O
)	O
i	int
++	O
;	O
*	O
iptr	pointer
=	O
i	int
;	O
return	O
s	long
;	O
}	O
static	O
void	O
postproc_subst_rhs	function
(	O
)	O
{	O
char	O
*	O
new	pointer
;	O
int	O
i	int
,	O
j	int
,	O
new_size	int
;	O
new	pointer
=	O
xmalloc	function
(	O
new_size	int
=	O
subst_rhs_len	int
+	O
subst_lhs_len	int
)	O
;	O
for	O
(	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
subst_rhs_len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
subst_rhs	pointer
[	O
i	int
]	O
==	O
'&'	O
)	O
{	O
if	O
(	O
j	int
+	O
subst_lhs_len	int
>=	O
new_size	int
)	O
new	pointer
=	O
xrealloc	function
(	O
new	pointer
,	O
(	O
new_size	int
=	O
new_size	int
*	O
2	int
+	O
subst_lhs_len	int
)	O
)	O
;	O
strcpy	function
(	O
new	pointer
+	O
j	int
,	O
subst_lhs	pointer
)	O
;	O
j	int
+=	O
subst_lhs_len	int
;	O
}	O
else	O
{	O
if	O
(	O
subst_rhs	pointer
[	O
i	int
]	O
==	O
'\\'	O
&&	O
subst_rhs	pointer
[	O
i	int
+	O
1	int
]	O
==	O
'&'	O
)	O
i	int
++	O
;	O
if	O
(	O
j	int
>=	O
new_size	int
)	O
new	pointer
=	O
xrealloc	function
(	O
new	pointer
,	O
new_size	int
*=	O
2	int
)	O
;	O
new	pointer
[	O
j	int
++	O
]	O
=	O
subst_rhs	pointer
[	O
i	int
]	O
;	O
}	O
}	O
new	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
xfree	function
(	O
subst_rhs	pointer
)	O
;	O
subst_rhs	pointer
=	O
new	pointer
;	O
subst_rhs_len	int
=	O
j	int
;	O
}	O
static	O
int	O
history_expand_internal	function
(	O
string	pointer
,	O
start	int
,	O
end_index_ptr	pointer
,	O
ret_string	pointer
,	O
current_line	int
)	O
char	O
*	O
string	pointer
;	O
int	O
start	int
,	O
*	O
end_index_ptr	pointer
;	O
char	O
*	O
*	O
ret_string	pointer
;	O
char	O
*	O
current_line	int
;	O
{	O
int	O
i	int
,	O
n	long
,	O
starting_index	int
;	O
int	O
substitute_globally	int
,	O
want_quotes	int
,	O
print_only	int
;	O
char	O
*	O
event	pointer
,	O
*	O
temp	pointer
,	O
*	O
result	int
,	O
*	O
tstr	pointer
,	O
*	O
t	pointer
,	O
c	char
,	O
*	O
word_spec	pointer
;	O
int	O
result_len	int
;	O
result	int
=	O
xmalloc	function
(	O
result_len	int
=	O
128	int
)	O
;	O
i	int
=	O
start	int
;	O
if	O
(	O
member	O
(	O
string	pointer
[	O
i	int
+	O
1	int
]	O
,	O
":$*%^"	pointer
)	O
)	O
{	O
char	O
fake_s	array
[	O
3	int
]	O
;	O
int	O
fake_i	int
=	O
0	int
;	O
i	int
++	O
;	O
fake_s	array
[	O
0	int
]	O
=	O
fake_s	array
[	O
1	int
]	O
=	O
history_expansion_char	char
;	O
fake_s	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
event	pointer
=	O
get_history_event	function
(	O
fake_s	array
,	O
&	O
fake_i	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
string	pointer
[	O
i	int
+	O
1	int
]	O
==	O
'#'	O
)	O
{	O
i	int
+=	O
2	int
;	O
event	pointer
=	O
current_line	int
;	O
}	O
else	O
{	O
int	O
quoted_search_delimiter	int
=	O
0	int
;	O
if	O
(	O
i	int
&&	O
(	O
string	pointer
[	O
i	int
-	O
1	int
]	O
==	O
'\''	O
||	O
string	pointer
[	O
i	int
-	O
1	int
]	O
==	O
'"'	O
)	O
)	O
quoted_search_delimiter	int
=	O
string	pointer
[	O
i	int
-	O
1	int
]	O
;	O
event	pointer
=	O
get_history_event	function
(	O
string	pointer
,	O
&	O
i	int
,	O
quoted_search_delimiter	int
)	O
;	O
}	O
if	O
(	O
!	O
event	pointer
)	O
{	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
start	int
,	O
i	int
,	O
EVENT_NOT_FOUND	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
starting_index	int
=	O
i	int
;	O
word_spec	pointer
=	O
get_history_word_specifier	function
(	O
string	pointer
,	O
event	pointer
,	O
&	O
i	int
)	O
;	O
if	O
(	O
word_spec	pointer
==	O
(	O
char	O
*	O
)	O
&	O
error_pointer	char
)	O
{	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
starting_index	int
,	O
i	int
,	O
BAD_WORD_SPEC	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
word_spec	pointer
)	O
temp	pointer
=	O
savestring	O
(	O
event	pointer
)	O
;	O
else	O
{	O
temp	pointer
=	O
savestring	O
(	O
word_spec	pointer
)	O
;	O
xfree	function
(	O
word_spec	pointer
)	O
;	O
}	O
want_quotes	int
=	O
substitute_globally	int
=	O
print_only	int
=	O
0	int
;	O
starting_index	int
=	O
i	int
;	O
while	O
(	O
string	pointer
[	O
i	int
]	O
==	O
':'	O
)	O
{	O
c	char
=	O
string	pointer
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
c	char
==	O
'g'	O
)	O
{	O
substitute_globally	int
=	O
1	int
;	O
i	int
++	O
;	O
c	char
=	O
string	pointer
[	O
i	int
+	O
1	int
]	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
default	O
:	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
i	int
+	O
1	int
,	O
i	int
+	O
2	int
,	O
BAD_MODIFIER	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
return	O
-	O
1	int
;	O
case	O
'p'	O
:	O
print_only	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
tstr	pointer
=	O
strrchr	function
(	O
temp	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
tstr	pointer
)	O
{	O
tstr	pointer
++	O
;	O
t	pointer
=	O
savestring	O
(	O
tstr	pointer
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
temp	pointer
=	O
t	pointer
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
tstr	pointer
=	O
strrchr	function
(	O
temp	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
tstr	pointer
)	O
*	O
tstr	pointer
=	O
'\0'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
tstr	pointer
=	O
strrchr	function
(	O
temp	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
tstr	pointer
)	O
*	O
tstr	pointer
=	O
'\0'	O
;	O
break	O
;	O
case	O
'e'	O
:	O
tstr	pointer
=	O
strrchr	function
(	O
temp	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
tstr	pointer
)	O
{	O
t	pointer
=	O
savestring	O
(	O
tstr	pointer
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
temp	pointer
=	O
t	pointer
;	O
}	O
break	O
;	O
case	O
'&'	O
:	O
case	O
's'	O
:	O
{	O
char	O
*	O
new_event	pointer
,	O
*	O
t	pointer
;	O
int	O
delimiter	int
,	O
failed	int
,	O
si	int
,	O
l_temp	int
;	O
if	O
(	O
c	char
==	O
's'	O
)	O
{	O
if	O
(	O
i	int
+	O
2	int
<	O
(	O
int	O
)	O
strlen	function
(	O
string	pointer
)	O
)	O
delimiter	int
=	O
string	pointer
[	O
i	int
+	O
2	int
]	O
;	O
else	O
break	O
;	O
i	int
+=	O
3	int
;	O
t	pointer
=	O
get_subst_pattern	function
(	O
string	pointer
,	O
&	O
i	int
,	O
delimiter	int
,	O
0	int
,	O
&	O
subst_lhs_len	int
)	O
;	O
if	O
(	O
t	pointer
)	O
{	O
if	O
(	O
subst_lhs	pointer
)	O
xfree	function
(	O
subst_lhs	pointer
)	O
;	O
subst_lhs	pointer
=	O
t	pointer
;	O
}	O
else	O
if	O
(	O
!	O
subst_lhs	pointer
)	O
{	O
if	O
(	O
search_string	pointer
&&	O
*	O
search_string	pointer
)	O
{	O
subst_lhs	pointer
=	O
savestring	O
(	O
search_string	pointer
)	O
;	O
subst_lhs_len	int
=	O
strlen	function
(	O
subst_lhs	pointer
)	O
;	O
}	O
else	O
{	O
subst_lhs	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
subst_lhs_len	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
subst_lhs_len	int
==	O
0	int
)	O
{	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
starting_index	int
,	O
i	int
,	O
SUBST_FAILED	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
subst_rhs	pointer
)	O
xfree	function
(	O
subst_rhs	pointer
)	O
;	O
subst_rhs	pointer
=	O
get_subst_pattern	function
(	O
string	pointer
,	O
&	O
i	int
,	O
delimiter	int
,	O
1	int
,	O
&	O
subst_rhs_len	int
)	O
;	O
if	O
(	O
member	O
(	O
'&'	O
,	O
subst_rhs	pointer
)	O
)	O
postproc_subst_rhs	function
(	O
)	O
;	O
}	O
else	O
i	int
+=	O
2	int
;	O
l_temp	int
=	O
strlen	function
(	O
temp	pointer
)	O
;	O
if	O
(	O
subst_lhs_len	int
>	O
l_temp	int
)	O
{	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
starting_index	int
,	O
i	int
,	O
SUBST_FAILED	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
si	int
=	O
0	int
;	O
for	O
(	O
failed	int
=	O
1	int
;	O
(	O
si	int
+	O
subst_lhs_len	int
)	O
<=	O
l_temp	int
;	O
si	int
++	O
)	O
if	O
(	O
STREQN	O
(	O
temp	pointer
+	O
si	int
,	O
subst_lhs	pointer
,	O
subst_lhs_len	int
)	O
)	O
{	O
int	O
len	int
=	O
subst_rhs_len	int
-	O
subst_lhs_len	int
+	O
l_temp	int
;	O
new_event	pointer
=	O
xmalloc	function
(	O
1	int
+	O
len	int
)	O
;	O
strncpy	function
(	O
new_event	pointer
,	O
temp	pointer
,	O
si	int
)	O
;	O
strncpy	function
(	O
new_event	pointer
+	O
si	int
,	O
subst_rhs	pointer
,	O
subst_rhs_len	int
)	O
;	O
strncpy	function
(	O
new_event	pointer
+	O
si	int
+	O
subst_rhs_len	int
,	O
temp	pointer
+	O
si	int
+	O
subst_lhs_len	int
,	O
l_temp	int
-	O
(	O
si	int
+	O
subst_lhs_len	int
)	O
)	O
;	O
new_event	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
temp	pointer
=	O
new_event	pointer
;	O
failed	int
=	O
0	int
;	O
if	O
(	O
substitute_globally	int
)	O
{	O
si	int
+=	O
subst_rhs_len	int
;	O
l_temp	int
=	O
strlen	function
(	O
temp	pointer
)	O
;	O
substitute_globally	int
++	O
;	O
continue	O
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
substitute_globally	int
>	O
1	int
)	O
{	O
substitute_globally	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
failed	int
==	O
0	int
)	O
continue	O
;	O
*	O
ret_string	pointer
=	O
hist_error	function
(	O
string	pointer
,	O
starting_index	int
,	O
i	int
,	O
SUBST_FAILED	int
)	O
;	O
xfree	function
(	O
result	int
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
i	int
+=	O
2	int
;	O
}	O
--	O
i	int
;	O
n	long
=	O
strlen	function
(	O
temp	pointer
)	O
;	O
if	O
(	O
n	long
>	O
result_len	int
)	O
result	int
=	O
xrealloc	function
(	O
result	int
,	O
n	long
+	O
1	int
)	O
;	O
strcpy	function
(	O
result	int
,	O
temp	pointer
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
*	O
end_index_ptr	pointer
=	O
i	int
;	O
*	O
ret_string	pointer
=	O
result	int
;	O
return	O
(	O
print_only	int
)	O
;	O
}	O
int	O
history_expand	function
(	O
hstring	pointer
,	O
output	pointer
)	O
char	O
*	O
hstring	pointer
;	O
char	O
*	O
*	O
output	pointer
;	O
{	O
register	O
int	O
j	int
;	O
int	O
i	int
,	O
r	int
,	O
l	int
,	O
passc	int
,	O
cc	int
,	O
modified	int
,	O
eindex	int
,	O
only_printing	int
;	O
char	O
*	O
string	pointer
;	O
int	O
result_len	int
;	O
char	O
*	O
result	int
;	O
char	O
*	O
temp	pointer
;	O
if	O
(	O
history_expansion_char	char
==	O
0	int
)	O
{	O
*	O
output	pointer
=	O
savestring	O
(	O
hstring	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
result	int
=	O
xmalloc	function
(	O
result_len	int
=	O
256	int
)	O
;	O
result	int
[	O
0	int
]	O
=	O
'\0'	O
;	O
only_printing	int
=	O
modified	int
=	O
0	int
;	O
l	int
=	O
strlen	function
(	O
hstring	pointer
)	O
;	O
if	O
(	O
hstring	pointer
[	O
0	int
]	O
==	O
history_subst_char	char
)	O
{	O
string	pointer
=	O
xmalloc	function
(	O
l	int
+	O
5	int
)	O
;	O
string	pointer
[	O
0	int
]	O
=	O
string	pointer
[	O
1	int
]	O
=	O
history_expansion_char	char
;	O
string	pointer
[	O
2	int
]	O
=	O
':'	O
;	O
string	pointer
[	O
3	int
]	O
=	O
's'	O
;	O
strcpy	function
(	O
string	pointer
+	O
4	int
,	O
hstring	pointer
)	O
;	O
l	int
+=	O
4	int
;	O
}	O
else	O
{	O
string	pointer
=	O
hstring	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
string	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
cc	int
=	O
string	pointer
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
history_expansion_char	char
)	O
{	O
if	O
(	O
!	O
cc	int
||	O
member	O
(	O
cc	int
,	O
history_no_expand_chars	pointer
)	O
)	O
continue	O
;	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
string	pointer
[	O
i	int
]	O
!=	O
history_expansion_char	char
)	O
{	O
xfree	function
(	O
result	int
)	O
;	O
*	O
output	pointer
=	O
savestring	O
(	O
string	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
for	O
(	O
passc	int
=	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
l	int
;	O
i	int
++	O
)	O
{	O
int	O
tchar	int
=	O
string	pointer
[	O
i	int
]	O
;	O
if	O
(	O
passc	int
)	O
{	O
passc	int
=	O
0	int
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
tchar	int
==	O
history_expansion_char	char
)	O
tchar	int
=	O
-	O
3	int
;	O
switch	O
(	O
tchar	int
)	O
{	O
default	O
:	O
ADD_CHAR	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
passc	int
++	O
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
break	O
;	O
case	O
-	O
3	int
:	O
cc	int
=	O
string	pointer
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
member	O
(	O
cc	int
,	O
history_no_expand_chars	pointer
)	O
)	O
{	O
ADD_CHAR	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
r	int
=	O
history_expand_internal	function
(	O
string	pointer
,	O
i	int
,	O
&	O
eindex	int
,	O
&	O
temp	pointer
,	O
result	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
*	O
output	pointer
=	O
temp	pointer
;	O
xfree	function
(	O
result	int
)	O
;	O
if	O
(	O
string	pointer
!=	O
hstring	pointer
)	O
xfree	function
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
temp	pointer
)	O
{	O
modified	int
++	O
;	O
if	O
(	O
*	O
temp	pointer
)	O
ADD_STRING	O
(	O
temp	pointer
)	O
;	O
xfree	function
(	O
temp	pointer
)	O
;	O
}	O
only_printing	int
=	O
r	int
==	O
1	int
;	O
i	int
=	O
eindex	int
;	O
}	O
break	O
;	O
}	O
}	O
*	O
output	pointer
=	O
result	int
;	O
if	O
(	O
string	pointer
!=	O
hstring	pointer
)	O
xfree	function
(	O
string	pointer
)	O
;	O
if	O
(	O
only_printing	int
)	O
{	O
add_history	function
(	O
result	int
)	O
;	O
return	O
(	O
2	int
)	O
;	O
}	O
return	O
(	O
modified	int
!=	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
get_history_word_specifier	function
(	O
spec	pointer
,	O
from	int
,	O
caller_index	pointer
)	O
char	O
*	O
spec	pointer
,	O
*	O
from	int
;	O
int	O
*	O
caller_index	pointer
;	O
{	O
register	O
int	O
i	int
=	O
*	O
caller_index	pointer
;	O
int	O
first	int
,	O
last	int
;	O
int	O
expecting_word_spec	int
=	O
0	int
;	O
char	O
*	O
result	int
;	O
first	int
=	O
last	int
=	O
0	int
;	O
result	int
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
':'	O
)	O
{	O
i	int
++	O
;	O
expecting_word_spec	int
++	O
;	O
}	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'%'	O
)	O
{	O
*	O
caller_index	pointer
=	O
i	int
+	O
1	int
;	O
return	O
(	O
search_string	pointer
?	O
savestring	O
(	O
search_string	pointer
)	O
:	O
savestring	O
(	O
""	pointer
)	O
)	O
;	O
}	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'*'	O
)	O
{	O
*	O
caller_index	pointer
=	O
i	int
+	O
1	int
;	O
result	int
=	O
history_arg_extract	function
(	O
1	int
,	O
'$'	O
,	O
from	int
)	O
;	O
return	O
(	O
result	int
?	O
result	int
:	O
savestring	O
(	O
""	pointer
)	O
)	O
;	O
}	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'$'	O
)	O
{	O
*	O
caller_index	pointer
=	O
i	int
+	O
1	int
;	O
return	O
(	O
history_arg_extract	function
(	O
'$'	O
,	O
'$'	O
,	O
from	int
)	O
)	O
;	O
}	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'-'	O
)	O
first	int
=	O
0	int
;	O
else	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'^'	O
)	O
first	int
=	O
1	int
;	O
else	O
if	O
(	O
digit	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
&&	O
expecting_word_spec	int
)	O
{	O
for	O
(	O
first	int
=	O
0	int
;	O
digit	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
first	int
=	O
(	O
first	int
*	O
10	int
)	O
+	O
digit_value	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
;	O
}	O
else	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'^'	O
||	O
spec	pointer
[	O
i	int
]	O
==	O
'*'	O
)	O
{	O
last	int
=	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'^'	O
)	O
?	O
1	int
:	O
'$'	O
;	O
i	int
++	O
;	O
}	O
else	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
!=	O
'-'	O
)	O
last	int
=	O
first	int
;	O
else	O
{	O
i	int
++	O
;	O
if	O
(	O
digit	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
)	O
{	O
for	O
(	O
last	int
=	O
0	int
;	O
digit	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
last	int
=	O
(	O
last	int
*	O
10	int
)	O
+	O
digit_value	O
(	O
spec	pointer
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
spec	pointer
[	O
i	int
]	O
==	O
'$'	O
)	O
{	O
i	int
++	O
;	O
last	int
=	O
'$'	O
;	O
}	O
else	O
if	O
(	O
!	O
spec	pointer
[	O
i	int
]	O
||	O
spec	pointer
[	O
i	int
]	O
==	O
':'	O
)	O
last	int
=	O
-	O
1	int
;	O
}	O
*	O
caller_index	pointer
=	O
i	int
;	O
if	O
(	O
last	int
>=	O
first	int
||	O
last	int
==	O
'$'	O
||	O
last	int
<	O
0	int
)	O
result	int
=	O
history_arg_extract	function
(	O
first	int
,	O
last	int
,	O
from	int
)	O
;	O
return	O
(	O
result	int
?	O
result	int
:	O
(	O
char	O
*	O
)	O
&	O
error_pointer	char
)	O
;	O
}	O
char	O
*	O
history_arg_extract	function
(	O
first	int
,	O
last	int
,	O
string	pointer
)	O
int	O
first	int
,	O
last	int
;	O
char	O
*	O
string	pointer
;	O
{	O
register	O
int	O
i	int
,	O
len	int
;	O
char	O
*	O
result	int
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
size	int
=	O
0	int
,	O
offset	int
=	O
0	int
;	O
char	O
*	O
*	O
list	pointer
;	O
if	O
(	O
(	O
list	pointer
=	O
history_tokenize	function
(	O
string	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
for	O
(	O
len	int
=	O
0	int
;	O
list	pointer
[	O
len	int
]	O
;	O
len	int
++	O
)	O
;	O
if	O
(	O
last	int
<	O
0	int
)	O
last	int
=	O
len	int
+	O
last	int
-	O
1	int
;	O
if	O
(	O
first	int
<	O
0	int
)	O
first	int
=	O
len	int
+	O
first	int
-	O
1	int
;	O
if	O
(	O
last	int
==	O
'$'	O
)	O
last	int
=	O
len	int
-	O
1	int
;	O
if	O
(	O
first	int
==	O
'$'	O
)	O
first	int
=	O
len	int
-	O
1	int
;	O
last	int
++	O
;	O
if	O
(	O
first	int
>	O
len	int
||	O
last	int
>	O
len	int
||	O
first	int
<	O
0	int
||	O
last	int
<	O
0	int
)	O
result	int
=	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
else	O
{	O
for	O
(	O
size	int
=	O
0	int
,	O
i	int
=	O
first	int
;	O
i	int
<	O
last	int
;	O
i	int
++	O
)	O
size	int
+=	O
strlen	function
(	O
list	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
result	int
=	O
xmalloc	function
(	O
size	int
+	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
first	int
;	O
i	int
<	O
last	int
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
result	int
+	O
offset	int
,	O
list	pointer
[	O
i	int
]	O
)	O
;	O
offset	int
+=	O
strlen	function
(	O
list	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
i	int
+	O
1	int
<	O
last	int
)	O
{	O
result	int
[	O
offset	int
++	O
]	O
=	O
' '	O
;	O
result	int
[	O
offset	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
xfree	function
(	O
list	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
list	pointer
)	O
;	O
return	O
(	O
result	int
)	O
;	O
}	O
char	O
*	O
*	O
history_tokenize	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
char	O
*	O
*	O
result	int
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
register	O
int	O
i	int
,	O
start	int
,	O
result_index	int
,	O
size	int
;	O
int	O
len	int
;	O
i	int
=	O
result_index	int
=	O
size	int
=	O
0	int
;	O
while	O
(	O
string	pointer
[	O
i	int
]	O
)	O
{	O
int	O
delimiter	int
=	O
0	int
;	O
for	O
(	O
;	O
string	pointer
[	O
i	int
]	O
&&	O
whitespace	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
;	O
if	O
(	O
!	O
string	pointer
[	O
i	int
]	O
||	O
string	pointer
[	O
i	int
]	O
==	O
history_comment_char	char
)	O
return	O
(	O
result	int
)	O
;	O
start	int
=	O
i	int
;	O
if	O
(	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
"()\n"	pointer
)	O
)	O
{	O
i	int
++	O
;	O
goto	O
got_token	O
;	O
}	O
if	O
(	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
"<>;&|$"	pointer
)	O
)	O
{	O
int	O
peek	int
=	O
string	pointer
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
peek	int
==	O
string	pointer
[	O
i	int
]	O
&&	O
peek	int
!=	O
'$'	O
)	O
{	O
if	O
(	O
peek	int
==	O
'<'	O
&&	O
string	pointer
[	O
i	int
+	O
2	int
]	O
==	O
'-'	O
)	O
i	int
++	O
;	O
i	int
+=	O
2	int
;	O
goto	O
got_token	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
peek	int
==	O
'&'	O
&&	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'>'	O
||	O
string	pointer
[	O
i	int
]	O
==	O
'<'	O
)	O
)	O
||	O
(	O
(	O
peek	int
==	O
'>'	O
)	O
&&	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'&'	O
)	O
)	O
||	O
(	O
(	O
peek	int
==	O
'('	O
)	O
&&	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'$'	O
)	O
)	O
)	O
{	O
i	int
+=	O
2	int
;	O
goto	O
got_token	O
;	O
}	O
}	O
if	O
(	O
string	pointer
[	O
i	int
]	O
!=	O
'$'	O
)	O
{	O
i	int
++	O
;	O
goto	O
got_token	O
;	O
}	O
}	O
if	O
(	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
"\"'`"	pointer
)	O
)	O
delimiter	int
=	O
string	pointer
[	O
i	int
++	O
]	O
;	O
for	O
(	O
;	O
string	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'\\'	O
&&	O
string	pointer
[	O
i	int
+	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
string	pointer
[	O
i	int
]	O
==	O
'\\'	O
&&	O
delimiter	int
!=	O
'\''	O
&&	O
(	O
delimiter	int
!=	O
'"'	O
||	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
slashify_in_quotes	pointer
)	O
)	O
)	O
{	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
delimiter	int
&&	O
string	pointer
[	O
i	int
]	O
==	O
delimiter	int
)	O
{	O
delimiter	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
delimiter	int
&&	O
(	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
" \t\n;&()|<>"	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
!	O
delimiter	int
&&	O
member	O
(	O
string	pointer
[	O
i	int
]	O
,	O
"\"'`"	pointer
)	O
)	O
delimiter	int
=	O
string	pointer
[	O
i	int
]	O
;	O
}	O
got_token	O
:	O
len	int
=	O
i	int
-	O
start	int
;	O
if	O
(	O
result_index	int
+	O
2	int
>=	O
size	int
)	O
result	int
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
result	int
,	O
(	O
(	O
size	int
+=	O
10	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
result	int
[	O
result_index	int
]	O
=	O
xmalloc	function
(	O
1	int
+	O
len	int
)	O
;	O
strncpy	function
(	O
result	int
[	O
result_index	int
]	O
,	O
string	pointer
+	O
start	int
,	O
len	int
)	O
;	O
result	int
[	O
result_index	int
]	O
[	O
len	int
]	O
=	O
'\0'	O
;	O
result	int
[	O
++	O
result_index	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
return	O
(	O
result	int
)	O
;	O
}	O
