SCM_DEFINE_PUBLIC	function
(	O
scm_mu_debug_parse	O
,	O
"mu-debug-parse"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
spec	pointer
)	O
,	O
"Parses @var{spec} and sets MU debugging level according to it."	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
spec	pointer
)	O
,	O
spec	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
s	pointer
=	O
scm_to_locale_string	function
(	O
spec	pointer
)	O
;	O
mu_debug_parse_spec	function
(	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
static	O
int	O
string_member_p	function
(	O
SCM	function
list	pointer
,	O
SCM	function
x	int
)	O
{	O
return	O
scm_member	function
(	O
x	int
,	O
list	pointer
)	O
!=	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_debug_set	O
,	O
"mu-debug-set"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
catlist	O
)	O
,	O
"Sets MU debug level according to @var{catlist}, which is a list of\n"	pointer
"conses: (cons category level)\n"	pointer
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_pair	function
(	O
catlist	O
)	O
,	O
catlist	O
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
for	O
(	O
;	O
!	O
scm_is_null	function
(	O
catlist	O
)	O
;	O
catlist	O
=	O
SCM_CDR	function
(	O
catlist	O
)	O
)	O
{	O
SCM	function
cell	O
=	O
SCM_CAR	O
(	O
catlist	O
)	O
;	O
SCM	function
x	int
;	O
char	O
*	O
name	pointer
;	O
mu_debug_level_t	int
lev	int
;	O
SCM_ASSERT	function
(	O
scm_is_pair	function
(	O
cell	O
)	O
,	O
cell	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
x	int
=	O
scm_car	function
(	O
cell	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
x	int
)	O
,	O
x	int
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
name	pointer
=	O
scm_to_locale_string	function
(	O
x	int
)	O
;	O
x	int
=	O
scm_cdr	function
(	O
cell	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
x	int
)	O
,	O
x	int
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
lev	int
=	O
scm_to_int	function
(	O
x	int
)	O
;	O
if	O
(	O
lev	int
==	O
0	int
)	O
mu_debug_disable_category	function
(	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
)	O
;	O
else	O
mu_debug_enable_category	function
(	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
lev	int
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
}	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_debug_get	O
,	O
"mu-debug-get"	pointer
,	O
0	int
,	O
2	int
,	O
0	int
,	O
(	O
SCM	function
catlist	O
,	O
SCM	function
skipunset	int
)	O
,	O
"Returns a list of MU debugging categories with corresponding levels.\n"	pointer
"If @var{catlist} is supplied, it is a list of category names.  In this case\n"	pointer
"only categories from this list are returned"	pointer
)	O
{	O
int	O
skipunset_flag	int
=	O
0	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
SCM	function
head	O
=	O
SCM_EOL	O
,	O
tail	O
=	O
SCM_EOL	O
;	O
int	O
(	O
*	O
member_p	pointer
)	O
(	O
SCM	function
list	pointer
,	O
SCM	function
needle	pointer
)	O
;	O
if	O
(	O
SCM_UNBNDP	function
(	O
catlist	O
)	O
||	O
catlist	O
==	O
SCM_BOOL_F	O
)	O
member_p	pointer
=	O
NULL	O
;	O
else	O
{	O
SCM_ASSERT	function
(	O
scm_is_pair	function
(	O
catlist	O
)	O
,	O
catlist	O
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
member_p	pointer
=	O
string_member_p	function
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
skipunset	int
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
skipunset	int
)	O
,	O
skipunset	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
skipunset_flag	int
=	O
skipunset	int
==	O
SCM_BOOL_T	O
;	O
}	O
mu_debug_get_iterator	function
(	O
&	O
itr	pointer
,	O
skipunset_flag	int
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
mu_debug_level_t	int
level	int
;	O
SCM	function
scm_name	O
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
level	int
)	O
;	O
scm_name	O
=	O
scm_from_locale_string	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
member_p	pointer
||	O
member_p	pointer
(	O
catlist	O
,	O
scm_name	O
)	O
)	O
{	O
SCM	function
scm_new	O
=	O
scm_cons	O
(	O
scm_cons	O
(	O
scm_name	O
,	O
scm_from_uintmax	O
(	O
level	int
)	O
)	O
,	O
SCM_EOL	O
)	O
;	O
if	O
(	O
scm_is_null	function
(	O
head	O
)	O
)	O
head	O
=	O
tail	O
=	O
scm_new	O
;	O
else	O
{	O
SCM_SETCDR	function
(	O
tail	O
,	O
scm_new	O
)	O
;	O
tail	O
=	O
scm_new	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
head	O
;	O
}	O
void	O
mu_scm_debug_init	function
(	O
)	O
{	O
}	O
