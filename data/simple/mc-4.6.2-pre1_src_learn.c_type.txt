static	O
struct	O
{	O
int	O
ret_cmd	int
,	O
flags	enum
,	O
y	short
,	O
x	array
;	O
const	O
char	O
*	O
text	pointer
;	O
}	O
learn_but	array
[	O
BUTTONS	int
]	O
=	O
{	O
{	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
0	int
,	O
39	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
}	O
,	O
{	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
0	int
,	O
25	int
,	O
N_	O
(	O
"&Save"	pointer
)	O
}	O
}	O
;	O
static	O
Dlg_head	struct
*	O
learn_dlg	pointer
;	O
typedef	O
struct	O
{	O
Widget	struct
*	O
button	pointer
;	O
Widget	struct
*	O
label	pointer
;	O
int	O
ok	int
;	O
char	O
*	O
sequence	pointer
;	O
}	O
learnkey	struct
;	O
static	O
learnkey	struct
*	O
learnkeys	pointer
=	O
NULL	O
;	O
static	O
int	O
learn_total	int
;	O
static	O
int	O
learnok	int
;	O
static	O
int	O
learnchanged	int
;	O
static	O
const	O
char	O
*	O
learn_title	pointer
=	O
N_	O
(	O
"Learn keys"	pointer
)	O
;	O
static	O
int	O
learn_button	function
(	O
int	O
action	int
)	O
{	O
char	O
*	O
seq	pointer
;	O
Dlg_head	struct
*	O
d	double
=	O
create_message	function
(	O
D_ERROR	int
,	O
_	O
(	O
" Teach me a key "	pointer
)	O
,	O
_	O
(	O
"Please press the %s\n"	pointer
"and then wait until this message disappears.\n\n"	pointer
"Then, press it again to see if OK appears\n"	pointer
"next to its button.\n\n"	pointer
"If you want to escape, press a single Escape key\n"	pointer
"and wait as well."	pointer
)	O
,	O
_	O
(	O
key_name_conv_tab	array
[	O
action	int
-	O
B_USER	int
]	O
.	O
longname	pointer
)	O
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
if	O
(	O
learnkeys	pointer
[	O
action	int
-	O
B_USER	int
]	O
.	O
sequence	pointer
!=	O
NULL	O
)	O
{	O
g_free	function
(	O
learnkeys	pointer
[	O
action	int
-	O
B_USER	int
]	O
.	O
sequence	pointer
)	O
;	O
learnkeys	pointer
[	O
action	int
-	O
B_USER	int
]	O
.	O
sequence	pointer
=	O
NULL	O
;	O
}	O
seq	pointer
=	O
learn_key	function
(	O
)	O
;	O
if	O
(	O
seq	pointer
)	O
{	O
int	O
seq_ok	int
;	O
if	O
(	O
*	O
seq	pointer
&&	O
strcmp	function
(	O
seq	pointer
,	O
"\\e"	pointer
)	O
&&	O
strcmp	function
(	O
seq	pointer
,	O
"\\e\\e"	pointer
)	O
&&	O
strcmp	function
(	O
seq	pointer
,	O
"^m"	pointer
)	O
&&	O
strcmp	function
(	O
seq	pointer
,	O
"^i"	pointer
)	O
&&	O
(	O
seq	pointer
[	O
1	int
]	O
||	O
(	O
*	O
seq	pointer
<	O
' '	O
||	O
*	O
seq	pointer
>	O
'~'	O
)	O
)	O
)	O
{	O
learnchanged	int
=	O
1	int
;	O
learnkeys	pointer
[	O
action	int
-	O
B_USER	int
]	O
.	O
sequence	pointer
=	O
seq	pointer
;	O
seq	pointer
=	O
convert_controls	function
(	O
seq	pointer
)	O
;	O
seq_ok	int
=	O
define_sequence	function
(	O
key_name_conv_tab	array
[	O
action	int
-	O
B_USER	int
]	O
.	O
code	int
,	O
seq	pointer
,	O
MCKEY_NOACTION	int
)	O
;	O
}	O
else	O
{	O
seq_ok	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
seq_ok	int
)	O
{	O
message	pointer
(	O
0	int
,	O
_	O
(	O
" Cannot accept this key "	pointer
)	O
,	O
_	O
(	O
" You have entered \"%s\""	pointer
)	O
,	O
seq	pointer
)	O
;	O
}	O
g_free	function
(	O
seq	pointer
)	O
;	O
}	O
dlg_run_done	function
(	O
d	double
)	O
;	O
destroy_dlg	function
(	O
d	double
)	O
;	O
dlg_select_widget	function
(	O
learnkeys	pointer
[	O
action	int
-	O
B_USER	int
]	O
.	O
button	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
learn_move	function
(	O
int	O
right	int
)	O
{	O
int	O
i	array
,	O
totalcols	int
;	O
totalcols	int
=	O
(	O
learn_total	int
-	O
1	int
)	O
/	O
ROWS	int
+	O
1	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
learn_total	int
;	O
i	array
++	O
)	O
if	O
(	O
learnkeys	pointer
[	O
i	array
]	O
.	O
button	pointer
==	O
learn_dlg	pointer
->	O
current	pointer
)	O
{	O
if	O
(	O
right	int
)	O
{	O
if	O
(	O
i	array
<	O
learn_total	int
-	O
ROWS	int
)	O
i	array
+=	O
ROWS	int
;	O
else	O
i	array
%=	O
ROWS	int
;	O
}	O
else	O
{	O
if	O
(	O
i	array
/	O
ROWS	int
)	O
i	array
-=	O
ROWS	int
;	O
else	O
if	O
(	O
i	array
+	O
(	O
totalcols	int
-	O
1	int
)	O
*	O
ROWS	int
>=	O
learn_total	int
)	O
i	array
+=	O
(	O
totalcols	int
-	O
2	int
)	O
*	O
ROWS	int
;	O
else	O
i	array
+=	O
(	O
totalcols	int
-	O
1	int
)	O
*	O
ROWS	int
;	O
}	O
dlg_select_widget	function
(	O
learnkeys	pointer
[	O
i	array
]	O
.	O
button	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
learn_check_key	function
(	O
int	O
c	int
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
learn_total	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
key_name_conv_tab	array
[	O
i	array
]	O
.	O
code	int
!=	O
c	int
||	O
learnkeys	pointer
[	O
i	array
]	O
.	O
ok	int
)	O
continue	O
;	O
dlg_select_widget	function
(	O
learnkeys	pointer
[	O
i	array
]	O
.	O
button	pointer
)	O
;	O
label_set_text	function
(	O
(	O
WLabel	struct
*	O
)	O
learnkeys	pointer
[	O
i	array
]	O
.	O
label	pointer
,	O
_	O
(	O
"OK"	pointer
)	O
)	O
;	O
learnkeys	pointer
[	O
i	array
]	O
.	O
ok	int
=	O
1	int
;	O
learnok	int
++	O
;	O
if	O
(	O
learnok	int
>=	O
learn_total	int
)	O
{	O
learn_dlg	pointer
->	O
ret_value	int
=	O
B_CANCEL	int
;	O
if	O
(	O
learnchanged	int
)	O
{	O
if	O
(	O
query_dialog	function
(	O
learn_title	pointer
,	O
_	O
(	O
"It seems that all your keys already\n"	pointer
"work fine. That's great."	pointer
)	O
,	O
1	int
,	O
2	int
,	O
_	O
(	O
"&Save"	pointer
)	O
,	O
_	O
(	O
"&Discard"	pointer
)	O
)	O
==	O
0	int
)	O
learn_dlg	pointer
->	O
ret_value	int
=	O
B_ENTER	int
;	O
}	O
else	O
{	O
message	pointer
(	O
1	int
,	O
learn_title	pointer
,	O
_	O
(	O
"Great! You have a complete terminal database!\n"	pointer
"All your keys work well."	pointer
)	O
)	O
;	O
}	O
dlg_stop	function
(	O
learn_dlg	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
KEY_LEFT	int
:	O
case	O
'h'	O
:	O
return	O
learn_move	function
(	O
0	int
)	O
;	O
case	O
KEY_RIGHT	int
:	O
case	O
'l'	O
:	O
return	O
learn_move	function
(	O
1	int
)	O
;	O
case	O
'j'	O
:	O
dlg_one_down	function
(	O
learn_dlg	pointer
)	O
;	O
return	O
1	int
;	O
case	O
'k'	O
:	O
dlg_one_up	function
(	O
learn_dlg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
c	int
<	O
255	int
&&	O
isalnum	function
(	O
c	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
cb_ret_t	enum
learn_callback	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_DRAW	int
:	O
common_dialog_repaint	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_KEY	int
:	O
return	O
learn_check_key	function
(	O
parm	int
)	O
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
init_learn	function
(	O
void	O
)	O
{	O
int	O
x	array
,	O
y	short
,	O
i	array
,	O
j	int
;	O
key_code_name_t	struct
*	O
key	pointer
;	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
learn_but	array
[	O
0	int
]	O
.	O
text	pointer
=	O
_	O
(	O
learn_but	array
[	O
0	int
]	O
.	O
text	pointer
)	O
;	O
learn_but	array
[	O
0	int
]	O
.	O
x	array
=	O
78	int
/	O
2	int
+	O
4	int
;	O
learn_but	array
[	O
1	int
]	O
.	O
text	pointer
=	O
_	O
(	O
learn_but	array
[	O
1	int
]	O
.	O
text	pointer
)	O
;	O
learn_but	array
[	O
1	int
]	O
.	O
x	array
=	O
78	int
/	O
2	int
-	O
(	O
strlen	function
(	O
learn_but	array
[	O
1	int
]	O
.	O
text	pointer
)	O
+	O
9	int
)	O
;	O
learn_title	pointer
=	O
_	O
(	O
learn_title	pointer
)	O
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
do_refresh	function
(	O
)	O
;	O
learn_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
23	int
,	O
78	int
,	O
dialog_colors	array
,	O
learn_callback	function
,	O
"[Learn keys]"	pointer
,	O
learn_title	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
BUTTONS	int
;	O
i	array
++	O
)	O
add_widget	function
(	O
learn_dlg	pointer
,	O
button_new	function
(	O
BY	O
+	O
learn_but	array
[	O
i	array
]	O
.	O
y	short
,	O
learn_but	array
[	O
i	array
]	O
.	O
x	array
,	O
learn_but	array
[	O
i	array
]	O
.	O
ret_cmd	int
,	O
learn_but	array
[	O
i	array
]	O
.	O
flags	enum
,	O
_	O
(	O
learn_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
,	O
0	int
)	O
)	O
;	O
x	array
=	O
UX	int
;	O
y	short
=	O
UY	int
;	O
for	O
(	O
key	pointer
=	O
key_name_conv_tab	array
,	O
j	int
=	O
0	int
;	O
key	pointer
->	O
name	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
key	pointer
->	O
name	pointer
,	O
"kpleft"	pointer
)	O
;	O
key	pointer
++	O
,	O
j	int
++	O
)	O
;	O
learnkeys	pointer
=	O
g_new	O
(	O
learnkey	struct
,	O
j	int
)	O
;	O
x	array
+=	O
(	O
(	O
j	int
-	O
1	int
)	O
/	O
ROWS	int
)	O
*	O
COLSHIFT	int
;	O
y	short
+=	O
(	O
j	int
-	O
1	int
)	O
%	O
ROWS	int
;	O
learn_total	int
=	O
j	int
;	O
learnok	int
=	O
0	int
;	O
learnchanged	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
j	int
-	O
1	int
,	O
key	pointer
=	O
key_name_conv_tab	array
+	O
j	int
-	O
1	int
;	O
i	array
>=	O
0	int
;	O
i	array
--	O
,	O
key	pointer
--	O
)	O
{	O
learnkeys	pointer
[	O
i	array
]	O
.	O
ok	int
=	O
0	int
;	O
learnkeys	pointer
[	O
i	array
]	O
.	O
sequence	pointer
=	O
NULL	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%-16s"	pointer
,	O
_	O
(	O
key	pointer
->	O
longname	pointer
)	O
)	O
;	O
add_widget	function
(	O
learn_dlg	pointer
,	O
learnkeys	pointer
[	O
i	array
]	O
.	O
button	pointer
=	O
(	O
Widget	struct
*	O
)	O
button_new	function
(	O
y	short
,	O
x	array
,	O
B_USER	int
+	O
i	array
,	O
NARROW_BUTTON	int
,	O
buffer	pointer
,	O
learn_button	function
)	O
)	O
;	O
add_widget	function
(	O
learn_dlg	pointer
,	O
learnkeys	pointer
[	O
i	array
]	O
.	O
label	pointer
=	O
(	O
Widget	struct
*	O
)	O
label_new	function
(	O
y	short
,	O
x	array
+	O
19	int
,	O
""	pointer
)	O
)	O
;	O
if	O
(	O
i	array
%	O
13	int
)	O
y	short
--	O
;	O
else	O
{	O
x	array
-=	O
COLSHIFT	int
;	O
y	short
=	O
UY	int
+	O
ROWS	int
-	O
1	int
;	O
}	O
}	O
add_widget	function
(	O
learn_dlg	pointer
,	O
label_new	function
(	O
UY	int
+	O
14	int
,	O
5	int
,	O
_	O
(	O
"Press all the keys mentioned here. After you have done it, check"	pointer
)	O
)	O
)	O
;	O
add_widget	function
(	O
learn_dlg	pointer
,	O
label_new	function
(	O
UY	int
+	O
15	int
,	O
5	int
,	O
_	O
(	O
"which keys are not marked with OK.  Press space on the missing"	pointer
)	O
)	O
)	O
;	O
add_widget	function
(	O
learn_dlg	pointer
,	O
label_new	function
(	O
UY	int
+	O
16	int
,	O
5	int
,	O
_	O
(	O
"key, or click with the mouse to define it. Move around with Tab."	pointer
)	O
)	O
)	O
;	O
}	O
static	O
void	O
learn_done	function
(	O
void	O
)	O
{	O
destroy_dlg	function
(	O
learn_dlg	pointer
)	O
;	O
repaint_screen	function
(	O
)	O
;	O
}	O
static	O
void	O
learn_save	function
(	O
void	O
)	O
{	O
int	O
i	array
;	O
int	O
profile_changed	int
=	O
0	int
;	O
char	O
*	O
section	pointer
=	O
g_strconcat	function
(	O
"terminal:"	pointer
,	O
getenv	function
(	O
"TERM"	pointer
)	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
learn_total	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
learnkeys	pointer
[	O
i	array
]	O
.	O
sequence	pointer
!=	O
NULL	O
)	O
{	O
profile_changed	int
=	O
1	int
;	O
WritePrivateProfileString	function
(	O
section	pointer
,	O
key_name_conv_tab	array
[	O
i	array
]	O
.	O
name	pointer
,	O
learnkeys	pointer
[	O
i	array
]	O
.	O
sequence	pointer
,	O
profile_name	pointer
)	O
;	O
}	O
}	O
if	O
(	O
profile_changed	int
)	O
sync_profiles	function
(	O
)	O
;	O
g_free	function
(	O
section	pointer
)	O
;	O
}	O
void	O
learn_keys	function
(	O
void	O
)	O
{	O
int	O
save_old_esc_mode	int
=	O
old_esc_mode	int
;	O
int	O
save_alternate_plus_minus	int
=	O
alternate_plus_minus	int
;	O
old_esc_mode	int
=	O
0	int
;	O
alternate_plus_minus	int
=	O
1	int
;	O
application_keypad_mode	function
(	O
)	O
;	O
init_learn	function
(	O
)	O
;	O
run_dlg	function
(	O
learn_dlg	pointer
)	O
;	O
old_esc_mode	int
=	O
save_old_esc_mode	int
;	O
alternate_plus_minus	int
=	O
save_alternate_plus_minus	int
;	O
if	O
(	O
!	O
alternate_plus_minus	int
)	O
numeric_keypad_mode	function
(	O
)	O
;	O
switch	O
(	O
learn_dlg	pointer
->	O
ret_value	int
)	O
{	O
case	O
B_ENTER	int
:	O
learn_save	function
(	O
)	O
;	O
break	O
;	O
}	O
learn_done	function
(	O
)	O
;	O
}	O
