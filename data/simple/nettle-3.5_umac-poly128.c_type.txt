static	O
void	O
poly128_mul	function
(	O
const	O
uint32_t	int
*	O
k	pointer
,	O
uint64_t	long
*	O
y	long
)	O
{	O
uint64_t	long
y0	long
,	O
y1	long
,	O
y2	long
,	O
y3	long
,	O
p0	long
,	O
p1	long
,	O
p2	long
,	O
p3	long
,	O
m0	long
,	O
m1	long
,	O
m2	long
;	O
y0	long
=	O
LO	O
(	O
y	long
[	O
1	int
]	O
)	O
;	O
y1	long
=	O
HI	O
(	O
y	long
[	O
1	int
]	O
)	O
;	O
y2	long
=	O
LO	O
(	O
y	long
[	O
0	int
]	O
)	O
;	O
y3	long
=	O
HI	O
(	O
y	long
[	O
0	int
]	O
)	O
;	O
p0	long
=	O
y0	long
*	O
k	pointer
[	O
3	int
]	O
;	O
m0	long
=	O
y0	long
*	O
k	pointer
[	O
2	int
]	O
+	O
y1	long
*	O
k	pointer
[	O
3	int
]	O
;	O
p1	long
=	O
y0	long
*	O
k	pointer
[	O
1	int
]	O
+	O
y1	long
*	O
k	pointer
[	O
2	int
]	O
+	O
y2	long
*	O
k	pointer
[	O
3	int
]	O
;	O
m1	long
=	O
y0	long
*	O
k	pointer
[	O
0	int
]	O
+	O
y1	long
*	O
k	pointer
[	O
1	int
]	O
+	O
y2	long
*	O
k	pointer
[	O
2	int
]	O
+	O
y3	long
*	O
k	pointer
[	O
3	int
]	O
;	O
p2	long
=	O
y1	long
*	O
k	pointer
[	O
0	int
]	O
+	O
y2	long
*	O
k	pointer
[	O
1	int
]	O
+	O
y3	long
*	O
k	pointer
[	O
2	int
]	O
;	O
m2	long
=	O
y2	long
*	O
k	pointer
[	O
0	int
]	O
+	O
y3	long
*	O
k	pointer
[	O
1	int
]	O
;	O
p3	long
=	O
y3	long
*	O
k	pointer
[	O
0	int
]	O
;	O
m1	long
+=	O
UMAC_P128_OFFSET	int
*	O
HI	O
(	O
p3	long
)	O
;	O
p1	long
+=	O
UMAC_P128_OFFSET	int
*	O
(	O
LO	O
(	O
p3	long
)	O
+	O
HI	O
(	O
m2	long
)	O
)	O
;	O
m0	long
+=	O
UMAC_P128_OFFSET	int
*	O
(	O
HI	O
(	O
p2	long
)	O
+	O
LO	O
(	O
m2	long
)	O
)	O
;	O
p0	long
+=	O
UMAC_P128_OFFSET	int
*	O
(	O
LO	O
(	O
p2	long
)	O
+	O
HI	O
(	O
m1	long
)	O
)	O
;	O
p1	long
+=	O
m0	long
>>	O
32	int
;	O
m0	long
<<=	O
32	int
;	O
m1	long
<<=	O
32	int
;	O
p0	long
+=	O
m0	long
;	O
p1	long
+=	O
(	O
p0	long
<	O
m0	long
)	O
;	O
p1	long
+=	O
m1	long
;	O
if	O
(	O
p1	long
<	O
m1	long
)	O
{	O
p0	long
+=	O
UMAC_P128_OFFSET	int
;	O
p1	long
+=	O
(	O
p0	long
<	O
UMAC_P128_OFFSET	int
)	O
;	O
}	O
y	long
[	O
0	int
]	O
=	O
p1	long
;	O
y	long
[	O
1	int
]	O
=	O
p0	long
;	O
}	O
void	O
_umac_poly128	O
(	O
const	O
uint32_t	int
*	O
k	pointer
,	O
uint64_t	long
*	O
y	long
,	O
uint64_t	long
mh	long
,	O
uint64_t	long
ml	long
)	O
{	O
uint64_t	long
yh	long
,	O
yl	long
,	O
cy	long
;	O
if	O
(	O
(	O
mh	long
>>	O
32	int
)	O
==	O
0xffffffff	int
)	O
{	O
poly128_mul	function
(	O
k	pointer
,	O
y	long
)	O
;	O
if	O
(	O
y	long
[	O
1	int
]	O
>	O
0	int
)	O
y	long
[	O
1	int
]	O
--	O
;	O
else	O
if	O
(	O
y	long
[	O
0	int
]	O
>	O
0	int
)	O
{	O
y	long
[	O
0	int
]	O
--	O
;	O
y	long
[	O
1	int
]	O
=	O
UMAC_P128_HI	O
;	O
}	O
else	O
{	O
y	long
[	O
0	int
]	O
=	O
UMAC_P128_HI	O
;	O
y	long
[	O
1	int
]	O
=	O
UMAC_P128_LO	O
-	O
1	int
;	O
}	O
mh	long
-=	O
(	O
ml	long
<	O
UMAC_P128_OFFSET	int
)	O
;	O
ml	long
-=	O
UMAC_P128_OFFSET	int
;	O
}	O
assert	O
(	O
mh	long
<	O
UMAC_P128_HI	O
||	O
ml	long
<	O
UMAC_P128_LO	O
)	O
;	O
poly128_mul	function
(	O
k	pointer
,	O
y	long
)	O
;	O
yl	long
=	O
y	long
[	O
1	int
]	O
+	O
ml	long
;	O
cy	long
=	O
(	O
yl	long
<	O
ml	long
)	O
;	O
yh	long
=	O
y	long
[	O
0	int
]	O
+	O
cy	long
;	O
cy	long
=	O
(	O
yh	long
<	O
cy	long
)	O
;	O
yh	long
+=	O
mh	long
;	O
cy	long
+=	O
(	O
yh	long
<	O
mh	long
)	O
;	O
assert	O
(	O
cy	long
<=	O
1	int
)	O
;	O
if	O
(	O
cy	long
)	O
{	O
yl	long
+=	O
UMAC_P128_OFFSET	int
;	O
yh	long
+=	O
yl	long
<	O
UMAC_P128_OFFSET	int
;	O
}	O
y	long
[	O
0	int
]	O
=	O
yh	long
;	O
y	long
[	O
1	int
]	O
=	O
yl	long
;	O
}	O
