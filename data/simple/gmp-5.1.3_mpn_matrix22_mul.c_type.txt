static	O
int	O
abs_sub_n	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
)	O
{	O
int	O
c	int
;	O
MPN_CMP	O
(	O
c	int
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
if	O
(	O
c	int
>=	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
rp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
rp	pointer
,	O
bp	pointer
,	O
ap	pointer
,	O
n	long
)	O
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
add_signed_n	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
int	O
as	int
,	O
mp_srcptr	pointer
bp	pointer
,	O
int	O
bs	int
,	O
mp_size_t	long
n	long
)	O
{	O
if	O
(	O
as	int
!=	O
bs	int
)	O
return	O
as	int
^	O
abs_sub_n	function
(	O
rp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add_n	O
(	O
rp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
)	O
;	O
return	O
as	int
;	O
}	O
}	O
mp_size_t	long
mpn_matrix22_mul_itch	O
(	O
mp_size_t	long
rn	long
,	O
mp_size_t	long
mn	long
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
rn	long
,	O
MATRIX22_STRASSEN_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
mn	long
,	O
MATRIX22_STRASSEN_THRESHOLD	int
)	O
)	O
return	O
3	int
*	O
rn	long
+	O
2	int
*	O
mn	long
;	O
else	O
return	O
3	int
*	O
(	O
rn	long
+	O
mn	long
)	O
+	O
5	int
;	O
}	O
void	O
mpn_matrix22_mul_strassen	O
(	O
mp_ptr	pointer
r0	pointer
,	O
mp_ptr	pointer
r1	pointer
,	O
mp_ptr	pointer
r2	pointer
,	O
mp_ptr	pointer
r3	pointer
,	O
mp_size_t	long
rn	long
,	O
mp_srcptr	pointer
m0	pointer
,	O
mp_srcptr	pointer
m1	pointer
,	O
mp_srcptr	pointer
m2	pointer
,	O
mp_srcptr	pointer
m3	pointer
,	O
mp_size_t	long
mn	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_ptr	pointer
s0	long
,	O
t0	pointer
,	O
u0	pointer
,	O
u1	pointer
;	O
int	O
r1s	int
,	O
r3s	int
,	O
s0s	int
,	O
t0s	int
,	O
u1s	int
;	O
s0	long
=	O
tp	pointer
;	O
tp	pointer
+=	O
rn	long
+	O
1	int
;	O
t0	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
mn	long
+	O
1	int
;	O
u0	pointer
=	O
tp	pointer
;	O
tp	pointer
+=	O
rn	long
+	O
mn	long
+	O
1	int
;	O
u1	pointer
=	O
tp	pointer
;	O
MUL	O
(	O
u0	pointer
,	O
r1	pointer
,	O
rn	long
,	O
m2	pointer
,	O
mn	long
)	O
;	O
r3s	int
=	O
abs_sub_n	function
(	O
r3	pointer
,	O
r3	pointer
,	O
r2	pointer
,	O
rn	long
)	O
;	O
if	O
(	O
r3s	int
)	O
{	O
r1s	int
=	O
abs_sub_n	function
(	O
r1	pointer
,	O
r1	pointer
,	O
r3	pointer
,	O
rn	long
)	O
;	O
r1	pointer
[	O
rn	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
r1	pointer
[	O
rn	long
]	O
=	O
mpn_add_n	O
(	O
r1	pointer
,	O
r1	pointer
,	O
r3	pointer
,	O
rn	long
)	O
;	O
r1s	int
=	O
0	int
;	O
}	O
if	O
(	O
r1s	int
)	O
{	O
s0	long
[	O
rn	long
]	O
=	O
mpn_add_n	O
(	O
s0	long
,	O
r1	pointer
,	O
r0	pointer
,	O
rn	long
)	O
;	O
s0s	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
r1	pointer
[	O
rn	long
]	O
!=	O
0	int
)	O
{	O
s0	long
[	O
rn	long
]	O
=	O
r1	pointer
[	O
rn	long
]	O
-	O
mpn_sub_n	O
(	O
s0	long
,	O
r1	pointer
,	O
r0	pointer
,	O
rn	long
)	O
;	O
s0s	int
=	O
1	int
;	O
}	O
else	O
{	O
s0s	int
=	O
abs_sub_n	function
(	O
s0	long
,	O
r0	pointer
,	O
r1	pointer
,	O
rn	long
)	O
;	O
s0	long
[	O
rn	long
]	O
=	O
0	int
;	O
}	O
MUL	O
(	O
u1	pointer
,	O
r0	pointer
,	O
rn	long
,	O
m0	pointer
,	O
mn	long
)	O
;	O
r0	pointer
[	O
rn	long
+	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
r0	pointer
,	O
u0	pointer
,	O
u1	pointer
,	O
rn	long
+	O
mn	long
)	O
;	O
ASSERT	O
(	O
r0	pointer
[	O
rn	long
+	O
mn	long
]	O
<	O
2	int
)	O
;	O
t0s	int
=	O
abs_sub_n	function
(	O
t0	pointer
,	O
m3	pointer
,	O
m2	pointer
,	O
mn	long
)	O
;	O
u1s	int
=	O
r3s	int
^	O
t0s	int
^	O
1	int
;	O
MUL	O
(	O
u1	pointer
,	O
r3	pointer
,	O
rn	long
,	O
t0	pointer
,	O
mn	long
)	O
;	O
u1	pointer
[	O
rn	long
+	O
mn	long
]	O
=	O
0	int
;	O
if	O
(	O
t0s	int
)	O
{	O
t0s	int
=	O
abs_sub_n	function
(	O
t0	pointer
,	O
m1	pointer
,	O
t0	pointer
,	O
mn	long
)	O
;	O
t0	pointer
[	O
mn	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
t0	pointer
[	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
t0	pointer
,	O
t0	pointer
,	O
m1	pointer
,	O
mn	long
)	O
;	O
}	O
if	O
(	O
t0	pointer
[	O
mn	long
]	O
!=	O
0	int
)	O
{	O
MUL	O
(	O
r3	pointer
,	O
r1	pointer
,	O
rn	long
,	O
t0	pointer
,	O
mn	long
+	O
1	int
)	O
;	O
ASSERT	O
(	O
r1	pointer
[	O
rn	long
]	O
<	O
2	int
)	O
;	O
if	O
(	O
r1	pointer
[	O
rn	long
]	O
!=	O
0	int
)	O
mpn_add_n	O
(	O
r3	pointer
+	O
rn	long
,	O
r3	pointer
+	O
rn	long
,	O
t0	pointer
,	O
mn	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
MUL	O
(	O
r3	pointer
,	O
r1	pointer
,	O
rn	long
+	O
1	int
,	O
t0	pointer
,	O
mn	long
)	O
;	O
}	O
ASSERT	O
(	O
r3	pointer
[	O
rn	long
+	O
mn	long
]	O
<	O
4	int
)	O
;	O
u0	pointer
[	O
rn	long
+	O
mn	long
]	O
=	O
0	int
;	O
if	O
(	O
r1s	int
^	O
t0s	int
)	O
{	O
r3s	int
=	O
abs_sub_n	function
(	O
r3	pointer
,	O
u0	pointer
,	O
r3	pointer
,	O
rn	long
+	O
mn	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add_n	O
(	O
r3	pointer
,	O
r3	pointer
,	O
u0	pointer
,	O
rn	long
+	O
mn	long
+	O
1	int
)	O
)	O
;	O
r3s	int
=	O
0	int
;	O
}	O
if	O
(	O
t0s	int
)	O
{	O
t0	pointer
[	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
t0	pointer
,	O
t0	pointer
,	O
m0	pointer
,	O
mn	long
)	O
;	O
}	O
else	O
if	O
(	O
t0	pointer
[	O
mn	long
]	O
!=	O
0	int
)	O
{	O
t0	pointer
[	O
mn	long
]	O
-=	O
mpn_sub_n	O
(	O
t0	pointer
,	O
t0	pointer
,	O
m0	pointer
,	O
mn	long
)	O
;	O
}	O
else	O
{	O
t0s	int
=	O
abs_sub_n	function
(	O
t0	pointer
,	O
t0	pointer
,	O
m0	pointer
,	O
mn	long
)	O
;	O
}	O
MUL	O
(	O
u0	pointer
,	O
r2	pointer
,	O
rn	long
,	O
t0	pointer
,	O
mn	long
+	O
1	int
)	O
;	O
ASSERT	O
(	O
u0	pointer
[	O
rn	long
+	O
mn	long
]	O
<	O
2	int
)	O
;	O
if	O
(	O
r1s	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
r1	pointer
,	O
r2	pointer
,	O
r1	pointer
,	O
rn	long
)	O
)	O
;	O
}	O
else	O
{	O
r1	pointer
[	O
rn	long
]	O
+=	O
mpn_add_n	O
(	O
r1	pointer
,	O
r1	pointer
,	O
r2	pointer
,	O
rn	long
)	O
;	O
}	O
rn	long
++	O
;	O
t0s	int
=	O
add_signed_n	function
(	O
r2	pointer
,	O
r3	pointer
,	O
r3s	int
,	O
u0	pointer
,	O
t0s	int
,	O
rn	long
+	O
mn	long
)	O
;	O
ASSERT	O
(	O
r2	pointer
[	O
rn	long
+	O
mn	long
-	O
1	int
]	O
<	O
4	int
)	O
;	O
r3s	int
=	O
add_signed_n	function
(	O
r3	pointer
,	O
r3	pointer
,	O
r3s	int
,	O
u1	pointer
,	O
u1s	int
,	O
rn	long
+	O
mn	long
)	O
;	O
ASSERT	O
(	O
r3	pointer
[	O
rn	long
+	O
mn	long
-	O
1	int
]	O
<	O
3	int
)	O
;	O
MUL	O
(	O
u0	pointer
,	O
s0	long
,	O
rn	long
,	O
m1	pointer
,	O
mn	long
)	O
;	O
ASSERT	O
(	O
u0	pointer
[	O
rn	long
+	O
mn	long
-	O
1	int
]	O
<	O
2	int
)	O
;	O
t0	pointer
[	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
t0	pointer
,	O
m3	pointer
,	O
m1	pointer
,	O
mn	long
)	O
;	O
MUL	O
(	O
u1	pointer
,	O
r1	pointer
,	O
rn	long
,	O
t0	pointer
,	O
mn	long
+	O
1	int
)	O
;	O
mn	long
+=	O
rn	long
;	O
ASSERT	O
(	O
u1	pointer
[	O
mn	long
-	O
1	int
]	O
<	O
4	int
)	O
;	O
ASSERT	O
(	O
u1	pointer
[	O
mn	long
]	O
==	O
0	int
)	O
;	O
ASSERT_NOCARRY	O
(	O
add_signed_n	function
(	O
r1	pointer
,	O
r3	pointer
,	O
r3s	int
,	O
u0	pointer
,	O
s0s	int
,	O
mn	long
)	O
)	O
;	O
ASSERT	O
(	O
r1	pointer
[	O
mn	long
-	O
1	int
]	O
<	O
2	int
)	O
;	O
if	O
(	O
r3s	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add_n	O
(	O
r3	pointer
,	O
u1	pointer
,	O
r3	pointer
,	O
mn	long
)	O
)	O
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
r3	pointer
,	O
u1	pointer
,	O
r3	pointer
,	O
mn	long
)	O
)	O
;	O
}	O
ASSERT	O
(	O
r3	pointer
[	O
mn	long
-	O
1	int
]	O
<	O
2	int
)	O
;	O
if	O
(	O
t0s	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add_n	O
(	O
r2	pointer
,	O
u1	pointer
,	O
r2	pointer
,	O
mn	long
)	O
)	O
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
r2	pointer
,	O
u1	pointer
,	O
r2	pointer
,	O
mn	long
)	O
)	O
;	O
}	O
ASSERT	O
(	O
r2	pointer
[	O
mn	long
-	O
1	int
]	O
<	O
2	int
)	O
;	O
}	O
void	O
mpn_matrix22_mul	O
(	O
mp_ptr	pointer
r0	pointer
,	O
mp_ptr	pointer
r1	pointer
,	O
mp_ptr	pointer
r2	pointer
,	O
mp_ptr	pointer
r3	pointer
,	O
mp_size_t	long
rn	long
,	O
mp_srcptr	pointer
m0	pointer
,	O
mp_srcptr	pointer
m1	pointer
,	O
mp_srcptr	pointer
m2	pointer
,	O
mp_srcptr	pointer
m3	pointer
,	O
mp_size_t	long
mn	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
rn	long
,	O
MATRIX22_STRASSEN_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
mn	long
,	O
MATRIX22_STRASSEN_THRESHOLD	int
)	O
)	O
{	O
mp_ptr	pointer
p0	pointer
,	O
p1	pointer
;	O
unsigned	O
i	long
;	O
p0	pointer
=	O
tp	pointer
+	O
rn	long
;	O
p1	pointer
=	O
p0	pointer
+	O
rn	long
+	O
mn	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
2	int
;	O
i	long
++	O
)	O
{	O
MPN_COPY	O
(	O
tp	pointer
,	O
r0	pointer
,	O
rn	long
)	O
;	O
if	O
(	O
rn	long
>=	O
mn	long
)	O
{	O
mpn_mul	O
(	O
p0	pointer
,	O
r0	pointer
,	O
rn	long
,	O
m0	pointer
,	O
mn	long
)	O
;	O
mpn_mul	O
(	O
p1	pointer
,	O
r1	pointer
,	O
rn	long
,	O
m3	pointer
,	O
mn	long
)	O
;	O
mpn_mul	O
(	O
r0	pointer
,	O
r1	pointer
,	O
rn	long
,	O
m2	pointer
,	O
mn	long
)	O
;	O
mpn_mul	O
(	O
r1	pointer
,	O
tp	pointer
,	O
rn	long
,	O
m1	pointer
,	O
mn	long
)	O
;	O
}	O
else	O
{	O
mpn_mul	O
(	O
p0	pointer
,	O
m0	pointer
,	O
mn	long
,	O
r0	pointer
,	O
rn	long
)	O
;	O
mpn_mul	O
(	O
p1	pointer
,	O
m3	pointer
,	O
mn	long
,	O
r1	pointer
,	O
rn	long
)	O
;	O
mpn_mul	O
(	O
r0	pointer
,	O
m2	pointer
,	O
mn	long
,	O
r1	pointer
,	O
rn	long
)	O
;	O
mpn_mul	O
(	O
r1	pointer
,	O
m1	pointer
,	O
mn	long
,	O
tp	pointer
,	O
rn	long
)	O
;	O
}	O
r0	pointer
[	O
rn	long
+	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
r0	pointer
,	O
r0	pointer
,	O
p0	pointer
,	O
rn	long
+	O
mn	long
)	O
;	O
r1	pointer
[	O
rn	long
+	O
mn	long
]	O
=	O
mpn_add_n	O
(	O
r1	pointer
,	O
r1	pointer
,	O
p1	pointer
,	O
rn	long
+	O
mn	long
)	O
;	O
r0	pointer
=	O
r2	pointer
;	O
r1	pointer
=	O
r3	pointer
;	O
}	O
}	O
else	O
mpn_matrix22_mul_strassen	O
(	O
r0	pointer
,	O
r1	pointer
,	O
r2	pointer
,	O
r3	pointer
,	O
rn	long
,	O
m0	pointer
,	O
m1	pointer
,	O
m2	pointer
,	O
m3	pointer
,	O
mn	long
,	O
tp	pointer
)	O
;	O
}	O
