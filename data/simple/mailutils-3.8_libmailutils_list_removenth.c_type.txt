int	O
mu_list_remove_nth	function
(	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
n	long
)	O
{	O
struct	O
list_data	struct
*	O
current	pointer
;	O
int	O
status	int
=	O
MU_ERR_NOENT	O
;	O
size_t	long
i	long
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
n	long
>=	O
list	pointer
->	O
count	long
)	O
return	O
ERANGE	int
;	O
mu_monitor_wrlock	function
(	O
list	pointer
->	O
monitor	pointer
)	O
;	O
for	O
(	O
current	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
,	O
i	long
=	O
0	int
;	O
current	pointer
!=	O
&	O
list	pointer
->	O
head	struct
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
,	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
==	O
n	long
)	O
{	O
struct	O
list_data	struct
*	O
previous	pointer
=	O
current	pointer
->	O
prev	pointer
;	O
mu_iterator_delitem	function
(	O
list	pointer
->	O
itr	pointer
,	O
current	pointer
)	O
;	O
previous	pointer
->	O
next	pointer
=	O
current	pointer
->	O
next	pointer
;	O
current	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
previous	pointer
;	O
DESTROY_ITEM	O
(	O
list	pointer
,	O
current	pointer
)	O
;	O
free	function
(	O
current	pointer
)	O
;	O
list	pointer
->	O
count	long
--	O
;	O
status	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_monitor_unlock	function
(	O
list	pointer
->	O
monitor	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_list_remove_nth_nd	function
(	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
n	long
)	O
{	O
mu_list_destroy_item_t	pointer
dptr	pointer
=	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
NULL	O
)	O
;	O
int	O
rc	int
=	O
mu_list_remove_nth	function
(	O
list	pointer
,	O
n	long
)	O
;	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
dptr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
