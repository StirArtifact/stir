gsl_eigen_nonsymm_workspace	struct
*	O
gsl_eigen_nonsymm_alloc	function
(	O
const	O
size_t	long
n	long
)	O
{	O
gsl_eigen_nonsymm_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	pointer
=	O
(	O
gsl_eigen_nonsymm_workspace	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_nonsymm_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
size	long
=	O
n	long
;	O
w	pointer
->	O
Z	pointer
=	O
NULL	O
;	O
w	pointer
->	O
do_balance	int
=	O
0	int
;	O
w	pointer
->	O
diag	pointer
=	O
gsl_vector_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
w	pointer
->	O
diag	pointer
==	O
0	int
)	O
{	O
gsl_eigen_nonsymm_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for balancing vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
tau	pointer
=	O
gsl_vector_alloc	function
(	O
n	long
)	O
;	O
if	O
(	O
w	pointer
->	O
tau	pointer
==	O
0	int
)	O
{	O
gsl_eigen_nonsymm_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hessenberg coefficients"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	pointer
->	O
francis_workspace_p	pointer
=	O
gsl_eigen_francis_alloc	function
(	O
)	O
;	O
if	O
(	O
w	pointer
->	O
francis_workspace_p	pointer
==	O
0	int
)	O
{	O
gsl_eigen_nonsymm_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for francis workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
(	O
w	pointer
)	O
;	O
}	O
void	O
gsl_eigen_nonsymm_free	function
(	O
gsl_eigen_nonsymm_workspace	struct
*	O
w	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
w	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
tau	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
tau	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
diag	pointer
)	O
gsl_vector_free	function
(	O
w	pointer
->	O
diag	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
francis_workspace_p	pointer
)	O
gsl_eigen_francis_free	function
(	O
w	pointer
->	O
francis_workspace_p	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
void	O
gsl_eigen_nonsymm_params	function
(	O
const	O
int	O
compute_t	int
,	O
const	O
int	O
balance	int
,	O
gsl_eigen_nonsymm_workspace	struct
*	O
w	pointer
)	O
{	O
gsl_eigen_francis_T	function
(	O
compute_t	int
,	O
w	pointer
->	O
francis_workspace_p	pointer
)	O
;	O
w	pointer
->	O
do_balance	int
=	O
balance	int
;	O
}	O
int	O
gsl_eigen_nonsymm	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_eigen_nonsymm_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
if	O
(	O
w	pointer
->	O
do_balance	int
)	O
{	O
gsl_linalg_balance_matrix	function
(	O
A	pointer
,	O
w	pointer
->	O
diag	pointer
)	O
;	O
}	O
gsl_linalg_hessenberg_decomp	function
(	O
A	pointer
,	O
w	pointer
->	O
tau	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
Z	pointer
)	O
{	O
gsl_linalg_hessenberg_unpack	function
(	O
A	pointer
,	O
w	pointer
->	O
tau	pointer
,	O
w	pointer
->	O
Z	pointer
)	O
;	O
s	pointer
=	O
gsl_eigen_francis_Z	function
(	O
A	pointer
,	O
eval	pointer
,	O
w	pointer
->	O
Z	pointer
,	O
w	pointer
->	O
francis_workspace_p	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
do_balance	int
)	O
{	O
gsl_linalg_balance_accum	function
(	O
w	pointer
->	O
Z	pointer
,	O
w	pointer
->	O
diag	pointer
)	O
;	O
}	O
}	O
else	O
{	O
s	pointer
=	O
gsl_eigen_francis	function
(	O
A	pointer
,	O
eval	pointer
,	O
w	pointer
->	O
francis_workspace_p	pointer
)	O
;	O
}	O
w	pointer
->	O
n_evals	long
=	O
w	pointer
->	O
francis_workspace_p	pointer
->	O
n_evals	long
;	O
return	O
s	pointer
;	O
}	O
}	O
int	O
gsl_eigen_nonsymm_Z	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
eval	pointer
,	O
gsl_matrix	struct
*	O
Z	pointer
,	O
gsl_eigen_nonsymm_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	pointer
->	O
size	long
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
Z	pointer
->	O
size1	long
!=	O
Z	pointer
->	O
size2	long
)	O
||	O
(	O
Z	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size1	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"Z matrix has wrong dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
w	pointer
->	O
Z	pointer
=	O
Z	pointer
;	O
s	pointer
=	O
gsl_eigen_nonsymm	function
(	O
A	pointer
,	O
eval	pointer
,	O
w	pointer
)	O
;	O
w	pointer
->	O
Z	pointer
=	O
NULL	O
;	O
return	O
s	pointer
;	O
}	O
}	O
