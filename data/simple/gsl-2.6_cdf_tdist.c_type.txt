static	O
double	O
poly_eval	function
(	O
const	O
double	O
c	array
[	O
]	O
,	O
unsigned	O
int	O
n	int
,	O
double	O
x	double
)	O
{	O
unsigned	O
int	O
i	int
;	O
double	O
y	double
=	O
c	array
[	O
0	int
]	O
*	O
x	double
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
y	double
=	O
x	double
*	O
(	O
y	double
+	O
c	array
[	O
i	int
]	O
)	O
;	O
}	O
y	double
+=	O
c	array
[	O
n	int
]	O
;	O
return	O
y	double
;	O
}	O
static	O
double	O
cornish_fisher	function
(	O
double	O
t	int
,	O
double	O
n	int
)	O
{	O
const	O
double	O
coeffs6	array
[	O
10	int
]	O
=	O
{	O
0.265974025974025974026	int
,	O
5.449696969696969696970	int
,	O
122.20294372294372294372	int
,	O
2354.7298701298701298701	int
,	O
37625.00902597402597403	int
,	O
486996.1392857142857143	int
,	O
4960870.65	int
,	O
37978595.55	int
,	O
201505390.875	int
,	O
622437908.625	int
}	O
;	O
const	O
double	O
coeffs5	array
[	O
8	int
]	O
=	O
{	O
0.2742857142857142857142	int
,	O
4.499047619047619047619	int
,	O
78.45142857142857142857	int
,	O
1118.710714285714285714	int
,	O
12387.6	int
,	O
101024.55	int
,	O
559494.0	int
,	O
1764959.625	int
}	O
;	O
const	O
double	O
coeffs4	array
[	O
6	int
]	O
=	O
{	O
0.3047619047619047619048	int
,	O
3.752380952380952380952	int
,	O
46.67142857142857142857	int
,	O
427.5	int
,	O
2587.5	int
,	O
8518.5	int
}	O
;	O
const	O
double	O
coeffs3	array
[	O
4	int
]	O
=	O
{	O
0.4	int
,	O
3.3	int
,	O
24.0	int
,	O
85.5	int
}	O
;	O
double	O
a	double
=	O
n	int
-	O
0.5	int
;	O
double	O
b	double
=	O
48.0	int
*	O
a	double
*	O
a	double
;	O
double	O
z2	double
=	O
a	double
*	O
log1p	function
(	O
t	int
*	O
t	int
/	O
n	int
)	O
;	O
double	O
z	double
=	O
sqrt	function
(	O
z2	double
)	O
;	O
double	O
p5	double
=	O
z	double
*	O
poly_eval	function
(	O
coeffs6	array
,	O
9	int
,	O
z2	double
)	O
;	O
double	O
p4	double
=	O
-	O
z	double
*	O
poly_eval	function
(	O
coeffs5	array
,	O
7	int
,	O
z2	double
)	O
;	O
double	O
p3	double
=	O
z	double
*	O
poly_eval	function
(	O
coeffs4	array
,	O
5	int
,	O
z2	double
)	O
;	O
double	O
p2	double
=	O
-	O
z	double
*	O
poly_eval	function
(	O
coeffs3	array
,	O
3	int
,	O
z2	double
)	O
;	O
double	O
p1	double
=	O
z	double
*	O
(	O
z2	double
+	O
3.0	int
)	O
;	O
double	O
p0	double
=	O
z	double
;	O
double	O
y	double
=	O
p5	double
;	O
y	double
=	O
(	O
y	double
/	O
b	double
)	O
+	O
p4	double
;	O
y	double
=	O
(	O
y	double
/	O
b	double
)	O
+	O
p3	double
;	O
y	double
=	O
(	O
y	double
/	O
b	double
)	O
+	O
p2	double
;	O
y	double
=	O
(	O
y	double
/	O
b	double
)	O
+	O
p1	double
;	O
y	double
=	O
(	O
y	double
/	O
b	double
)	O
+	O
p0	double
;	O
if	O
(	O
t	int
<	O
0	int
)	O
y	double
*=	O
-	O
1	int
;	O
return	O
y	double
;	O
}	O
double	O
gsl_cdf_tdist_P	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
nu	double
)	O
{	O
double	O
P	double
;	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
if	O
(	O
nu	double
>	O
30	int
&&	O
x2	double
<	O
10	int
*	O
nu	double
)	O
{	O
double	O
u	double
=	O
cornish_fisher	function
(	O
x	double
,	O
nu	double
)	O
;	O
P	double
=	O
gsl_cdf_ugaussian_P	function
(	O
u	double
)	O
;	O
return	O
P	double
;	O
}	O
if	O
(	O
x2	double
<	O
nu	double
)	O
{	O
double	O
u	double
=	O
x2	double
/	O
nu	double
;	O
double	O
eps	double
=	O
u	double
/	O
(	O
1	int
+	O
u	double
)	O
;	O
if	O
(	O
x	double
>=	O
0	int
)	O
{	O
P	double
=	O
beta_inc_AXPY	function
(	O
0.5	int
,	O
0.5	int
,	O
0.5	int
,	O
nu	double
/	O
2.0	int
,	O
eps	double
)	O
;	O
}	O
else	O
{	O
P	double
=	O
beta_inc_AXPY	function
(	O
-	O
0.5	int
,	O
0.5	int
,	O
0.5	int
,	O
nu	double
/	O
2.0	int
,	O
eps	double
)	O
;	O
}	O
}	O
else	O
{	O
double	O
v	double
=	O
nu	double
/	O
(	O
x	double
*	O
x	double
)	O
;	O
double	O
eps	double
=	O
v	double
/	O
(	O
1	int
+	O
v	double
)	O
;	O
if	O
(	O
x	double
>=	O
0	int
)	O
{	O
P	double
=	O
beta_inc_AXPY	function
(	O
-	O
0.5	int
,	O
1.0	int
,	O
nu	double
/	O
2.0	int
,	O
0.5	int
,	O
eps	double
)	O
;	O
}	O
else	O
{	O
P	double
=	O
beta_inc_AXPY	function
(	O
0.5	int
,	O
0.0	int
,	O
nu	double
/	O
2.0	int
,	O
0.5	int
,	O
eps	double
)	O
;	O
}	O
}	O
return	O
P	double
;	O
}	O
double	O
gsl_cdf_tdist_Q	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
nu	double
)	O
{	O
double	O
Q	double
;	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
if	O
(	O
nu	double
>	O
30	int
&&	O
x2	double
<	O
10	int
*	O
nu	double
)	O
{	O
double	O
u	double
=	O
cornish_fisher	function
(	O
x	double
,	O
nu	double
)	O
;	O
Q	double
=	O
gsl_cdf_ugaussian_Q	function
(	O
u	double
)	O
;	O
return	O
Q	double
;	O
}	O
if	O
(	O
x2	double
<	O
nu	double
)	O
{	O
double	O
u	double
=	O
x2	double
/	O
nu	double
;	O
double	O
eps	double
=	O
u	double
/	O
(	O
1	int
+	O
u	double
)	O
;	O
if	O
(	O
x	double
>=	O
0	int
)	O
{	O
Q	double
=	O
beta_inc_AXPY	function
(	O
-	O
0.5	int
,	O
0.5	int
,	O
0.5	int
,	O
nu	double
/	O
2.0	int
,	O
eps	double
)	O
;	O
}	O
else	O
{	O
Q	double
=	O
beta_inc_AXPY	function
(	O
0.5	int
,	O
0.5	int
,	O
0.5	int
,	O
nu	double
/	O
2.0	int
,	O
eps	double
)	O
;	O
}	O
}	O
else	O
{	O
double	O
v	double
=	O
nu	double
/	O
(	O
x	double
*	O
x	double
)	O
;	O
double	O
eps	double
=	O
v	double
/	O
(	O
1	int
+	O
v	double
)	O
;	O
if	O
(	O
x	double
>=	O
0	int
)	O
{	O
Q	double
=	O
beta_inc_AXPY	function
(	O
0.5	int
,	O
0.0	int
,	O
nu	double
/	O
2.0	int
,	O
0.5	int
,	O
eps	double
)	O
;	O
}	O
else	O
{	O
Q	double
=	O
beta_inc_AXPY	function
(	O
-	O
0.5	int
,	O
1.0	int
,	O
nu	double
/	O
2.0	int
,	O
0.5	int
,	O
eps	double
)	O
;	O
}	O
}	O
return	O
Q	double
;	O
}	O
