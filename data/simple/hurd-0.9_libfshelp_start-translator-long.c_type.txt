struct	O
fsys_startup_request	struct
{	O
mach_msg_header_t	O
head	int
;	O
mach_msg_type_t	O
flagsType	int
;	O
int	O
flags	int
;	O
mach_msg_type_t	O
control_portType	int
;	O
mach_port_t	O
control_port	int
;	O
}	O
;	O
struct	O
fsys_startup_reply	struct
{	O
mach_msg_header_t	O
head	int
;	O
mach_msg_type_t	O
RetCodeType	int
;	O
kern_return_t	O
RetCode	int
;	O
mach_msg_type_t	O
realnodeType	int
;	O
mach_port_t	O
realnode	int
;	O
}	O
;	O
static	O
error_t	O
service_fsys_startup	function
(	O
fshelp_open_fn_t	O
underlying_open_fn	int
,	O
void	O
*	O
cookie	pointer
,	O
mach_port_t	O
port	int
,	O
long	O
timeout	long
,	O
fsys_t	O
*	O
control	pointer
,	O
task_t	O
task	int
)	O
{	O
const	O
mach_msg_type_t	O
flagsCheck	int
=	O
{	O
MACH_MSG_TYPE_INTEGER_32	O
,	O
32	int
,	O
1	int
,	O
TRUE	O
,	O
FALSE	O
,	O
FALSE	O
,	O
0	int
}	O
;	O
const	O
mach_msg_type_t	O
control_portCheck	int
=	O
{	O
MACH_MSG_TYPE_PORT_SEND	O
,	O
32	int
,	O
1	int
,	O
TRUE	O
,	O
FALSE	O
,	O
FALSE	O
,	O
0	int
}	O
;	O
const	O
mach_msg_type_t	O
RetCodeType	int
=	O
{	O
MACH_MSG_TYPE_INTEGER_32	O
,	O
32	int
,	O
1	int
,	O
TRUE	O
,	O
FALSE	O
,	O
FALSE	O
,	O
0	int
}	O
;	O
const	O
mach_msg_type_t	O
realnodeType	int
=	O
{	O
-	O
1	int
,	O
32	int
,	O
1	int
,	O
TRUE	O
,	O
FALSE	O
,	O
FALSE	O
,	O
0	int
}	O
;	O
inline	O
int	O
type_check	function
(	O
const	O
mach_msg_type_t	O
*	O
type	pointer
,	O
const	O
mach_msg_type_t	O
*	O
check	pointer
)	O
{	O
union	O
{	O
uint32_t	O
word	O
;	O
mach_msg_type_t	O
type	pointer
;	O
}	O
t	O
,	O
c	O
;	O
t	O
.	O
type	pointer
=	O
*	O
type	pointer
;	O
c	O
.	O
type	pointer
=	O
*	O
check	pointer
;	O
return	O
t	O
.	O
word	O
!=	O
c	O
.	O
word	O
;	O
}	O
error_t	O
err	O
;	O
union	O
{	O
mach_msg_header_t	O
head	int
;	O
struct	O
fsys_startup_request	struct
startup	struct
;	O
}	O
request	union
;	O
struct	O
fsys_startup_reply	struct
reply	struct
;	O
err	O
=	O
mach_msg	function
(	O
&	O
request	union
.	O
head	int
,	O
(	O
MACH_RCV_MSG	O
|	O
MACH_RCV_INTERRUPT	O
|	O
(	O
timeout	long
?	O
MACH_RCV_TIMEOUT	O
:	O
0	int
)	O
)	O
,	O
0	int
,	O
sizeof	O
(	O
request	union
)	O
,	O
port	int
,	O
timeout	long
,	O
MACH_PORT_NULL	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
if	O
(	O
request	union
.	O
head	int
.	O
msgh_id	O
==	O
MACH_NOTIFY_NO_SENDERS	O
)	O
return	O
EDIED	O
;	O
reply	struct
.	O
head	int
.	O
msgh_size	O
=	O
sizeof	O
(	O
reply	struct
)	O
;	O
reply	struct
.	O
head	int
.	O
msgh_bits	O
=	O
MACH_MSGH_BITS	function
(	O
MACH_MSGH_BITS_REMOTE	function
(	O
request	union
.	O
head	int
.	O
msgh_bits	O
)	O
,	O
0	int
)	O
;	O
reply	struct
.	O
head	int
.	O
msgh_remote_port	O
=	O
request	union
.	O
head	int
.	O
msgh_remote_port	O
;	O
reply	struct
.	O
head	int
.	O
msgh_local_port	O
=	O
MACH_PORT_NULL	O
;	O
reply	struct
.	O
head	int
.	O
msgh_seqno	O
=	O
0	int
;	O
reply	struct
.	O
head	int
.	O
msgh_id	O
=	O
request	union
.	O
head	int
.	O
msgh_id	O
+	O
100	int
;	O
reply	struct
.	O
RetCodeType	int
=	O
RetCodeType	int
;	O
if	O
(	O
request	union
.	O
head	int
.	O
msgh_id	O
!=	O
22000	int
)	O
reply	struct
.	O
RetCode	int
=	O
MIG_BAD_ID	O
;	O
else	O
if	O
(	O
type_check	function
(	O
&	O
request	union
.	O
startup	struct
.	O
control_portType	int
,	O
&	O
control_portCheck	int
)	O
||	O
type_check	function
(	O
&	O
request	union
.	O
startup	struct
.	O
flagsType	int
,	O
&	O
flagsCheck	int
)	O
)	O
reply	struct
.	O
RetCode	int
=	O
MIG_BAD_ARGUMENTS	O
;	O
else	O
{	O
mach_msg_type_name_t	O
realnode_type	O
;	O
*	O
control	pointer
=	O
request	union
.	O
startup	struct
.	O
control_port	int
;	O
reply	struct
.	O
RetCode	int
=	O
(	O
*	O
underlying_open_fn	int
)	O
(	O
request	union
.	O
startup	struct
.	O
flags	int
,	O
&	O
reply	struct
.	O
realnode	int
,	O
&	O
realnode_type	O
,	O
task	int
,	O
cookie	pointer
)	O
;	O
reply	struct
.	O
realnodeType	int
=	O
realnodeType	int
;	O
reply	struct
.	O
realnodeType	int
.	O
msgt_name	O
=	O
realnode_type	O
;	O
if	O
(	O
!	O
reply	struct
.	O
RetCode	int
&&	O
reply	struct
.	O
realnode	int
!=	O
MACH_PORT_NULL	O
)	O
reply	struct
.	O
head	int
.	O
msgh_bits	O
|=	O
MACH_MSGH_BITS_COMPLEX	O
;	O
}	O
err	O
=	O
mach_msg	function
(	O
&	O
reply	struct
.	O
head	int
,	O
MACH_SEND_MSG	O
|	O
MACH_SEND_INTERRUPT	O
,	O
sizeof	O
(	O
reply	struct
)	O
,	O
0	int
,	O
request	union
.	O
head	int
.	O
msgh_remote_port	O
,	O
MACH_MSG_TIMEOUT_NONE	O
,	O
MACH_PORT_NULL	O
)	O
;	O
if	O
(	O
err	O
==	O
MACH_SEND_INTERRUPTED	O
&&	O
reply	struct
.	O
realnodeType	int
.	O
msgt_name	O
==	O
MACH_MSG_TYPE_MOVE_SEND	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
reply	struct
.	O
realnode	int
)	O
;	O
if	O
(	O
reply	struct
.	O
RetCode	int
)	O
err	O
=	O
reply	struct
.	O
RetCode	int
;	O
return	O
err	O
;	O
}	O
error_t	O
fshelp_start_translator_long	function
(	O
fshelp_open_fn_t	O
underlying_open_fn	int
,	O
void	O
*	O
cookie	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
argz	pointer
,	O
int	O
argz_len	int
,	O
mach_port_t	O
*	O
fds	pointer
,	O
mach_msg_type_name_t	O
fds_type	int
,	O
int	O
fds_len	int
,	O
mach_port_t	O
*	O
ports	pointer
,	O
mach_msg_type_name_t	O
ports_type	int
,	O
int	O
ports_len	int
,	O
int	O
*	O
ints	pointer
,	O
int	O
ints_len	int
,	O
uid_t	O
owner_uid	int
,	O
int	O
timeout	long
,	O
fsys_t	O
*	O
control	pointer
)	O
{	O
error_t	O
err	O
;	O
file_t	O
executable	O
;	O
mach_port_t	O
bootstrap	O
=	O
MACH_PORT_NULL	O
;	O
mach_port_t	O
task	int
=	O
MACH_PORT_NULL	O
;	O
mach_port_t	O
prev_notify	O
,	O
proc	O
,	O
saveport	O
,	O
childproc	O
;	O
int	O
ports_moved	int
=	O
0	int
;	O
executable	O
=	O
file_name_lookup	function
(	O
name	pointer
,	O
O_EXEC	O
,	O
0	int
)	O
;	O
if	O
(	O
executable	O
==	O
MACH_PORT_NULL	O
)	O
return	O
errno	O
;	O
err	O
=	O
mach_port_allocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
&	O
bootstrap	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose	O
;	O
err	O
=	O
task_create	function
(	O
mach_task_self	function
(	O
)	O
,	O
0	int
,	O
&	O
task	int
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose	O
;	O
err	O
=	O
task_priority	function
(	O
task	int
,	O
25	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose_task	O
;	O
proc	O
=	O
getproc	function
(	O
)	O
;	O
proc_child	function
(	O
proc	O
,	O
task	int
)	O
;	O
err	O
=	O
proc_task2proc	function
(	O
proc	O
,	O
task	int
,	O
&	O
childproc	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
proc	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose_task	O
;	O
err	O
=	O
proc_setowner	function
(	O
childproc	O
,	O
owner_uid	int
,	O
owner_uid	int
==	O
(	O
uid_t	O
)	O
-	O
1	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
childproc	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose_task	O
;	O
assert	function
(	O
ports_len	int
>	O
INIT_PORT_BOOTSTRAP	O
)	O
;	O
switch	O
(	O
ports_type	int
)	O
{	O
case	O
MACH_MSG_TYPE_MAKE_SEND	O
:	O
case	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
:	O
break	O
;	O
case	O
MACH_MSG_TYPE_MOVE_SEND	O
:	O
if	O
(	O
ports	pointer
[	O
INIT_PORT_BOOTSTRAP	O
]	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
ports	pointer
[	O
INIT_PORT_BOOTSTRAP	O
]	O
)	O
;	O
mach_port_insert_right	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
,	O
bootstrap	O
,	O
MACH_MSG_TYPE_MAKE_SEND	O
)	O
;	O
break	O
;	O
case	O
MACH_MSG_TYPE_COPY_SEND	O
:	O
mach_port_insert_right	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
,	O
bootstrap	O
,	O
MACH_MSG_TYPE_MAKE_SEND	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
}	O
saveport	O
=	O
ports	pointer
[	O
INIT_PORT_BOOTSTRAP	O
]	O
;	O
ports	pointer
[	O
INIT_PORT_BOOTSTRAP	O
]	O
=	O
bootstrap	O
;	O
err	O
=	O
file_exec	function
(	O
executable	O
,	O
task	int
,	O
EXEC_DEFAULTS	O
,	O
argz	pointer
,	O
argz_len	int
,	O
0	int
,	O
0	int
,	O
fds	pointer
,	O
fds_type	int
,	O
fds_len	int
,	O
ports	pointer
,	O
ports_type	int
,	O
ports_len	int
,	O
ints	pointer
,	O
ints_len	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
ports_moved	int
=	O
1	int
;	O
if	O
(	O
ports_type	int
==	O
MACH_MSG_TYPE_COPY_SEND	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
)	O
;	O
ports	pointer
[	O
INIT_PORT_BOOTSTRAP	O
]	O
=	O
saveport	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose_task	O
;	O
err	O
=	O
mach_port_request_notification	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
,	O
MACH_NOTIFY_NO_SENDERS	O
,	O
0	int
,	O
bootstrap	O
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
,	O
&	O
prev_notify	O
)	O
;	O
if	O
(	O
err	O
)	O
goto	O
lose_task	O
;	O
err	O
=	O
service_fsys_startup	function
(	O
underlying_open_fn	int
,	O
cookie	pointer
,	O
bootstrap	O
,	O
timeout	long
,	O
control	pointer
,	O
task	int
)	O
;	O
lose_task	O
:	O
if	O
(	O
err	O
)	O
task_terminate	function
(	O
task	int
)	O
;	O
lose	O
:	O
if	O
(	O
!	O
ports_moved	int
)	O
{	O
int	O
i	int
;	O
if	O
(	O
fds_type	int
==	O
MACH_MSG_TYPE_MOVE_SEND	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
fds_len	int
;	O
i	int
++	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
fds	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
ports_type	int
==	O
MACH_MSG_TYPE_MOVE_SEND	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ports_len	int
;	O
i	int
++	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
ports	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
bootstrap	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_destroy	function
(	O
mach_task_self	function
(	O
)	O
,	O
bootstrap	O
)	O
;	O
if	O
(	O
executable	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
executable	O
)	O
;	O
if	O
(	O
task	int
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
)	O
;	O
return	O
err	O
;	O
}	O
