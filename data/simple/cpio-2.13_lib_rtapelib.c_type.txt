static	O
int	O
from_remote	array
[	O
MAXUNIT	int
]	O
[	O
2	int
]	O
=	O
{	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
}	O
;	O
static	O
int	O
to_remote	array
[	O
MAXUNIT	int
]	O
[	O
2	int
]	O
=	O
{	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
}	O
;	O
char	O
const	O
*	O
rmt_command	pointer
=	O
DEFAULT_RMT_COMMAND	pointer
;	O
char	O
const	O
*	O
rmt_dev_name__	pointer
;	O
bool	bool
force_local_option	bool
;	O
static	O
void	O
_rmt_shutdown	function
(	O
int	O
handle	int
,	O
int	O
errno_value	int
)	O
{	O
close	function
(	O
READ_SIDE	O
(	O
handle	int
)	O
)	O
;	O
close	function
(	O
WRITE_SIDE	O
(	O
handle	int
)	O
)	O
;	O
READ_SIDE	O
(	O
handle	int
)	O
=	O
-	O
1	int
;	O
WRITE_SIDE	O
(	O
handle	int
)	O
=	O
-	O
1	int
;	O
errno	O
=	O
errno_value	int
;	O
}	O
static	O
int	O
do_command	function
(	O
int	O
handle	int
,	O
const	O
char	O
*	O
buffer	pointer
)	O
{	O
size_t	long
length	long
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
RETSIGTYPE	void
(	O
*	O
pipe_handler	pointer
)	O
(	O
int	O
)	O
=	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
ssize_t	long
written	long
=	O
full_write	function
(	O
WRITE_SIDE	O
(	O
handle	int
)	O
,	O
buffer	pointer
,	O
length	long
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
pipe_handler	pointer
)	O
;	O
if	O
(	O
written	long
==	O
length	long
)	O
return	O
0	int
;	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
char	O
*	O
get_status_string	function
(	O
int	O
handle	int
,	O
char	O
*	O
command_buffer	pointer
)	O
{	O
char	O
*	O
cursor	pointer
;	O
int	O
counter	int
;	O
for	O
(	O
counter	int
=	O
0	int
,	O
cursor	pointer
=	O
command_buffer	pointer
;	O
counter	int
<	O
COMMAND_BUFFER_SIZE	int
;	O
counter	int
++	O
,	O
cursor	pointer
++	O
)	O
{	O
if	O
(	O
safe_read	function
(	O
READ_SIDE	O
(	O
handle	int
)	O
,	O
cursor	pointer
,	O
1	int
)	O
!=	O
1	int
)	O
{	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
cursor	pointer
==	O
'\n'	O
)	O
{	O
*	O
cursor	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
counter	int
==	O
COMMAND_BUFFER_SIZE	int
)	O
{	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
0	int
;	O
}	O
for	O
(	O
cursor	pointer
=	O
command_buffer	pointer
;	O
*	O
cursor	pointer
;	O
cursor	pointer
++	O
)	O
if	O
(	O
*	O
cursor	pointer
!=	O
' '	O
)	O
break	O
;	O
if	O
(	O
*	O
cursor	pointer
==	O
'E'	O
||	O
*	O
cursor	pointer
==	O
'F'	O
)	O
{	O
{	O
char	O
character	char
;	O
while	O
(	O
safe_read	function
(	O
READ_SIDE	O
(	O
handle	int
)	O
,	O
&	O
character	char
,	O
1	int
)	O
==	O
1	int
)	O
if	O
(	O
character	char
==	O
'\n'	O
)	O
break	O
;	O
}	O
errno	O
=	O
atoi	function
(	O
cursor	pointer
+	O
1	int
)	O
;	O
if	O
(	O
*	O
cursor	pointer
==	O
'F'	O
)	O
_rmt_shutdown	function
(	O
handle	int
,	O
errno	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
cursor	pointer
!=	O
'A'	O
)	O
{	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
0	int
;	O
}	O
return	O
cursor	pointer
+	O
1	int
;	O
}	O
static	O
long	O
int	O
get_status	function
(	O
int	O
handle	int
)	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
const	O
char	O
*	O
status	int
=	O
get_status_string	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
long	O
int	O
result	long
=	O
atol	function
(	O
status	int
)	O
;	O
if	O
(	O
0	int
<=	O
result	long
)	O
return	O
result	long
;	O
errno	O
=	O
EIO	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
off_t	long
get_status_off	function
(	O
int	O
handle	int
)	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
const	O
char	O
*	O
status	int
=	O
get_status_string	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
;	O
if	O
(	O
!	O
status	int
)	O
return	O
-	O
1	int
;	O
else	O
{	O
off_t	long
count	long
=	O
0	int
;	O
int	O
negative	int
;	O
for	O
(	O
;	O
*	O
status	int
==	O
' '	O
||	O
*	O
status	int
==	O
'\t'	O
;	O
status	int
++	O
)	O
continue	O
;	O
negative	int
=	O
*	O
status	int
==	O
'-'	O
;	O
status	int
+=	O
negative	int
||	O
*	O
status	int
==	O
'+'	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
digit	int
=	O
*	O
status	int
++	O
-	O
'0'	O
;	O
if	O
(	O
9	int
<	O
(	O
unsigned	O
)	O
digit	int
)	O
break	O
;	O
else	O
{	O
off_t	long
c10	long
=	O
10	int
*	O
count	long
;	O
off_t	long
nc	long
=	O
negative	int
?	O
c10	long
-	O
digit	int
:	O
c10	long
+	O
digit	int
;	O
if	O
(	O
c10	long
/	O
10	int
!=	O
count	long
||	O
(	O
negative	int
?	O
c10	long
<	O
nc	long
:	O
nc	long
<	O
c10	long
)	O
)	O
return	O
-	O
1	int
;	O
count	long
=	O
nc	long
;	O
}	O
}	O
return	O
count	long
;	O
}	O
}	O
static	O
void	O
encode_oflag	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
oflag	int
)	O
{	O
sprintf	function
(	O
buf	pointer
,	O
"%d "	pointer
,	O
oflag	int
)	O
;	O
switch	O
(	O
oflag	int
&	O
O_ACCMODE	int
)	O
{	O
case	O
O_RDONLY	int
:	O
strcat	function
(	O
buf	pointer
,	O
"O_RDONLY"	pointer
)	O
;	O
break	O
;	O
case	O
O_RDWR	int
:	O
strcat	function
(	O
buf	pointer
,	O
"O_RDWR"	pointer
)	O
;	O
break	O
;	O
case	O
O_WRONLY	int
:	O
strcat	function
(	O
buf	pointer
,	O
"O_WRONLY"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
oflag	int
&	O
O_APPEND	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_APPEND"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_CREAT	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_CREAT"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_DSYNC	O
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_DSYNC"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_EXCL	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_EXCL"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_LARGEFILE	O
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_LARGEFILE"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_NOCTTY	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_NOCTTY"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_NONBLOCK	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_NONBLOCK"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_RSYNC	O
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_RSYNC"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_SYNC	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_SYNC"	pointer
)	O
;	O
if	O
(	O
oflag	int
&	O
O_TRUNC	int
)	O
strcat	function
(	O
buf	pointer
,	O
"|O_TRUNC"	pointer
)	O
;	O
}	O
int	O
rmt_open__	function
(	O
const	O
char	O
*	O
file_name	pointer
,	O
int	O
open_mode	int
,	O
int	O
bias	int
,	O
const	O
char	O
*	O
remote_shell	pointer
)	O
{	O
int	O
remote_pipe_number	int
;	O
char	O
*	O
file_name_copy	pointer
;	O
char	O
*	O
remote_host	pointer
;	O
char	O
*	O
remote_file	pointer
;	O
char	O
*	O
remote_user	pointer
;	O
for	O
(	O
remote_pipe_number	int
=	O
0	int
;	O
remote_pipe_number	int
<	O
MAXUNIT	int
;	O
remote_pipe_number	int
++	O
)	O
if	O
(	O
READ_SIDE	O
(	O
remote_pipe_number	int
)	O
==	O
-	O
1	int
&&	O
WRITE_SIDE	O
(	O
remote_pipe_number	int
)	O
==	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
remote_pipe_number	int
==	O
MAXUNIT	int
)	O
{	O
errno	O
=	O
EMFILE	int
;	O
return	O
-	O
1	int
;	O
}	O
{	O
char	O
*	O
cursor	pointer
;	O
file_name_copy	pointer
=	O
xstrdup	function
(	O
file_name	pointer
)	O
;	O
remote_host	pointer
=	O
file_name_copy	pointer
;	O
remote_user	pointer
=	O
0	int
;	O
remote_file	pointer
=	O
0	int
;	O
for	O
(	O
cursor	pointer
=	O
file_name_copy	pointer
;	O
*	O
cursor	pointer
;	O
cursor	pointer
++	O
)	O
switch	O
(	O
*	O
cursor	pointer
)	O
{	O
default	O
:	O
break	O
;	O
case	O
'\n'	O
:	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
errno	O
=	O
ENOENT	int
;	O
return	O
-	O
1	int
;	O
case	O
'@'	O
:	O
if	O
(	O
!	O
remote_user	pointer
)	O
{	O
remote_user	pointer
=	O
remote_host	pointer
;	O
*	O
cursor	pointer
=	O
'\0'	O
;	O
remote_host	pointer
=	O
cursor	pointer
+	O
1	int
;	O
}	O
break	O
;	O
case	O
':'	O
:	O
if	O
(	O
!	O
remote_file	pointer
)	O
{	O
*	O
cursor	pointer
=	O
'\0'	O
;	O
remote_file	pointer
=	O
cursor	pointer
+	O
1	int
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
gethostbyname	function
(	O
remote_host	pointer
)	O
==	O
NULL	O
)	O
error	function
(	O
EXIT_ON_EXEC_ERROR	int
,	O
0	int
,	O
_	O
(	O
"Cannot connect to %s: resolve failed"	pointer
)	O
,	O
remote_host	pointer
)	O
;	O
if	O
(	O
remote_user	pointer
&&	O
*	O
remote_user	pointer
==	O
'\0'	O
)	O
remote_user	pointer
=	O
0	int
;	O
{	O
const	O
char	O
*	O
remote_shell_basename	pointer
;	O
pid_t	int
status	int
;	O
if	O
(	O
!	O
remote_shell	pointer
)	O
{	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
errno	O
=	O
EIO	int
;	O
return	O
-	O
1	int
;	O
}	O
remote_shell_basename	pointer
=	O
last_component	function
(	O
remote_shell	pointer
)	O
;	O
if	O
(	O
pipe	function
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
)	O
==	O
-	O
1	int
||	O
pipe	function
(	O
from_remote	array
[	O
remote_pipe_number	int
]	O
)	O
==	O
-	O
1	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
status	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
dup2	function
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PREAD	int
]	O
,	O
STDIN_FILENO	int
)	O
<	O
0	int
||	O
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PREAD	int
]	O
!=	O
STDIN_FILENO	int
&&	O
close	function
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PREAD	int
]	O
)	O
!=	O
0	int
)	O
||	O
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PWRITE	int
]	O
!=	O
STDIN_FILENO	int
&&	O
close	function
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PWRITE	int
]	O
)	O
!=	O
0	int
)	O
||	O
dup2	function
(	O
from_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PWRITE	int
]	O
,	O
STDOUT_FILENO	int
)	O
<	O
0	int
||	O
close	function
(	O
from_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PREAD	int
]	O
)	O
!=	O
0	int
||	O
close	function
(	O
from_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PWRITE	int
]	O
)	O
!=	O
0	int
)	O
error	function
(	O
EXIT_ON_EXEC_ERROR	int
,	O
errno	O
,	O
_	O
(	O
"Cannot redirect files for remote shell"	pointer
)	O
)	O
;	O
sys_reset_uid_gid	O
(	O
)	O
;	O
if	O
(	O
remote_user	pointer
)	O
execl	function
(	O
remote_shell	pointer
,	O
remote_shell_basename	pointer
,	O
remote_host	pointer
,	O
"-l"	pointer
,	O
remote_user	pointer
,	O
rmt_command	pointer
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
else	O
execl	function
(	O
remote_shell	pointer
,	O
remote_shell_basename	pointer
,	O
remote_host	pointer
,	O
rmt_command	pointer
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
error	function
(	O
EXIT_ON_EXEC_ERROR	int
,	O
errno	O
,	O
_	O
(	O
"Cannot execute remote shell"	pointer
)	O
)	O
;	O
}	O
close	function
(	O
from_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PWRITE	int
]	O
)	O
;	O
close	function
(	O
to_remote	array
[	O
remote_pipe_number	int
]	O
[	O
PREAD	int
]	O
)	O
;	O
}	O
{	O
size_t	long
remote_file_len	long
=	O
strlen	function
(	O
remote_file	pointer
)	O
;	O
char	O
*	O
command_buffer	pointer
=	O
xmalloc	function
(	O
remote_file_len	long
+	O
1000	int
)	O
;	O
sprintf	function
(	O
command_buffer	pointer
,	O
"O%s\n"	pointer
,	O
remote_file	pointer
)	O
;	O
encode_oflag	function
(	O
command_buffer	pointer
+	O
remote_file_len	long
+	O
2	int
,	O
open_mode	int
)	O
;	O
strcat	function
(	O
command_buffer	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
do_command	function
(	O
remote_pipe_number	int
,	O
command_buffer	pointer
)	O
==	O
-	O
1	int
||	O
get_status	function
(	O
remote_pipe_number	int
)	O
==	O
-	O
1	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
free	function
(	O
command_buffer	pointer
)	O
;	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
_rmt_shutdown	function
(	O
remote_pipe_number	int
,	O
e	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	function
(	O
command_buffer	pointer
)	O
;	O
}	O
free	function
(	O
file_name_copy	pointer
)	O
;	O
return	O
remote_pipe_number	int
+	O
bias	int
;	O
}	O
int	O
rmt_close__	function
(	O
int	O
handle	int
)	O
{	O
long	O
int	O
status	int
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
"C\n"	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
status	int
=	O
get_status	function
(	O
handle	int
)	O
;	O
_rmt_shutdown	function
(	O
handle	int
,	O
errno	O
)	O
;	O
return	O
status	int
;	O
}	O
size_t	long
rmt_read__	function
(	O
int	O
handle	int
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
length	long
)	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
size_t	long
status	int
;	O
size_t	long
rlen	long
;	O
size_t	long
counter	int
;	O
sprintf	function
(	O
command_buffer	pointer
,	O
"R%lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
length	long
)	O
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
==	O
-	O
1	int
||	O
(	O
status	int
=	O
get_status	function
(	O
handle	int
)	O
)	O
==	O
SAFE_READ_ERROR	O
||	O
status	int
>	O
length	long
)	O
return	O
SAFE_READ_ERROR	O
;	O
for	O
(	O
counter	int
=	O
0	int
;	O
counter	int
<	O
status	int
;	O
counter	int
+=	O
rlen	long
,	O
buffer	pointer
+=	O
rlen	long
)	O
{	O
rlen	long
=	O
safe_read	function
(	O
READ_SIDE	O
(	O
handle	int
)	O
,	O
buffer	pointer
,	O
status	int
-	O
counter	int
)	O
;	O
if	O
(	O
rlen	long
==	O
SAFE_READ_ERROR	O
||	O
rlen	long
==	O
0	int
)	O
{	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
SAFE_READ_ERROR	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
size_t	long
rmt_write__	function
(	O
int	O
handle	int
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
length	long
)	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
RETSIGTYPE	void
(	O
*	O
pipe_handler	pointer
)	O
(	O
int	O
)	O
;	O
size_t	long
written	long
;	O
sprintf	function
(	O
command_buffer	pointer
,	O
"W%lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
length	long
)	O
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
pipe_handler	pointer
=	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
written	long
=	O
full_write	function
(	O
WRITE_SIDE	O
(	O
handle	int
)	O
,	O
buffer	pointer
,	O
length	long
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
pipe_handler	pointer
)	O
;	O
if	O
(	O
written	long
==	O
length	long
)	O
{	O
long	O
int	O
r	long
=	O
get_status	function
(	O
handle	int
)	O
;	O
if	O
(	O
r	long
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
r	long
==	O
length	long
)	O
return	O
length	long
;	O
written	long
=	O
r	long
;	O
}	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
written	long
;	O
}	O
off_t	long
rmt_lseek__	function
(	O
int	O
handle	int
,	O
off_t	long
offset	long
,	O
int	O
whence	int
)	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
char	O
operand_buffer	array
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
uintmax_t	long
u	long
=	O
offset	long
<	O
0	int
?	O
-	O
(	O
uintmax_t	long
)	O
offset	long
:	O
(	O
uintmax_t	long
)	O
offset	long
;	O
char	O
*	O
p	pointer
=	O
operand_buffer	array
+	O
sizeof	O
operand_buffer	array
;	O
*	O
--	O
p	pointer
=	O
0	int
;	O
do	O
*	O
--	O
p	pointer
=	O
'0'	O
+	O
(	O
int	O
)	O
(	O
u	long
%	O
10	int
)	O
;	O
while	O
(	O
(	O
u	long
/=	O
10	int
)	O
!=	O
0	int
)	O
;	O
if	O
(	O
offset	long
<	O
0	int
)	O
*	O
--	O
p	pointer
=	O
'-'	O
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
SEEK_SET	int
:	O
whence	int
=	O
0	int
;	O
break	O
;	O
case	O
SEEK_CUR	int
:	O
whence	int
=	O
1	int
;	O
break	O
;	O
case	O
SEEK_END	int
:	O
whence	int
=	O
2	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
sprintf	function
(	O
command_buffer	pointer
,	O
"L%s\n%d\n"	pointer
,	O
p	pointer
,	O
whence	int
)	O
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
get_status_off	function
(	O
handle	int
)	O
;	O
}	O
int	O
rmt_ioctl__	function
(	O
int	O
handle	int
,	O
int	O
operation	int
,	O
char	O
*	O
argument	pointer
)	O
{	O
switch	O
(	O
operation	int
)	O
{	O
default	O
:	O
errno	O
=	O
EOPNOTSUPP	int
;	O
return	O
-	O
1	int
;	O
case	O
MTIOCTOP	O
:	O
{	O
char	O
command_buffer	pointer
[	O
COMMAND_BUFFER_SIZE	int
]	O
;	O
char	O
operand_buffer	array
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
uintmax_t	long
u	long
=	O
(	O
(	O
(	O
struct	O
mtop	struct
*	O
)	O
argument	pointer
)	O
->	O
mt_count	int
<	O
0	int
?	O
-	O
(	O
uintmax_t	long
)	O
(	O
(	O
struct	O
mtop	struct
*	O
)	O
argument	pointer
)	O
->	O
mt_count	int
:	O
(	O
uintmax_t	long
)	O
(	O
(	O
struct	O
mtop	struct
*	O
)	O
argument	pointer
)	O
->	O
mt_count	int
)	O
;	O
char	O
*	O
p	pointer
=	O
operand_buffer	array
+	O
sizeof	O
operand_buffer	array
;	O
*	O
--	O
p	pointer
=	O
0	int
;	O
do	O
*	O
--	O
p	pointer
=	O
'0'	O
+	O
(	O
int	O
)	O
(	O
u	long
%	O
10	int
)	O
;	O
while	O
(	O
(	O
u	long
/=	O
10	int
)	O
!=	O
0	int
)	O
;	O
if	O
(	O
(	O
(	O
struct	O
mtop	struct
*	O
)	O
argument	pointer
)	O
->	O
mt_count	int
<	O
0	int
)	O
*	O
--	O
p	pointer
=	O
'-'	O
;	O
sprintf	function
(	O
command_buffer	pointer
,	O
"I%d\n%s\n"	pointer
,	O
(	O
(	O
struct	O
mtop	struct
*	O
)	O
argument	pointer
)	O
->	O
mt_op	short
,	O
p	pointer
)	O
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
command_buffer	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
get_status	function
(	O
handle	int
)	O
;	O
}	O
case	O
MTIOCGET	O
:	O
{	O
ssize_t	long
status	int
;	O
size_t	long
counter	int
;	O
if	O
(	O
do_command	function
(	O
handle	int
,	O
"S"	pointer
)	O
==	O
-	O
1	int
||	O
(	O
status	int
=	O
get_status	function
(	O
handle	int
)	O
,	O
status	int
==	O
-	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
status	int
>	O
sizeof	O
(	O
struct	O
mtop	struct
)	O
)	O
{	O
errno	O
=	O
EOVERFLOW	int
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
;	O
status	int
>	O
0	int
;	O
status	int
-=	O
counter	int
,	O
argument	pointer
+=	O
counter	int
)	O
{	O
counter	int
=	O
safe_read	function
(	O
READ_SIDE	O
(	O
handle	int
)	O
,	O
argument	pointer
,	O
status	int
)	O
;	O
if	O
(	O
counter	int
==	O
SAFE_READ_ERROR	O
||	O
counter	int
==	O
0	int
)	O
{	O
_rmt_shutdown	function
(	O
handle	int
,	O
EIO	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
(	O
struct	O
mtget	struct
*	O
)	O
argument	pointer
)	O
->	O
MTIO_CHECK_FIELD	O
<	O
256	int
)	O
return	O
0	int
;	O
for	O
(	O
counter	int
=	O
0	int
;	O
counter	int
<	O
status	int
;	O
counter	int
+=	O
2	int
)	O
{	O
char	O
copy	char
=	O
argument	pointer
[	O
counter	int
]	O
;	O
argument	pointer
[	O
counter	int
]	O
=	O
argument	pointer
[	O
counter	int
+	O
1	int
]	O
;	O
argument	pointer
[	O
counter	int
+	O
1	int
]	O
=	O
copy	char
;	O
}	O
return	O
0	int
;	O
}	O
}	O
}	O
