struct	O
check_datum	struct
{	O
grad_symtab_t	struct
*	O
symtab	pointer
;	O
unsigned	O
count	int
;	O
unsigned	O
rlen	int
;	O
unsigned	O
*	O
r	pointer
;	O
}	O
;	O
static	O
void	O
TC	function
(	O
unsigned	O
*	O
R	pointer
,	O
int	O
n	long
)	O
;	O
static	O
void	O
mark_profile	function
(	O
struct	O
check_datum	struct
*	O
datum	union
,	O
User_symbol	struct
*	O
sym	pointer
,	O
char	O
*	O
target_name	pointer
)	O
;	O
static	O
void	O
mark_list	function
(	O
struct	O
check_datum	struct
*	O
datum	union
,	O
User_symbol	struct
*	O
sym	pointer
,	O
grad_avp_t	struct
*	O
list	pointer
)	O
;	O
static	O
void	O
check_dup_attr	function
(	O
grad_avp_t	struct
*	O
*	O
prev	pointer
,	O
grad_avp_t	struct
*	O
ptr	pointer
,	O
grad_locus_t	struct
*	O
loc	struct
)	O
;	O
static	O
int	O
sym_counter	function
(	O
void	O
*	O
closure	pointer
,	O
grad_symbol_t	struct
*	O
symbol	struct
)	O
{	O
User_symbol	struct
*	O
sym	pointer
=	O
(	O
User_symbol	struct
*	O
)	O
symbol	struct
;	O
sym	pointer
->	O
ordnum	int
=	O
(	O
*	O
(	O
int	O
*	O
)	O
closure	pointer
)	O
++	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
radck_setbit	function
(	O
unsigned	O
*	O
r	pointer
,	O
unsigned	O
rowsize	int
,	O
unsigned	O
row	int
,	O
unsigned	O
col	int
)	O
{	O
SETBIT	O
(	O
r	pointer
+	O
rowsize	int
*	O
row	int
,	O
col	int
)	O
;	O
}	O
static	O
int	O
radck_bitisset	function
(	O
unsigned	O
*	O
r	pointer
,	O
unsigned	O
rowsize	int
,	O
unsigned	O
row	int
,	O
unsigned	O
col	int
)	O
{	O
return	O
BITISSET	O
(	O
r	pointer
+	O
rowsize	int
*	O
row	int
,	O
col	int
)	O
;	O
}	O
static	O
void	O
mark_profile	function
(	O
struct	O
check_datum	struct
*	O
datum	union
,	O
User_symbol	struct
*	O
sym	pointer
,	O
char	O
*	O
target_name	pointer
)	O
{	O
User_symbol	struct
*	O
target	pointer
=	O
(	O
User_symbol	struct
*	O
)	O
grad_sym_lookup	function
(	O
datum	union
->	O
symtab	pointer
,	O
target_name	pointer
)	O
;	O
if	O
(	O
!	O
target	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
&	O
sym	pointer
->	O
loc	struct
,	O
_	O
(	O
"Match-Profile refers to non-existing profile (%s)"	pointer
)	O
,	O
target_name	pointer
)	O
;	O
return	O
;	O
}	O
do	O
{	O
radck_setbit	function
(	O
datum	union
->	O
r	pointer
,	O
datum	union
->	O
rlen	int
,	O
sym	pointer
->	O
ordnum	int
,	O
target	pointer
->	O
ordnum	int
)	O
;	O
}	O
while	O
(	O
(	O
target	pointer
=	O
target	pointer
->	O
next	pointer
)	O
&&	O
!	O
strcmp	function
(	O
target	pointer
->	O
name	pointer
,	O
target_name	pointer
)	O
)	O
;	O
}	O
static	O
void	O
mark_list	function
(	O
struct	O
check_datum	struct
*	O
datum	union
,	O
User_symbol	struct
*	O
sym	pointer
,	O
grad_avp_t	struct
*	O
list	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
if	O
(	O
p	pointer
=	O
grad_avl_find	function
(	O
list	pointer
,	O
DA_MATCH_PROFILE	int
)	O
)	O
{	O
do	O
{	O
mark_profile	function
(	O
datum	union
,	O
sym	pointer
,	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
while	O
(	O
p	pointer
->	O
next	pointer
&&	O
(	O
p	pointer
=	O
grad_avl_find	function
(	O
p	pointer
->	O
next	pointer
,	O
DA_MATCH_PROFILE	int
)	O
)	O
)	O
;	O
}	O
}	O
static	O
int	O
pass1	function
(	O
void	O
*	O
closure	pointer
,	O
grad_symbol_t	struct
*	O
symbol	struct
)	O
{	O
struct	O
check_datum	struct
*	O
datum	union
=	O
closure	pointer
;	O
User_symbol	struct
*	O
sym	pointer
=	O
(	O
User_symbol	struct
*	O
)	O
symbol	struct
;	O
mark_list	function
(	O
datum	union
,	O
sym	pointer
,	O
sym	pointer
->	O
check	pointer
)	O
;	O
mark_list	function
(	O
datum	union
,	O
sym	pointer
,	O
sym	pointer
->	O
reply	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pass2	function
(	O
void	O
*	O
closure	pointer
,	O
grad_symbol_t	struct
*	O
symbol	struct
)	O
{	O
struct	O
check_datum	struct
*	O
datum	union
=	O
closure	pointer
;	O
User_symbol	struct
*	O
sym	pointer
=	O
(	O
User_symbol	struct
*	O
)	O
symbol	struct
;	O
if	O
(	O
radck_bitisset	function
(	O
datum	union
->	O
r	pointer
,	O
datum	union
->	O
rlen	int
,	O
sym	pointer
->	O
ordnum	int
,	O
sym	pointer
->	O
ordnum	int
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
&	O
sym	pointer
->	O
loc	struct
,	O
_	O
(	O
"circular dependency for %s"	pointer
)	O
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
grad_symtab_delete	function
(	O
datum	union
->	O
symtab	pointer
,	O
(	O
grad_symbol_t	struct
*	O
)	O
sym	pointer
)	O
;	O
datum	union
->	O
count	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
radck	function
(	O
)	O
{	O
int	O
user_count	int
;	O
struct	O
check_datum	struct
datum	union
;	O
unsigned	O
*	O
r	pointer
,	O
size	int
;	O
user_count	int
=	O
0	int
;	O
grad_symtab_iterate	function
(	O
user_tab	pointer
,	O
sym_counter	function
,	O
&	O
user_count	int
)	O
;	O
if	O
(	O
user_count	int
)	O
{	O
size	int
=	O
(	O
user_count	int
+	O
BITS_PER_WORD	O
-	O
1	int
)	O
/	O
BITS_PER_WORD	O
;	O
r	pointer
=	O
grad_malloc	function
(	O
user_count	int
*	O
size	int
*	O
sizeof	O
(	O
unsigned	O
)	O
)	O
;	O
if	O
(	O
!	O
r	pointer
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"not enough memory for transitivity check"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
datum	union
.	O
symtab	pointer
=	O
user_tab	pointer
;	O
datum	union
.	O
count	int
=	O
user_count	int
;	O
datum	union
.	O
rlen	int
=	O
size	int
;	O
datum	union
.	O
r	pointer
=	O
r	pointer
;	O
grad_symtab_iterate	function
(	O
user_tab	pointer
,	O
pass1	function
,	O
&	O
datum	union
)	O
;	O
TC	function
(	O
datum	union
.	O
r	pointer
,	O
user_count	int
)	O
;	O
grad_symtab_iterate	function
(	O
user_tab	pointer
,	O
pass2	function
,	O
&	O
datum	union
)	O
;	O
grad_free	function
(	O
datum	union
.	O
r	pointer
)	O
;	O
user_count	int
=	O
datum	union
.	O
count	int
;	O
}	O
if	O
(	O
user_count	int
==	O
0	int
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"USER LIST IS EMPTY"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
check_dup_attr	function
(	O
grad_avp_t	struct
*	O
*	O
prev	pointer
,	O
grad_avp_t	struct
*	O
ptr	pointer
,	O
grad_locus_t	struct
*	O
loc	struct
)	O
{	O
if	O
(	O
*	O
prev	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
_	O
(	O
"duplicate %s attribute"	pointer
)	O
,	O
ptr	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
*	O
prev	pointer
=	O
ptr	pointer
;	O
}	O
static	O
int	O
compile_pair	function
(	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
if	O
(	O
pair	pointer
->	O
eval_type	enum
==	O
grad_eval_interpret	int
)	O
{	O
char	O
*	O
symname	pointer
=	O
rewrite_compile	function
(	O
pair	pointer
->	O
avp_strvalue	O
)	O
;	O
if	O
(	O
symname	pointer
==	O
0	int
)	O
return	O
-	O
1	int
;	O
pair	pointer
->	O
eval_type	enum
=	O
grad_eval_compiled	int
;	O
grad_free	function
(	O
pair	pointer
->	O
avp_strvalue	O
)	O
;	O
pair	pointer
->	O
avp_strvalue	O
=	O
symname	pointer
;	O
pair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
symname	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
fix_check_pairs	function
(	O
int	O
cf_file	int
,	O
grad_locus_t	struct
*	O
loc	struct
,	O
char	O
*	O
name	pointer
,	O
grad_avp_t	struct
*	O
*	O
pairs	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
grad_avp_t	struct
*	O
auth_type	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
auth_data	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
pam_auth	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
password	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
crypt_password	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
chap_password	pointer
=	O
NULL	O
;	O
grad_avp_t	struct
*	O
pass_loc	pointer
=	O
NULL	O
;	O
grad_dict_attr_t	struct
*	O
dict	pointer
;	O
int	O
errcnt	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
*	O
pairs	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
dict	pointer
=	O
grad_attr_number_to_dict	function
(	O
p	pointer
->	O
attribute	int
)	O
;	O
if	O
(	O
dict	pointer
)	O
{	O
if	O
(	O
!	O
(	O
dict	pointer
->	O
prop	int
&	O
GRAD_AF_LHS	O
(	O
cf_file	int
)	O
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"attribute %s not allowed in LHS"	pointer
)	O
,	O
dict	pointer
->	O
name	pointer
)	O
;	O
errcnt	long
++	O
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	pointer
->	O
attribute	int
)	O
{	O
case	O
DA_AUTH_TYPE	int
:	O
check_dup_attr	function
(	O
&	O
auth_type	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_AUTH_DATA	int
:	O
check_dup_attr	function
(	O
&	O
auth_data	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_PAM_AUTH	int
:	O
check_dup_attr	function
(	O
&	O
pam_auth	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_USER_PASSWORD	int
:	O
check_dup_attr	function
(	O
&	O
password	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_CRYPT_PASSWORD	int
:	O
check_dup_attr	function
(	O
&	O
crypt_password	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_PASSWORD_LOCATION	int
:	O
if	O
(	O
p	pointer
->	O
avp_lvalue	O
==	O
DV_PASSWORD_LOCATION_SQL	int
)	O
{	O
const	O
char	O
*	O
msg	pointer
;	O
if	O
(	O
!	O
sql_auth_avail_p	function
(	O
&	O
msg	pointer
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
msg	pointer
)	O
;	O
errcnt	long
++	O
;	O
}	O
}	O
check_dup_attr	function
(	O
&	O
pass_loc	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_CHAP_PASSWORD	int
:	O
check_dup_attr	function
(	O
&	O
chap_password	pointer
,	O
p	pointer
,	O
loc	struct
)	O
;	O
break	O
;	O
case	O
DA_MATCH_PROFILE	int
:	O
if	O
(	O
strncmp	function
(	O
p	pointer
->	O
avp_strvalue	O
,	O
"DEFAULT"	pointer
,	O
7	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
p	pointer
->	O
avp_strvalue	O
,	O
"BEGIN"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"Match-Profile refers to a DEFAULT entry"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DA_SIMULTANEOUS_USE	int
:	O
if	O
(	O
!	O
radius_mlc_enabled_p	function
(	O
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"Simultaneous-Use is used, but multiple login checking is not enabled"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
}	O
}	O
if	O
(	O
cf_file	int
!=	O
GRAD_CF_USERS	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
auth_type	pointer
)	O
{	O
int	O
type	int
;	O
if	O
(	O
crypt_password	pointer
)	O
{	O
type	int
=	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
;	O
crypt_password	pointer
->	O
attribute	int
=	O
DA_USER_PASSWORD	int
;	O
}	O
else	O
if	O
(	O
password	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
password	pointer
->	O
avp_strvalue	O
,	O
"UNIX"	pointer
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_SYSTEM	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
password	pointer
->	O
avp_strvalue	O
,	O
"PAM"	pointer
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_PAM	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
password	pointer
->	O
avp_strvalue	O
,	O
"MYSQL"	pointer
)	O
||	O
!	O
strcmp	function
(	O
password	pointer
->	O
avp_strvalue	O
,	O
"SQL"	pointer
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_SQL	int
;	O
else	O
type	int
=	O
DV_AUTH_TYPE_LOCAL	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
auth_type	pointer
=	O
grad_avp_create_integer	function
(	O
DA_AUTH_TYPE	int
,	O
type	int
)	O
;	O
grad_avl_add_pair	function
(	O
pairs	pointer
,	O
auth_type	pointer
)	O
;	O
}	O
switch	O
(	O
auth_type	pointer
->	O
avp_lvalue	O
)	O
{	O
case	O
DV_AUTH_TYPE_LOCAL	int
:	O
if	O
(	O
!	O
password	pointer
&&	O
!	O
chap_password	pointer
&&	O
!	O
pass_loc	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"No User-Password attribute in LHS"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_SYSTEM	int
:	O
if	O
(	O
radiusd_user	struct
.	O
username	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"Auth-Type = System can only be used when running with root privileges"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
case	O
DV_AUTH_TYPE_REJECT	int
:	O
case	O
DV_AUTH_TYPE_ACCEPT	int
:	O
if	O
(	O
password	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"User-Password attribute ignored for this Auth-Type"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
pass_loc	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"Password-Location attribute ignored for this Auth-Type"	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
:	O
if	O
(	O
!	O
password	pointer
&&	O
!	O
crypt_password	pointer
&&	O
!	O
pass_loc	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"No User-Password attribute in LHS"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_SECURID	int
:	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"Authentication type not supported"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
break	O
;	O
case	O
DV_AUTH_TYPE_SQL	int
:	O
{	O
const	O
char	O
*	O
msg	pointer
;	O
if	O
(	O
!	O
sql_auth_avail_p	function
(	O
&	O
msg	pointer
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
msg	pointer
)	O
;	O
errcnt	long
++	O
;	O
break	O
;	O
}	O
if	O
(	O
password	pointer
||	O
crypt_password	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"User-Password attribute ignored for this Auth-Type"	pointer
)	O
)	O
;	O
}	O
grad_avl_delete	function
(	O
pairs	pointer
,	O
DA_AUTH_TYPE	int
)	O
;	O
p	pointer
=	O
grad_avp_create_integer	function
(	O
DA_AUTH_TYPE	int
,	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
)	O
;	O
grad_avl_add_pair	function
(	O
pairs	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
grad_avp_create_integer	function
(	O
DA_PASSWORD_LOCATION	int
,	O
DV_PASSWORD_LOCATION_SQL	int
)	O
;	O
grad_avl_add_pair	function
(	O
pairs	pointer
,	O
p	pointer
)	O
;	O
break	O
;	O
}	O
case	O
DV_AUTH_TYPE_PAM	int
:	O
if	O
(	O
pam_auth	pointer
&&	O
auth_data	pointer
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"Both Auth-Data and PAM-Auth attributes present"	pointer
)	O
)	O
;	O
auth_data	pointer
=	O
NULL	O
;	O
}	O
else	O
pam_auth	pointer
=	O
auth_data	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
return	O
errcnt	long
;	O
}	O
int	O
fix_reply_pairs	function
(	O
int	O
cf_file	int
,	O
grad_locus_t	struct
*	O
loc	struct
,	O
char	O
*	O
name	pointer
,	O
grad_avp_t	struct
*	O
*	O
pairs	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
int	O
fall_through	int
=	O
0	int
;	O
grad_dict_attr_t	struct
*	O
dict	pointer
;	O
int	O
errcnt	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
*	O
pairs	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
dict	pointer
=	O
grad_attr_number_to_dict	function
(	O
p	pointer
->	O
attribute	int
)	O
;	O
if	O
(	O
dict	pointer
)	O
{	O
if	O
(	O
!	O
(	O
dict	pointer
->	O
prop	int
&	O
GRAD_AF_RHS	O
(	O
cf_file	int
)	O
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"attribute %s not allowed in RHS"	pointer
)	O
,	O
dict	pointer
->	O
name	pointer
)	O
;	O
errcnt	long
++	O
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	pointer
->	O
attribute	int
)	O
{	O
case	O
DA_FALL_THROUGH	int
:	O
fall_through	int
++	O
;	O
break	O
;	O
case	O
DA_ADD_PORT_TO_IP_ADDRESS	int
:	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"Use of Add-Port-To-IP-Address is deprecated"	pointer
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
if	O
(	O
compile_pair	function
(	O
p	pointer
)	O
)	O
errcnt	long
++	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
name	pointer
,	O
"BEGIN"	pointer
,	O
5	int
)	O
==	O
0	int
&&	O
fall_through	int
==	O
0	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_WARN	int
,	O
loc	struct
,	O
"%s"	pointer
,	O
_	O
(	O
"BEGIN without Fall-Through"	pointer
)	O
)	O
;	O
}	O
return	O
errcnt	long
;	O
}	O
void	O
TC	function
(	O
unsigned	O
*	O
R	pointer
,	O
int	O
n	long
)	O
{	O
register	O
int	O
rowsize	int
;	O
register	O
unsigned	O
mask	int
;	O
register	O
unsigned	O
*	O
rowj	pointer
;	O
register	O
unsigned	O
*	O
rp	pointer
;	O
register	O
unsigned	O
*	O
rend	pointer
;	O
register	O
unsigned	O
*	O
ccol	pointer
;	O
unsigned	O
*	O
relend	pointer
;	O
unsigned	O
*	O
cword	pointer
;	O
unsigned	O
*	O
rowi	pointer
;	O
rowsize	int
=	O
WORDSIZE	O
(	O
n	long
)	O
*	O
sizeof	O
(	O
unsigned	O
)	O
;	O
relend	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
R	pointer
+	O
(	O
n	long
*	O
rowsize	int
)	O
)	O
;	O
cword	pointer
=	O
R	pointer
;	O
mask	int
=	O
1	int
;	O
rowi	pointer
=	O
R	pointer
;	O
while	O
(	O
rowi	pointer
<	O
relend	pointer
)	O
{	O
ccol	pointer
=	O
cword	pointer
;	O
rowj	pointer
=	O
R	pointer
;	O
while	O
(	O
rowj	pointer
<	O
relend	pointer
)	O
{	O
if	O
(	O
*	O
ccol	pointer
&	O
mask	int
)	O
{	O
rp	pointer
=	O
rowi	pointer
;	O
rend	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	pointer
+	O
rowsize	int
)	O
;	O
while	O
(	O
rowj	pointer
<	O
rend	pointer
)	O
*	O
rowj	pointer
++	O
|=	O
*	O
rp	pointer
++	O
;	O
}	O
else	O
{	O
rowj	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	pointer
+	O
rowsize	int
)	O
;	O
}	O
ccol	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ccol	pointer
+	O
rowsize	int
)	O
;	O
}	O
mask	int
<<=	O
1	int
;	O
if	O
(	O
mask	int
==	O
0	int
)	O
{	O
mask	int
=	O
1	int
;	O
cword	pointer
++	O
;	O
}	O
rowi	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowi	pointer
+	O
rowsize	int
)	O
;	O
}	O
}	O
