char	O
logger_docstring	array
[	O
]	O
=	O
N_	O
(	O
"log data using Mailutils log facility"	pointer
)	O
;	O
static	O
char	O
logger_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"[TEXT]"	pointer
)	O
;	O
static	O
char	O
*	O
input_file	pointer
=	O
NULL	O
;	O
static	O
int	O
logger_type	int
=	O
MU_STRERR_STDERR	int
;	O
static	O
int	O
log_severity	int
=	O
MU_LOG_ERROR	int
;	O
static	O
struct	O
mu_locus_range	struct
locus	struct
=	O
MU_LOCUS_RANGE_INITIALIZER	O
;	O
static	O
int	O
syslog_facility	int
=	O
LOG_USER	O
;	O
static	O
int	O
syslog_priority	int
=	O
LOG_ERR	int
;	O
static	O
char	O
*	O
syslog_tag	pointer
=	O
NULL	O
;	O
static	O
void	O
set_priority	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
strchr	function
(	O
arg	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
s	pointer
)	O
*	O
s	pointer
++	O
=	O
0	int
;	O
if	O
(	O
mu_string_to_syslog_facility	function
(	O
arg	pointer
,	O
&	O
syslog_facility	int
)	O
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unknown facility: %s"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
if	O
(	O
s	pointer
&&	O
mu_string_to_syslog_priority	function
(	O
s	pointer
,	O
&	O
syslog_priority	int
)	O
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unknown priority: %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
logger_type	int
=	O
MU_STRERR_SYSLOG	int
;	O
}	O
static	O
void	O
set_syslog	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
logger_type	int
=	O
MU_STRERR_SYSLOG	int
;	O
}	O
static	O
void	O
set_stderr	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
logger_type	int
=	O
MU_STRERR_STDERR	int
;	O
}	O
static	O
void	O
set_severity	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
_mu_severity_num	int
;	O
i	long
++	O
)	O
if	O
(	O
mu_c_strcasecmp	function
(	O
_mu_severity_str	array
[	O
i	long
]	O
,	O
arg	pointer
)	O
==	O
0	int
)	O
{	O
log_severity	int
=	O
i	long
;	O
return	O
;	O
}	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unknown severity: %s"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
static	O
void	O
parse_locus_point	function
(	O
char	O
*	O
*	O
ptr	pointer
,	O
struct	O
mu_locus_point	struct
*	O
pt	pointer
,	O
struct	O
mu_parseopt	struct
*	O
po	pointer
)	O
{	O
char	O
*	O
str	pointer
=	O
*	O
ptr	pointer
;	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
strchr	function
(	O
str	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
char	O
*	O
end	struct
;	O
*	O
s	pointer
++	O
=	O
0	int
;	O
if	O
(	O
*	O
str	pointer
)	O
mu_locus_point_set_file	function
(	O
pt	pointer
,	O
str	pointer
)	O
;	O
pt	pointer
->	O
mu_line	int
=	O
strtoul	function
(	O
s	pointer
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
end	struct
==	O
s	pointer
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"bad line number: %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
s	pointer
=	O
end	struct
;	O
if	O
(	O
*	O
s	pointer
==	O
'.'	O
||	O
*	O
s	pointer
==	O
':'	O
)	O
{	O
s	pointer
++	O
;	O
pt	pointer
->	O
mu_col	int
=	O
strtoul	function
(	O
s	pointer
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
end	struct
==	O
s	pointer
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"bad column number: %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
s	pointer
=	O
end	struct
;	O
}	O
}	O
else	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"missing line number after %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
*	O
ptr	pointer
=	O
s	pointer
;	O
}	O
static	O
void	O
set_locus	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
mu_strdup	function
(	O
arg	pointer
)	O
;	O
s	pointer
=	O
tmp	pointer
;	O
parse_locus_point	function
(	O
&	O
s	pointer
,	O
&	O
locus	struct
.	O
beg	struct
,	O
po	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
==	O
'-'	O
)	O
{	O
mu_locus_point_set_file	function
(	O
&	O
locus	struct
.	O
end	struct
,	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
;	O
locus	struct
.	O
end	struct
.	O
mu_line	int
=	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
;	O
locus	struct
.	O
end	struct
.	O
mu_col	int
=	O
locus	struct
.	O
end	struct
.	O
mu_col	int
;	O
s	pointer
++	O
;	O
parse_locus_point	function
(	O
&	O
s	pointer
,	O
&	O
locus	struct
.	O
end	struct
,	O
po	pointer
)	O
;	O
}	O
if	O
(	O
*	O
s	pointer
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"locus format error near %s"	pointer
)	O
,	O
s	pointer
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
logger_options	array
[	O
]	O
=	O
{	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read message from FILE"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
input_file	pointer
}	O
,	O
{	O
"priority"	pointer
,	O
'p'	O
,	O
N_	O
(	O
"FACILITY[.LEVEL]"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"log at the specified syslog priority (implies --syslog)"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_priority	function
}	O
,	O
{	O
"syslog"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"log via syslog"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_syslog	function
}	O
,	O
{	O
"stderr"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"log to the standard error"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_stderr	function
}	O
,	O
{	O
"severity"	pointer
,	O
's'	O
,	O
N_	O
(	O
"SEV"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"log at Mailutils severity level SEV"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_severity	function
}	O
,	O
{	O
"locus"	pointer
,	O
'l'	O
,	O
N_	O
(	O
"FILE:LINE[.COL][-FILE:LINE[.COL]]"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set locus for logging"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_locus	function
}	O
,	O
{	O
"tag"	pointer
,	O
't'	O
,	O
N_	O
(	O
"TAG"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set syslog tag"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
syslog_tag	pointer
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_stream_t	pointer
logger	pointer
,	O
input	pointer
;	O
int	O
rc	int
,	O
mode	int
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
logger_options	array
,	O
logger_docstring	array
,	O
logger_args_doc	array
)	O
;	O
if	O
(	O
argc	long
&&	O
input_file	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"both input file and message text given"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
syslog_tag	pointer
)	O
syslog_tag	pointer
=	O
"mu-logger"	pointer
;	O
rc	int
=	O
mu_stdstream_strerr_create	function
(	O
&	O
logger	pointer
,	O
logger_type	int
,	O
syslog_facility	int
,	O
syslog_priority	int
,	O
syslog_tag	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot create log stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mode	int
=	O
MU_LOGMODE_SEVERITY	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	function
(	O
logger	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
if	O
(	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
mu_stream_ioctl	function
(	O
logger	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
locus	struct
)	O
;	O
mu_stream_ioctl	function
(	O
logger	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_SEVERITY	int
,	O
&	O
log_severity	int
)	O
;	O
if	O
(	O
argc	long
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
>	O
0	int
)	O
mu_stream_write	function
(	O
logger	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
logger	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
strlen	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
,	O
NULL	O
)	O
;	O
}	O
mu_stream_write	function
(	O
logger	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
input_file	pointer
||	O
strcmp	function
(	O
input_file	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
mu_stream_ref	function
(	O
mu_strin	pointer
)	O
;	O
input	pointer
=	O
mu_strin	pointer
;	O
}	O
else	O
{	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
input	pointer
,	O
input_file	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot open input stream %s: %s"	pointer
)	O
,	O
input_file	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
logger	pointer
,	O
input	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
input	pointer
)	O
;	O
mu_stream_unref	function
(	O
logger	pointer
)	O
;	O
return	O
!	O
!	O
rc	int
;	O
}	O
