char	O
*	O
optarg	pointer
;	O
int	O
optind	int
=	O
1	int
;	O
int	O
opterr	int
=	O
1	int
;	O
int	O
optopt	int
=	O
'?'	O
;	O
static	O
struct	O
_getopt_data	struct
getopt_data	struct
;	O
static	O
void	O
exchange	function
(	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
_getopt_data	struct
*	O
d	pointer
)	O
{	O
int	O
bottom	int
=	O
d	pointer
->	O
__first_nonopt	int
;	O
int	O
middle	int
=	O
d	pointer
->	O
__last_nonopt	int
;	O
int	O
top	int
=	O
d	pointer
->	O
optind	int
;	O
char	O
*	O
tem	pointer
;	O
while	O
(	O
top	int
>	O
middle	int
&&	O
middle	int
>	O
bottom	int
)	O
{	O
if	O
(	O
top	int
-	O
middle	int
>	O
middle	int
-	O
bottom	int
)	O
{	O
int	O
len	int
=	O
middle	int
-	O
bottom	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	pointer
=	O
argv	pointer
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	pointer
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	pointer
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
;	O
argv	pointer
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
=	O
tem	pointer
;	O
}	O
top	int
-=	O
len	int
;	O
}	O
else	O
{	O
int	O
len	int
=	O
top	int
-	O
middle	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	pointer
=	O
argv	pointer
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	pointer
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	pointer
[	O
middle	int
+	O
i	int
]	O
;	O
argv	pointer
[	O
middle	int
+	O
i	int
]	O
=	O
tem	pointer
;	O
}	O
bottom	int
+=	O
len	int
;	O
}	O
}	O
d	pointer
->	O
__first_nonopt	int
+=	O
(	O
d	pointer
->	O
optind	int
-	O
d	pointer
->	O
__last_nonopt	int
)	O
;	O
d	pointer
->	O
__last_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
}	O
static	O
int	O
process_long_option	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
const	O
char	O
*	O
optstring	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
,	O
int	O
*	O
longind	pointer
,	O
int	O
long_only	int
,	O
struct	O
_getopt_data	struct
*	O
d	pointer
,	O
int	O
print_errors	int
,	O
const	O
char	O
*	O
prefix	pointer
)	O
{	O
char	O
*	O
nameend	pointer
;	O
size_t	long
namelen	long
;	O
const	O
struct	O
option	struct
*	O
p	pointer
;	O
const	O
struct	O
option	struct
*	O
pfound	pointer
=	O
NULL	O
;	O
int	O
n_options	int
;	O
int	O
option_index	int
;	O
for	O
(	O
nameend	pointer
=	O
d	pointer
->	O
__nextchar	pointer
;	O
*	O
nameend	pointer
&&	O
*	O
nameend	pointer
!=	O
'='	O
;	O
nameend	pointer
++	O
)	O
;	O
namelen	long
=	O
nameend	pointer
-	O
d	pointer
->	O
__nextchar	pointer
;	O
for	O
(	O
p	pointer
=	O
longopts	pointer
,	O
n_options	int
=	O
0	int
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
,	O
n_options	int
++	O
)	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
->	O
name	pointer
,	O
d	pointer
->	O
__nextchar	pointer
,	O
namelen	long
)	O
&&	O
namelen	long
==	O
strlen	function
(	O
p	pointer
->	O
name	pointer
)	O
)	O
{	O
pfound	pointer
=	O
p	pointer
;	O
option_index	int
=	O
n_options	int
;	O
break	O
;	O
}	O
if	O
(	O
pfound	pointer
==	O
NULL	O
)	O
{	O
unsigned	O
char	O
*	O
ambig_set	pointer
=	O
NULL	O
;	O
int	O
ambig_malloced	int
=	O
0	int
;	O
int	O
ambig_fallback	int
=	O
0	int
;	O
int	O
indfound	int
=	O
-	O
1	int
;	O
for	O
(	O
p	pointer
=	O
longopts	pointer
,	O
option_index	int
=	O
0	int
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
,	O
option_index	int
++	O
)	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
->	O
name	pointer
,	O
d	pointer
->	O
__nextchar	pointer
,	O
namelen	long
)	O
)	O
{	O
if	O
(	O
pfound	pointer
==	O
NULL	O
)	O
{	O
pfound	pointer
=	O
p	pointer
;	O
indfound	int
=	O
option_index	int
;	O
}	O
else	O
if	O
(	O
long_only	int
||	O
pfound	pointer
->	O
has_arg	int
!=	O
p	pointer
->	O
has_arg	int
||	O
pfound	pointer
->	O
flag	pointer
!=	O
p	pointer
->	O
flag	pointer
||	O
pfound	pointer
->	O
val	int
!=	O
p	pointer
->	O
val	int
)	O
{	O
if	O
(	O
!	O
ambig_fallback	int
)	O
{	O
if	O
(	O
!	O
print_errors	int
)	O
ambig_fallback	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
ambig_set	pointer
)	O
{	O
if	O
(	O
__libc_use_alloca	int
(	O
n_options	int
)	O
)	O
ambig_set	pointer
=	O
alloca	O
(	O
n_options	int
)	O
;	O
else	O
if	O
(	O
(	O
ambig_set	pointer
=	O
malloc	function
(	O
n_options	int
)	O
)	O
==	O
NULL	O
)	O
ambig_fallback	int
=	O
1	int
;	O
else	O
ambig_malloced	int
=	O
1	int
;	O
if	O
(	O
ambig_set	pointer
)	O
{	O
memset	function
(	O
ambig_set	pointer
,	O
0	int
,	O
n_options	int
)	O
;	O
ambig_set	pointer
[	O
indfound	int
]	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
ambig_set	pointer
)	O
ambig_set	pointer
[	O
option_index	int
]	O
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
ambig_set	pointer
||	O
ambig_fallback	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
if	O
(	O
ambig_fallback	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option '%s%s' is ambiguous\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
prefix	pointer
,	O
d	pointer
->	O
__nextchar	pointer
)	O
;	O
else	O
{	O
flockfile	function
(	O
stderr	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option '%s%s' is ambiguous; possibilities:"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
prefix	pointer
,	O
d	pointer
->	O
__nextchar	pointer
)	O
;	O
for	O
(	O
option_index	int
=	O
0	int
;	O
option_index	int
<	O
n_options	int
;	O
option_index	int
++	O
)	O
if	O
(	O
ambig_set	pointer
[	O
option_index	int
]	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
" '%s%s'"	pointer
,	O
prefix	pointer
,	O
longopts	pointer
[	O
option_index	int
]	O
.	O
name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
funlockfile	function
(	O
stderr	pointer
)	O
;	O
}	O
}	O
if	O
(	O
ambig_malloced	int
)	O
free	function
(	O
ambig_set	pointer
)	O
;	O
d	pointer
->	O
__nextchar	pointer
+=	O
strlen	function
(	O
d	pointer
->	O
__nextchar	pointer
)	O
;	O
d	pointer
->	O
optind	int
++	O
;	O
d	pointer
->	O
optopt	int
=	O
0	int
;	O
return	O
'?'	O
;	O
}	O
option_index	int
=	O
indfound	int
;	O
}	O
if	O
(	O
pfound	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
long_only	int
||	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
strchr	function
(	O
optstring	pointer
,	O
*	O
d	pointer
->	O
__nextchar	pointer
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unrecognized option '%s%s'\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
prefix	pointer
,	O
d	pointer
->	O
__nextchar	pointer
)	O
;	O
d	pointer
->	O
__nextchar	pointer
=	O
NULL	O
;	O
d	pointer
->	O
optind	int
++	O
;	O
d	pointer
->	O
optopt	int
=	O
0	int
;	O
return	O
'?'	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
d	pointer
->	O
optind	int
++	O
;	O
d	pointer
->	O
__nextchar	pointer
=	O
NULL	O
;	O
if	O
(	O
*	O
nameend	pointer
)	O
{	O
if	O
(	O
pfound	pointer
->	O
has_arg	int
)	O
d	pointer
->	O
optarg	pointer
=	O
nameend	pointer
+	O
1	int
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option '%s%s' doesn't allow an argument\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
prefix	pointer
,	O
pfound	pointer
->	O
name	pointer
)	O
;	O
d	pointer
->	O
optopt	int
=	O
pfound	pointer
->	O
val	int
;	O
return	O
'?'	O
;	O
}	O
}	O
else	O
if	O
(	O
pfound	pointer
->	O
has_arg	int
==	O
1	int
)	O
{	O
if	O
(	O
d	pointer
->	O
optind	int
<	O
argc	int
)	O
d	pointer
->	O
optarg	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option '%s%s' requires an argument\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
prefix	pointer
,	O
pfound	pointer
->	O
name	pointer
)	O
;	O
d	pointer
->	O
optopt	int
=	O
pfound	pointer
->	O
val	int
;	O
return	O
optstring	pointer
[	O
0	int
]	O
==	O
':'	O
?	O
':'	O
:	O
'?'	O
;	O
}	O
}	O
if	O
(	O
longind	pointer
!=	O
NULL	O
)	O
*	O
longind	pointer
=	O
option_index	int
;	O
if	O
(	O
pfound	pointer
->	O
flag	pointer
)	O
{	O
*	O
(	O
pfound	pointer
->	O
flag	pointer
)	O
=	O
pfound	pointer
->	O
val	int
;	O
return	O
0	int
;	O
}	O
return	O
pfound	pointer
->	O
val	int
;	O
}	O
static	O
const	O
char	O
*	O
_getopt_initialize	function
(	O
int	O
argc	int
_GL_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
_GL_UNUSED	O
,	O
const	O
char	O
*	O
optstring	pointer
,	O
struct	O
_getopt_data	struct
*	O
d	pointer
,	O
int	O
posixly_correct	int
)	O
{	O
if	O
(	O
d	pointer
->	O
optind	int
==	O
0	int
)	O
d	pointer
->	O
optind	int
=	O
1	int
;	O
d	pointer
->	O
__first_nonopt	int
=	O
d	pointer
->	O
__last_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
d	pointer
->	O
__nextchar	pointer
=	O
NULL	O
;	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
d	pointer
->	O
__ordering	enum
=	O
RETURN_IN_ORDER	int
;	O
++	O
optstring	pointer
;	O
}	O
else	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
d	pointer
->	O
__ordering	enum
=	O
REQUIRE_ORDER	int
;	O
++	O
optstring	pointer
;	O
}	O
else	O
if	O
(	O
posixly_correct	int
||	O
!	O
!	O
getenv	function
(	O
"POSIXLY_CORRECT"	pointer
)	O
)	O
d	pointer
->	O
__ordering	enum
=	O
REQUIRE_ORDER	int
;	O
else	O
d	pointer
->	O
__ordering	enum
=	O
PERMUTE	int
;	O
d	pointer
->	O
__initialized	int
=	O
1	int
;	O
return	O
optstring	pointer
;	O
}	O
int	O
_getopt_internal_r	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
const	O
char	O
*	O
optstring	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
,	O
int	O
*	O
longind	pointer
,	O
int	O
long_only	int
,	O
struct	O
_getopt_data	struct
*	O
d	pointer
,	O
int	O
posixly_correct	int
)	O
{	O
int	O
print_errors	int
=	O
d	pointer
->	O
opterr	int
;	O
if	O
(	O
argc	int
<	O
1	int
)	O
return	O
-	O
1	int
;	O
d	pointer
->	O
optarg	pointer
=	O
NULL	O
;	O
if	O
(	O
d	pointer
->	O
optind	int
==	O
0	int
||	O
!	O
d	pointer
->	O
__initialized	int
)	O
optstring	pointer
=	O
_getopt_initialize	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
d	pointer
,	O
posixly_correct	int
)	O
;	O
else	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
'-'	O
||	O
optstring	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
optstring	pointer
++	O
;	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
print_errors	int
=	O
0	int
;	O
if	O
(	O
d	pointer
->	O
__nextchar	pointer
==	O
NULL	O
||	O
*	O
d	pointer
->	O
__nextchar	pointer
==	O
'\0'	O
)	O
{	O
if	O
(	O
d	pointer
->	O
__last_nonopt	int
>	O
d	pointer
->	O
optind	int
)	O
d	pointer
->	O
__last_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
if	O
(	O
d	pointer
->	O
__first_nonopt	int
>	O
d	pointer
->	O
optind	int
)	O
d	pointer
->	O
__first_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
if	O
(	O
d	pointer
->	O
__ordering	enum
==	O
PERMUTE	int
)	O
{	O
if	O
(	O
d	pointer
->	O
__first_nonopt	int
!=	O
d	pointer
->	O
__last_nonopt	int
&&	O
d	pointer
->	O
__last_nonopt	int
!=	O
d	pointer
->	O
optind	int
)	O
exchange	function
(	O
argv	pointer
,	O
d	pointer
)	O
;	O
else	O
if	O
(	O
d	pointer
->	O
__last_nonopt	int
!=	O
d	pointer
->	O
optind	int
)	O
d	pointer
->	O
__first_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
while	O
(	O
d	pointer
->	O
optind	int
<	O
argc	int
&&	O
NONOPTION_P	O
)	O
d	pointer
->	O
optind	int
++	O
;	O
d	pointer
->	O
__last_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
}	O
if	O
(	O
d	pointer
->	O
optind	int
!=	O
argc	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
,	O
"--"	pointer
)	O
)	O
{	O
d	pointer
->	O
optind	int
++	O
;	O
if	O
(	O
d	pointer
->	O
__first_nonopt	int
!=	O
d	pointer
->	O
__last_nonopt	int
&&	O
d	pointer
->	O
__last_nonopt	int
!=	O
d	pointer
->	O
optind	int
)	O
exchange	function
(	O
argv	pointer
,	O
d	pointer
)	O
;	O
else	O
if	O
(	O
d	pointer
->	O
__first_nonopt	int
==	O
d	pointer
->	O
__last_nonopt	int
)	O
d	pointer
->	O
__first_nonopt	int
=	O
d	pointer
->	O
optind	int
;	O
d	pointer
->	O
__last_nonopt	int
=	O
argc	int
;	O
d	pointer
->	O
optind	int
=	O
argc	int
;	O
}	O
if	O
(	O
d	pointer
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
d	pointer
->	O
__first_nonopt	int
!=	O
d	pointer
->	O
__last_nonopt	int
)	O
d	pointer
->	O
optind	int
=	O
d	pointer
->	O
__first_nonopt	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
NONOPTION_P	O
)	O
{	O
if	O
(	O
d	pointer
->	O
__ordering	enum
==	O
REQUIRE_ORDER	int
)	O
return	O
-	O
1	int
;	O
d	pointer
->	O
optarg	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
++	O
]	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
longopts	pointer
)	O
{	O
if	O
(	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
d	pointer
->	O
__nextchar	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
+	O
2	int
;	O
return	O
process_long_option	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
longopts	pointer
,	O
longind	pointer
,	O
long_only	int
,	O
d	pointer
,	O
print_errors	int
,	O
"--"	pointer
)	O
;	O
}	O
if	O
(	O
long_only	int
&&	O
(	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
[	O
2	int
]	O
||	O
!	O
strchr	function
(	O
optstring	pointer
,	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
[	O
1	int
]	O
)	O
)	O
)	O
{	O
int	O
code	int
;	O
d	pointer
->	O
__nextchar	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
+	O
1	int
;	O
code	int
=	O
process_long_option	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
longopts	pointer
,	O
longind	pointer
,	O
long_only	int
,	O
d	pointer
,	O
print_errors	int
,	O
"-"	pointer
)	O
;	O
if	O
(	O
code	int
!=	O
-	O
1	int
)	O
return	O
code	int
;	O
}	O
}	O
d	pointer
->	O
__nextchar	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
+	O
1	int
;	O
}	O
{	O
char	O
c	char
=	O
*	O
d	pointer
->	O
__nextchar	pointer
++	O
;	O
const	O
char	O
*	O
temp	pointer
=	O
strchr	function
(	O
optstring	pointer
,	O
c	char
)	O
;	O
if	O
(	O
*	O
d	pointer
->	O
__nextchar	pointer
==	O
'\0'	O
)	O
++	O
d	pointer
->	O
optind	int
;	O
if	O
(	O
temp	pointer
==	O
NULL	O
||	O
c	char
==	O
':'	O
||	O
c	char
==	O
';'	O
)	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: invalid option -- '%c'\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
d	pointer
->	O
optopt	int
=	O
c	char
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
temp	pointer
[	O
0	int
]	O
==	O
'W'	O
&&	O
temp	pointer
[	O
1	int
]	O
==	O
';'	O
&&	O
longopts	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
*	O
d	pointer
->	O
__nextchar	pointer
!=	O
'\0'	O
)	O
d	pointer
->	O
optarg	pointer
=	O
d	pointer
->	O
__nextchar	pointer
;	O
else	O
if	O
(	O
d	pointer
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option requires an argument -- '%c'\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
d	pointer
->	O
optopt	int
=	O
c	char
;	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
c	char
=	O
':'	O
;	O
else	O
c	char
=	O
'?'	O
;	O
return	O
c	char
;	O
}	O
else	O
d	pointer
->	O
optarg	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
]	O
;	O
d	pointer
->	O
__nextchar	pointer
=	O
d	pointer
->	O
optarg	pointer
;	O
d	pointer
->	O
optarg	pointer
=	O
NULL	O
;	O
return	O
process_long_option	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
longopts	pointer
,	O
longind	pointer
,	O
0	int
,	O
d	pointer
,	O
print_errors	int
,	O
"-W "	pointer
)	O
;	O
}	O
if	O
(	O
temp	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
temp	pointer
[	O
2	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
d	pointer
->	O
__nextchar	pointer
!=	O
'\0'	O
)	O
{	O
d	pointer
->	O
optarg	pointer
=	O
d	pointer
->	O
__nextchar	pointer
;	O
d	pointer
->	O
optind	int
++	O
;	O
}	O
else	O
d	pointer
->	O
optarg	pointer
=	O
NULL	O
;	O
d	pointer
->	O
__nextchar	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
d	pointer
->	O
__nextchar	pointer
!=	O
'\0'	O
)	O
{	O
d	pointer
->	O
optarg	pointer
=	O
d	pointer
->	O
__nextchar	pointer
;	O
d	pointer
->	O
optind	int
++	O
;	O
}	O
else	O
if	O
(	O
d	pointer
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: option requires an argument -- '%c'\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
c	char
)	O
;	O
d	pointer
->	O
optopt	int
=	O
c	char
;	O
if	O
(	O
optstring	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
c	char
=	O
':'	O
;	O
else	O
c	char
=	O
'?'	O
;	O
}	O
else	O
d	pointer
->	O
optarg	pointer
=	O
argv	pointer
[	O
d	pointer
->	O
optind	int
++	O
]	O
;	O
d	pointer
->	O
__nextchar	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
c	char
;	O
}	O
}	O
int	O
_getopt_internal	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
const	O
char	O
*	O
optstring	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
,	O
int	O
*	O
longind	pointer
,	O
int	O
long_only	int
,	O
int	O
posixly_correct	int
)	O
{	O
int	O
result	int
;	O
getopt_data	struct
.	O
optind	int
=	O
optind	int
;	O
getopt_data	struct
.	O
opterr	int
=	O
opterr	int
;	O
result	int
=	O
_getopt_internal_r	function
(	O
argc	int
,	O
argv	pointer
,	O
optstring	pointer
,	O
longopts	pointer
,	O
longind	pointer
,	O
long_only	int
,	O
&	O
getopt_data	struct
,	O
posixly_correct	int
)	O
;	O
optind	int
=	O
getopt_data	struct
.	O
optind	int
;	O
optarg	pointer
=	O
getopt_data	struct
.	O
optarg	pointer
;	O
optopt	int
=	O
getopt_data	struct
.	O
optopt	int
;	O
return	O
result	int
;	O
}	O
GETOPT_ENTRY	O
(	O
getopt	function
,	O
1	int
)	O
