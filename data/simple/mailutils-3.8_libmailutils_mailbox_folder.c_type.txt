int	O
mu_folder_glob_match	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
pattern	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
fnmatch	function
(	O
pattern	pointer
,	O
name	pointer
[	O
0	int
]	O
==	O
'/'	O
?	O
name	pointer
+	O
1	int
:	O
name	pointer
,	O
0	int
)	O
;	O
}	O
int	O
mu_folder_imap_match	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
pattern	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
mu_imap_wildmatch	function
(	O
pattern	pointer
,	O
name	pointer
,	O
'/'	O
)	O
;	O
}	O
int	O
mu_folder_create_from_record	function
(	O
mu_folder_t	pointer
*	O
pfolder	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
mu_record_t	pointer
record	pointer
)	O
{	O
if	O
(	O
!	O
pfolder	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	pointer
||	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
MU_FOLDER_ATTRIBUTE_DIRECTORY	int
,	O
&	O
record	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
int	O
(	O
*	O
f_init	pointer
)	O
(	O
mu_folder_t	pointer
)	O
=	O
NULL	O
;	O
mu_record_get_folder	function
(	O
record	pointer
,	O
&	O
f_init	pointer
)	O
;	O
if	O
(	O
f_init	pointer
)	O
{	O
int	O
status	int
,	O
mask	int
;	O
mu_folder_t	pointer
folder	pointer
;	O
int	O
(	O
*	O
u_init	pointer
)	O
(	O
mu_url_t	pointer
)	O
=	O
NULL	O
;	O
status	int
=	O
mu_record_check_url	function
(	O
record	pointer
,	O
url	pointer
,	O
&	O
mask	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_record_get_url	function
(	O
record	pointer
,	O
&	O
u_init	pointer
)	O
;	O
if	O
(	O
u_init	pointer
)	O
{	O
status	int
=	O
u_init	pointer
(	O
url	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
folder	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
folder	pointer
)	O
)	O
;	O
if	O
(	O
folder	pointer
!=	O
NULL	O
)	O
{	O
folder	pointer
->	O
url	pointer
=	O
url	pointer
;	O
folder	pointer
->	O
is_local	int
=	O
record	pointer
->	O
flags	int
&	O
MU_RECORD_LOCAL	int
;	O
status	int
=	O
mu_monitor_create	function
(	O
&	O
folder	pointer
->	O
monitor	pointer
,	O
0	int
,	O
folder	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
f_init	pointer
(	O
folder	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
folder	pointer
->	O
_match	pointer
)	O
folder	pointer
->	O
_match	pointer
=	O
mu_folder_imap_match	function
;	O
*	O
pfolder	pointer
=	O
folder	pointer
;	O
folder	pointer
->	O
ref	pointer
++	O
;	O
}	O
}	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
folder	pointer
->	O
monitor	pointer
)	O
mu_monitor_destroy	function
(	O
&	O
folder	pointer
->	O
monitor	pointer
,	O
folder	pointer
)	O
;	O
free	function
(	O
folder	pointer
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_folder_create	function
(	O
mu_folder_t	pointer
*	O
pfolder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
;	O
rc	int
=	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_folder_create_from_record	function
(	O
pfolder	pointer
,	O
url	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_attach_ticket	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
mu_authority_t	pointer
auth	pointer
=	O
NULL	O
;	O
int	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
mu_folder_get_authority	function
(	O
folder	pointer
,	O
&	O
auth	pointer
)	O
==	O
0	int
&&	O
auth	pointer
)	O
{	O
char	O
*	O
filename	pointer
=	O
mu_tilde_expansion	function
(	O
mu_ticket_file	pointer
,	O
MU_HIERARCHY_DELIMITER	char
,	O
NULL	O
)	O
;	O
mu_wicket_t	pointer
wicket	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Reading user ticket file %s"	pointer
,	O
filename	pointer
)	O
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_file_wicket_create	function
(	O
&	O
wicket	pointer
,	O
filename	pointer
)	O
)	O
==	O
0	int
)	O
{	O
mu_ticket_t	pointer
ticket	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_wicket_get_ticket	function
(	O
wicket	pointer
,	O
NULL	O
,	O
&	O
ticket	pointer
)	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_authority_set_ticket	function
(	O
auth	pointer
,	O
ticket	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"Retrieved and set ticket: %d"	pointer
,	O
rc	int
)	O
)	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Error retrieving ticket: %s\n"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_wicket_destroy	function
(	O
&	O
wicket	pointer
)	O
;	O
}	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"Error creating wicket: %s\n"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_is_local	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
if	O
(	O
!	O
folder	pointer
)	O
return	O
-	O
1	int
;	O
return	O
folder	pointer
->	O
is_local	int
;	O
}	O
void	O
mu_folder_destroy	function
(	O
mu_folder_t	pointer
*	O
pfolder	pointer
)	O
{	O
if	O
(	O
pfolder	pointer
&&	O
*	O
pfolder	pointer
)	O
{	O
mu_folder_t	pointer
folder	pointer
=	O
*	O
pfolder	pointer
;	O
int	O
destroy_lock	int
=	O
0	int
;	O
mu_monitor_t	pointer
monitor	pointer
=	O
folder	pointer
->	O
monitor	pointer
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
folder	pointer
->	O
ref	pointer
--	O
;	O
if	O
(	O
folder	pointer
->	O
ref	pointer
<=	O
0	int
)	O
{	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
destroy_lock	int
=	O
1	int
;	O
if	O
(	O
folder	pointer
->	O
observable	pointer
)	O
{	O
mu_observable_notify	function
(	O
folder	pointer
->	O
observable	pointer
,	O
MU_EVT_FOLDER_DESTROY	int
,	O
folder	pointer
)	O
;	O
mu_observable_destroy	function
(	O
&	O
folder	pointer
->	O
observable	pointer
,	O
folder	pointer
)	O
;	O
}	O
if	O
(	O
folder	pointer
->	O
_destroy	pointer
)	O
folder	pointer
->	O
_destroy	pointer
(	O
folder	pointer
)	O
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
folder	pointer
->	O
authority	pointer
)	O
mu_authority_destroy	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
folder	pointer
)	O
;	O
if	O
(	O
folder	pointer
->	O
url	pointer
)	O
mu_url_destroy	function
(	O
&	O
folder	pointer
->	O
url	pointer
)	O
;	O
if	O
(	O
folder	pointer
->	O
property	pointer
)	O
mu_property_destroy	function
(	O
&	O
folder	pointer
->	O
property	pointer
)	O
;	O
free	function
(	O
folder	pointer
)	O
;	O
}	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
destroy_lock	int
)	O
mu_monitor_destroy	function
(	O
&	O
monitor	pointer
,	O
folder	pointer
)	O
;	O
*	O
pfolder	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_folder_get_property	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_property_t	pointer
*	O
prop	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
prop	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
folder	pointer
->	O
property	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	pointer
->	O
_get_property	pointer
)	O
status	int
=	O
folder	pointer
->	O
_get_property	pointer
(	O
folder	pointer
,	O
&	O
folder	pointer
->	O
property	pointer
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	function
(	O
&	O
folder	pointer
->	O
property	pointer
,	O
mu_assoc_property_init	function
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
prop	pointer
=	O
folder	pointer
->	O
property	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_open	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_open	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	pointer
->	O
_open	pointer
(	O
folder	pointer
,	O
flags	int
)	O
;	O
}	O
int	O
mu_folder_close	function
(	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_close	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	pointer
->	O
_close	pointer
(	O
folder	pointer
)	O
;	O
}	O
int	O
mu_folder_set_authority	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_authority_t	pointer
authority	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
authority	pointer
)	O
mu_authority_destroy	function
(	O
&	O
folder	pointer
->	O
authority	pointer
,	O
folder	pointer
)	O
;	O
folder	pointer
->	O
authority	pointer
=	O
authority	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_authority	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_authority_t	pointer
*	O
pauthority	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pauthority	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pauthority	pointer
=	O
folder	pointer
->	O
authority	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_observable	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_observable_t	pointer
*	O
pobservable	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
folder	pointer
->	O
observable	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	function
(	O
&	O
folder	pointer
->	O
observable	pointer
,	O
folder	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	pointer
=	O
folder	pointer
->	O
observable	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_set_match	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_folder_match_fp	pointer
pmatch	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
folder	pointer
->	O
_match	pointer
=	O
pmatch	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_folder_get_match	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_folder_match_fp	pointer
*	O
pmatch	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pmatch	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pmatch	pointer
=	O
folder	pointer
->	O
_match	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_list_response_free	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_list_response	struct
*	O
f	pointer
=	O
data	pointer
;	O
free	function
(	O
f	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
f	pointer
)	O
;	O
}	O
int	O
mu_folder_scan	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
struct	O
mu_folder_scanner	struct
*	O
scn	pointer
)	O
{	O
if	O
(	O
!	O
folder	pointer
||	O
!	O
scn	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_list	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
if	O
(	O
scn	pointer
->	O
result	pointer
)	O
mu_list_set_destroy_item	function
(	O
scn	pointer
->	O
result	pointer
,	O
mu_list_response_free	function
)	O
;	O
return	O
folder	pointer
->	O
_list	pointer
(	O
folder	pointer
,	O
scn	pointer
)	O
;	O
}	O
int	O
mu_folder_list	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
void	O
*	O
pattern	pointer
,	O
size_t	long
max_depth	long
,	O
mu_list_t	pointer
*	O
pflist	pointer
)	O
{	O
return	O
mu_folder_enumerate	function
(	O
folder	pointer
,	O
dirname	pointer
,	O
pattern	pointer
,	O
MU_FOLDER_ATTRIBUTE_ALL	O
,	O
max_depth	long
,	O
pflist	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_folder_enumerate	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
pattern	pointer
,	O
int	O
flags	int
,	O
size_t	long
max_depth	long
,	O
mu_list_t	pointer
*	O
pflist	pointer
,	O
mu_folder_enumerate_fp	pointer
enumfun	pointer
,	O
void	O
*	O
enumdata	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	pointer
==	O
NULL	O
||	O
(	O
!	O
pflist	pointer
&&	O
!	O
enumfun	pointer
)	O
)	O
return	O
EINVAL	int
;	O
else	O
if	O
(	O
folder	pointer
->	O
_list	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
else	O
{	O
struct	O
mu_folder_scanner	struct
scn	pointer
;	O
scn	pointer
.	O
refname	pointer
=	O
name	pointer
;	O
scn	pointer
.	O
pattern	pointer
=	O
pattern	pointer
;	O
scn	pointer
.	O
match_flags	int
=	O
flags	int
;	O
scn	pointer
.	O
max_depth	long
=	O
max_depth	long
;	O
scn	pointer
.	O
enumfun	pointer
=	O
enumfun	pointer
;	O
scn	pointer
.	O
enumdata	pointer
=	O
enumdata	pointer
;	O
scn	pointer
.	O
records	pointer
=	O
NULL	O
;	O
if	O
(	O
pflist	pointer
)	O
{	O
status	int
=	O
mu_list_create	function
(	O
&	O
scn	pointer
.	O
result	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_folder_scan	function
(	O
folder	pointer
,	O
&	O
scn	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
pflist	pointer
)	O
*	O
pflist	pointer
=	O
scn	pointer
.	O
result	pointer
;	O
}	O
else	O
mu_list_destroy	function
(	O
&	O
scn	pointer
.	O
result	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_folder_lsub	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
const	O
char	O
*	O
basename	function
,	O
mu_list_t	pointer
*	O
pflist	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
else	O
if	O
(	O
folder	pointer
->	O
_lsub	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
else	O
{	O
status	int
=	O
mu_list_create	function
(	O
pflist	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_list_set_destroy_item	function
(	O
*	O
pflist	pointer
,	O
mu_list_response_free	function
)	O
;	O
status	int
=	O
folder	pointer
->	O
_lsub	pointer
(	O
folder	pointer
,	O
dirname	pointer
,	O
basename	function
,	O
*	O
pflist	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_folder_subscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_subscribe	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	pointer
->	O
_subscribe	pointer
(	O
folder	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
mu_folder_unsubscribe	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_unsubscribe	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	pointer
->	O
_unsubscribe	pointer
(	O
folder	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
mu_folder_delete	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_delete	pointer
)	O
rc	int
=	O
folder	pointer
->	O
_delete	pointer
(	O
folder	pointer
,	O
name	pointer
)	O
;	O
else	O
{	O
mu_mailbox_t	pointer
mbox	pointer
;	O
rc	int
=	O
mu_mailbox_create_at	function
(	O
&	O
mbox	pointer
,	O
folder	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mailbox_remove	function
(	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_folder_rename	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
oldname	pointer
,	O
const	O
char	O
*	O
newname	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
folder	pointer
->	O
_rename	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
folder	pointer
->	O
_rename	pointer
(	O
folder	pointer
,	O
oldname	pointer
,	O
newname	pointer
)	O
;	O
}	O
int	O
mu_folder_get_url	function
(	O
mu_folder_t	pointer
folder	pointer
,	O
mu_url_t	pointer
*	O
purl	pointer
)	O
{	O
if	O
(	O
folder	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
purl	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	pointer
=	O
folder	pointer
->	O
url	pointer
;	O
return	O
0	int
;	O
}	O
