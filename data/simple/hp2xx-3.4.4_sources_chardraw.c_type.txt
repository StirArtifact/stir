extern	O
HPGL_Pt	struct
HP_pos	struct
,	O
P1	struct
,	O
P2	struct
;	O
extern	O
int	O
iwflag	int
;	O
extern	O
short	O
scale_flag	int
;	O
extern	O
int	O
mode_vert	int
;	O
extern	O
HPGL_Pt	struct
C1	struct
,	O
C2	struct
;	O
extern	O
HPGL_Pt	struct
S1	struct
,	O
Q	struct
;	O
TEXTPAR	struct
TEXTP	struct
,	O
*	O
tp	pointer
=	O
&	O
TEXTP	struct
;	O
static	O
void	O
code_to_ucoord	function
(	O
char	O
c	char
,	O
HPGL_Pt	struct
*	O
pp	pointer
)	O
{	O
double	O
x	int
,	O
y	int
;	O
x	int
=	O
(	O
double	O
)	O
(	O
c	char
>>	O
4	int
)	O
-	O
1.0	int
;	O
y	int
=	O
(	O
double	O
)	O
(	O
c	char
&	O
0x0f	int
)	O
-	O
4.0	int
;	O
pp	pointer
->	O
x	int
=	O
tp	pointer
->	O
Txx	double
*	O
x	int
+	O
tp	pointer
->	O
Txy	double
*	O
y	int
+	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+	O
tp	pointer
->	O
offset	struct
.	O
x	int
;	O
pp	pointer
->	O
y	int
=	O
tp	pointer
->	O
Tyx	double
*	O
x	int
+	O
tp	pointer
->	O
Tyy	double
*	O
y	int
+	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+	O
tp	pointer
->	O
offset	struct
.	O
y	int
;	O
}	O
static	O
void	O
ASCII_to_char	function
(	O
int	O
c	char
)	O
{	O
HPGL_Pt	struct
p	struct
;	O
char	O
*	O
ptr	pointer
;	O
int	O
outside	int
=	O
0	int
;	O
static	O
int	O
warnfont	int
=	O
0	int
;	O
int	O
SafeLineType	int
=	O
CurrentLineType	enum
;	O
LineEnds	enum
SafeLineEnd	enum
=	O
CurrentLineEnd	enum
;	O
CurrentLineType	enum
=	O
LT_solid	int
;	O
PlotCmd_to_tmpfile	function
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	function
(	O
LineAttrEnd	int
,	O
LAE_round	int
)	O
;	O
switch	O
(	O
tp	pointer
->	O
font	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
c	char
+=	O
128	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
if	O
(	O
c	char
==	O
95	int
||	O
c	char
==	O
96	int
||	O
c	char
==	O
126	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
}	O
ptr	pointer
=	O
&	O
charset1	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
if	O
(	O
c	char
==	O
39	int
||	O
c	char
==	O
94	int
||	O
c	char
==	O
95	int
||	O
c	char
==	O
96	int
||	O
c	char
==	O
123	int
||	O
c	char
==	O
124	int
||	O
c	char
==	O
125	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
}	O
ptr	pointer
=	O
&	O
charset2	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
if	O
(	O
c	char
==	O
95	int
||	O
c	char
>=	O
123	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
}	O
ptr	pointer
=	O
&	O
charset3	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
if	O
(	O
c	char
==	O
39	int
||	O
c	char
==	O
94	int
||	O
c	char
==	O
95	int
||	O
c	char
>=	O
123	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
}	O
ptr	pointer
=	O
&	O
charset4	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
5	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
if	O
(	O
c	char
==	O
101	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
}	O
ptr	pointer
=	O
&	O
charset5	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
6	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
ptr	pointer
=	O
&	O
charset6	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
7	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
9	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
36	int
:	O
c	char
=	O
58	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
ptr	pointer
=	O
&	O
charset6	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
36	int
:	O
c	char
=	O
58	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
88	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
90	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
80	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
76	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
78	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
84	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
ptr	pointer
=	O
&	O
charset6	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
36	int
:	O
c	char
=	O
58	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
64	int
:	O
c	char
=	O
92	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
88	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
90	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
80	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
94	int
:	O
c	char
=	O
91	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
96	int
:	O
c	char
=	O
69	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
76	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
78	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
84	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
79	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
91	int
:	O
c	char
=	O
83	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
82	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
80	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
87	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
86	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
84	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
ptr	pointer
=	O
&	O
charset6	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
33	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
64	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
88	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
90	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
91	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
76	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
78	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
79	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
94	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
34	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
35	int
:	O
c	char
=	O
59	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
64	int
:	O
c	char
=	O
72	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
51	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
53	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
69	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
75	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
73	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
43	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
35	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
35	int
:	O
c	char
=	O
59	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
ptr	pointer
=	O
&	O
charset6	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
36	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
35	int
:	O
c	char
=	O
59	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
64	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
51	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
53	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
69	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
96	int
:	O
c	char
=	O
75	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
72	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
74	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
73	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
89	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
37	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
35	int
:	O
c	char
=	O
59	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
64	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
56	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
54	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
57	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
51	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
55	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
53	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
38	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
64	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
97	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
52	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
105	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
98	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
53	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
106	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
51	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
39	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
case	O
35	int
:	O
c	char
=	O
61	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
91	int
:	O
c	char
=	O
83	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
92	int
:	O
c	char
=	O
82	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
93	int
:	O
c	char
=	O
80	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
123	int
:	O
c	char
=	O
87	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
124	int
:	O
c	char
=	O
86	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
125	int
:	O
c	char
=	O
84	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
126	int
:	O
c	char
=	O
124	int
;	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
173	int
:	O
if	O
(	O
c	char
<	O
0	int
)	O
c	char
+=	O
256	int
;	O
ptr	pointer
=	O
&	O
charset173	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
205	int
:	O
if	O
(	O
c	char
<	O
0	int
)	O
c	char
+=	O
256	int
;	O
ptr	pointer
=	O
&	O
charset205	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
tp	pointer
->	O
font	int
!=	O
warnfont	int
)	O
{	O
warnfont	int
=	O
tp	pointer
->	O
font	int
;	O
Eprintf	function
(	O
"Charset %d not supported -- replaced by charset 0!\n"	pointer
,	O
tp	pointer
->	O
font	int
)	O
;	O
}	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
c	char
+=	O
128	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
break	O
;	O
}	O
for	O
(	O
;	O
*	O
ptr	pointer
;	O
ptr	pointer
++	O
)	O
{	O
code_to_ucoord	function
(	O
*	O
ptr	pointer
&	O
0x7f	int
,	O
&	O
p	struct
)	O
;	O
if	O
(	O
iwflag	int
)	O
{	O
if	O
(	O
scale_flag	int
)	O
{	O
if	O
(	O
P1	struct
.	O
x	int
+	O
p	struct
.	O
x	int
>	O
C2	struct
.	O
x	int
||	O
P1	struct
.	O
y	int
+	O
p	struct
.	O
y	int
>	O
C2	struct
.	O
y	int
)	O
{	O
outside	int
=	O
1	int
;	O
}	O
if	O
(	O
P1	struct
.	O
x	int
+	O
p	struct
.	O
x	int
<	O
C1	struct
.	O
x	int
||	O
P1	struct
.	O
y	int
+	O
p	struct
.	O
y	int
<	O
C1	struct
.	O
y	int
)	O
{	O
outside	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
P1	struct
.	O
x	int
+	O
(	O
p	struct
.	O
x	int
-	O
S1	struct
.	O
x	int
)	O
*	O
Q	struct
.	O
x	int
>	O
C2	struct
.	O
x	int
||	O
P1	struct
.	O
y	int
+	O
(	O
p	struct
.	O
y	int
-	O
S1	struct
.	O
y	int
)	O
*	O
Q	struct
.	O
y	int
>	O
C2	struct
.	O
y	int
)	O
{	O
outside	int
=	O
1	int
;	O
}	O
if	O
(	O
P1	struct
.	O
x	int
+	O
(	O
p	struct
.	O
x	int
-	O
S1	struct
.	O
x	int
)	O
*	O
Q	struct
.	O
x	int
<	O
C1	struct
.	O
x	int
||	O
P1	struct
.	O
y	int
+	O
(	O
p	struct
.	O
y	int
-	O
S1	struct
.	O
y	int
)	O
*	O
Q	struct
.	O
y	int
<	O
C1	struct
.	O
y	int
)	O
{	O
outside	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
(	O
*	O
ptr	pointer
&	O
0x80	int
)	O
&&	O
!	O
outside	int
)	O
Pen_action_to_tmpfile	function
(	O
DRAW_TO	int
,	O
&	O
p	struct
,	O
FALSE	int
)	O
;	O
else	O
Pen_action_to_tmpfile	function
(	O
MOVE_TO	int
,	O
&	O
p	struct
,	O
FALSE	int
)	O
;	O
outside	int
=	O
0	int
;	O
}	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
CurrentLineType	enum
=	O
SafeLineType	int
;	O
PlotCmd_to_tmpfile	function
(	O
DEF_LA	int
)	O
;	O
Line_Attr_to_tmpfile	function
(	O
LineAttrEnd	int
,	O
SafeLineEnd	enum
)	O
;	O
}	O
void	O
init_text_par	function
(	O
void	O
)	O
{	O
tp	pointer
->	O
width	array
=	O
0.005	int
*	O
(	O
P2	struct
.	O
x	int
-	O
P1	struct
.	O
x	int
)	O
;	O
tp	pointer
->	O
height	double
=	O
0.0075	int
*	O
(	O
P2	struct
.	O
y	int
-	O
P1	struct
.	O
y	int
)	O
;	O
tp	pointer
->	O
espace	float
=	O
0.0	int
;	O
tp	pointer
->	O
eline	float
=	O
0.0	int
;	O
tp	pointer
->	O
dir	float
=	O
0.0	int
;	O
tp	pointer
->	O
slant	float
=	O
0.0	int
;	O
tp	pointer
->	O
font	int
=	O
0	int
;	O
tp	pointer
->	O
orig	int
=	O
1	int
;	O
tp	pointer
->	O
refpoint	struct
=	O
tp	pointer
->	O
CR_point	struct
=	O
HP_pos	struct
;	O
tp	pointer
->	O
offset	struct
.	O
x	int
=	O
tp	pointer
->	O
offset	struct
.	O
y	int
=	O
0.0	int
;	O
adjust_text_par	function
(	O
)	O
;	O
}	O
void	O
adjust_text_par	function
(	O
void	O
)	O
{	O
double	O
cdir	double
,	O
sdir	double
;	O
tp	pointer
->	O
space	float
=	O
tp	pointer
->	O
width	array
*	O
1.5	int
;	O
tp	pointer
->	O
line	function
=	O
tp	pointer
->	O
height	double
*	O
2.0	int
;	O
cdir	double
=	O
cos	function
(	O
tp	pointer
->	O
dir	float
)	O
;	O
sdir	double
=	O
sin	function
(	O
tp	pointer
->	O
dir	float
)	O
;	O
tp	pointer
->	O
Txx	double
=	O
tp	pointer
->	O
width	array
*	O
cdir	double
/	O
4.0	int
;	O
tp	pointer
->	O
Tyx	double
=	O
tp	pointer
->	O
width	array
*	O
sdir	double
/	O
4.0	int
;	O
tp	pointer
->	O
Txy	double
=	O
tp	pointer
->	O
height	double
*	O
(	O
tp	pointer
->	O
slant	float
*	O
cdir	double
-	O
sdir	double
)	O
/	O
6.0	int
;	O
tp	pointer
->	O
Tyy	double
=	O
tp	pointer
->	O
height	double
*	O
(	O
tp	pointer
->	O
slant	float
*	O
sdir	double
+	O
cdir	double
)	O
/	O
6.0	int
;	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
=	O
tp	pointer
->	O
space	float
*	O
(	O
1.0	int
+	O
tp	pointer
->	O
espace	float
)	O
*	O
cdir	double
;	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
=	O
tp	pointer
->	O
space	float
*	O
(	O
1.0	int
+	O
tp	pointer
->	O
espace	float
)	O
*	O
sdir	double
;	O
tp	pointer
->	O
linediff	struct
.	O
x	int
=	O
tp	pointer
->	O
line	function
*	O
(	O
1.0	int
+	O
tp	pointer
->	O
eline	float
)	O
*	O
sdir	double
;	O
tp	pointer
->	O
linediff	struct
.	O
y	int
=	O
-	O
tp	pointer
->	O
line	function
*	O
(	O
1.0	int
+	O
tp	pointer
->	O
eline	float
)	O
*	O
cdir	double
;	O
}	O
static	O
void	O
get_label_offset	function
(	O
char	O
*	O
txt	pointer
,	O
LB_Mode	enum
mode	enum
)	O
{	O
float	O
dx	float
=	O
0.0	int
,	O
dy	float
=	O
0.0	int
;	O
static	O
float	O
nc	int
,	O
nl	float
,	O
nc_max	float
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
LB_direct	int
:	O
nc	int
=	O
nl	float
=	O
nc_max	float
=	O
0.0	int
;	O
for	O
(	O
;	O
*	O
txt	pointer
&&	O
*	O
txt	pointer
!=	O
_CR	char
;	O
txt	pointer
++	O
)	O
if	O
(	O
*	O
txt	pointer
>=	O
' '	O
&&	O
(	O
(	O
*	O
txt	pointer
&	O
'\x80'	O
)	O
==	O
0	int
)	O
)	O
nc	int
++	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_BS	char
)	O
nc	int
--	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_HT	char
)	O
nc	int
-=	O
0.5	int
;	O
break	O
;	O
case	O
LB_buffered	int
:	O
nc	int
=	O
nl	float
=	O
nc_max	float
=	O
0.0	int
;	O
for	O
(	O
;	O
*	O
txt	pointer
;	O
txt	pointer
++	O
)	O
if	O
(	O
*	O
txt	pointer
>=	O
' '	O
&&	O
(	O
(	O
*	O
txt	pointer
&	O
'\x80'	O
)	O
==	O
0	int
)	O
)	O
nc	int
++	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_BS	char
)	O
nc	int
--	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_HT	char
)	O
nc	int
-=	O
0.5	int
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_LF	char
)	O
nl	float
++	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_VT	char
)	O
nl	float
--	O
;	O
else	O
if	O
(	O
*	O
txt	pointer
==	O
_CR	char
)	O
{	O
if	O
(	O
nc	int
>	O
nc_max	float
)	O
nc_max	float
=	O
nc	int
;	O
nc	int
=	O
0.0	int
;	O
}	O
if	O
(	O
nc	int
>	O
nc_max	float
)	O
nc_max	float
=	O
nc	int
;	O
nc	int
=	O
nc_max	float
;	O
break	O
;	O
case	O
LB_buffered_in_use	int
:	O
break	O
;	O
}	O
switch	O
(	O
tp	pointer
->	O
orig	int
)	O
{	O
case	O
1	int
:	O
case	O
2	int
:	O
case	O
3	int
:	O
dx	float
=	O
0.0	int
;	O
break	O
;	O
case	O
11	int
:	O
case	O
12	int
:	O
case	O
13	int
:	O
dx	float
=	O
0.5	int
*	O
WIDTH_FAC	int
;	O
break	O
;	O
case	O
4	int
:	O
case	O
5	int
:	O
case	O
6	int
:	O
case	O
14	int
:	O
case	O
15	int
:	O
case	O
16	int
:	O
dx	float
=	O
0.5	int
*	O
(	O
1.0	int
-	O
WIDTH_FAC	int
)	O
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
*	O
nc	int
/	O
2.0	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
*	O
nc	int
/	O
2.0	int
;	O
break	O
;	O
case	O
7	int
:	O
case	O
8	int
:	O
case	O
9	int
:	O
dx	float
=	O
1.0	int
-	O
WIDTH_FAC	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
*	O
nc	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
*	O
nc	int
;	O
break	O
;	O
case	O
17	int
:	O
case	O
18	int
:	O
case	O
19	int
:	O
dx	float
=	O
1.0	int
-	O
1.5	int
*	O
WIDTH_FAC	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
*	O
nc	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
*	O
nc	int
;	O
break	O
;	O
}	O
switch	O
(	O
tp	pointer
->	O
orig	int
)	O
{	O
case	O
1	int
:	O
case	O
4	int
:	O
case	O
7	int
:	O
dy	float
=	O
0.0	int
;	O
if	O
(	O
mode	enum
==	O
LB_buffered	int
||	O
mode	enum
==	O
LB_buffered_in_use	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
nl	float
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
nl	float
;	O
}	O
break	O
;	O
case	O
11	int
:	O
case	O
14	int
:	O
case	O
17	int
:	O
dy	float
=	O
0.5	int
*	O
HEIGHT_FAC	int
;	O
if	O
(	O
mode	enum
==	O
LB_buffered	int
||	O
mode	enum
==	O
LB_buffered_in_use	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
nl	float
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
nl	float
;	O
}	O
break	O
;	O
case	O
2	int
:	O
case	O
5	int
:	O
case	O
8	int
:	O
case	O
12	int
:	O
case	O
15	int
:	O
case	O
18	int
:	O
dy	float
=	O
-	O
0.5	int
*	O
HEIGHT_FAC	int
;	O
if	O
(	O
mode	enum
==	O
LB_buffered	int
||	O
mode	enum
==	O
LB_buffered_in_use	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
nl	float
/	O
2.0	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
nl	float
/	O
2.0	int
;	O
}	O
break	O
;	O
case	O
3	int
:	O
case	O
6	int
:	O
case	O
9	int
:	O
dy	float
=	O
-	O
HEIGHT_FAC	int
;	O
if	O
(	O
mode	enum
==	O
LB_buffered	int
||	O
mode	enum
==	O
LB_buffered_in_use	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
(	O
nl	float
-	O
1.0	int
)	O
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
(	O
nl	float
-	O
1.0	int
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
case	O
16	int
:	O
case	O
19	int
:	O
dy	float
=	O
-	O
1.5	int
*	O
HEIGHT_FAC	int
;	O
if	O
(	O
mode	enum
==	O
LB_buffered	int
||	O
mode	enum
==	O
LB_buffered_in_use	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
(	O
nl	float
-	O
1.0	int
)	O
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
(	O
nl	float
-	O
1.0	int
)	O
;	O
}	O
break	O
;	O
}	O
tp	pointer
->	O
offset	struct
.	O
x	int
=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
*	O
dx	float
-	O
tp	pointer
->	O
linediff	struct
.	O
x	int
*	O
dy	float
;	O
tp	pointer
->	O
offset	struct
.	O
y	int
=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
*	O
dx	float
-	O
tp	pointer
->	O
linediff	struct
.	O
y	int
*	O
dy	float
;	O
}	O
void	O
plot_string	function
(	O
char	O
*	O
txt	pointer
,	O
LB_Mode	enum
mode	enum
,	O
short	O
current_pen	short
)	O
{	O
char	O
*	O
txt0	pointer
;	O
double	O
savedwidth	double
=	O
0.	int
;	O
txt0	pointer
=	O
txt	pointer
;	O
tp	pointer
->	O
refpoint	struct
=	O
HP_pos	struct
;	O
get_label_offset	function
(	O
txt	pointer
,	O
mode	enum
)	O
;	O
if	O
(	O
tp	pointer
->	O
strokewidth	double
!=	O
9999.	int
)	O
{	O
savedwidth	double
=	O
pt	struct
.	O
width	array
[	O
current_pen	short
]	O
;	O
PlotCmd_to_tmpfile	function
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	function
(	O
current_pen	short
,	O
tp	pointer
->	O
strokewidth	double
)	O
;	O
}	O
while	O
(	O
*	O
txt	pointer
)	O
{	O
switch	O
(	O
*	O
txt	pointer
)	O
{	O
case	O
' '	O
:	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
break	O
;	O
case	O
_CR	char
:	O
if	O
(	O
mode_vert	int
)	O
tp	pointer
->	O
CR_point	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
tp	pointer
->	O
refpoint	struct
=	O
tp	pointer
->	O
CR_point	struct
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
LB_direct	int
:	O
get_label_offset	function
(	O
txt	pointer
+	O
1	int
,	O
mode	enum
)	O
;	O
break	O
;	O
case	O
LB_buffered	int
:	O
get_label_offset	function
(	O
txt0	pointer
,	O
LB_buffered_in_use	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
_LF	char
:	O
tp	pointer
->	O
CR_point	struct
.	O
x	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
;	O
if	O
(	O
!	O
mode_vert	int
)	O
{	O
tp	pointer
->	O
CR_point	struct
.	O
y	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
}	O
else	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
}	O
break	O
;	O
case	O
_BS	char
:	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
break	O
;	O
case	O
_HT	char
:	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
0.5	int
*	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
0.5	int
*	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
break	O
;	O
case	O
_VT	char
:	O
tp	pointer
->	O
CR_point	struct
.	O
x	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
;	O
tp	pointer
->	O
CR_point	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
-=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
break	O
;	O
case	O
_SO	char
:	O
if	O
(	O
tp	pointer
->	O
altfont	int
)	O
tp	pointer
->	O
font	int
=	O
tp	pointer
->	O
altfont	int
;	O
break	O
;	O
case	O
_SI	char
:	O
tp	pointer
->	O
font	int
=	O
tp	pointer
->	O
stdfont	int
;	O
break	O
;	O
default	O
:	O
ASCII_to_char	function
(	O
(	O
int	O
)	O
*	O
txt	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
mode_vert	int
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
-=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
linediff	struct
.	O
y	int
;	O
}	O
Pen_action_to_tmpfile	function
(	O
MOVE_TO	int
,	O
&	O
tp	pointer
->	O
refpoint	struct
,	O
FALSE	int
)	O
;	O
txt	pointer
++	O
;	O
}	O
if	O
(	O
tp	pointer
->	O
strokewidth	double
!=	O
9999.	int
)	O
{	O
PlotCmd_to_tmpfile	function
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	function
(	O
current_pen	short
,	O
savedwidth	double
)	O
;	O
}	O
}	O
static	O
void	O
ASCII_set_center	function
(	O
int	O
c	char
)	O
{	O
HPGL_Pt	struct
p	struct
,	O
center	struct
;	O
int	O
cnt	int
;	O
char	O
*	O
ptr	pointer
;	O
switch	O
(	O
tp	pointer
->	O
font	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"8bit character mapped to charset 7\n"	pointer
)	O
;	O
c	char
+=	O
128	int
;	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
else	O
{	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
}	O
break	O
;	O
case	O
5	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
ptr	pointer
=	O
&	O
charset5	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
7	int
:	O
if	O
(	O
c	char
&	O
0x80	int
)	O
{	O
Eprintf	function
(	O
"Illegal char in string: %d = %c replaced by blank!\n"	pointer
,	O
c	char
,	O
c	char
)	O
;	O
c	char
=	O
' '	O
;	O
}	O
ptr	pointer
=	O
&	O
charset7	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Charset %d not supported -- replaced by blank!\n"	pointer
,	O
tp	pointer
->	O
font	int
)	O
;	O
c	char
=	O
' '	O
;	O
ptr	pointer
=	O
&	O
charset0	array
[	O
c	char
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
center	struct
.	O
x	int
=	O
center	struct
.	O
y	int
=	O
0.0	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
*	O
ptr	pointer
;	O
ptr	pointer
++	O
,	O
cnt	int
++	O
)	O
{	O
code_to_ucoord	function
(	O
*	O
ptr	pointer
&	O
0x7f	int
,	O
&	O
p	struct
)	O
;	O
center	struct
.	O
x	int
+=	O
p	struct
.	O
x	int
;	O
center	struct
.	O
y	int
+=	O
p	struct
.	O
y	int
;	O
}	O
if	O
(	O
cnt	int
)	O
{	O
tp	pointer
->	O
offset	struct
.	O
x	int
=	O
-	O
center	struct
.	O
x	int
/	O
cnt	int
;	O
tp	pointer
->	O
offset	struct
.	O
y	int
=	O
-	O
center	struct
.	O
y	int
/	O
cnt	int
;	O
}	O
else	O
tp	pointer
->	O
offset	struct
.	O
x	int
=	O
tp	pointer
->	O
offset	struct
.	O
y	int
=	O
0.0	int
;	O
}	O
static	O
void	O
set_symbol_center	function
(	O
char	O
c	char
)	O
{	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
=	O
0.0	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
=	O
0.0	int
;	O
tp	pointer
->	O
offset	struct
.	O
x	int
=	O
0.0	int
;	O
tp	pointer
->	O
offset	struct
.	O
y	int
=	O
0.0	int
;	O
ASCII_set_center	function
(	O
c	char
)	O
;	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
=	O
HP_pos	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
=	O
HP_pos	struct
.	O
y	int
;	O
}	O
void	O
plot_symbol_char	function
(	O
char	O
c	char
)	O
{	O
set_symbol_center	function
(	O
c	char
)	O
;	O
ASCII_to_char	function
(	O
(	O
int	O
)	O
c	char
)	O
;	O
Pen_action_to_tmpfile	function
(	O
MOVE_TO	int
,	O
&	O
tp	pointer
->	O
refpoint	struct
,	O
FALSE	int
)	O
;	O
}	O
void	O
plot_user_char	function
(	O
FILE	struct
*	O
hd	pointer
,	O
short	O
current_pen	short
)	O
{	O
HPGL_Pt	struct
p	struct
;	O
double	O
x	int
,	O
y	int
;	O
float	O
fx	float
,	O
fy	float
;	O
int	O
pendown	int
=	O
FALSE	int
;	O
double	O
savedwidth	double
=	O
0.	int
;	O
LineType	enum
SafeLineType	int
=	O
CurrentLineType	enum
;	O
CurrentLineType	enum
=	O
LT_solid	int
;	O
tp	pointer
->	O
refpoint	struct
=	O
HP_pos	struct
;	O
p	struct
.	O
x	int
=	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+	O
tp	pointer
->	O
offset	struct
.	O
x	int
;	O
p	struct
.	O
y	int
=	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+	O
tp	pointer
->	O
offset	struct
.	O
y	int
;	O
if	O
(	O
tp	pointer
->	O
strokewidth	double
!=	O
9999.	int
)	O
{	O
savedwidth	double
=	O
pt	struct
.	O
width	array
[	O
current_pen	short
]	O
;	O
PlotCmd_to_tmpfile	function
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	function
(	O
current_pen	short
,	O
tp	pointer
->	O
strokewidth	double
)	O
;	O
}	O
while	O
(	O
read_float	function
(	O
&	O
fx	float
,	O
hd	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
fx	float
>=	O
99	int
)	O
pendown	int
=	O
TRUE	int
;	O
else	O
if	O
(	O
fx	float
<=	O
-	O
99	int
)	O
pendown	int
=	O
FALSE	int
;	O
else	O
{	O
if	O
(	O
read_float	function
(	O
&	O
fy	float
,	O
hd	pointer
)	O
!=	O
0	int
)	O
break	O
;	O
x	int
=	O
fx	float
;	O
y	int
=	O
fy	float
*	O
2.0	int
/	O
3.0	int
;	O
p	struct
.	O
x	int
+=	O
tp	pointer
->	O
Txx	double
*	O
x	int
+	O
tp	pointer
->	O
Txy	double
*	O
y	int
;	O
p	struct
.	O
y	int
+=	O
tp	pointer
->	O
Tyx	double
*	O
x	int
+	O
tp	pointer
->	O
Tyy	double
*	O
y	int
;	O
if	O
(	O
pendown	int
)	O
Pen_action_to_tmpfile	function
(	O
DRAW_TO	int
,	O
&	O
p	struct
,	O
FALSE	int
)	O
;	O
else	O
Pen_action_to_tmpfile	function
(	O
MOVE_TO	int
,	O
&	O
p	struct
,	O
FALSE	int
)	O
;	O
}	O
}	O
tp	pointer
->	O
refpoint	struct
.	O
x	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
x	int
;	O
tp	pointer
->	O
refpoint	struct
.	O
y	int
+=	O
tp	pointer
->	O
chardiff	struct
.	O
y	int
;	O
Pen_action_to_tmpfile	function
(	O
MOVE_TO	int
,	O
&	O
tp	pointer
->	O
refpoint	struct
,	O
FALSE	int
)	O
;	O
CurrentLineType	enum
=	O
SafeLineType	int
;	O
if	O
(	O
tp	pointer
->	O
strokewidth	double
!=	O
9999.	int
)	O
{	O
PlotCmd_to_tmpfile	function
(	O
DEF_PW	int
)	O
;	O
Pen_Width_to_tmpfile	function
(	O
current_pen	short
,	O
savedwidth	double
)	O
;	O
}	O
}	O
