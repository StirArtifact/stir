typedef	O
struct	O
{	O
double	O
*	O
a	double
;	O
double	O
*	O
b	double
;	O
double	O
*	O
c	pointer
;	O
double	O
*	O
d	pointer
;	O
double	O
*	O
y_prime	pointer
;	O
}	O
steffen_state_t	struct
;	O
static	O
void	O
steffen_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
double	O
steffen_copysign	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
;	O
static	O
void	O
*	O
steffen_alloc	function
(	O
size_t	long
size	long
)	O
{	O
steffen_state_t	struct
*	O
state	pointer
;	O
state	pointer
=	O
(	O
steffen_state_t	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
steffen_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
a	double
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
a	double
==	O
NULL	O
)	O
{	O
steffen_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for a"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
b	double
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
b	double
==	O
NULL	O
)	O
{	O
steffen_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for b"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
c	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
steffen_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for c"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
d	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
d	pointer
==	O
NULL	O
)	O
{	O
steffen_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y_prime	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y_prime	pointer
==	O
NULL	O
)	O
{	O
steffen_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_prime"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	pointer
;	O
}	O
static	O
int	O
steffen_init	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
double	O
*	O
a	double
=	O
state	pointer
->	O
a	double
;	O
double	O
*	O
b	double
=	O
state	pointer
->	O
b	double
;	O
double	O
*	O
c	pointer
=	O
state	pointer
->	O
c	pointer
;	O
double	O
*	O
d	pointer
=	O
state	pointer
->	O
d	pointer
;	O
double	O
*	O
y_prime	pointer
=	O
state	pointer
->	O
y_prime	pointer
;	O
double	O
h0	double
=	O
(	O
x_array	array
[	O
1	int
]	O
-	O
x_array	array
[	O
0	int
]	O
)	O
;	O
double	O
s0	double
=	O
(	O
y_array	array
[	O
1	int
]	O
-	O
y_array	array
[	O
0	int
]	O
)	O
/	O
h0	double
;	O
y_prime	pointer
[	O
0	int
]	O
=	O
s0	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
(	O
size	long
-	O
1	int
)	O
;	O
i	long
++	O
)	O
{	O
double	O
pi	double
;	O
double	O
hi	double
=	O
(	O
x_array	array
[	O
i	long
+	O
1	int
]	O
-	O
x_array	array
[	O
i	long
]	O
)	O
;	O
double	O
him1	double
=	O
(	O
x_array	array
[	O
i	long
]	O
-	O
x_array	array
[	O
i	long
-	O
1	int
]	O
)	O
;	O
double	O
si	double
=	O
(	O
y_array	array
[	O
i	long
+	O
1	int
]	O
-	O
y_array	array
[	O
i	long
]	O
)	O
/	O
hi	double
;	O
double	O
sim1	double
=	O
(	O
y_array	array
[	O
i	long
]	O
-	O
y_array	array
[	O
i	long
-	O
1	int
]	O
)	O
/	O
him1	double
;	O
pi	double
=	O
(	O
sim1	double
*	O
hi	double
+	O
si	double
*	O
him1	double
)	O
/	O
(	O
him1	double
+	O
hi	double
)	O
;	O
y_prime	pointer
[	O
i	long
]	O
=	O
(	O
steffen_copysign	function
(	O
1.0	int
,	O
sim1	double
)	O
+	O
steffen_copysign	function
(	O
1.0	int
,	O
si	double
)	O
)	O
*	O
GSL_MIN	O
(	O
fabs	function
(	O
sim1	double
)	O
,	O
GSL_MIN	O
(	O
fabs	function
(	O
si	double
)	O
,	O
0.5	int
*	O
fabs	function
(	O
pi	double
)	O
)	O
)	O
;	O
}	O
y_prime	pointer
[	O
size	long
-	O
1	int
]	O
=	O
(	O
y_array	array
[	O
size	long
-	O
1	int
]	O
-	O
y_array	array
[	O
size	long
-	O
2	int
]	O
)	O
/	O
(	O
x_array	array
[	O
size	long
-	O
1	int
]	O
-	O
x_array	array
[	O
size	long
-	O
2	int
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
size	long
-	O
1	int
)	O
;	O
i	long
++	O
)	O
{	O
double	O
hi	double
=	O
(	O
x_array	array
[	O
i	long
+	O
1	int
]	O
-	O
x_array	array
[	O
i	long
]	O
)	O
;	O
double	O
si	double
=	O
(	O
y_array	array
[	O
i	long
+	O
1	int
]	O
-	O
y_array	array
[	O
i	long
]	O
)	O
/	O
hi	double
;	O
a	double
[	O
i	long
]	O
=	O
(	O
y_prime	pointer
[	O
i	long
]	O
+	O
y_prime	pointer
[	O
i	long
+	O
1	int
]	O
-	O
2	int
*	O
si	double
)	O
/	O
hi	double
/	O
hi	double
;	O
b	double
[	O
i	long
]	O
=	O
(	O
3	int
*	O
si	double
-	O
2	int
*	O
y_prime	pointer
[	O
i	long
]	O
-	O
y_prime	pointer
[	O
i	long
+	O
1	int
]	O
)	O
/	O
hi	double
;	O
c	pointer
[	O
i	long
]	O
=	O
y_prime	pointer
[	O
i	long
]	O
;	O
d	pointer
[	O
i	long
]	O
=	O
y_array	array
[	O
i	long
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
steffen_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
RETURN_IF_NULL	O
(	O
state	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
a	double
)	O
free	function
(	O
state	pointer
->	O
a	double
)	O
;	O
if	O
(	O
state	pointer
->	O
b	double
)	O
free	function
(	O
state	pointer
->	O
b	double
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
)	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
d	pointer
)	O
free	function
(	O
state	pointer
->	O
d	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
y_prime	pointer
)	O
free	function
(	O
state	pointer
->	O
y_prime	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
steffen_eval	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
y	double
)	O
{	O
const	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	double
,	O
x_array	array
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
const	O
double	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
const	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
const	O
double	O
a	double
=	O
state	pointer
->	O
a	double
[	O
index	long
]	O
;	O
const	O
double	O
b	double
=	O
state	pointer
->	O
b	double
[	O
index	long
]	O
;	O
const	O
double	O
c	pointer
=	O
state	pointer
->	O
c	pointer
[	O
index	long
]	O
;	O
const	O
double	O
d	pointer
=	O
state	pointer
->	O
d	pointer
[	O
index	long
]	O
;	O
*	O
y	double
=	O
d	pointer
+	O
delx	double
*	O
(	O
c	pointer
+	O
delx	double
*	O
(	O
b	double
+	O
delx	double
*	O
a	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_deriv	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
dydx	pointer
)	O
{	O
const	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	double
,	O
x_array	array
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
double	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
double	O
a	double
=	O
state	pointer
->	O
a	double
[	O
index	long
]	O
;	O
double	O
b	double
=	O
state	pointer
->	O
b	double
[	O
index	long
]	O
;	O
double	O
c	pointer
=	O
state	pointer
->	O
c	pointer
[	O
index	long
]	O
;	O
*	O
dydx	pointer
=	O
c	pointer
+	O
delx	double
*	O
(	O
2	int
*	O
b	double
+	O
delx	double
*	O
3	int
*	O
a	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_deriv2	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
y_pp	pointer
)	O
{	O
const	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
index	long
;	O
if	O
(	O
a	double
!=	O
0	int
)	O
{	O
index	long
=	O
gsl_interp_accel_find	function
(	O
a	double
,	O
x_array	array
,	O
size	long
,	O
x	double
)	O
;	O
}	O
else	O
{	O
index	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
x	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
{	O
const	O
double	O
x_lo	double
=	O
x_array	array
[	O
index	long
]	O
;	O
const	O
double	O
delx	double
=	O
x	double
-	O
x_lo	double
;	O
const	O
double	O
a	double
=	O
state	pointer
->	O
a	double
[	O
index	long
]	O
;	O
const	O
double	O
b	double
=	O
state	pointer
->	O
b	double
[	O
index	long
]	O
;	O
*	O
y_pp	pointer
=	O
6	int
*	O
a	double
*	O
delx	double
+	O
2	int
*	O
b	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
steffen_eval_integ	function
(	O
const	O
void	O
*	O
vstate	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
result	pointer
)	O
{	O
const	O
steffen_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
steffen_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
,	O
index_a	long
,	O
index_b	long
;	O
if	O
(	O
acc	pointer
!=	O
0	int
)	O
{	O
index_a	long
=	O
gsl_interp_accel_find	function
(	O
acc	pointer
,	O
x_array	array
,	O
size	long
,	O
a	double
)	O
;	O
index_b	long
=	O
gsl_interp_accel_find	function
(	O
acc	pointer
,	O
x_array	array
,	O
size	long
,	O
b	double
)	O
;	O
}	O
else	O
{	O
index_a	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
a	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
index_b	long
=	O
gsl_interp_bsearch	function
(	O
x_array	array
,	O
b	double
,	O
0	int
,	O
size	long
-	O
1	int
)	O
;	O
}	O
*	O
result	pointer
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
index_a	long
;	O
i	long
<=	O
index_b	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
x_hi	double
=	O
x_array	array
[	O
i	long
+	O
1	int
]	O
;	O
const	O
double	O
x_lo	double
=	O
x_array	array
[	O
i	long
]	O
;	O
const	O
double	O
dx	double
=	O
x_hi	double
-	O
x_lo	double
;	O
if	O
(	O
dx	double
!=	O
0.0	int
)	O
{	O
double	O
x1	double
=	O
(	O
i	long
==	O
index_a	long
)	O
?	O
a	double
-	O
x_lo	double
:	O
0.0	int
;	O
double	O
x2	double
=	O
(	O
i	long
==	O
index_b	long
)	O
?	O
b	double
-	O
x_lo	double
:	O
x_hi	double
-	O
x_lo	double
;	O
*	O
result	pointer
+=	O
(	O
1.0	int
/	O
4.0	int
)	O
*	O
state	pointer
->	O
a	double
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
*	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
*	O
x1	double
*	O
x1	double
)	O
+	O
(	O
1.0	int
/	O
3.0	int
)	O
*	O
state	pointer
->	O
b	double
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
*	O
x1	double
)	O
+	O
(	O
1.0	int
/	O
2.0	int
)	O
*	O
state	pointer
->	O
c	pointer
[	O
i	long
]	O
*	O
(	O
x2	double
*	O
x2	double
-	O
x1	double
*	O
x1	double
)	O
+	O
state	pointer
->	O
d	pointer
[	O
i	long
]	O
*	O
(	O
x2	double
-	O
x1	double
)	O
;	O
}	O
else	O
{	O
*	O
result	pointer
=	O
0.0	int
;	O
return	O
GSL_EINVAL	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
steffen_copysign	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
y	double
)	O
{	O
if	O
(	O
(	O
x	double
<	O
0	int
&&	O
y	double
>	O
0	int
)	O
||	O
(	O
x	double
>	O
0	int
&&	O
y	double
<	O
0	int
)	O
)	O
return	O
-	O
x	double
;	O
return	O
x	double
;	O
}	O
static	O
const	O
gsl_interp_type	struct
steffen_type	struct
=	O
{	O
"steffen"	pointer
,	O
3	int
,	O
&	O
steffen_alloc	function
,	O
&	O
steffen_init	function
,	O
&	O
steffen_eval	function
,	O
&	O
steffen_eval_deriv	function
,	O
&	O
steffen_eval_deriv2	function
,	O
&	O
steffen_eval_integ	function
,	O
&	O
steffen_free	function
}	O
;	O
const	O
gsl_interp_type	struct
*	O
gsl_interp_steffen	pointer
=	O
&	O
steffen_type	struct
;	O
