__ptr_t	O
(	O
*	O
__memalign_hook	pointer
)	O
__P	O
(	O
(	O
size_t	long
__size	long
,	O
size_t	long
__alignment	long
)	O
)	O
;	O
__ptr_t	O
memalign	function
(	O
alignment	long
,	O
size	long
)	O
__malloc_size_t	O
alignment	long
;	O
__malloc_size_t	O
size	long
;	O
{	O
__ptr_t	O
result	pointer
;	O
unsigned	O
long	O
int	O
adj	long
,	O
lastadj	long
;	O
if	O
(	O
__memalign_hook	pointer
)	O
return	O
(	O
*	O
__memalign_hook	pointer
)	O
(	O
alignment	long
,	O
size	long
)	O
;	O
result	pointer
=	O
malloc	function
(	O
size	long
+	O
alignment	long
-	O
1	int
)	O
;	O
if	O
(	O
result	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
adj	long
=	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
char	O
*	O
)	O
result	pointer
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
%	O
alignment	long
;	O
do	O
{	O
free	function
(	O
result	pointer
)	O
;	O
result	pointer
=	O
malloc	function
(	O
adj	long
+	O
size	long
)	O
;	O
if	O
(	O
result	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
lastadj	long
=	O
adj	long
;	O
adj	long
=	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
char	O
*	O
)	O
result	pointer
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
%	O
alignment	long
;	O
}	O
while	O
(	O
adj	long
>	O
lastadj	long
)	O
;	O
if	O
(	O
adj	long
!=	O
0	int
)	O
{	O
struct	O
alignlist	struct
*	O
l	pointer
;	O
for	O
(	O
l	pointer
=	O
_aligned_blocks	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	long
)	O
if	O
(	O
l	pointer
->	O
aligned	pointer
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
l	pointer
==	O
NULL	O
)	O
{	O
l	pointer
=	O
(	O
struct	O
alignlist	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
alignlist	struct
)	O
)	O
;	O
if	O
(	O
l	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
result	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
l	pointer
->	O
next	long
=	O
_aligned_blocks	pointer
;	O
_aligned_blocks	pointer
=	O
l	pointer
;	O
}	O
l	pointer
->	O
exact	pointer
=	O
result	pointer
;	O
result	pointer
=	O
l	pointer
->	O
aligned	pointer
=	O
(	O
char	O
*	O
)	O
result	pointer
+	O
alignment	long
-	O
adj	long
;	O
}	O
return	O
result	pointer
;	O
}	O
