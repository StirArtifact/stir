enum	O
eoh_state	enum
{	O
eoh_no	int
,	O
eoh_maybe	int
,	O
eoh_yes	int
}	O
;	O
static	O
enum	O
eoh_state	enum
string_find_eoh	function
(	O
enum	O
eoh_state	enum
eoh	enum
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
ppos	pointer
)	O
{	O
size_t	long
pos	long
;	O
if	O
(	O
eoh	enum
==	O
eoh_maybe	int
&&	O
*	O
str	pointer
==	O
'\n'	O
)	O
{	O
*	O
ppos	pointer
=	O
0	int
;	O
return	O
eoh_yes	int
;	O
}	O
for	O
(	O
pos	long
=	O
0	int
;	O
pos	long
<	O
len	long
-	O
1	int
;	O
pos	long
++	O
)	O
if	O
(	O
str	pointer
[	O
pos	long
]	O
==	O
'\n'	O
&&	O
str	pointer
[	O
pos	long
+	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
*	O
ppos	pointer
=	O
pos	long
+	O
1	int
;	O
return	O
eoh_yes	int
;	O
}	O
*	O
ppos	pointer
=	O
pos	long
+	O
1	int
;	O
return	O
str	pointer
[	O
pos	long
]	O
==	O
'\n'	O
?	O
eoh_maybe	int
:	O
eoh_no	int
;	O
}	O
static	O
int	O
_header_fill	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
char	O
inbuf	array
[	O
MIN_HEADER_BUF_SIZE	int
]	O
;	O
size_t	long
nread	long
;	O
enum	O
eoh_state	enum
eoh	enum
=	O
eoh_no	int
;	O
status	int
=	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
while	O
(	O
eoh	enum
!=	O
eoh_yes	int
&&	O
(	O
status	int
=	O
mu_stream_read	function
(	O
stream	pointer
,	O
inbuf	array
,	O
sizeof	O
(	O
inbuf	array
)	O
,	O
&	O
nread	long
)	O
)	O
==	O
0	int
&&	O
nread	long
)	O
{	O
char	O
*	O
nbuf	pointer
;	O
size_t	long
len	long
;	O
eoh	enum
=	O
string_find_eoh	function
(	O
eoh	enum
,	O
inbuf	array
,	O
nread	long
,	O
&	O
len	long
)	O
;	O
nbuf	pointer
=	O
realloc	function
(	O
buffer	pointer
,	O
bufsize	long
+	O
len	long
)	O
;	O
if	O
(	O
!	O
nbuf	pointer
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
memcpy	function
(	O
nbuf	pointer
+	O
bufsize	long
,	O
inbuf	array
,	O
len	long
)	O
;	O
buffer	pointer
=	O
nbuf	pointer
;	O
bufsize	long
+=	O
len	long
;	O
}	O
if	O
(	O
status	int
)	O
free	function
(	O
buffer	pointer
)	O
;	O
else	O
{	O
*	O
pbuf	pointer
=	O
buffer	pointer
;	O
*	O
plen	pointer
=	O
bufsize	long
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
message_header_fill	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
data	pointer
;	O
return	O
_header_fill	function
(	O
msg	pointer
->	O
rawstream	pointer
,	O
pbuf	pointer
,	O
plen	pointer
)	O
;	O
}	O
int	O
mu_message_get_header	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_header_t	pointer
*	O
phdr	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
phdr	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	pointer
->	O
header	pointer
==	O
NULL	O
)	O
{	O
mu_header_t	pointer
header	pointer
;	O
int	O
status	int
=	O
mu_header_create	function
(	O
&	O
header	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
if	O
(	O
msg	pointer
->	O
rawstream	pointer
)	O
mu_header_set_fill	function
(	O
header	pointer
,	O
message_header_fill	function
,	O
msg	pointer
)	O
;	O
status	int
=	O
mu_header_size	function
(	O
header	pointer
,	O
&	O
msg	pointer
->	O
orig_header_size	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
msg	pointer
->	O
header	pointer
=	O
header	pointer
;	O
}	O
*	O
phdr	pointer
=	O
msg	pointer
->	O
header	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_set_header	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_header_t	pointer
hdr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
if	O
(	O
msg	pointer
->	O
header	pointer
)	O
mu_header_destroy	function
(	O
&	O
msg	pointer
->	O
header	pointer
)	O
;	O
msg	pointer
->	O
header	pointer
=	O
hdr	pointer
;	O
msg	pointer
->	O
flags	int
|=	O
MESSAGE_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
