local	O
int	O
gz_init	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
int	O
gz_comp	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
int	O
)	O
)	O
;	O
local	O
int	O
gz_zero	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
z_off64_t	O
)	O
)	O
;	O
local	O
z_size_t	long
gz_write	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
voidpc	pointer
,	O
z_size_t	long
)	O
)	O
;	O
local	O
int	O
gz_init	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
int	O
ret	int
;	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
state	pointer
->	O
in	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
state	pointer
->	O
want	int
<<	O
1	int
)	O
;	O
if	O
(	O
state	pointer
->	O
in	pointer
==	O
NULL	O
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
state	pointer
->	O
direct	int
)	O
{	O
state	pointer
->	O
out	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
state	pointer
->	O
want	int
)	O
;	O
if	O
(	O
state	pointer
->	O
out	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strm	pointer
->	O
zalloc	pointer
=	O
Z_NULL	int
;	O
strm	pointer
->	O
zfree	pointer
=	O
Z_NULL	int
;	O
strm	pointer
->	O
opaque	pointer
=	O
Z_NULL	int
;	O
ret	int
=	O
deflateInit2	O
(	O
strm	pointer
,	O
state	pointer
->	O
level	int
,	O
Z_DEFLATED	int
,	O
MAX_WBITS	int
+	O
16	int
,	O
DEF_MEM_LEVEL	int
,	O
state	pointer
->	O
strategy	int
)	O
;	O
if	O
(	O
ret	int
!=	O
Z_OK	int
)	O
{	O
free	function
(	O
state	pointer
->	O
out	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strm	pointer
->	O
next_in	pointer
=	O
NULL	O
;	O
}	O
state	pointer
->	O
size	int
=	O
state	pointer
->	O
want	int
;	O
if	O
(	O
!	O
state	pointer
->	O
direct	int
)	O
{	O
strm	pointer
->	O
avail_out	int
=	O
state	pointer
->	O
size	int
;	O
strm	pointer
->	O
next_out	pointer
=	O
state	pointer
->	O
out	pointer
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
strm	pointer
->	O
next_out	pointer
;	O
}	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_comp	function
(	O
state	pointer
,	O
flush	int
)	O
gz_statep	pointer
state	pointer
;	O
int	O
flush	int
;	O
{	O
int	O
ret	int
,	O
writ	int
;	O
unsigned	O
have	int
,	O
put	int
,	O
max	int
=	O
(	O
(	O
unsigned	O
)	O
-	O
1	int
>>	O
2	int
)	O
+	O
1	int
;	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
size	int
==	O
0	int
&&	O
gz_init	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
direct	int
)	O
{	O
while	O
(	O
strm	pointer
->	O
avail_in	int
)	O
{	O
put	int
=	O
strm	pointer
->	O
avail_in	int
>	O
max	int
?	O
max	int
:	O
strm	pointer
->	O
avail_in	int
;	O
writ	int
=	O
write	function
(	O
state	pointer
->	O
fd	int
,	O
strm	pointer
->	O
next_in	pointer
,	O
put	int
)	O
;	O
if	O
(	O
writ	int
<	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_ERRNO	O
,	O
zstrerror	O
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strm	pointer
->	O
avail_in	int
-=	O
(	O
unsigned	O
)	O
writ	int
;	O
strm	pointer
->	O
next_in	pointer
+=	O
writ	int
;	O
}	O
return	O
0	int
;	O
}	O
ret	int
=	O
Z_OK	int
;	O
do	O
{	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
||	O
(	O
flush	int
!=	O
Z_NO_FLUSH	int
&&	O
(	O
flush	int
!=	O
Z_FINISH	int
||	O
ret	int
==	O
Z_STREAM_END	int
)	O
)	O
)	O
{	O
while	O
(	O
strm	pointer
->	O
next_out	pointer
>	O
state	pointer
->	O
x	struct
.	O
next	pointer
)	O
{	O
put	int
=	O
strm	pointer
->	O
next_out	pointer
-	O
state	pointer
->	O
x	struct
.	O
next	pointer
>	O
(	O
int	O
)	O
max	int
?	O
max	int
:	O
(	O
unsigned	O
)	O
(	O
strm	pointer
->	O
next_out	pointer
-	O
state	pointer
->	O
x	struct
.	O
next	pointer
)	O
;	O
writ	int
=	O
write	function
(	O
state	pointer
->	O
fd	int
,	O
state	pointer
->	O
x	struct
.	O
next	pointer
,	O
put	int
)	O
;	O
if	O
(	O
writ	int
<	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_ERRNO	O
,	O
zstrerror	O
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
state	pointer
->	O
x	struct
.	O
next	pointer
+=	O
writ	int
;	O
}	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
{	O
strm	pointer
->	O
avail_out	int
=	O
state	pointer
->	O
size	int
;	O
strm	pointer
->	O
next_out	pointer
=	O
state	pointer
->	O
out	pointer
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
state	pointer
->	O
out	pointer
;	O
}	O
}	O
have	int
=	O
strm	pointer
->	O
avail_out	int
;	O
ret	int
=	O
deflate	function
(	O
strm	pointer
,	O
flush	int
)	O
;	O
if	O
(	O
ret	int
==	O
Z_STREAM_ERROR	O
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_STREAM_ERROR	O
,	O
"internal error: deflate stream corrupt"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
have	int
-=	O
strm	pointer
->	O
avail_out	int
;	O
}	O
while	O
(	O
have	int
)	O
;	O
if	O
(	O
flush	int
==	O
Z_FINISH	int
)	O
deflateReset	function
(	O
strm	pointer
)	O
;	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_zero	function
(	O
state	pointer
,	O
len	int
)	O
gz_statep	pointer
state	pointer
;	O
z_off64_t	O
len	int
;	O
{	O
int	O
first	int
;	O
unsigned	O
n	int
;	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
strm	pointer
->	O
avail_in	int
&&	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
first	int
=	O
1	int
;	O
while	O
(	O
len	int
)	O
{	O
n	int
=	O
GT_OFF	O
(	O
state	pointer
->	O
size	int
)	O
||	O
(	O
z_off64_t	O
)	O
state	pointer
->	O
size	int
>	O
len	int
?	O
(	O
unsigned	O
)	O
len	int
:	O
state	pointer
->	O
size	int
;	O
if	O
(	O
first	int
)	O
{	O
memset	function
(	O
state	pointer
->	O
in	pointer
,	O
0	int
,	O
n	int
)	O
;	O
first	int
=	O
0	int
;	O
}	O
strm	pointer
->	O
avail_in	int
=	O
n	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
if	O
(	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
len	int
-=	O
n	int
;	O
}	O
return	O
0	int
;	O
}	O
local	O
z_size_t	long
gz_write	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
gz_statep	pointer
state	pointer
;	O
voidpc	pointer
buf	pointer
;	O
z_size_t	long
len	int
;	O
{	O
z_size_t	long
put	int
=	O
len	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
state	pointer
->	O
size	int
==	O
0	int
&&	O
gz_init	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
}	O
if	O
(	O
len	int
<	O
state	pointer
->	O
size	int
)	O
{	O
do	O
{	O
unsigned	O
have	int
,	O
copy	int
;	O
if	O
(	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
==	O
0	int
)	O
state	pointer
->	O
strm	pointer
.	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
have	int
=	O
(	O
unsigned	O
)	O
(	O
(	O
state	pointer
->	O
strm	pointer
.	O
next_in	pointer
+	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
)	O
-	O
state	pointer
->	O
in	pointer
)	O
;	O
copy	int
=	O
state	pointer
->	O
size	int
-	O
have	int
;	O
if	O
(	O
copy	int
>	O
len	int
)	O
copy	int
=	O
len	int
;	O
memcpy	function
(	O
state	pointer
->	O
in	pointer
+	O
have	int
,	O
buf	pointer
,	O
copy	int
)	O
;	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
+=	O
copy	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
copy	int
;	O
buf	pointer
=	O
(	O
const	O
char	O
*	O
)	O
buf	pointer
+	O
copy	int
;	O
len	int
-=	O
copy	int
;	O
if	O
(	O
len	int
&&	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
}	O
while	O
(	O
len	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
&&	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
state	pointer
->	O
strm	pointer
.	O
next_in	pointer
=	O
(	O
z_const	O
Bytef	char
*	O
)	O
buf	pointer
;	O
do	O
{	O
unsigned	O
n	int
=	O
(	O
unsigned	O
)	O
-	O
1	int
;	O
if	O
(	O
n	int
>	O
len	int
)	O
n	int
=	O
len	int
;	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
if	O
(	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
len	int
-=	O
n	int
;	O
}	O
while	O
(	O
len	int
)	O
;	O
}	O
return	O
put	int
;	O
}	O
int	O
ZEXPORT	O
gzwrite	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
voidpc	pointer
buf	pointer
;	O
unsigned	O
len	int
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
0	int
;	O
if	O
(	O
(	O
int	O
)	O
len	int
<	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_DATA_ERROR	O
,	O
"requested length does not fit in int"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
(	O
int	O
)	O
gz_write	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
z_size_t	long
ZEXPORT	O
gzfwrite	function
(	O
buf	pointer
,	O
size	int
,	O
nitems	long
,	O
file	pointer
)	O
voidpc	pointer
buf	pointer
;	O
z_size_t	long
size	int
;	O
z_size_t	long
nitems	long
;	O
gzFile	pointer
file	pointer
;	O
{	O
z_size_t	long
len	int
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
0	int
;	O
len	int
=	O
nitems	long
*	O
size	int
;	O
if	O
(	O
size	int
&&	O
len	int
/	O
size	int
!=	O
nitems	long
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_STREAM_ERROR	O
,	O
"request does not fit in a size_t"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
len	int
?	O
gz_write	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
/	O
size	int
:	O
0	int
;	O
}	O
int	O
ZEXPORT	O
gzputc	function
(	O
file	pointer
,	O
c	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
c	int
;	O
{	O
unsigned	O
have	int
;	O
unsigned	O
char	O
buf	pointer
[	O
1	int
]	O
;	O
gz_statep	pointer
state	pointer
;	O
z_streamp	pointer
strm	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
state	pointer
->	O
size	int
)	O
{	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
)	O
strm	pointer
->	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
have	int
=	O
(	O
unsigned	O
)	O
(	O
(	O
strm	pointer
->	O
next_in	pointer
+	O
strm	pointer
->	O
avail_in	int
)	O
-	O
state	pointer
->	O
in	pointer
)	O
;	O
if	O
(	O
have	int
<	O
state	pointer
->	O
size	int
)	O
{	O
state	pointer
->	O
in	pointer
[	O
have	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
strm	pointer
->	O
avail_in	int
++	O
;	O
state	pointer
->	O
x	struct
.	O
pos	long
++	O
;	O
return	O
c	int
&	O
0xff	int
;	O
}	O
}	O
buf	pointer
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
if	O
(	O
gz_write	function
(	O
state	pointer
,	O
buf	pointer
,	O
1	int
)	O
!=	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
c	int
&	O
0xff	int
;	O
}	O
int	O
ZEXPORT	O
gzputs	function
(	O
file	pointer
,	O
str	pointer
)	O
gzFile	pointer
file	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
{	O
int	O
ret	int
;	O
z_size_t	long
len	int
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
-	O
1	int
;	O
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
ret	int
=	O
gz_write	function
(	O
state	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
return	O
ret	int
==	O
0	int
&&	O
len	int
!=	O
0	int
?	O
-	O
1	int
:	O
ret	int
;	O
}	O
int	O
ZEXPORTVA	O
gzvprintf	function
(	O
gzFile	pointer
file	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
va_list	array
va	array
)	O
{	O
int	O
len	int
;	O
unsigned	O
left	int
;	O
char	O
*	O
next	pointer
;	O
gz_statep	pointer
state	pointer
;	O
z_streamp	pointer
strm	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	pointer
->	O
size	int
==	O
0	int
&&	O
gz_init	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
}	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
)	O
strm	pointer
->	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
next	pointer
=	O
(	O
char	O
*	O
)	O
(	O
state	pointer
->	O
in	pointer
+	O
(	O
strm	pointer
->	O
next_in	pointer
-	O
state	pointer
->	O
in	pointer
)	O
+	O
strm	pointer
->	O
avail_in	int
)	O
;	O
next	pointer
[	O
state	pointer
->	O
size	int
-	O
1	int
]	O
=	O
0	int
;	O
len	int
=	O
vsnprintf	function
(	O
next	pointer
,	O
state	pointer
->	O
size	int
,	O
format	pointer
,	O
va	array
)	O
;	O
if	O
(	O
len	int
==	O
0	int
||	O
(	O
unsigned	O
)	O
len	int
>=	O
state	pointer
->	O
size	int
||	O
next	pointer
[	O
state	pointer
->	O
size	int
-	O
1	int
]	O
!=	O
0	int
)	O
return	O
0	int
;	O
strm	pointer
->	O
avail_in	int
+=	O
(	O
unsigned	O
)	O
len	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
len	int
;	O
if	O
(	O
strm	pointer
->	O
avail_in	int
>=	O
state	pointer
->	O
size	int
)	O
{	O
left	int
=	O
strm	pointer
->	O
avail_in	int
-	O
state	pointer
->	O
size	int
;	O
strm	pointer
->	O
avail_in	int
=	O
state	pointer
->	O
size	int
;	O
if	O
(	O
gz_comp	function
(	O
state	pointer
,	O
Z_NO_FLUSH	int
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
memcpy	function
(	O
state	pointer
->	O
in	pointer
,	O
state	pointer
->	O
in	pointer
+	O
state	pointer
->	O
size	int
,	O
left	int
)	O
;	O
strm	pointer
->	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
strm	pointer
->	O
avail_in	int
=	O
left	int
;	O
}	O
return	O
len	int
;	O
}	O
int	O
ZEXPORTVA	O
gzprintf	function
(	O
gzFile	pointer
file	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
va	array
;	O
int	O
ret	int
;	O
va_start	O
(	O
va	array
,	O
format	pointer
)	O
;	O
ret	int
=	O
gzvprintf	function
(	O
file	pointer
,	O
format	pointer
,	O
va	array
)	O
;	O
va_end	O
(	O
va	array
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
ZEXPORT	O
gzflush	function
(	O
file	pointer
,	O
flush	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
flush	int
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
flush	int
<	O
0	int
||	O
flush	int
>	O
Z_FINISH	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
}	O
(	O
void	O
)	O
gz_comp	function
(	O
state	pointer
,	O
flush	int
)	O
;	O
return	O
state	pointer
->	O
err	int
;	O
}	O
int	O
ZEXPORT	O
gzsetparams	function
(	O
file	pointer
,	O
level	int
,	O
strategy	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
level	int
;	O
int	O
strategy	int
;	O
{	O
gz_statep	pointer
state	pointer
;	O
z_streamp	pointer
strm	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
||	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
level	int
==	O
state	pointer
->	O
level	int
&&	O
strategy	int
==	O
state	pointer
->	O
strategy	int
)	O
return	O
Z_OK	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
}	O
if	O
(	O
state	pointer
->	O
size	int
)	O
{	O
if	O
(	O
strm	pointer
->	O
avail_in	int
&&	O
gz_comp	function
(	O
state	pointer
,	O
Z_BLOCK	int
)	O
==	O
-	O
1	int
)	O
return	O
state	pointer
->	O
err	int
;	O
deflateParams	function
(	O
strm	pointer
,	O
level	int
,	O
strategy	int
)	O
;	O
}	O
state	pointer
->	O
level	int
=	O
level	int
;	O
state	pointer
->	O
strategy	int
=	O
strategy	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
gzclose_w	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
int	O
ret	int
=	O
Z_OK	int
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_WRITE	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_zero	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
ret	int
=	O
state	pointer
->	O
err	int
;	O
}	O
if	O
(	O
gz_comp	function
(	O
state	pointer
,	O
Z_FINISH	int
)	O
==	O
-	O
1	int
)	O
ret	int
=	O
state	pointer
->	O
err	int
;	O
if	O
(	O
state	pointer
->	O
size	int
)	O
{	O
if	O
(	O
!	O
state	pointer
->	O
direct	int
)	O
{	O
(	O
void	O
)	O
deflateEnd	function
(	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
)	O
;	O
free	function
(	O
state	pointer
->	O
out	pointer
)	O
;	O
}	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
}	O
gz_error	function
(	O
state	pointer
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
free	function
(	O
state	pointer
->	O
path	pointer
)	O
;	O
if	O
(	O
close	function
(	O
state	pointer
->	O
fd	int
)	O
==	O
-	O
1	int
)	O
ret	int
=	O
Z_ERRNO	O
;	O
free	function
(	O
state	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
