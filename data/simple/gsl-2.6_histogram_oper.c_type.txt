int	O
gsl_histogram_equal_bins_p	function
(	O
const	O
gsl_histogram	struct
*	O
h1	pointer
,	O
const	O
gsl_histogram	struct
*	O
h2	pointer
)	O
{	O
if	O
(	O
h1	pointer
->	O
n	long
!=	O
h2	pointer
->	O
n	long
)	O
{	O
return	O
0	int
;	O
}	O
{	O
size_t	long
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<=	O
h1	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
h1	pointer
->	O
range	pointer
[	O
i	pointer
]	O
!=	O
h2	pointer
->	O
range	pointer
[	O
i	pointer
]	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
gsl_histogram_add	function
(	O
gsl_histogram	struct
*	O
h1	pointer
,	O
const	O
gsl_histogram	struct
*	O
h2	pointer
)	O
{	O
size_t	long
i	pointer
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	function
(	O
h1	pointer
,	O
h2	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h1	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h1	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
+=	O
h2	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_sub	function
(	O
gsl_histogram	struct
*	O
h1	pointer
,	O
const	O
gsl_histogram	struct
*	O
h2	pointer
)	O
{	O
size_t	long
i	pointer
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	function
(	O
h1	pointer
,	O
h2	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h1	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h1	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
-=	O
h2	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_mul	function
(	O
gsl_histogram	struct
*	O
h1	pointer
,	O
const	O
gsl_histogram	struct
*	O
h2	pointer
)	O
{	O
size_t	long
i	pointer
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	function
(	O
h1	pointer
,	O
h2	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h1	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h1	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
*=	O
h2	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_div	function
(	O
gsl_histogram	struct
*	O
h1	pointer
,	O
const	O
gsl_histogram	struct
*	O
h2	pointer
)	O
{	O
size_t	long
i	pointer
;	O
if	O
(	O
!	O
gsl_histogram_equal_bins_p	function
(	O
h1	pointer
,	O
h2	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"histograms have different binning"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h1	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h1	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
/=	O
h2	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_scale	function
(	O
gsl_histogram	struct
*	O
h	pointer
,	O
double	O
scale	double
)	O
{	O
size_t	long
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
*=	O
scale	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_histogram_shift	function
(	O
gsl_histogram	struct
*	O
h	pointer
,	O
double	O
shift	double
)	O
{	O
size_t	long
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
h	pointer
->	O
n	long
;	O
i	pointer
++	O
)	O
{	O
h	pointer
->	O
bin	pointer
[	O
i	pointer
]	O
+=	O
shift	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
