static	O
inline	O
void	O
ran_array	function
(	O
unsigned	O
long	O
int	O
aa	array
[	O
]	O
,	O
unsigned	O
int	O
n	long
,	O
unsigned	O
long	O
int	O
ran_x	array
[	O
]	O
)	O
;	O
static	O
inline	O
unsigned	O
long	O
int	O
ran_get	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
double	O
ran_get_double	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
void	O
ran_set	function
(	O
void	O
*	O
state	pointer
,	O
unsigned	O
long	O
int	O
s	long
)	O
;	O
typedef	O
struct	O
{	O
unsigned	O
int	O
i	int
;	O
unsigned	O
long	O
int	O
aa	array
[	O
BUFLEN	int
]	O
;	O
unsigned	O
long	O
int	O
ran_x	array
[	O
KK	int
]	O
;	O
}	O
ran_state_t	struct
;	O
static	O
inline	O
void	O
ran_array	function
(	O
unsigned	O
long	O
int	O
aa	array
[	O
]	O
,	O
unsigned	O
int	O
n	long
,	O
unsigned	O
long	O
int	O
ran_x	array
[	O
]	O
)	O
{	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
KK	int
;	O
j	int
++	O
)	O
aa	array
[	O
j	int
]	O
=	O
ran_x	array
[	O
j	int
]	O
;	O
for	O
(	O
;	O
j	int
<	O
n	long
;	O
j	int
++	O
)	O
aa	array
[	O
j	int
]	O
=	O
mod_diff	O
(	O
aa	array
[	O
j	int
-	O
KK	int
]	O
,	O
aa	array
[	O
j	int
-	O
LL	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
LL	int
;	O
i	int
++	O
,	O
j	int
++	O
)	O
ran_x	array
[	O
i	int
]	O
=	O
mod_diff	O
(	O
aa	array
[	O
j	int
-	O
KK	int
]	O
,	O
aa	array
[	O
j	int
-	O
LL	int
]	O
)	O
;	O
for	O
(	O
;	O
i	int
<	O
KK	int
;	O
i	int
++	O
,	O
j	int
++	O
)	O
ran_x	array
[	O
i	int
]	O
=	O
mod_diff	O
(	O
aa	array
[	O
j	int
-	O
KK	int
]	O
,	O
ran_x	array
[	O
i	int
-	O
LL	int
]	O
)	O
;	O
}	O
static	O
inline	O
unsigned	O
long	O
int	O
ran_get	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
ran_state_t	struct
*	O
state	pointer
=	O
(	O
ran_state_t	struct
*	O
)	O
vstate	pointer
;	O
unsigned	O
int	O
i	int
=	O
state	pointer
->	O
i	int
;	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
ran_array	function
(	O
state	pointer
->	O
aa	array
,	O
BUFLEN	int
,	O
state	pointer
->	O
ran_x	array
)	O
;	O
}	O
state	pointer
->	O
i	int
=	O
(	O
i	int
+	O
1	int
)	O
%	O
BUFLEN	int
;	O
return	O
state	pointer
->	O
aa	array
[	O
i	int
]	O
;	O
}	O
static	O
double	O
ran_get_double	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
ran_state_t	struct
*	O
state	pointer
=	O
(	O
ran_state_t	struct
*	O
)	O
vstate	pointer
;	O
return	O
ran_get	function
(	O
state	pointer
)	O
/	O
1073741824.0	int
;	O
}	O
static	O
void	O
ran_set	function
(	O
void	O
*	O
vstate	pointer
,	O
unsigned	O
long	O
int	O
s	long
)	O
{	O
ran_state_t	struct
*	O
state	pointer
=	O
(	O
ran_state_t	struct
*	O
)	O
vstate	pointer
;	O
long	O
x	double
[	O
KK	int
+	O
KK	int
-	O
1	int
]	O
;	O
register	O
int	O
j	int
;	O
register	O
int	O
t	int
;	O
register	O
long	O
ss	long
=	O
evenize	O
(	O
s	long
+	O
2	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
KK	int
;	O
j	int
++	O
)	O
{	O
x	double
[	O
j	int
]	O
=	O
ss	long
;	O
ss	long
<<=	O
1	int
;	O
if	O
(	O
ss	long
>=	O
MM	O
)	O
ss	long
-=	O
MM	O
-	O
2	int
;	O
}	O
for	O
(	O
;	O
j	int
<	O
KK	int
+	O
KK	int
-	O
1	int
;	O
j	int
++	O
)	O
x	double
[	O
j	int
]	O
=	O
0	int
;	O
x	double
[	O
1	int
]	O
++	O
;	O
ss	long
=	O
s	long
&	O
(	O
MM	O
-	O
1	int
)	O
;	O
t	int
=	O
TT	int
-	O
1	int
;	O
while	O
(	O
t	int
)	O
{	O
for	O
(	O
j	int
=	O
KK	int
-	O
1	int
;	O
j	int
>	O
0	int
;	O
j	int
--	O
)	O
x	double
[	O
j	int
+	O
j	int
]	O
=	O
x	double
[	O
j	int
]	O
;	O
for	O
(	O
j	int
=	O
KK	int
+	O
KK	int
-	O
2	int
;	O
j	int
>	O
KK	int
-	O
LL	int
;	O
j	int
-=	O
2	int
)	O
x	double
[	O
KK	int
+	O
KK	int
-	O
1	int
-	O
j	int
]	O
=	O
evenize	O
(	O
x	double
[	O
j	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
KK	int
+	O
KK	int
-	O
2	int
;	O
j	int
>=	O
KK	int
;	O
j	int
--	O
)	O
if	O
(	O
is_odd	O
(	O
x	double
[	O
j	int
]	O
)	O
)	O
{	O
x	double
[	O
j	int
-	O
(	O
KK	int
-	O
LL	int
)	O
]	O
=	O
mod_diff	O
(	O
x	double
[	O
j	int
-	O
(	O
KK	int
-	O
LL	int
)	O
]	O
,	O
x	double
[	O
j	int
]	O
)	O
;	O
x	double
[	O
j	int
-	O
KK	int
]	O
=	O
mod_diff	O
(	O
x	double
[	O
j	int
-	O
KK	int
]	O
,	O
x	double
[	O
j	int
]	O
)	O
;	O
}	O
if	O
(	O
is_odd	O
(	O
ss	long
)	O
)	O
{	O
for	O
(	O
j	int
=	O
KK	int
;	O
j	int
>	O
0	int
;	O
j	int
--	O
)	O
x	double
[	O
j	int
]	O
=	O
x	double
[	O
j	int
-	O
1	int
]	O
;	O
x	double
[	O
0	int
]	O
=	O
x	double
[	O
KK	int
]	O
;	O
if	O
(	O
is_odd	O
(	O
x	double
[	O
KK	int
]	O
)	O
)	O
x	double
[	O
LL	int
]	O
=	O
mod_diff	O
(	O
x	double
[	O
LL	int
]	O
,	O
x	double
[	O
KK	int
]	O
)	O
;	O
}	O
if	O
(	O
ss	long
)	O
ss	long
>>=	O
1	int
;	O
else	O
t	int
--	O
;	O
}	O
state	pointer
->	O
i	int
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
LL	int
;	O
j	int
++	O
)	O
state	pointer
->	O
ran_x	array
[	O
j	int
+	O
KK	int
-	O
LL	int
]	O
=	O
x	double
[	O
j	int
]	O
;	O
for	O
(	O
;	O
j	int
<	O
KK	int
;	O
j	int
++	O
)	O
state	pointer
->	O
ran_x	array
[	O
j	int
-	O
LL	int
]	O
=	O
x	double
[	O
j	int
]	O
;	O
return	O
;	O
}	O
static	O
const	O
gsl_rng_type	struct
ran_type	struct
=	O
{	O
"knuthran"	pointer
,	O
0x3fffffffUL	int
,	O
0	int
,	O
sizeof	O
(	O
ran_state_t	struct
)	O
,	O
&	O
ran_set	function
,	O
&	O
ran_get	function
,	O
&	O
ran_get_double	function
}	O
;	O
const	O
gsl_rng_type	struct
*	O
gsl_rng_knuthran	pointer
=	O
&	O
ran_type	struct
;	O
