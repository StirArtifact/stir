int	O
quiet_flag	int
=	O
0	int
;	O
void	O
*	O
xalloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
p	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Virtual memory exhausted.\n"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
return	O
p	pointer
;	O
}	O
void	O
werror	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
if	O
(	O
!	O
quiet_flag	int
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
}	O
size_t	long
read_file	function
(	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
max_size	long
,	O
uint8_t	char
*	O
*	O
contents	pointer
)	O
{	O
size_t	long
size	long
,	O
done	long
;	O
uint8_t	char
*	O
buffer	pointer
;	O
FILE	struct
*	O
f	pointer
;	O
f	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
!	O
f	pointer
)	O
{	O
werror	function
(	O
"Opening `%s' failed: %s\n"	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
size	long
=	O
100	int
;	O
for	O
(	O
buffer	pointer
=	O
NULL	O
,	O
done	long
=	O
0	int
;	O
;	O
size	long
*=	O
2	int
)	O
{	O
uint8_t	char
*	O
p	pointer
;	O
if	O
(	O
max_size	long
&&	O
size	long
>	O
max_size	long
)	O
size	long
=	O
max_size	long
;	O
p	pointer
=	O
realloc	function
(	O
buffer	pointer
,	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
fail	O
:	O
fclose	function
(	O
f	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
*	O
contents	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
buffer	pointer
=	O
p	pointer
;	O
done	long
+=	O
fread	function
(	O
buffer	pointer
+	O
done	long
,	O
1	int
,	O
size	long
-	O
done	long
,	O
f	pointer
)	O
;	O
if	O
(	O
done	long
<	O
size	long
)	O
{	O
if	O
(	O
ferror	function
(	O
f	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Reading `%s' failed: %s\n"	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
done	long
==	O
0	int
)	O
goto	O
fail	O
;	O
break	O
;	O
}	O
if	O
(	O
size	long
==	O
max_size	long
)	O
break	O
;	O
}	O
fclose	function
(	O
f	pointer
)	O
;	O
buffer	pointer
[	O
done	long
]	O
=	O
'\0'	O
;	O
*	O
contents	pointer
=	O
buffer	pointer
;	O
return	O
done	long
;	O
}	O
int	O
write_data	function
(	O
FILE	struct
*	O
f	pointer
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
buffer	pointer
)	O
{	O
size_t	long
res	long
=	O
fwrite	function
(	O
buffer	pointer
,	O
1	int
,	O
size	long
,	O
f	pointer
)	O
;	O
return	O
res	long
==	O
size	long
;	O
}	O
int	O
write_file	function
(	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
size	long
,	O
const	O
void	O
*	O
buffer	pointer
)	O
{	O
FILE	struct
*	O
f	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"wb"	pointer
)	O
;	O
int	O
res	long
;	O
if	O
(	O
!	O
f	pointer
)	O
return	O
0	int
;	O
res	long
=	O
write_data	function
(	O
f	pointer
,	O
size	long
,	O
buffer	pointer
)	O
;	O
return	O
fclose	function
(	O
f	pointer
)	O
==	O
0	int
&&	O
res	long
;	O
}	O
int	O
simple_random	function
(	O
struct	O
yarrow256_ctx	struct
*	O
ctx	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
unsigned	O
length	long
;	O
uint8_t	char
*	O
buffer	pointer
;	O
if	O
(	O
name	pointer
)	O
length	long
=	O
read_file	function
(	O
name	pointer
,	O
0	int
,	O
&	O
buffer	pointer
)	O
;	O
else	O
length	long
=	O
read_file	function
(	O
RANDOM_DEVICE	pointer
,	O
20	int
,	O
&	O
buffer	pointer
)	O
;	O
if	O
(	O
!	O
length	long
)	O
return	O
0	int
;	O
yarrow256_seed	O
(	O
ctx	pointer
,	O
length	long
,	O
buffer	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
hash_file	function
(	O
const	O
struct	O
nettle_hash	struct
*	O
hash	pointer
,	O
void	O
*	O
ctx	pointer
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
uint8_t	char
buffer	pointer
[	O
BUFSIZE	int
]	O
;	O
size_t	long
res	long
=	O
fread	function
(	O
buffer	pointer
,	O
1	int
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
f	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
f	pointer
)	O
)	O
return	O
0	int
;	O
hash	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
res	long
,	O
buffer	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
f	pointer
)	O
)	O
return	O
1	int
;	O
}	O
}	O
