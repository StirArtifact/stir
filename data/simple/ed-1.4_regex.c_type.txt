static	O
regex_t	struct
*	O
global_pat	pointer
=	O
0	int
;	O
static	O
char	O
patlock	char
=	O
0	int
;	O
static	O
char	O
*	O
stbuf	pointer
=	O
0	int
;	O
static	O
int	O
stbufsz	int
=	O
0	int
;	O
static	O
int	O
stlen	int
=	O
0	int
;	O
static	O
char	O
*	O
rbuf	pointer
=	O
0	int
;	O
static	O
int	O
rbufsz	int
=	O
0	int
;	O
char	O
prev_pattern	function
(	O
void	O
)	O
{	O
return	O
global_pat	pointer
!=	O
0	int
;	O
}	O
static	O
void	O
translit_text	function
(	O
char	O
*	O
s	pointer
,	O
int	O
len	int
,	O
char	O
from	int
,	O
char	O
to	int
)	O
{	O
char	O
*	O
p	pointer
=	O
s	pointer
;	O
while	O
(	O
--	O
len	int
>	O
0	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
from	int
)	O
*	O
p	pointer
=	O
to	int
;	O
++	O
p	pointer
;	O
}	O
}	O
static	O
void	O
newline_to_nul	function
(	O
char	O
*	O
s	pointer
,	O
int	O
len	int
)	O
{	O
translit_text	function
(	O
s	pointer
,	O
len	int
,	O
'\n'	O
,	O
'\0'	O
)	O
;	O
}	O
static	O
void	O
nul_to_newline	function
(	O
char	O
*	O
s	pointer
,	O
int	O
len	int
)	O
{	O
translit_text	function
(	O
s	pointer
,	O
len	int
,	O
'\0'	O
,	O
'\n'	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
parse_char_class	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
c	char
,	O
d	char
;	O
if	O
(	O
*	O
s	pointer
==	O
'^'	O
)	O
++	O
s	pointer
;	O
if	O
(	O
*	O
s	pointer
==	O
']'	O
)	O
++	O
s	pointer
;	O
for	O
(	O
;	O
*	O
s	pointer
!=	O
']'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
;	O
++	O
s	pointer
)	O
if	O
(	O
*	O
s	pointer
==	O
'['	O
&&	O
(	O
(	O
d	char
=	O
s	pointer
[	O
1	int
]	O
)	O
==	O
'.'	O
||	O
d	char
==	O
':'	O
||	O
d	char
==	O
'='	O
)	O
)	O
for	O
(	O
++	O
s	pointer
,	O
c	char
=	O
*	O
++	O
s	pointer
;	O
*	O
s	pointer
!=	O
']'	O
||	O
c	char
!=	O
d	char
;	O
++	O
s	pointer
)	O
if	O
(	O
(	O
c	char
=	O
*	O
s	pointer
)	O
==	O
'\n'	O
)	O
return	O
0	int
;	O
return	O
(	O
(	O
*	O
s	pointer
==	O
']'	O
)	O
?	O
s	pointer
:	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
extract_pattern	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
,	O
const	O
int	O
delimiter	int
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
const	O
char	O
*	O
nd	pointer
=	O
*	O
ibufpp	pointer
;	O
int	O
len	int
;	O
while	O
(	O
*	O
nd	pointer
!=	O
delimiter	int
&&	O
*	O
nd	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
*	O
nd	pointer
==	O
'['	O
)	O
{	O
nd	pointer
=	O
parse_char_class	function
(	O
++	O
nd	pointer
)	O
;	O
if	O
(	O
!	O
nd	pointer
)	O
{	O
set_error_msg	function
(	O
"Unbalanced brackets ([])"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
nd	pointer
==	O
'\\'	O
&&	O
*	O
++	O
nd	pointer
==	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Trailing backslash (\\)"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
++	O
nd	pointer
;	O
}	O
len	int
=	O
nd	pointer
-	O
*	O
ibufpp	pointer
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
,	O
*	O
ibufpp	pointer
,	O
len	int
)	O
;	O
buf	pointer
[	O
len	int
]	O
=	O
0	int
;	O
*	O
ibufpp	pointer
=	O
nd	pointer
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
nul_to_newline	function
(	O
buf	pointer
,	O
len	int
)	O
;	O
return	O
buf	pointer
;	O
}	O
static	O
regex_t	struct
*	O
get_compiled_pattern	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
)	O
{	O
static	O
regex_t	struct
*	O
exp	pointer
=	O
0	int
;	O
char	O
*	O
exps	pointer
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	pointer
;	O
int	O
n	int
;	O
if	O
(	O
delimiter	int
==	O
' '	O
)	O
{	O
set_error_msg	function
(	O
"Invalid pattern delimiter"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
delimiter	int
==	O
'\n'	O
||	O
*	O
++	O
(	O
*	O
ibufpp	pointer
)	O
==	O
'\n'	O
||	O
*	O
*	O
ibufpp	pointer
==	O
delimiter	int
)	O
{	O
if	O
(	O
!	O
exp	pointer
)	O
set_error_msg	function
(	O
"No previous pattern"	pointer
)	O
;	O
return	O
exp	pointer
;	O
}	O
if	O
(	O
!	O
(	O
exps	pointer
=	O
extract_pattern	function
(	O
ibufpp	pointer
,	O
delimiter	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
exp	pointer
&&	O
!	O
patlock	char
)	O
regfree	function
(	O
exp	pointer
)	O
;	O
else	O
if	O
(	O
!	O
(	O
exp	pointer
=	O
(	O
regex_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
regex_t	struct
)	O
)	O
)	O
)	O
{	O
show_strerror	function
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	function
(	O
"Memory exhausted"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
patlock	char
=	O
0	int
;	O
n	int
=	O
regcomp	function
(	O
exp	pointer
,	O
exps	pointer
,	O
0	int
)	O
;	O
if	O
(	O
n	int
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
regerror	function
(	O
n	int
,	O
exp	pointer
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
set_error_msg	function
(	O
buf	pointer
)	O
;	O
free	function
(	O
exp	pointer
)	O
;	O
exp	pointer
=	O
0	int
;	O
}	O
return	O
exp	pointer
;	O
}	O
char	O
build_active_list	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
,	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
char	O
match	char
)	O
{	O
regex_t	struct
*	O
pat	pointer
;	O
line_t	struct
*	O
lp	pointer
;	O
int	O
addr	int
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	pointer
;	O
if	O
(	O
delimiter	int
==	O
' '	O
||	O
delimiter	int
==	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Invalid pattern delimiter"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
(	O
pat	pointer
=	O
get_compiled_pattern	function
(	O
ibufpp	pointer
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
*	O
ibufpp	pointer
==	O
delimiter	int
)	O
++	O
(	O
*	O
ibufpp	pointer
)	O
;	O
clear_active_list	function
(	O
)	O
;	O
lp	pointer
=	O
search_line_node	function
(	O
first_addr	int
)	O
;	O
for	O
(	O
addr	int
=	O
first_addr	int
;	O
addr	int
<=	O
second_addr	int
;	O
++	O
addr	int
,	O
lp	pointer
=	O
lp	pointer
->	O
q_forw	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
get_sbuf_line	function
(	O
lp	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
0	int
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
nul_to_newline	function
(	O
s	pointer
,	O
lp	pointer
->	O
len	int
)	O
;	O
if	O
(	O
!	O
regexec	function
(	O
pat	pointer
,	O
s	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
==	O
match	char
&&	O
!	O
set_active_node	function
(	O
lp	pointer
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
*	O
extract_subst_template	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
i	pointer
=	O
0	int
,	O
n	int
=	O
0	int
;	O
char	O
c	char
;	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	pointer
;	O
++	O
(	O
*	O
ibufpp	pointer
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	pointer
==	O
'%'	O
&&	O
(	O
*	O
ibufpp	pointer
)	O
[	O
1	int
]	O
==	O
delimiter	int
)	O
{	O
++	O
(	O
*	O
ibufpp	pointer
)	O
;	O
if	O
(	O
!	O
stbuf	pointer
)	O
set_error_msg	function
(	O
"No previous substitution"	pointer
)	O
;	O
return	O
stbuf	pointer
;	O
}	O
while	O
(	O
*	O
*	O
ibufpp	pointer
!=	O
delimiter	int
)	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
stbuf	pointer
,	O
&	O
stbufsz	int
,	O
i	pointer
+	O
2	int
)	O
)	O
return	O
0	int
;	O
c	char
=	O
stbuf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
(	O
*	O
ibufpp	pointer
)	O
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
&&	O
*	O
*	O
ibufpp	pointer
==	O
0	int
)	O
{	O
--	O
i	pointer
,	O
--	O
(	O
*	O
ibufpp	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
'\\'	O
&&	O
(	O
stbuf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
(	O
*	O
ibufpp	pointer
)	O
++	O
)	O
==	O
'\n'	O
&&	O
!	O
isglobal	char
)	O
{	O
while	O
(	O
(	O
*	O
ibufpp	pointer
=	O
get_tty_line	function
(	O
&	O
n	int
)	O
)	O
&&	O
(	O
n	int
==	O
0	int
||	O
(	O
n	int
>	O
0	int
&&	O
(	O
*	O
ibufpp	pointer
)	O
[	O
n	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
)	O
)	O
clearerr	function
(	O
stdin	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
ibufpp	pointer
)	O
)	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
stbuf	pointer
,	O
&	O
stbufsz	int
,	O
i	pointer
+	O
1	int
)	O
)	O
return	O
0	int
;	O
stbuf	pointer
[	O
stlen	int
=	O
i	pointer
]	O
=	O
0	int
;	O
return	O
stbuf	pointer
;	O
}	O
char	O
extract_subst_tail	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
,	O
int	O
*	O
gflagsp	pointer
,	O
int	O
*	O
snump	pointer
,	O
const	O
char	O
isglobal	char
)	O
{	O
const	O
char	O
delimiter	int
=	O
*	O
*	O
ibufpp	pointer
;	O
*	O
gflagsp	pointer
=	O
*	O
snump	pointer
=	O
0	int
;	O
if	O
(	O
delimiter	int
==	O
'\n'	O
)	O
{	O
stlen	int
=	O
0	int
;	O
*	O
gflagsp	pointer
=	O
GPR	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
extract_subst_template	function
(	O
ibufpp	pointer
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
*	O
ibufpp	pointer
==	O
'\n'	O
)	O
{	O
*	O
gflagsp	pointer
=	O
GPR	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
*	O
ibufpp	pointer
==	O
delimiter	int
)	O
++	O
(	O
*	O
ibufpp	pointer
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	pointer
>=	O
'1'	O
&&	O
*	O
*	O
ibufpp	pointer
<=	O
'9'	O
)	O
return	O
parse_int	function
(	O
snump	pointer
,	O
*	O
ibufpp	pointer
,	O
ibufpp	pointer
)	O
;	O
if	O
(	O
*	O
*	O
ibufpp	pointer
==	O
'g'	O
)	O
{	O
++	O
(	O
*	O
ibufpp	pointer
)	O
;	O
*	O
gflagsp	pointer
=	O
GSG	int
;	O
return	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
get_matching_node_addr	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
,	O
const	O
char	O
forward	char
)	O
{	O
regex_t	struct
*	O
pat	pointer
=	O
get_compiled_pattern	function
(	O
ibufpp	pointer
)	O
;	O
int	O
addr	int
=	O
current_addr	function
(	O
)	O
;	O
if	O
(	O
!	O
pat	pointer
)	O
return	O
-	O
1	int
;	O
do	O
{	O
addr	int
=	O
(	O
forward	char
?	O
inc_addr	function
(	O
addr	int
)	O
:	O
dec_addr	function
(	O
addr	int
)	O
)	O
;	O
if	O
(	O
addr	int
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
search_line_node	function
(	O
addr	int
)	O
;	O
char	O
*	O
s	pointer
=	O
get_sbuf_line	function
(	O
lp	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
nul_to_newline	function
(	O
s	pointer
,	O
lp	pointer
->	O
len	int
)	O
;	O
if	O
(	O
!	O
regexec	function
(	O
pat	pointer
,	O
s	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
return	O
addr	int
;	O
}	O
}	O
while	O
(	O
addr	int
!=	O
current_addr	function
(	O
)	O
)	O
;	O
set_error_msg	function
(	O
"No match"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
char	O
new_compiled_pattern	function
(	O
const	O
char	O
*	O
*	O
ibufpp	pointer
)	O
{	O
regex_t	struct
*	O
tpat	pointer
=	O
global_pat	pointer
;	O
disable_interrupts	function
(	O
)	O
;	O
tpat	pointer
=	O
get_compiled_pattern	function
(	O
ibufpp	pointer
)	O
;	O
if	O
(	O
!	O
tpat	pointer
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
tpat	pointer
!=	O
global_pat	pointer
)	O
{	O
if	O
(	O
global_pat	pointer
)	O
{	O
regfree	function
(	O
global_pat	pointer
)	O
;	O
free	function
(	O
global_pat	pointer
)	O
;	O
}	O
global_pat	pointer
=	O
tpat	pointer
;	O
patlock	char
=	O
1	int
;	O
}	O
enable_interrupts	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
apply_subst_template	function
(	O
const	O
char	O
*	O
boln	pointer
,	O
const	O
regmatch_t	struct
*	O
rm	pointer
,	O
int	O
off	int
,	O
const	O
int	O
re_nsub	long
)	O
{	O
const	O
char	O
*	O
sub	pointer
=	O
stbuf	pointer
;	O
for	O
(	O
;	O
sub	pointer
-	O
stbuf	pointer
<	O
stlen	int
;	O
++	O
sub	pointer
)	O
{	O
int	O
n	int
;	O
if	O
(	O
*	O
sub	pointer
==	O
'&'	O
)	O
{	O
int	O
j	int
=	O
rm	pointer
[	O
0	int
]	O
.	O
rm_so	int
;	O
int	O
k	int
=	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
k	int
-	O
j	int
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
j	int
<	O
k	int
)	O
rbuf	pointer
[	O
off	int
++	O
]	O
=	O
boln	pointer
[	O
j	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
*	O
sub	pointer
==	O
'\\'	O
&&	O
*	O
++	O
sub	pointer
>=	O
'1'	O
&&	O
*	O
sub	pointer
<=	O
'9'	O
&&	O
(	O
n	int
=	O
*	O
sub	pointer
-	O
'0'	O
)	O
<=	O
re_nsub	long
)	O
{	O
int	O
j	int
=	O
rm	pointer
[	O
n	int
]	O
.	O
rm_so	int
;	O
int	O
k	int
=	O
rm	pointer
[	O
n	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
k	int
-	O
j	int
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
j	int
<	O
k	int
)	O
rbuf	pointer
[	O
off	int
++	O
]	O
=	O
boln	pointer
[	O
j	int
++	O
]	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
rbuf	pointer
[	O
off	int
++	O
]	O
=	O
*	O
sub	pointer
;	O
}	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
rbuf	pointer
[	O
off	int
]	O
=	O
0	int
;	O
return	O
off	int
;	O
}	O
static	O
int	O
replace_matching_text	function
(	O
const	O
line_t	struct
*	O
lp	pointer
,	O
const	O
int	O
gflags	int
,	O
const	O
int	O
snum	int
)	O
{	O
const	O
int	O
se_max	int
=	O
30	int
;	O
regmatch_t	struct
rm	pointer
[	O
se_max	int
]	O
;	O
char	O
*	O
txt	pointer
=	O
get_sbuf_line	function
(	O
lp	pointer
)	O
;	O
char	O
*	O
eot	pointer
;	O
int	O
i	pointer
=	O
0	int
,	O
off	int
=	O
0	int
;	O
char	O
changed	char
=	O
0	int
;	O
if	O
(	O
!	O
txt	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
nul_to_newline	function
(	O
txt	pointer
,	O
lp	pointer
->	O
len	int
)	O
;	O
eot	pointer
=	O
txt	pointer
+	O
lp	pointer
->	O
len	int
;	O
if	O
(	O
!	O
regexec	function
(	O
global_pat	pointer
,	O
txt	pointer
,	O
se_max	int
,	O
rm	pointer
,	O
0	int
)	O
)	O
{	O
int	O
matchno	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
!	O
snum	int
||	O
snum	int
==	O
++	O
matchno	int
)	O
{	O
changed	char
=	O
1	int
;	O
i	pointer
=	O
rm	pointer
[	O
0	int
]	O
.	O
rm_so	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
newline_to_nul	function
(	O
txt	pointer
,	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
)	O
;	O
memcpy	function
(	O
rbuf	pointer
+	O
off	int
,	O
txt	pointer
,	O
i	pointer
)	O
;	O
off	int
+=	O
i	pointer
;	O
off	int
=	O
apply_subst_template	function
(	O
txt	pointer
,	O
rm	pointer
,	O
off	int
,	O
global_pat	pointer
->	O
re_nsub	long
)	O
;	O
if	O
(	O
off	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
i	pointer
=	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
newline_to_nul	function
(	O
txt	pointer
,	O
i	pointer
)	O
;	O
memcpy	function
(	O
rbuf	pointer
+	O
off	int
,	O
txt	pointer
,	O
i	pointer
)	O
;	O
off	int
+=	O
i	pointer
;	O
}	O
txt	pointer
+=	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
;	O
}	O
while	O
(	O
*	O
txt	pointer
&&	O
(	O
!	O
changed	char
||	O
(	O
(	O
gflags	int
&	O
GSG	int
)	O
&&	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
)	O
)	O
&&	O
!	O
regexec	function
(	O
global_pat	pointer
,	O
txt	pointer
,	O
se_max	int
,	O
rm	pointer
,	O
REG_NOTBOL	int
)	O
)	O
;	O
i	pointer
=	O
eot	pointer
-	O
txt	pointer
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
rbuf	pointer
,	O
&	O
rbufsz	int
,	O
off	int
+	O
i	pointer
+	O
2	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
i	pointer
>	O
0	int
&&	O
!	O
rm	pointer
[	O
0	int
]	O
.	O
rm_eo	int
&&	O
(	O
gflags	int
&	O
GSG	int
)	O
)	O
{	O
set_error_msg	function
(	O
"Infinite substitution loop"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
isbinary	function
(	O
)	O
)	O
newline_to_nul	function
(	O
txt	pointer
,	O
i	pointer
)	O
;	O
memcpy	function
(	O
rbuf	pointer
+	O
off	int
,	O
txt	pointer
,	O
i	pointer
)	O
;	O
memcpy	function
(	O
rbuf	pointer
+	O
off	int
+	O
i	pointer
,	O
"\n"	pointer
,	O
2	int
)	O
;	O
}	O
return	O
(	O
changed	char
?	O
off	int
+	O
i	pointer
+	O
1	int
:	O
0	int
)	O
;	O
}	O
char	O
search_and_replace	function
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
gflags	int
,	O
const	O
int	O
snum	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
lc	int
;	O
char	O
match_found	char
=	O
0	int
;	O
set_current_addr	function
(	O
first_addr	int
-	O
1	int
)	O
;	O
for	O
(	O
lc	int
=	O
0	int
;	O
lc	int
<=	O
second_addr	int
-	O
first_addr	int
;	O
++	O
lc	int
)	O
{	O
line_t	struct
*	O
lp	pointer
=	O
search_line_node	function
(	O
inc_current_addr	function
(	O
)	O
)	O
;	O
int	O
len	int
=	O
replace_matching_text	function
(	O
lp	pointer
,	O
gflags	int
,	O
snum	int
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
len	int
)	O
{	O
const	O
char	O
*	O
txt	pointer
=	O
rbuf	pointer
;	O
const	O
char	O
*	O
eot	pointer
=	O
rbuf	pointer
+	O
len	int
;	O
undo_t	struct
*	O
up	pointer
=	O
0	int
;	O
disable_interrupts	function
(	O
)	O
;	O
if	O
(	O
!	O
delete_lines	function
(	O
current_addr	function
(	O
)	O
,	O
current_addr	function
(	O
)	O
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
do	O
{	O
txt	pointer
=	O
put_sbuf_line	function
(	O
txt	pointer
,	O
current_addr	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
txt	pointer
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
up	pointer
)	O
up	pointer
->	O
tail	pointer
=	O
search_line_node	function
(	O
current_addr	function
(	O
)	O
)	O
;	O
else	O
if	O
(	O
!	O
(	O
up	pointer
=	O
push_undo_atom	function
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
while	O
(	O
txt	pointer
!=	O
eot	pointer
)	O
;	O
enable_interrupts	function
(	O
)	O
;	O
match_found	char
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
match_found	char
&&	O
!	O
(	O
gflags	int
&	O
GLB	int
)	O
)	O
{	O
set_error_msg	function
(	O
"No match"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
