struct	O
myctx	struct
{	O
adns_query	pointer
qu	pointer
;	O
int	O
doneyet	int
,	O
found	int
;	O
const	O
char	O
*	O
fdom	pointer
;	O
}	O
;	O
static	O
struct	O
myctx	struct
*	O
mcs	pointer
;	O
static	O
adns_state	pointer
ads	pointer
;	O
static	O
adns_rrtype	enum
*	O
types_a	pointer
;	O
static	O
void	O
quitnow	function
(	O
int	O
rc	int
)	O
NONRETURNING	O
;	O
static	O
void	O
quitnow	function
(	O
int	O
rc	int
)	O
{	O
free	function
(	O
mcs	pointer
)	O
;	O
free	function
(	O
types_a	pointer
)	O
;	O
if	O
(	O
ads	pointer
)	O
adns_finish	function
(	O
ads	pointer
)	O
;	O
exit	function
(	O
rc	int
)	O
;	O
}	O
static	O
void	O
failure_status	function
(	O
const	O
char	O
*	O
what	pointer
,	O
adns_status	enum
st	enum
)	O
NONRETURNING	O
;	O
static	O
void	O
failure_status	function
(	O
const	O
char	O
*	O
what	pointer
,	O
adns_status	enum
st	enum
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"adns failure: %s: %s\n"	pointer
,	O
what	pointer
,	O
adns_strerror	function
(	O
st	enum
)	O
)	O
;	O
quitnow	function
(	O
2	int
)	O
;	O
}	O
static	O
void	O
failure_errno	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
errnoval	int
)	O
NONRETURNING	O
;	O
static	O
void	O
failure_errno	function
(	O
const	O
char	O
*	O
what	pointer
,	O
int	O
errnoval	int
)	O
{	O
switch	O
(	O
errnoval	int
)	O
{	O
CE	O
(	O
EINVAL	int
)	O
;	O
CE	O
(	O
EINTR	int
)	O
;	O
CE	O
(	O
ESRCH	int
)	O
;	O
CE	O
(	O
EAGAIN	int
)	O
;	O
CE	O
(	O
ENOSYS	int
)	O
;	O
CE	O
(	O
ERANGE	int
)	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"adns failure: %s: errno=%d\n"	pointer
,	O
what	pointer
,	O
errnoval	int
)	O
;	O
break	O
;	O
}	O
quitnow	function
(	O
2	int
)	O
;	O
}	O
static	O
void	O
usageerr	function
(	O
const	O
char	O
*	O
why	pointer
)	O
NONRETURNING	O
;	O
static	O
void	O
usageerr	function
(	O
const	O
char	O
*	O
why	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"bad usage: %s\n"	pointer
"usage: adnstest [-<initflagsnum>[,<owninitflags>]] [/<initstring>]\n"	pointer
"              [ :<typenum>,... ]\n"	pointer
"              [ [<queryflagsnum>[,<ownqueryflags>]/]<domain> ... ]\n"	pointer
"initflags:   p  use poll(2) instead of select(2)\n"	pointer
"             s  use adns_wait with specified query, instead of 0\n"	pointer
"queryflags:  a  print status abbrevs instead of strings\n"	pointer
"exit status:  0 ok (though some queries may have failed)\n"	pointer
"              1 used by test harness to indicate test failed\n"	pointer
"              2 unable to submit or init or some such\n"	pointer
"              3 unexpected failure\n"	pointer
"              4 usage error\n"	pointer
"              5 operation not supported on this system\n"	pointer
,	O
why	pointer
)	O
;	O
quitnow	function
(	O
4	int
)	O
;	O
}	O
static	O
const	O
adns_rrtype	enum
defaulttypes	array
[	O
]	O
=	O
{	O
adns_r_a	int
,	O
adns_r_ns_raw	int
,	O
adns_r_cname	int
,	O
adns_r_soa_raw	int
,	O
adns_r_ptr_raw	int
,	O
adns_r_hinfo	int
,	O
adns_r_mx_raw	int
,	O
adns_r_txt	int
,	O
adns_r_rp_raw	int
,	O
adns_r_addr	int
,	O
adns_r_ns	int
,	O
adns_r_ptr	int
,	O
adns_r_mx	int
,	O
adns_r_soa	int
,	O
adns_r_rp	int
,	O
adns_r_none	int
}	O
;	O
static	O
void	O
dumptype	function
(	O
adns_status	enum
ri	enum
,	O
const	O
char	O
*	O
rrtn	pointer
,	O
const	O
char	O
*	O
fmtn	pointer
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"%s(%s)%s%s"	pointer
,	O
(	O
!	O
ri	enum
&&	O
rrtn	pointer
)	O
?	O
rrtn	pointer
:	O
"?"	pointer
,	O
ri	enum
?	O
"?"	pointer
:	O
fmtn	pointer
?	O
fmtn	pointer
:	O
"-"	pointer
,	O
ri	enum
?	O
" "	pointer
:	O
""	pointer
,	O
ri	enum
?	O
adns_strerror	function
(	O
ri	enum
)	O
:	O
""	pointer
)	O
;	O
}	O
static	O
void	O
fdom_split	function
(	O
const	O
char	O
*	O
fdom	pointer
,	O
const	O
char	O
*	O
*	O
dom_r	pointer
,	O
int	O
*	O
qf_r	pointer
,	O
char	O
*	O
ownflags	pointer
,	O
int	O
ownflags_l	int
)	O
{	O
int	O
qf	int
;	O
char	O
*	O
ep	pointer
;	O
qf	int
=	O
strtoul	function
(	O
fdom	pointer
,	O
&	O
ep	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
==	O
','	O
&&	O
strchr	function
(	O
ep	pointer
,	O
'/'	O
)	O
)	O
{	O
ep	pointer
++	O
;	O
while	O
(	O
*	O
ep	pointer
!=	O
'/'	O
)	O
{	O
if	O
(	O
--	O
ownflags_l	int
<=	O
0	int
)	O
{	O
fputs	function
(	O
"too many flags\n"	pointer
,	O
stderr	pointer
)	O
;	O
quitnow	function
(	O
3	int
)	O
;	O
}	O
*	O
ownflags	pointer
++	O
=	O
*	O
ep	pointer
++	O
;	O
}	O
}	O
if	O
(	O
*	O
ep	pointer
!=	O
'/'	O
)	O
{	O
*	O
dom_r	pointer
=	O
fdom	pointer
;	O
*	O
qf_r	pointer
=	O
0	int
;	O
}	O
else	O
{	O
*	O
dom_r	pointer
=	O
ep	pointer
+	O
1	int
;	O
*	O
qf_r	pointer
=	O
qf	int
;	O
}	O
*	O
ownflags	pointer
=	O
0	int
;	O
}	O
static	O
int	O
consistsof	function
(	O
const	O
char	O
*	O
string	pointer
,	O
const	O
char	O
*	O
accept	function
)	O
{	O
return	O
strspn	function
(	O
string	pointer
,	O
accept	function
)	O
==	O
strlen	function
(	O
string	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
adns_query	pointer
qu	pointer
;	O
struct	O
myctx	struct
*	O
mc	pointer
,	O
*	O
mcw	pointer
;	O
void	O
*	O
mcr	pointer
;	O
adns_answer	struct
*	O
ans	pointer
;	O
const	O
char	O
*	O
initstring	pointer
,	O
*	O
rrtn	pointer
,	O
*	O
fmtn	pointer
;	O
const	O
char	O
*	O
const	O
*	O
fdomlist	pointer
,	O
*	O
domain	pointer
;	O
char	O
*	O
show	pointer
,	O
*	O
cp	pointer
;	O
int	O
len	int
,	O
i	int
,	O
qc	int
,	O
qi	int
,	O
tc	int
,	O
ti	int
,	O
ch	int
,	O
qflags	int
,	O
initflagsnum	int
;	O
adns_status	enum
ri	enum
;	O
int	O
r	int
;	O
const	O
adns_rrtype	enum
*	O
types	pointer
;	O
struct	O
timeval	struct
now	pointer
;	O
char	O
ownflags	pointer
[	O
10	int
]	O
;	O
char	O
*	O
ep	pointer
;	O
const	O
char	O
*	O
initflags	pointer
,	O
*	O
owninitflags	pointer
;	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
initflags	pointer
=	O
argv	pointer
[	O
1	int
]	O
+	O
1	int
;	O
argv	pointer
++	O
;	O
}	O
else	O
{	O
initflags	pointer
=	O
""	pointer
;	O
}	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
initstring	pointer
=	O
argv	pointer
[	O
1	int
]	O
+	O
1	int
;	O
argv	pointer
++	O
;	O
}	O
else	O
{	O
initstring	pointer
=	O
0	int
;	O
}	O
initflagsnum	int
=	O
strtoul	function
(	O
initflags	pointer
,	O
&	O
ep	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	pointer
==	O
','	O
)	O
{	O
owninitflags	pointer
=	O
ep	pointer
+	O
1	int
;	O
if	O
(	O
!	O
consistsof	function
(	O
owninitflags	pointer
,	O
"ps"	pointer
)	O
)	O
usageerr	function
(	O
"unknown owninitflag"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
*	O
ep	pointer
)	O
{	O
owninitflags	pointer
=	O
""	pointer
;	O
}	O
else	O
{	O
usageerr	function
(	O
"bad <initflagsnum>[,<owninitflags>]"	pointer
)	O
;	O
}	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
for	O
(	O
cp	pointer
=	O
argv	pointer
[	O
1	int
]	O
+	O
1	int
,	O
tc	int
=	O
1	int
;	O
(	O
ch	int
=	O
*	O
cp	pointer
)	O
;	O
cp	pointer
++	O
)	O
if	O
(	O
ch	int
==	O
','	O
)	O
tc	int
++	O
;	O
types_a	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
types_a	pointer
)	O
*	O
(	O
tc	int
+	O
1	int
)	O
)	O
;	O
if	O
(	O
!	O
types_a	pointer
)	O
{	O
perror	function
(	O
"malloc types"	pointer
)	O
;	O
quitnow	function
(	O
3	int
)	O
;	O
}	O
for	O
(	O
cp	pointer
=	O
argv	pointer
[	O
1	int
]	O
+	O
1	int
,	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
types_a	pointer
[	O
ti	int
]	O
=	O
strtoul	function
(	O
cp	pointer
,	O
&	O
cp	pointer
,	O
10	int
)	O
;	O
if	O
(	O
(	O
ch	int
=	O
*	O
cp	pointer
)	O
)	O
{	O
if	O
(	O
ch	int
!=	O
','	O
)	O
usageerr	function
(	O
"unexpected char (not comma) in or between types"	pointer
)	O
;	O
cp	pointer
++	O
;	O
}	O
}	O
types_a	pointer
[	O
ti	int
]	O
=	O
adns_r_none	int
;	O
types	pointer
=	O
types_a	pointer
;	O
argv	pointer
++	O
;	O
}	O
else	O
{	O
types_a	pointer
=	O
0	int
;	O
types	pointer
=	O
defaulttypes	array
;	O
}	O
if	O
(	O
!	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
usageerr	function
(	O
"no query domains supplied"	pointer
)	O
;	O
fdomlist	pointer
=	O
(	O
const	O
char	O
*	O
const	O
*	O
)	O
argv	pointer
+	O
1	int
;	O
for	O
(	O
qc	int
=	O
0	int
;	O
fdomlist	pointer
[	O
qc	int
]	O
;	O
qc	int
++	O
)	O
;	O
for	O
(	O
tc	int
=	O
0	int
;	O
types	pointer
[	O
tc	int
]	O
!=	O
adns_r_none	int
;	O
tc	int
++	O
)	O
;	O
mcs	pointer
=	O
malloc	function
(	O
tc	int
?	O
sizeof	O
(	O
*	O
mcs	pointer
)	O
*	O
qc	int
*	O
tc	int
:	O
1	int
)	O
;	O
if	O
(	O
!	O
mcs	pointer
)	O
{	O
perror	function
(	O
"malloc mcs"	pointer
)	O
;	O
quitnow	function
(	O
3	int
)	O
;	O
}	O
setvbuf	function
(	O
stdout	pointer
,	O
0	int
,	O
_IOLBF	int
,	O
0	int
)	O
;	O
if	O
(	O
initstring	pointer
)	O
{	O
r	int
=	O
adns_init_strcfg	function
(	O
&	O
ads	pointer
,	O
(	O
adns_if_debug	int
|	O
adns_if_noautosys	int
|	O
adns_if_checkc_freq	int
)	O
^	O
initflagsnum	int
,	O
stdout	pointer
,	O
initstring	pointer
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_init	function
(	O
&	O
ads	pointer
,	O
(	O
adns_if_debug	int
|	O
adns_if_noautosys	int
)	O
^	O
initflagsnum	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
failure_errno	function
(	O
"init"	pointer
,	O
r	int
)	O
;	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
fdom_split	function
(	O
fdomlist	pointer
[	O
qi	int
]	O
,	O
&	O
domain	pointer
,	O
&	O
qflags	int
,	O
ownflags	pointer
,	O
sizeof	O
(	O
ownflags	pointer
)	O
)	O
;	O
if	O
(	O
!	O
consistsof	function
(	O
ownflags	pointer
,	O
"a"	pointer
)	O
)	O
usageerr	function
(	O
"unknown ownqueryflag"	pointer
)	O
;	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	pointer
=	O
&	O
mcs	pointer
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
mc	pointer
->	O
doneyet	int
=	O
0	int
;	O
mc	pointer
->	O
fdom	pointer
=	O
fdomlist	pointer
[	O
qi	int
]	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s flags %d type %d"	pointer
,	O
domain	pointer
,	O
qflags	int
,	O
types	pointer
[	O
ti	int
]	O
)	O
;	O
r	int
=	O
adns_submit	function
(	O
ads	pointer
,	O
domain	pointer
,	O
types	pointer
[	O
ti	int
]	O
,	O
qflags	int
,	O
mc	pointer
,	O
&	O
mc	pointer
->	O
qu	pointer
)	O
;	O
if	O
(	O
r	int
==	O
ENOSYS	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
" not implemented\n"	pointer
)	O
;	O
mc	pointer
->	O
qu	pointer
=	O
0	int
;	O
mc	pointer
->	O
doneyet	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
r	int
)	O
{	O
failure_errno	function
(	O
"submit"	pointer
,	O
r	int
)	O
;	O
}	O
else	O
{	O
ri	enum
=	O
adns_rr_info	function
(	O
types	pointer
[	O
ti	int
]	O
,	O
&	O
rrtn	pointer
,	O
&	O
fmtn	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
putc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
dumptype	function
(	O
ri	enum
,	O
rrtn	pointer
,	O
fmtn	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
" submitted\n"	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	pointer
=	O
&	O
mcs	pointer
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
mc	pointer
->	O
found	int
=	O
0	int
;	O
}	O
}	O
for	O
(	O
adns_forallqueries_begin	function
(	O
ads	pointer
)	O
;	O
(	O
qu	pointer
=	O
adns_forallqueries_next	function
(	O
ads	pointer
,	O
&	O
mcr	pointer
)	O
)	O
;	O
)	O
{	O
mc	pointer
=	O
mcr	pointer
;	O
assert	O
(	O
qu	pointer
==	O
mc	pointer
->	O
qu	pointer
)	O
;	O
assert	O
(	O
!	O
mc	pointer
->	O
doneyet	int
)	O
;	O
mc	pointer
->	O
found	int
=	O
1	int
;	O
}	O
mcw	pointer
=	O
0	int
;	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	pointer
=	O
&	O
mcs	pointer
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
if	O
(	O
mc	pointer
->	O
doneyet	int
)	O
continue	O
;	O
assert	O
(	O
mc	pointer
->	O
found	int
)	O
;	O
if	O
(	O
!	O
mcw	pointer
)	O
mcw	pointer
=	O
mc	pointer
;	O
}	O
}	O
if	O
(	O
!	O
mcw	pointer
)	O
break	O
;	O
if	O
(	O
strchr	function
(	O
owninitflags	pointer
,	O
's'	O
)	O
)	O
{	O
qu	pointer
=	O
mcw	pointer
->	O
qu	pointer
;	O
mc	pointer
=	O
mcw	pointer
;	O
}	O
else	O
{	O
qu	pointer
=	O
0	int
;	O
mc	pointer
=	O
0	int
;	O
}	O
if	O
(	O
strchr	function
(	O
owninitflags	pointer
,	O
'p'	O
)	O
)	O
{	O
r	int
=	O
adns_wait_poll	function
(	O
ads	pointer
,	O
&	O
qu	pointer
,	O
&	O
ans	pointer
,	O
&	O
mcr	pointer
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_wait	function
(	O
ads	pointer
,	O
&	O
qu	pointer
,	O
&	O
ans	pointer
,	O
&	O
mcr	pointer
)	O
;	O
}	O
if	O
(	O
r	int
)	O
failure_errno	function
(	O
"wait/check"	pointer
,	O
r	int
)	O
;	O
if	O
(	O
mc	pointer
)	O
assert	O
(	O
mcr	pointer
==	O
mc	pointer
)	O
;	O
else	O
mc	pointer
=	O
mcr	pointer
;	O
assert	O
(	O
qu	pointer
==	O
mc	pointer
->	O
qu	pointer
)	O
;	O
assert	O
(	O
!	O
mc	pointer
->	O
doneyet	int
)	O
;	O
fdom_split	function
(	O
mc	pointer
->	O
fdom	pointer
,	O
&	O
domain	pointer
,	O
&	O
qflags	int
,	O
ownflags	pointer
,	O
sizeof	O
(	O
ownflags	pointer
)	O
)	O
;	O
if	O
(	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
)	O
{	O
perror	function
(	O
"gettimeofday"	pointer
)	O
;	O
quitnow	function
(	O
3	int
)	O
;	O
}	O
ri	enum
=	O
adns_rr_info	function
(	O
ans	pointer
->	O
type	enum
,	O
&	O
rrtn	pointer
,	O
&	O
fmtn	pointer
,	O
&	O
len	int
,	O
0	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s flags %d type "	pointer
,	O
domain	pointer
,	O
qflags	int
)	O
;	O
dumptype	function
(	O
ri	enum
,	O
rrtn	pointer
,	O
fmtn	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%s: %s; nrrs=%d; cname=%s; owner=%s; ttl=%ld\n"	pointer
,	O
ownflags	pointer
[	O
0	int
]	O
?	O
" ownflags="	pointer
:	O
""	pointer
,	O
ownflags	pointer
,	O
strchr	function
(	O
ownflags	pointer
,	O
'a'	O
)	O
?	O
adns_errabbrev	function
(	O
ans	pointer
->	O
status	enum
)	O
:	O
adns_strerror	function
(	O
ans	pointer
->	O
status	enum
)	O
,	O
ans	pointer
->	O
nrrs	int
,	O
ans	pointer
->	O
cname	pointer
?	O
ans	pointer
->	O
cname	pointer
:	O
"$"	pointer
,	O
ans	pointer
->	O
owner	pointer
?	O
ans	pointer
->	O
owner	pointer
:	O
"$"	pointer
,	O
(	O
long	O
)	O
ans	pointer
->	O
expires	long
-	O
(	O
long	O
)	O
now	pointer
.	O
tv_sec	long
)	O
;	O
if	O
(	O
ans	pointer
->	O
nrrs	int
)	O
{	O
assert	O
(	O
!	O
ri	enum
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ans	pointer
->	O
nrrs	int
;	O
i	int
++	O
)	O
{	O
ri	enum
=	O
adns_rr_info	function
(	O
ans	pointer
->	O
type	enum
,	O
0	int
,	O
0	int
,	O
0	int
,	O
ans	pointer
->	O
rrs	union
.	O
bytes	pointer
+	O
i	int
*	O
len	int
,	O
&	O
show	pointer
)	O
;	O
if	O
(	O
ri	enum
)	O
failure_status	function
(	O
"info"	pointer
,	O
ri	enum
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
" %s\n"	pointer
,	O
show	pointer
)	O
;	O
free	function
(	O
show	pointer
)	O
;	O
}	O
}	O
free	function
(	O
ans	pointer
)	O
;	O
mc	pointer
->	O
doneyet	int
=	O
1	int
;	O
}	O
quitnow	function
(	O
0	int
)	O
;	O
}	O
