int	O
fgets0	function
(	O
char	O
*	O
buf0	pointer
,	O
int	O
size	long
,	O
FILE	struct
*	O
in_FILE	pointer
)	O
;	O
struct	O
file_link	struct
*	O
*	O
read_id_file	function
(	O
char	O
const	O
*	O
id_file_name	pointer
,	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
struct	O
file_link	struct
*	O
*	O
flinkv	pointer
=	O
maybe_read_id_file	function
(	O
id_file_name	pointer
,	O
idhp	pointer
)	O
;	O
if	O
(	O
flinkv	pointer
)	O
return	O
flinkv	pointer
;	O
error	function
(	O
1	int
,	O
errno	O
,	O
_	O
(	O
"can't open `%s'"	pointer
)	O
,	O
id_file_name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
struct	O
file_link	struct
*	O
*	O
maybe_read_id_file	function
(	O
char	O
const	O
*	O
id_file_name	pointer
,	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
obstack_init	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
)	O
;	O
idhp	pointer
->	O
idh_FILE	pointer
=	O
fopen	function
(	O
id_file_name	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
idhp	pointer
->	O
idh_FILE	pointer
==	O
0	int
)	O
return	O
0	int
;	O
read_idhead	function
(	O
idhp	pointer
)	O
;	O
if	O
(	O
idhp	pointer
->	O
idh_magic	array
[	O
0	int
]	O
!=	O
IDH_MAGIC_0	O
||	O
idhp	pointer
->	O
idh_magic	array
[	O
1	int
]	O
!=	O
IDH_MAGIC_1	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"`%s' is not an ID file! (bad magic #)"	pointer
)	O
,	O
id_file_name	pointer
)	O
;	O
if	O
(	O
idhp	pointer
->	O
idh_version	char
!=	O
IDH_VERSION	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"`%s' is version %d, but I only grok version %d"	pointer
)	O
,	O
id_file_name	pointer
,	O
idhp	pointer
->	O
idh_version	char
,	O
IDH_VERSION	int
)	O
;	O
fseek	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
idhp	pointer
->	O
idh_flinks_offset	long
,	O
0	int
)	O
;	O
return	O
deserialize_file_links	function
(	O
idhp	pointer
)	O
;	O
}	O
struct	O
file_link	struct
*	O
*	O
deserialize_file_links	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
struct	O
file_link	struct
*	O
*	O
flinks_0	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
file_link	struct
*	O
)	O
*	O
idhp	pointer
->	O
idh_file_links	long
)	O
;	O
struct	O
file_link	struct
*	O
*	O
flinks	pointer
=	O
flinks_0	pointer
;	O
struct	O
file_link	struct
*	O
*	O
members_0	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
file_link	struct
*	O
)	O
*	O
idhp	pointer
->	O
idh_files	long
+	O
1	int
)	O
;	O
struct	O
file_link	struct
*	O
*	O
members	pointer
=	O
members_0	pointer
;	O
struct	O
file_link	struct
*	O
flink	pointer
;	O
struct	O
file_link	struct
*	O
*	O
slot	pointer
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
idhp	pointer
->	O
idh_file_links	long
;	O
i	int
++	O
)	O
{	O
unsigned	O
long	O
parent_index	long
;	O
int	O
c	int
;	O
obstack_blank	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
,	O
offsetof	O
(	O
struct	O
file_link	struct
,	O
fl_name	array
)	O
)	O
;	O
if	O
(	O
obstack_room	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
)	O
>=	O
idhp	pointer
->	O
idh_max_link	short
)	O
do	O
{	O
c	int
=	O
getc	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
)	O
;	O
obstack_1grow_fast	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
,	O
c	int
)	O
;	O
}	O
while	O
(	O
c	int
)	O
;	O
else	O
do	O
{	O
c	int
=	O
getc	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
)	O
;	O
obstack_1grow	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
,	O
c	int
)	O
;	O
}	O
while	O
(	O
c	int
)	O
;	O
flink	pointer
=	O
(	O
struct	O
file_link	struct
*	O
)	O
obstack_finish	O
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
)	O
;	O
*	O
flinks	pointer
=	O
flink	pointer
;	O
io_read	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
&	O
flink	pointer
->	O
fl_flags	char
,	O
sizeof	O
(	O
flink	pointer
->	O
fl_flags	char
)	O
,	O
IO_TYPE_INT	int
)	O
;	O
io_read	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
&	O
parent_index	long
,	O
FL_PARENT_INDEX_BYTES	int
,	O
IO_TYPE_INT	int
)	O
;	O
flink	pointer
->	O
fl_parent	O
=	O
flinks_0	pointer
[	O
parent_index	long
]	O
;	O
slot	pointer
=	O
(	O
struct	O
file_link	struct
*	O
*	O
)	O
hash_find_slot	function
(	O
&	O
idhp	pointer
->	O
idh_file_link_table	struct
,	O
flink	pointer
)	O
;	O
if	O
(	O
HASH_VACANT	O
(	O
*	O
slot	pointer
)	O
)	O
hash_insert_at	function
(	O
&	O
idhp	pointer
->	O
idh_file_link_table	struct
,	O
flink	pointer
,	O
slot	pointer
)	O
;	O
else	O
{	O
obstack_free	function
(	O
&	O
idhp	pointer
->	O
idh_file_link_obstack	struct
,	O
flink	pointer
)	O
;	O
(	O
*	O
slot	pointer
)	O
->	O
fl_flags	char
=	O
flink	pointer
->	O
fl_flags	char
;	O
flink	pointer
=	O
*	O
flinks	pointer
=	O
*	O
slot	pointer
;	O
}	O
flinks	pointer
++	O
;	O
if	O
(	O
flink	pointer
->	O
fl_flags	char
&	O
FL_MEMBER	O
)	O
*	O
members	pointer
++	O
=	O
flink	pointer
;	O
}	O
free	function
(	O
flinks_0	pointer
)	O
;	O
*	O
members	pointer
=	O
0	int
;	O
return	O
members_0	pointer
;	O
}	O
int	O
read_idhead	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
return	O
io_idhead	function
(	O
idhp	pointer
->	O
idh_FILE	pointer
,	O
io_read	function
,	O
idhp	pointer
)	O
;	O
}	O
int	O
fgets0	function
(	O
char	O
*	O
buf0	pointer
,	O
int	O
size	long
,	O
FILE	struct
*	O
in_FILE	pointer
)	O
{	O
char	O
*	O
buf	pointer
;	O
int	O
c	int
;	O
char	O
*	O
end	pointer
;	O
buf	pointer
=	O
buf0	pointer
;	O
end	pointer
=	O
&	O
buf	pointer
[	O
size	long
]	O
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
in_FILE	pointer
)	O
)	O
>	O
0	int
&&	O
buf	pointer
<	O
end	pointer
)	O
*	O
buf	pointer
++	O
=	O
c	int
;	O
*	O
buf	pointer
=	O
'\0'	O
;	O
return	O
(	O
buf	pointer
-	O
buf0	pointer
)	O
;	O
}	O
int	O
io_read	function
(	O
FILE	struct
*	O
input_FILE	pointer
,	O
void	O
*	O
addr	pointer
,	O
unsigned	O
int	O
size	long
,	O
int	O
io_type	int
)	O
{	O
if	O
(	O
io_type	int
==	O
IO_TYPE_INT	int
||	O
size	long
==	O
1	int
)	O
{	O
switch	O
(	O
size	long
)	O
{	O
case	O
4	int
:	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
010	int
;	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
020	int
;	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
030	int
;	O
break	O
;	O
case	O
3	int
:	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
010	int
;	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
020	int
;	O
break	O
;	O
case	O
2	int
:	O
*	O
(	O
unsigned	O
short	O
*	O
)	O
addr	pointer
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
*	O
(	O
unsigned	O
short	O
*	O
)	O
addr	pointer
+=	O
getc	function
(	O
input_FILE	pointer
)	O
<<	O
010	int
;	O
break	O
;	O
case	O
1	int
:	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
addr	pointer
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
break	O
;	O
default	O
:	O
error	function
(	O
1	int
,	O
0	int
,	O
_	O
(	O
"unsupported size in io_read (): %d"	pointer
)	O
,	O
size	long
)	O
;	O
}	O
}	O
else	O
if	O
(	O
io_type	int
==	O
IO_TYPE_STR	int
)	O
fgets0	function
(	O
addr	pointer
,	O
size	long
,	O
input_FILE	pointer
)	O
;	O
else	O
if	O
(	O
io_type	int
==	O
IO_TYPE_FIX	int
)	O
fread	function
(	O
addr	pointer
,	O
size	long
,	O
1	int
,	O
input_FILE	pointer
)	O
;	O
else	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"unknown I/O type: %d"	pointer
)	O
,	O
io_type	int
)	O
;	O
return	O
size	long
;	O
}	O
unsigned	O
int	O
token_flags	function
(	O
char	O
const	O
*	O
buf	pointer
)	O
{	O
return	O
*	O
(	O
unsigned	O
char	O
const	O
*	O
)	O
&	O
buf	pointer
[	O
strlen	function
(	O
buf	pointer
)	O
+	O
1	int
]	O
;	O
}	O
unsigned	O
short	O
token_count	function
(	O
char	O
const	O
*	O
buf	pointer
)	O
{	O
unsigned	O
char	O
const	O
*	O
flags	pointer
=	O
(	O
unsigned	O
char	O
const	O
*	O
)	O
&	O
buf	pointer
[	O
strlen	function
(	O
buf	pointer
)	O
+	O
1	int
]	O
;	O
unsigned	O
char	O
const	O
*	O
addr	pointer
=	O
flags	pointer
+	O
1	int
;	O
unsigned	O
short	O
count	short
=	O
*	O
addr	pointer
;	O
if	O
(	O
*	O
flags	pointer
&	O
TOK_SHORT_COUNT	int
)	O
count	short
+=	O
(	O
*	O
++	O
addr	pointer
<<	O
8	int
)	O
;	O
return	O
count	short
;	O
}	O
unsigned	O
char	O
const	O
*	O
token_hits_addr	function
(	O
char	O
const	O
*	O
buf	pointer
)	O
{	O
unsigned	O
char	O
const	O
*	O
flags	pointer
=	O
(	O
unsigned	O
char	O
const	O
*	O
)	O
&	O
buf	pointer
[	O
strlen	function
(	O
buf	pointer
)	O
+	O
1	int
]	O
;	O
unsigned	O
char	O
const	O
*	O
addr	pointer
=	O
flags	pointer
+	O
2	int
;	O
if	O
(	O
*	O
flags	pointer
&	O
TOK_SHORT_COUNT	int
)	O
addr	pointer
++	O
;	O
return	O
addr	pointer
;	O
}	O
int	O
tree8_count_levels	function
(	O
unsigned	O
int	O
cardinality	long
)	O
{	O
int	O
levels	int
=	O
1	int
;	O
cardinality	long
--	O
;	O
while	O
(	O
cardinality	long
>>=	O
3	int
)	O
++	O
levels	int
;	O
return	O
levels	int
;	O
}	O
int	O
gets_past_00	function
(	O
char	O
*	O
tok	pointer
,	O
FILE	struct
*	O
input_FILE	pointer
)	O
{	O
int	O
got	int
=	O
0	int
;	O
int	O
c	int
;	O
do	O
{	O
do	O
{	O
got	int
++	O
;	O
c	int
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
*	O
tok	pointer
++	O
=	O
c	int
;	O
}	O
while	O
(	O
c	int
>	O
0	int
)	O
;	O
got	int
++	O
;	O
c	int
=	O
getc	function
(	O
input_FILE	pointer
)	O
;	O
*	O
tok	pointer
++	O
=	O
c	int
;	O
}	O
while	O
(	O
c	int
>	O
0	int
)	O
;	O
return	O
got	int
-	O
2	int
;	O
}	O
int	O
skip_past_00	function
(	O
FILE	struct
*	O
input_FILE	pointer
)	O
{	O
int	O
skipped	int
=	O
0	int
;	O
do	O
{	O
do	O
skipped	int
++	O
;	O
while	O
(	O
getc	function
(	O
input_FILE	pointer
)	O
>	O
0	int
)	O
;	O
skipped	int
++	O
;	O
}	O
while	O
(	O
getc	function
(	O
input_FILE	pointer
)	O
>	O
0	int
)	O
;	O
return	O
skipped	int
;	O
}	O
