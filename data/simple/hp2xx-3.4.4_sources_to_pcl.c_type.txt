static	O
int	O
Deskjet_specials	int
=	O
FALSE	int
;	O
static	O
Byte	char
*	O
p_K	pointer
,	O
*	O
p_C	pointer
,	O
*	O
p_M	pointer
,	O
*	O
p_Y	pointer
;	O
static	O
Byte	char
*	O
p_B	pointer
;	O
static	O
int	O
n_B	int
;	O
static	O
int	O
TIFF_n_repeats	function
(	O
Byte	char
*	O
p1	pointer
,	O
int	O
nb	int
)	O
{	O
int	O
i	int
;	O
Byte	char
*	O
p2	pointer
;	O
p2	pointer
=	O
p1	pointer
+	O
1	int
;	O
if	O
(	O
nb	int
<	O
2	int
||	O
*	O
p2	pointer
!=	O
*	O
p1	pointer
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
nb	int
&&	O
*	O
p1	pointer
==	O
*	O
p2	pointer
;	O
p1	pointer
++	O
,	O
p2	pointer
++	O
)	O
i	int
++	O
;	O
return	O
i	int
;	O
}	O
static	O
int	O
TIFF_n_irregs	function
(	O
Byte	char
*	O
p1	pointer
,	O
int	O
nb	int
)	O
{	O
int	O
i	int
;	O
Byte	char
*	O
p2	pointer
;	O
if	O
(	O
nb	int
<	O
2	int
)	O
return	O
nb	int
;	O
p2	pointer
=	O
p1	pointer
+	O
1	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
nb	int
&&	O
*	O
p1	pointer
!=	O
*	O
p2	pointer
;	O
p1	pointer
++	O
,	O
p2	pointer
++	O
)	O
i	int
++	O
;	O
return	O
(	O
i	int
==	O
nb	int
)	O
?	O
nb	int
:	O
i	int
-	O
1	int
;	O
}	O
static	O
int	O
TIFF_compress	function
(	O
Byte	char
*	O
src	pointer
,	O
Byte	char
*	O
dst	pointer
,	O
int	O
nb	int
)	O
{	O
int	O
i	int
,	O
l	int
,	O
count	int
=	O
0	int
;	O
l	int
=	O
TIFF_n_repeats	function
(	O
src	pointer
,	O
nb	int
)	O
;	O
while	O
(	O
l	int
>	O
128	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
(	O
-	O
127	int
)	O
;	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
count	int
+=	O
2	int
;	O
l	int
-=	O
128	int
;	O
nb	int
-=	O
128	int
;	O
src	pointer
+=	O
128	int
;	O
n_B	int
+=	O
126	int
;	O
}	O
if	O
(	O
l	int
>	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
(	O
Byte	char
)	O
(	O
1	int
-	O
l	int
)	O
;	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
count	int
+=	O
2	int
;	O
src	pointer
+=	O
l	int
;	O
nb	int
-=	O
l	int
;	O
n_B	int
+=	O
(	O
l	int
-	O
2	int
)	O
;	O
}	O
if	O
(	O
nb	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
nb	int
==	O
0	int
)	O
return	O
count	int
;	O
l	int
=	O
TIFF_n_irregs	function
(	O
src	pointer
,	O
nb	int
)	O
;	O
while	O
(	O
l	int
>	O
128	int
)	O
{	O
n_B	int
-=	O
1	int
;	O
if	O
(	O
n_B	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
*	O
dst	pointer
++	O
=	O
127	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
128	int
;	O
i	int
++	O
)	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
count	int
+=	O
129	int
;	O
l	int
-=	O
128	int
;	O
nb	int
-=	O
128	int
;	O
}	O
if	O
(	O
l	int
>	O
0	int
)	O
{	O
n_B	int
-=	O
1	int
;	O
if	O
(	O
n_B	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
*	O
dst	pointer
++	O
=	O
(	O
Byte	char
)	O
(	O
l	int
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
l	int
;	O
i	int
++	O
)	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
count	int
+=	O
(	O
l	int
+	O
1	int
)	O
;	O
nb	int
-=	O
l	int
;	O
}	O
if	O
(	O
nb	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
nb	int
==	O
0	int
)	O
{	O
if	O
(	O
n_B	int
>	O
B_EXTRASPACE	int
)	O
return	O
count	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
i	int
=	O
TIFF_compress	function
(	O
src	pointer
,	O
dst	pointer
,	O
nb	int
)	O
;	O
return	O
(	O
i	int
==	O
-	O
1	int
)	O
?	O
-	O
1	int
:	O
i	int
+	O
count	int
;	O
}	O
static	O
int	O
compress_buf_TIFF	function
(	O
Byte	char
*	O
buf	pointer
,	O
int	O
nb	int
)	O
{	O
if	O
(	O
Deskjet_specials	int
==	O
FALSE	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p_B	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
n_B	int
=	O
B_EXTRASPACE	int
;	O
return	O
TIFF_compress	function
(	O
buf	pointer
,	O
p_B	pointer
,	O
nb	int
)	O
;	O
}	O
static	O
void	O
Buf_to_PCL	function
(	O
Byte	char
*	O
buf	pointer
,	O
int	O
nb	int
,	O
int	O
mode	enum
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
ncb	int
;	O
Byte	char
*	O
p	struct
;	O
if	O
(	O
mode	enum
&	O
PCL_FIRST	int
)	O
fprintf	function
(	O
fd	pointer
,	O
"\033*b"	pointer
)	O
;	O
ncb	int
=	O
compress_buf_TIFF	function
(	O
buf	pointer
,	O
nb	int
)	O
;	O
if	O
(	O
ncb	int
==	O
-	O
1	int
)	O
{	O
ncb	int
=	O
nb	int
;	O
p	struct
=	O
buf	pointer
;	O
fprintf	function
(	O
fd	pointer
,	O
"0m"	pointer
)	O
;	O
}	O
else	O
{	O
p	struct
=	O
p_B	pointer
;	O
fprintf	function
(	O
fd	pointer
,	O
"2m"	pointer
)	O
;	O
}	O
if	O
(	O
mode	enum
&	O
PCL_LAST	int
)	O
fprintf	function
(	O
fd	pointer
,	O
"%dW"	pointer
,	O
ncb	int
)	O
;	O
else	O
fprintf	function
(	O
fd	pointer
,	O
"%dv"	pointer
,	O
ncb	int
)	O
;	O
(	O
void	O
)	O
fwrite	function
(	O
p	struct
,	O
(	O
size_t	long
)	O
ncb	int
,	O
1	int
,	O
fd	pointer
)	O
;	O
}	O
static	O
void	O
KCMY_Buf_to_PCL	function
(	O
int	O
nb	int
,	O
int	O
is_KCMY	int
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
if	O
(	O
is_KCMY	int
)	O
{	O
Buf_to_PCL	function
(	O
p_K	pointer
,	O
nb	int
,	O
PCL_FIRST	int
,	O
fd	pointer
)	O
;	O
Buf_to_PCL	function
(	O
p_C	pointer
,	O
nb	int
,	O
0	int
,	O
fd	pointer
)	O
;	O
}	O
else	O
Buf_to_PCL	function
(	O
p_C	pointer
,	O
nb	int
,	O
PCL_FIRST	int
,	O
fd	pointer
)	O
;	O
Buf_to_PCL	function
(	O
p_M	pointer
,	O
nb	int
,	O
0	int
,	O
fd	pointer
)	O
;	O
Buf_to_PCL	function
(	O
p_Y	pointer
,	O
nb	int
,	O
PCL_LAST	int
,	O
fd	pointer
)	O
;	O
}	O
static	O
void	O
KCMY_to_K	function
(	O
int	O
nb	int
)	O
{	O
int	O
i	int
;	O
Byte	char
*	O
pK	pointer
=	O
p_K	pointer
,	O
*	O
pC	pointer
=	O
p_C	pointer
,	O
*	O
pM	pointer
=	O
p_M	pointer
,	O
*	O
pY	pointer
=	O
p_Y	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nb	int
;	O
i	int
++	O
)	O
*	O
pK	pointer
++	O
|=	O
(	O
(	O
*	O
pC	pointer
++	O
|	O
*	O
pM	pointer
++	O
)	O
|	O
*	O
pY	pointer
++	O
)	O
;	O
}	O
static	O
void	O
K_to_CMY	function
(	O
int	O
nb	int
)	O
{	O
int	O
i	int
;	O
Byte	char
*	O
pK	pointer
=	O
p_K	pointer
,	O
*	O
pC	pointer
=	O
p_C	pointer
,	O
*	O
pM	pointer
=	O
p_M	pointer
,	O
*	O
pY	pointer
=	O
p_Y	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nb	int
;	O
i	int
++	O
,	O
pK	pointer
++	O
)	O
{	O
*	O
pC	pointer
++	O
|=	O
*	O
pK	pointer
;	O
*	O
pM	pointer
++	O
|=	O
*	O
pK	pointer
;	O
*	O
pY	pointer
++	O
|=	O
*	O
pK	pointer
;	O
}	O
}	O
static	O
void	O
init_printer	function
(	O
const	O
OUT_PAR	struct
*	O
po	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
size	int
;	O
size	int
=	O
26	int
;	O
if	O
(	O
(	O
po	pointer
->	O
width	array
>=	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
width	array
>	O
297.	int
||	O
po	pointer
->	O
height	double
>	O
210.	int
)	O
)	O
||	O
(	O
po	pointer
->	O
width	array
<	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
height	double
>	O
297.	int
||	O
po	pointer
->	O
width	array
>	O
210.	int
)	O
)	O
)	O
size	int
=	O
27	int
;	O
if	O
(	O
(	O
po	pointer
->	O
width	array
>=	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
width	array
>	O
420.	int
||	O
po	pointer
->	O
height	double
>	O
297.	int
)	O
)	O
||	O
(	O
po	pointer
->	O
width	array
<	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
height	double
>	O
420.	int
||	O
po	pointer
->	O
width	array
>	O
297.	int
)	O
)	O
)	O
size	int
=	O
28	int
;	O
if	O
(	O
(	O
po	pointer
->	O
width	array
>=	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
width	array
>	O
584.	int
||	O
po	pointer
->	O
height	double
>	O
420.	int
)	O
)	O
||	O
(	O
po	pointer
->	O
width	array
<	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
height	double
>	O
584.	int
||	O
po	pointer
->	O
width	array
>	O
420.	int
)	O
)	O
)	O
size	int
=	O
29	int
;	O
if	O
(	O
(	O
po	pointer
->	O
width	array
>=	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
width	array
>	O
820.	int
||	O
po	pointer
->	O
height	double
>	O
584.	int
)	O
)	O
||	O
(	O
po	pointer
->	O
width	array
<	O
po	pointer
->	O
height	double
&&	O
(	O
po	pointer
->	O
height	double
>	O
820.	int
||	O
po	pointer
->	O
width	array
>	O
584.	int
)	O
)	O
)	O
size	int
=	O
30	int
;	O
if	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
"%crbC%cE"	pointer
,	O
ESC	char
,	O
ESC	char
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%c%%-12345X@PJL ENTER LANGUAGE=PCL3GUI\n"	pointer
,	O
ESC	char
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%c&l%dA%c&l0L%c&l0E%c*o0M%c*o2D"	pointer
,	O
ESC	char
,	O
size	int
,	O
ESC	char
,	O
ESC	char
,	O
ESC	char
,	O
ESC	char
)	O
;	O
}	O
else	O
fprintf	function
(	O
fd	pointer
,	O
"%cE%c&l%dA%c&l0L%c&l0E%c9%c&a0V"	pointer
,	O
ESC	char
,	O
ESC	char
,	O
size	int
,	O
ESC	char
,	O
ESC	char
,	O
ESC	char
,	O
ESC	char
)	O
;	O
}	O
static	O
void	O
start_graphmode	function
(	O
const	O
OUT_PAR	struct
*	O
po	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
typedef	O
struct	O
init_s	struct
{	O
unsigned	O
char	O
a	array
[	O
26	int
]	O
;	O
}	O
init_t	struct
;	O
init_t	struct
init	struct
=	O
{	O
{	O
0x02	int
,	O
0x04	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x00	int
,	O
0x02	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x00	int
,	O
0x02	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x00	int
,	O
0x02	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x00	int
,	O
0x02	int
}	O
}	O
;	O
typedef	O
struct	O
init_bw	struct
{	O
unsigned	O
char	O
a	array
[	O
8	int
]	O
;	O
}	O
init_tb	struct
;	O
init_tb	struct
init_bw	struct
=	O
{	O
{	O
0x02	int
,	O
0x04	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x01	int
,	O
0x2c	int
,	O
0x00	int
,	O
0x02	int
}	O
}	O
;	O
if	O
(	O
po	pointer
->	O
yoff	double
!=	O
0.0	int
)	O
fprintf	function
(	O
fd	pointer
,	O
"\033&a+%dV"	pointer
,	O
(	O
int	O
)	O
(	O
po	pointer
->	O
yoff	double
*	O
720.0	int
/	O
25.4	int
)	O
)	O
;	O
if	O
(	O
po	pointer
->	O
xoff	double
!=	O
0.0	int
)	O
fprintf	function
(	O
fd	pointer
,	O
"\033&a+%dH"	pointer
,	O
(	O
int	O
)	O
(	O
po	pointer
->	O
xoff	double
*	O
720.0	int
/	O
25.4	int
)	O
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"\033*t%dR"	pointer
,	O
po	pointer
->	O
dpi_x	int
)	O
;	O
if	O
(	O
po	pointer
->	O
specials	int
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r%dS"	pointer
,	O
po	pointer
->	O
picbuf	pointer
->	O
nc	int
)	O
;	O
if	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r%dT"	pointer
,	O
po	pointer
->	O
picbuf	pointer
->	O
nr	int
)	O
;	O
switch	O
(	O
po	pointer
->	O
specials	int
)	O
{	O
case	O
4	int
:	O
if	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
{	O
if	O
(	O
po	pointer
->	O
dpi_x	int
==	O
600	int
)	O
{	O
init	struct
.	O
a	array
[	O
2	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
3	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
4	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
5	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
8	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
9	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
10	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
11	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
14	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
15	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
16	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
17	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
20	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
21	int
]	O
=	O
0x58	int
;	O
init	struct
.	O
a	array
[	O
22	int
]	O
=	O
0x02	int
;	O
init	struct
.	O
a	array
[	O
23	int
]	O
=	O
0x58	int
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"\033*g%dW"	pointer
,	O
(	O
int	O
)	O
sizeof	O
(	O
init	struct
)	O
)	O
;	O
(	O
void	O
)	O
fwrite	function
(	O
init	struct
.	O
a	array
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
sizeof	O
(	O
init	struct
.	O
a	array
)	O
,	O
fd	pointer
)	O
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r-4U"	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r-3U"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
{	O
if	O
(	O
po	pointer
->	O
dpi_x	int
==	O
600	int
)	O
{	O
init_bw	struct
.	O
a	array
[	O
2	int
]	O
=	O
0x02	int
;	O
init_bw	struct
.	O
a	array
[	O
3	int
]	O
=	O
0x58	int
;	O
init_bw	struct
.	O
a	array
[	O
4	int
]	O
=	O
0x02	int
;	O
init_bw	struct
.	O
a	array
[	O
5	int
]	O
=	O
0x58	int
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"\033*g%dW"	pointer
,	O
(	O
int	O
)	O
sizeof	O
(	O
init_bw	struct
)	O
)	O
;	O
(	O
void	O
)	O
fwrite	function
(	O
init_bw	struct
.	O
a	array
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
sizeof	O
(	O
init_bw	struct
.	O
a	array
)	O
,	O
fd	pointer
)	O
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r1U"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
"\033*p%ddY"	pointer
,	O
0	int
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"\033*p%ddX"	pointer
,	O
0	int
)	O
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"\033*r1A"	pointer
)	O
;	O
}	O
static	O
void	O
end_graphmode	function
(	O
FILE	struct
*	O
fd	pointer
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
"\033*rbC"	pointer
)	O
;	O
}	O
int	O
PicBuf_to_PCL	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
FILE	struct
*	O
fd	pointer
=	O
stdout	pointer
;	O
RowBuf	struct
*	O
row	pointer
;	O
int	O
row_c	int
,	O
i	int
,	O
x	int
,	O
color_index	int
,	O
offset	int
,	O
err	int
;	O
Byte	char
mask	char
;	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\nWriting PCL output\n"	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
picbuf	pointer
->	O
depth	int
>	O
1	int
&&	O
po	pointer
->	O
specials	int
<	O
3	int
)	O
Eprintf	function
(	O
"\nWARNING: Monochrome output despite active colors selected!\n"	pointer
)	O
;	O
Deskjet_specials	int
=	O
(	O
po	pointer
->	O
specials	int
!=	O
0	int
)	O
?	O
TRUE	int
:	O
FALSE	int
;	O
if	O
(	O
po	pointer
->	O
picbuf	pointer
->	O
depth	int
>	O
1	int
)	O
{	O
p_K	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
p_C	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
p_M	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
p_Y	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
if	O
(	O
p_K	pointer
==	O
NULL	O
||	O
p_C	pointer
==	O
NULL	O
||	O
p_M	pointer
==	O
NULL	O
||	O
p_Y	pointer
==	O
NULL	O
)	O
{	O
Eprintf	function
(	O
"\nCannot 'calloc' CMYK memory -- sorry, use B/W!\n"	pointer
)	O
;	O
goto	O
PCL_exit	O
;	O
}	O
}	O
n_B	int
=	O
B_EXTRASPACE	int
;	O
p_B	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
(	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
+	O
n_B	int
)	O
,	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
fd	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
WRITE_BIN	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx -- opening output file"	pointer
)	O
;	O
goto	O
PCL_exit	O
;	O
}	O
}	O
if	O
(	O
po	pointer
->	O
init_p	int
)	O
init_printer	function
(	O
po	pointer
,	O
fd	pointer
)	O
;	O
start_graphmode	function
(	O
po	pointer
,	O
fd	pointer
)	O
;	O
for	O
(	O
row_c	int
=	O
po	pointer
->	O
picbuf	pointer
->	O
nr	int
-	O
1	int
;	O
row_c	int
>=	O
0	int
;	O
row_c	int
--	O
)	O
{	O
if	O
(	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
&&	O
(	O
row_c	int
%	O
10	int
==	O
0	int
)	O
)	O
Eprintf	function
(	O
"."	pointer
)	O
;	O
row	pointer
=	O
get_RowBuf	function
(	O
po	pointer
->	O
picbuf	pointer
,	O
row_c	int
)	O
;	O
if	O
(	O
po	pointer
->	O
picbuf	pointer
->	O
depth	int
==	O
1	int
)	O
Buf_to_PCL	function
(	O
row	pointer
->	O
buf	pointer
,	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
PCL_FIRST	int
|	O
PCL_LAST	int
,	O
fd	pointer
)	O
;	O
else	O
{	O
for	O
(	O
x	int
=	O
0	int
;	O
x	int
<	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
;	O
x	int
++	O
)	O
p_K	pointer
[	O
x	int
]	O
=	O
p_C	pointer
[	O
x	int
]	O
=	O
p_M	pointer
[	O
x	int
]	O
=	O
p_Y	pointer
[	O
x	int
]	O
=	O
0	int
;	O
for	O
(	O
x	int
=	O
offset	int
=	O
0	int
;	O
x	int
<	O
(	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
<<	O
3	int
)	O
;	O
x	int
++	O
,	O
offset	int
=	O
(	O
x	int
>>	O
3	int
)	O
)	O
{	O
color_index	int
=	O
index_from_RowBuf	function
(	O
row	pointer
,	O
x	int
,	O
po	pointer
->	O
picbuf	pointer
)	O
;	O
if	O
(	O
color_index	int
==	O
xxBackground	int
)	O
continue	O
;	O
else	O
{	O
mask	char
=	O
0x80	int
;	O
if	O
(	O
(	O
i	int
=	O
x	int
&	O
0x07	int
)	O
!=	O
0	int
)	O
mask	char
>>=	O
i	int
;	O
if	O
(	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
0	int
]	O
+	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
1	int
]	O
+	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
2	int
]	O
==	O
0	int
)	O
{	O
*	O
(	O
p_K	pointer
+	O
offset	int
)	O
|=	O
mask	char
;	O
}	O
else	O
{	O
*	O
(	O
p_C	pointer
+	O
offset	int
)	O
|=	O
(	O
mask	char
^	O
(	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
0	int
]	O
&	O
mask	char
)	O
)	O
;	O
*	O
(	O
p_M	pointer
+	O
offset	int
)	O
|=	O
(	O
mask	char
^	O
(	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
1	int
]	O
&	O
mask	char
)	O
)	O
;	O
*	O
(	O
p_Y	pointer
+	O
offset	int
)	O
|=	O
(	O
mask	char
^	O
(	O
pt	struct
.	O
clut	array
[	O
color_index	int
]	O
[	O
2	int
]	O
&	O
mask	char
)	O
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
po	pointer
->	O
specials	int
)	O
{	O
case	O
3	int
:	O
K_to_CMY	function
(	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
)	O
;	O
case	O
4	int
:	O
KCMY_Buf_to_PCL	function
(	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
(	O
po	pointer
->	O
specials	int
==	O
4	int
)	O
,	O
fd	pointer
)	O
;	O
break	O
;	O
default	O
:	O
KCMY_to_K	function
(	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
)	O
;	O
Buf_to_PCL	function
(	O
p_K	pointer
,	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
,	O
PCL_FIRST	int
|	O
PCL_LAST	int
,	O
fd	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
end_graphmode	function
(	O
fd	pointer
)	O
;	O
if	O
(	O
po	pointer
->	O
formfeed	int
)	O
putc	function
(	O
FF	char
,	O
fd	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
fd	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
fd	pointer
)	O
;	O
PCL_exit	O
:	O
if	O
(	O
p_Y	pointer
!=	O
NULL	O
)	O
free	function
(	O
p_Y	pointer
)	O
;	O
if	O
(	O
p_M	pointer
!=	O
NULL	O
)	O
free	function
(	O
p_M	pointer
)	O
;	O
if	O
(	O
p_C	pointer
!=	O
NULL	O
)	O
free	function
(	O
p_C	pointer
)	O
;	O
if	O
(	O
p_K	pointer
!=	O
NULL	O
)	O
free	function
(	O
p_K	pointer
)	O
;	O
if	O
(	O
p_B	pointer
!=	O
NULL	O
)	O
free	function
(	O
p_B	pointer
)	O
;	O
p_K	pointer
=	O
p_C	pointer
=	O
p_M	pointer
=	O
p_Y	pointer
=	O
NULL	O
;	O
return	O
err	int
;	O
}	O
