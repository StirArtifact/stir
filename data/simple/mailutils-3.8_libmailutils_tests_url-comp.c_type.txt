static	O
const	O
char	O
*	O
strval	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
return	O
str	pointer
[	O
0	int
]	O
?	O
str	pointer
:	O
NULL	O
;	O
}	O
void	O
usage	function
(	O
FILE	struct
*	O
str	pointer
,	O
int	O
code	int
)	O
{	O
fprintf	function
(	O
str	pointer
,	O
"usage: %s [url=URL] [OPTIONS]\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	int
=	O
1	int
,	O
rc	int
;	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
arg	pointer
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"help"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--help"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
usage	function
(	O
stdout	pointer
,	O
0	int
)	O
;	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"url="	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
argv	pointer
[	O
1	int
]	O
+	O
4	int
)	O
)	O
;	O
i	int
=	O
2	int
;	O
}	O
}	O
if	O
(	O
!	O
url	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_url_create_null	function
(	O
&	O
url	pointer
)	O
)	O
;	O
i	int
=	O
1	int
;	O
}	O
for	O
(	O
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"scheme="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_scheme	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
7	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"user="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_user	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"path="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_path	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"host="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_host	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"port="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_port	function
(	O
url	pointer
,	O
atoi	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"service="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_service	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
8	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"auth="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_url_set_auth	function
(	O
url	pointer
,	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"pass="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
mu_secret_t	pointer
secret	pointer
;	O
arg	pointer
=	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
5	int
)	O
;	O
if	O
(	O
arg	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_secret_create	function
(	O
&	O
secret	pointer
,	O
arg	pointer
,	O
strlen	function
(	O
arg	pointer
)	O
)	O
)	O
;	O
}	O
else	O
secret	pointer
=	O
NULL	O
;	O
MU_ASSERT	O
(	O
mu_url_set_secret	function
(	O
url	pointer
,	O
secret	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"param="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
=	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
6	int
)	O
;	O
if	O
(	O
arg	pointer
)	O
MU_ASSERT	O
(	O
mu_url_add_param	function
(	O
url	pointer
,	O
1	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
&	O
arg	pointer
)	O
)	O
;	O
else	O
MU_ASSERT	O
(	O
mu_url_clear_param	function
(	O
url	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"query="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
arg	pointer
=	O
strval	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
6	int
)	O
;	O
if	O
(	O
arg	pointer
)	O
MU_ASSERT	O
(	O
mu_url_add_query	function
(	O
url	pointer
,	O
1	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
&	O
arg	pointer
)	O
)	O
;	O
else	O
MU_ASSERT	O
(	O
mu_url_clear_query	function
(	O
url	pointer
)	O
)	O
;	O
}	O
else	O
{	O
mu_error	function
(	O
"unrecognized argument: %s"	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
rc	int
=	O
mu_url_sget_name	function
(	O
url	pointer
,	O
&	O
arg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
printf	function
(	O
"%s\n"	pointer
,	O
arg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
