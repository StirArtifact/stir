char	O
*	O
hd_table	array
[	O
HD_ELEMS_MAX	int
]	O
=	O
{	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
char	O
hd_ldays	array
[	O
HD_MAX	int
]	O
=	O
{	O
'\0'	O
}	O
;	O
char	O
hd_mdays	array
[	O
HD_MAX	int
]	O
=	O
{	O
'\0'	O
}	O
;	O
int	O
eval_holiday	function
(	O
day	int
,	O
month	int
,	O
year	int
,	O
wd	int
,	O
forwards	int
)	O
int	O
day	int
;	O
const	O
int	O
month	int
;	O
const	O
int	O
year	int
;	O
const	O
int	O
wd	int
;	O
const	O
Bool	int
forwards	int
;	O
{	O
LOOP	O
{	O
if	O
(	O
weekday_of_date	function
(	O
day	int
,	O
month	int
,	O
year	int
)	O
==	O
wd	int
)	O
break	O
;	O
else	O
(	O
forwards	int
)	O
?	O
day	int
++	O
:	O
day	int
--	O
;	O
}	O
if	O
(	O
(	O
year	int
==	O
greg	pointer
->	O
year	int
)	O
&&	O
(	O
month	int
==	O
greg	pointer
->	O
month	int
)	O
&&	O
(	O
day	int
>=	O
greg	pointer
->	O
first_day	int
)	O
&&	O
(	O
day	int
<=	O
greg	pointer
->	O
last_day	int
)	O
)	O
day	int
=	O
(	O
forwards	int
)	O
?	O
eval_holiday	function
(	O
greg	pointer
->	O
last_day	int
+	O
1	int
,	O
month	int
,	O
year	int
,	O
wd	int
,	O
forwards	int
)	O
:	O
eval_holiday	function
(	O
greg	pointer
->	O
first_day	int
-	O
1	int
,	O
month	int
,	O
year	int
,	O
wd	int
,	O
forwards	int
)	O
;	O
return	O
(	O
day	int
)	O
;	O
}	O
int	O
orthodox_easter	function
(	O
year	int
,	O
greg_diff	pointer
,	O
greg_year	int
,	O
greg_month	int
,	O
greg_first_day	int
,	O
greg_last_day	int
)	O
const	O
int	O
year	int
;	O
int	O
*	O
greg_diff	pointer
;	O
const	O
int	O
greg_year	int
;	O
const	O
int	O
greg_month	int
;	O
const	O
int	O
greg_first_day	int
;	O
const	O
int	O
greg_last_day	int
;	O
{	O
auto	O
Greg_struct	struct
tmp_greg	struct
;	O
register	O
int	O
easter	int
;	O
register	O
int	O
diff	int
;	O
tmp_greg	struct
.	O
first_day	int
=	O
greg	pointer
->	O
first_day	int
;	O
tmp_greg	struct
.	O
last_day	int
=	O
greg	pointer
->	O
last_day	int
;	O
tmp_greg	struct
.	O
month	int
=	O
greg	pointer
->	O
month	int
;	O
tmp_greg	struct
.	O
year	int
=	O
greg	pointer
->	O
year	int
;	O
if	O
(	O
year	int
<	O
325	int
)	O
easter	int
=	O
tishri_1	function
(	O
year	int
)	O
-	O
163	int
;	O
else	O
{	O
greg	pointer
->	O
last_day	int
=	O
greg	pointer
->	O
first_day	int
=	O
DAY_MIN	int
;	O
greg	pointer
->	O
month	int
=	O
MONTH_MIN	int
;	O
greg	pointer
->	O
year	int
=	O
YEAR_MAX	int
+	O
3	int
;	O
easter	int
=	O
knuth_easter_formula	function
(	O
year	int
)	O
;	O
}	O
greg	pointer
->	O
year	int
=	O
greg_year	int
;	O
greg	pointer
->	O
month	int
=	O
greg_month	int
;	O
greg	pointer
->	O
first_day	int
=	O
greg_first_day	int
;	O
greg	pointer
->	O
last_day	int
=	O
greg_last_day	int
;	O
diff	int
=	O
julian_gregorian_diff	function
(	O
greg	pointer
->	O
last_day	int
+	O
1	int
,	O
greg	pointer
->	O
month	int
,	O
year	int
)	O
;	O
if	O
(	O
greg_diff	pointer
!=	O
(	O
int	O
*	O
)	O
NULL	O
)	O
*	O
greg_diff	pointer
=	O
diff	int
;	O
greg	pointer
->	O
year	int
=	O
tmp_greg	struct
.	O
year	int
;	O
greg	pointer
->	O
month	int
=	O
tmp_greg	struct
.	O
month	int
;	O
greg	pointer
->	O
last_day	int
=	O
tmp_greg	struct
.	O
last_day	int
;	O
greg	pointer
->	O
first_day	int
=	O
tmp_greg	struct
.	O
first_day	int
;	O
return	O
(	O
easter	int
+	O
diff	int
)	O
;	O
}	O
int	O
tishri_1	function
(	O
year	int
)	O
const	O
int	O
year	int
;	O
{	O
auto	O
double	O
n	long
;	O
register	O
int	O
golden_number	int
=	O
(	O
year	int
%	O
19	int
)	O
+	O
1	int
;	O
register	O
int	O
g12	int
=	O
(	O
12	int
*	O
golden_number	int
)	O
%	O
19	int
;	O
register	O
int	O
doy	int
=	O
day_of_year	function
(	O
dvec	array
[	O
8	int
-	O
1	int
]	O
,	O
8	int
,	O
year	int
)	O
;	O
n	long
=	O
(	O
(	O
765433.0	int
/	O
492480.0	int
)	O
*	O
g12	int
)	O
+	O
(	O
(	O
year	int
%	O
4	int
)	O
/	O
4.0	int
)	O
-	O
(	O
(	O
(	O
313.0	int
*	O
year	int
)	O
+	O
89081.0	int
)	O
/	O
98496.0	int
)	O
;	O
if	O
(	O
year	int
>=	O
greg	pointer
->	O
year	int
)	O
n	long
+=	O
(	O
(	O
year	int
/	O
100	int
)	O
-	O
(	O
year	int
/	O
400	int
)	O
-	O
2.0	int
)	O
;	O
doy	int
+=	O
(	O
int	O
)	O
n	long
;	O
switch	O
(	O
weekday_of_date	function
(	O
(	O
int	O
)	O
n	long
,	O
9	int
,	O
year	int
)	O
)	O
{	O
case	O
3	int
:	O
case	O
5	int
:	O
case	O
DAY_MAX	int
:	O
doy	int
++	O
;	O
break	O
;	O
case	O
DAY_MIN	int
:	O
if	O
(	O
(	O
n	long
-	O
(	O
int	O
)	O
n	long
>=	O
23269.0	int
/	O
25920.0	int
)	O
&&	O
(	O
g12	int
>	O
11	int
)	O
)	O
doy	int
++	O
;	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
(	O
n	long
-	O
(	O
int	O
)	O
n	long
>=	O
1367.0	int
/	O
2160.0	int
)	O
&&	O
(	O
g12	int
>	O
6	int
)	O
)	O
doy	int
++	O
;	O
break	O
;	O
default	O
:	O
;	O
}	O
return	O
(	O
doy	int
)	O
;	O
}	O
int	O
muharram_1	function
(	O
year	int
,	O
doy	int
)	O
const	O
int	O
year	int
;	O
int	O
*	O
doy	int
;	O
{	O
auto	O
Ulint	long
mjd	double
;	O
register	O
int	O
i	int
;	O
register	O
int	O
hijri_year	int
;	O
auto	O
int	O
d	int
;	O
auto	O
int	O
m	int
;	O
auto	O
int	O
y	int
;	O
auto	O
int	O
d2	int
;	O
auto	O
int	O
m2	int
;	O
auto	O
int	O
y2	int
=	O
0	int
;	O
if	O
(	O
year	int
>	O
greg	pointer
->	O
year	int
)	O
hijri_year	int
=	O
(	O
greg	pointer
->	O
year	int
-	O
621	int
)	O
*	O
1.03071206847898	int
+	O
(	O
year	int
-	O
greg	pointer
->	O
year	int
)	O
*	O
1.03069090396012	int
;	O
else	O
hijri_year	int
=	O
(	O
year	int
-	O
621	int
)	O
*	O
1.03071206847898	int
;	O
LOOP	O
{	O
mjd	double
=	O
227017L	int
+	O
(	O
Ulint	long
)	O
(	O
hijri_year	int
/	O
30	int
)	O
*	O
10631L	int
;	O
i	int
=	O
hijri_year	int
%	O
30	int
;	O
if	O
(	O
i	int
)	O
{	O
mjd	double
+=	O
(	O
Ulint	long
)	O
(	O
(	O
i	int
-	O
1	int
)	O
*	O
354	int
)	O
;	O
for	O
(	O
--	O
i	int
;	O
i	int
;	O
i	int
--	O
)	O
if	O
(	O
i	int
==	O
2	int
||	O
i	int
==	O
5	int
||	O
i	int
==	O
7	int
||	O
i	int
==	O
10	int
||	O
i	int
==	O
13	int
||	O
i	int
==	O
16	int
||	O
i	int
==	O
18	int
||	O
i	int
==	O
21	int
||	O
i	int
==	O
24	int
||	O
i	int
==	O
26	int
||	O
i	int
==	O
29	int
)	O
mjd	double
++	O
;	O
}	O
else	O
mjd	double
-=	O
354L	int
;	O
if	O
(	O
mjd	double
<	O
date2num	function
(	O
13	int
,	O
MONTH_MIN	int
,	O
year	int
)	O
)	O
{	O
num2date	function
(	O
mjd	double
,	O
&	O
d2	int
,	O
&	O
m2	int
,	O
&	O
y2	int
)	O
;	O
if	O
(	O
!	O
(	O
++	O
hijri_year	int
%	O
30	int
)	O
)	O
{	O
mjd	double
+=	O
355L	int
;	O
break	O
;	O
}	O
}	O
else	O
break	O
;	O
}	O
num2date	function
(	O
mjd	double
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
)	O
;	O
if	O
(	O
y	int
==	O
y2	int
)	O
{	O
*	O
doy	int
=	O
day_of_year	function
(	O
d	int
,	O
m	int
,	O
y	int
)	O
;	O
return	O
(	O
day_of_year	function
(	O
d2	int
,	O
m2	int
,	O
y2	int
)	O
)	O
;	O
}	O
*	O
doy	int
=	O
0	int
;	O
if	O
(	O
y2	int
==	O
year	int
)	O
return	O
(	O
day_of_year	function
(	O
d2	int
,	O
m2	int
,	O
y2	int
)	O
)	O
;	O
return	O
(	O
day_of_year	function
(	O
d	int
,	O
m	int
,	O
y	int
)	O
)	O
;	O
}	O
int	O
find_chinese_leap_month	function
(	O
conjunction_vector	pointer
,	O
nh_ws_prev_year	pointer
,	O
year	int
,	O
hour	int
,	O
min	int
)	O
Ulint	long
*	O
conjunction_vector	pointer
;	O
Ulint	long
*	O
nh_ws_prev_year	pointer
;	O
const	O
int	O
year	int
;	O
const	O
int	O
hour	int
;	O
const	O
int	O
min	int
;	O
{	O
auto	O
double	O
n	long
;	O
auto	O
Ulint	long
the_conjunction	long
=	O
0L	int
;	O
auto	O
Ulint	long
cj_prev	long
;	O
auto	O
Ulint	long
cj	long
;	O
auto	O
Ulint	long
zq_prev	long
;	O
auto	O
Ulint	long
zq	long
;	O
auto	O
Ulint	long
zq1	long
;	O
register	O
int	O
lm_prev	int
=	O
0	int
;	O
register	O
int	O
lm	int
=	O
0	int
;	O
register	O
int	O
i	int
=	O
0	int
;	O
register	O
int	O
j	int
=	O
0	int
;	O
auto	O
int	O
d	int
;	O
auto	O
int	O
m	int
;	O
auto	O
int	O
y	int
;	O
auto	O
int	O
d2	int
;	O
auto	O
int	O
m2	int
;	O
auto	O
int	O
y2	int
;	O
auto	O
Bool	int
lm_found	int
=	O
FALSE	O
;	O
auto	O
Bool	int
double_zq_found	int
=	O
FALSE	O
;	O
auto	O
Bool	int
second_double_zq_found	int
=	O
FALSE	O
;	O
y	int
=	O
year	int
;	O
n	long
=	O
NH_WS	int
;	O
zq1	long
=	O
(	O
Ulint	long
)	O
sun_longitude	function
(	O
n	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
zq1	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq1	long
)	O
;	O
zq1	long
=	O
(	O
Ulint	long
)	O
next_sun_longitude	function
(	O
&	O
n	long
,	O
60.0	int
,	O
(	O
double	O
)	O
zq1	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
zq1	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq1	long
)	O
;	O
y	int
=	O
year	int
-	O
1	int
;	O
n	long
=	O
NH_WS	int
-	O
30.0	int
;	O
zq_prev	long
=	O
(	O
Ulint	long
)	O
sun_longitude	function
(	O
n	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
zq_prev	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq_prev	long
)	O
;	O
*	O
nh_ws_prev_year	pointer
=	O
zq	long
=	O
(	O
Ulint	long
)	O
next_sun_longitude	function
(	O
&	O
n	long
,	O
30.0	int
,	O
(	O
double	O
)	O
zq_prev	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
zq	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq	long
)	O
;	O
n	long
-=	O
30.0	int
;	O
*	O
conjunction_vector	pointer
=	O
cj	long
=	O
(	O
Ulint	long
)	O
moonphase	function
(	O
MPHASE_NEW	int
,	O
FALSE	O
,	O
NULL	O
,	O
&	O
the_conjunction	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
cj	long
>	O
zq	long
)	O
the_conjunction	long
--	O
;	O
y2	int
=	O
y	int
=	O
year	int
-	O
1	int
;	O
LOOP	O
{	O
cj_prev	long
=	O
cj	long
;	O
cj	long
=	O
(	O
Ulint	long
)	O
moonphase	function
(	O
MPHASE_NEW	int
,	O
FALSE	O
,	O
NULL	O
,	O
&	O
the_conjunction	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
j	int
)	O
{	O
if	O
(	O
*	O
conjunction_vector	pointer
!=	O
cj	long
)	O
*	O
(	O
conjunction_vector	pointer
+	O
j	int
)	O
=	O
cj	long
;	O
else	O
j	int
--	O
;	O
}	O
if	O
(	O
lm	int
||	O
(	O
!	O
lm_found	int
&&	O
(	O
zq	long
<	O
cj	long
)	O
)	O
)	O
{	O
if	O
(	O
lm	int
)	O
{	O
if	O
(	O
!	O
lm_found	int
)	O
{	O
if	O
(	O
zq	long
>=	O
cj	long
)	O
{	O
lm_found	int
=	O
TRUE	O
;	O
lm	int
=	O
(	O
(	O
i	int
+	O
10	int
)	O
%	O
MONTH_MAX	int
)	O
-	O
1	int
;	O
if	O
(	O
lm	int
<=	O
0	int
)	O
{	O
lm	int
+=	O
MONTH_MAX	int
;	O
if	O
(	O
i	int
<	O
MONTH_MAX	int
)	O
lm	int
=	O
-	O
lm	int
;	O
}	O
}	O
}	O
}	O
else	O
lm	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
lm	int
=	O
0	int
;	O
if	O
(	O
lm_found	int
&&	O
(	O
zq_prev	long
>=	O
cj_prev	long
)	O
&&	O
(	O
zq	long
<	O
cj	long
)	O
)	O
{	O
if	O
(	O
!	O
double_zq_found	int
)	O
{	O
double_zq_found	int
=	O
TRUE	O
;	O
lm_prev	int
=	O
lm	int
;	O
}	O
else	O
second_double_zq_found	int
=	O
TRUE	O
;	O
if	O
(	O
lm	int
>	O
0	int
)	O
lm_found	int
=	O
FALSE	O
;	O
}	O
zq_prev	long
=	O
zq	long
;	O
zq	long
=	O
(	O
Ulint	long
)	O
next_sun_longitude	function
(	O
&	O
n	long
,	O
30.0	int
,	O
(	O
double	O
)	O
zq_prev	long
,	O
&	O
d2	int
,	O
&	O
m2	int
,	O
&	O
y2	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
zq	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq	long
)	O
;	O
if	O
(	O
cj	long
>=	O
zq1	long
)	O
break	O
;	O
the_conjunction	long
++	O
;	O
i	int
++	O
;	O
j	int
++	O
;	O
}	O
if	O
(	O
double_zq_found	int
&&	O
!	O
second_double_zq_found	int
)	O
{	O
y	int
=	O
year	int
;	O
zq	long
=	O
(	O
Ulint	long
)	O
sun_longitude	function
(	O
NH_WS	int
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
zq	long
==	O
(	O
Ulint	long
)	O
SPECIAL_VALUE	O
)	O
return	O
(	O
(	O
int	O
)	O
zq	long
)	O
;	O
if	O
(	O
lm	int
==	O
MONTH_MAX	int
)	O
{	O
the_conjunction	long
=	O
0L	int
;	O
cj	long
=	O
(	O
Ulint	long
)	O
moonphase	function
(	O
MPHASE_NEW	int
,	O
FALSE	O
,	O
NULL	O
,	O
&	O
the_conjunction	long
,	O
&	O
d	int
,	O
&	O
m	int
,	O
&	O
y	int
,	O
hour	int
,	O
min	int
)	O
;	O
if	O
(	O
cj	long
==	O
zq	long
)	O
lm	int
=	O
lm_prev	int
;	O
}	O
else	O
if	O
(	O
lm	int
!=	O
MONTH_MAX	int
-	O
1	int
)	O
{	O
j	int
=	O
MONTH_MAX	int
-	O
2	int
;	O
while	O
(	O
*	O
(	O
conjunction_vector	pointer
+	O
j	int
)	O
<=	O
zq	long
)	O
j	int
++	O
;	O
if	O
(	O
j	int
>	O
MONTH_MAX	int
)	O
lm	int
=	O
lm_prev	int
;	O
else	O
lm	int
=	O
SPECIAL_VALUE	O
;	O
}	O
}	O
if	O
(	O
lm	int
==	O
SPECIAL_VALUE	O
)	O
lm	int
=	O
0	int
;	O
return	O
(	O
lm	int
)	O
;	O
}	O
int	O
decode_date_format	function
(	O
format_txt	pointer
,	O
result_txt	pointer
,	O
day	int
,	O
month	int
,	O
year	int
,	O
doy	int
,	O
hls1_set	int
,	O
hls2_set	int
,	O
fixed_length_names	int
)	O
char	O
*	O
format_txt	pointer
;	O
char	O
*	O
*	O
result_txt	pointer
;	O
int	O
day	int
;	O
int	O
month	int
;	O
const	O
int	O
year	int
;	O
const	O
int	O
doy	int
;	O
const	O
Bool	int
hls1_set	int
;	O
const	O
Bool	int
hls2_set	int
;	O
const	O
Bool	int
fixed_length_names	int
;	O
{	O
register	O
int	O
skip_space	int
=	O
0	int
;	O
register	O
int	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
format_txt	pointer
)	O
;	O
register	O
int	O
j	int
;	O
register	O
int	O
k	int
;	O
register	O
int	O
n	long
;	O
register	O
int	O
hls_len	int
=	O
0	int
;	O
register	O
int	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
result_txt	pointer
)	O
;	O
register	O
int	O
pos	int
;	O
auto	O
int	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
auto	O
int	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
auto	O
int	O
d	int
=	O
day	int
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
Bool	int
hlsxe_before_month	int
=	O
TRUE	O
;	O
auto	O
Bool	int
is_obsolete_space	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_marking_char	int
=	O
(	O
Bool	int
)	O
(	O
ehls1s	struct
.	O
len	int
==	O
1	int
)	O
;	O
auto	O
Bool	int
is_special_date	int
=	O
(	O
!	O
day	int
&&	O
doy	int
)	O
;	O
auto	O
Bool	int
is_cformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_sign	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_lzero	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_fformat	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_suffix	pointer
=	O
FALSE	O
;	O
j	int
=	O
len	int
+	O
i	int
;	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
(	O
Uint	int
)	O
j	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
(	O
hls1_set	int
||	O
hls2_set	int
)	O
&&	O
!	O
is_marking_char	int
)	O
{	O
if	O
(	O
hls1_set	int
)	O
hls_len	int
=	O
ehls1s	struct
.	O
len	int
+	O
ehls1e	struct
.	O
len	int
;	O
else	O
hls_len	int
=	O
ehls2s	struct
.	O
len	int
+	O
ehls2e	struct
.	O
len	int
;	O
}	O
if	O
(	O
is_special_date	int
)	O
(	O
void	O
)	O
doy2date	function
(	O
doy	int
,	O
(	O
days_of_february	function
(	O
year	int
)	O
==	O
29	int
)	O
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
do	O
{	O
while	O
(	O
*	O
format_txt	pointer
&&	O
(	O
*	O
format_txt	pointer
!=	O
DFORMAT_CHAR	char
)	O
&&	O
(	O
*	O
format_txt	pointer
!=	O
QUOTE_CHAR	char
)	O
)	O
{	O
if	O
(	O
!	O
skip_space	int
||	O
(	O
(	O
*	O
format_txt	pointer
!=	O
' '	O
)	O
&&	O
(	O
*	O
format_txt	pointer
!=	O
PSEUDO_BLANK	char
)	O
)	O
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
*	O
format_txt	pointer
==	O
PSEUDO_BLANK	char
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
++	O
)	O
=	O
' '	O
;	O
else	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
++	O
)	O
=	O
*	O
format_txt	pointer
;	O
}	O
format_txt	pointer
++	O
;	O
if	O
(	O
skip_space	int
)	O
skip_space	int
--	O
;	O
}	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
)	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
format_txt	pointer
)	O
{	O
if	O
(	O
*	O
format_txt	pointer
==	O
DFORMAT_CHAR	char
)	O
{	O
pos	int
=	O
decode_format	function
(	O
format_txt	pointer
,	O
1	int
,	O
&	O
is_cformat	pointer
,	O
&	O
is_lformat	pointer
,	O
&	O
is_sign	pointer
,	O
&	O
is_lzero	pointer
,	O
&	O
is_suffix	pointer
,	O
&	O
is_fformat	pointer
,	O
&	O
fstyle	pointer
,	O
&	O
fwidth	pointer
)	O
;	O
format_txt	pointer
+=	O
pos	int
;	O
if	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
)	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
switch	O
(	O
*	O
format_txt	pointer
)	O
{	O
case	O
HLS1S_CHAR	char
:	O
if	O
(	O
highlight_flag	int
)	O
{	O
if	O
(	O
!	O
hls1_set	int
&&	O
!	O
hls2_set	int
)	O
{	O
if	O
(	O
!	O
len	int
&&	O
is_marking_char	int
)	O
{	O
len	int
++	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
NO_HLS	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
len	int
)	O
if	O
(	O
is_marking_char	int
&&	O
(	O
*	O
(	O
*	O
result_txt	pointer
+	O
(	O
len	int
-	O
1	int
)	O
)	O
==	O
' '	O
)	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
--	O
len	int
)	O
=	O
'\0'	O
;	O
if	O
(	O
hls1_set	int
)	O
{	O
len	int
+=	O
ehls1s	struct
.	O
len	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
ehls1s	struct
.	O
seq	pointer
)	O
;	O
}	O
else	O
if	O
(	O
hls2_set	int
)	O
{	O
len	int
+=	O
ehls2s	struct
.	O
len	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
ehls2s	struct
.	O
seq	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
HLS1E_CHAR	char
:	O
if	O
(	O
highlight_flag	int
)	O
{	O
if	O
(	O
is_marking_char	int
&&	O
(	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
!=	O
' '	O
)	O
&&	O
(	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
!=	O
PSEUDO_BLANK	char
)	O
&&	O
!	O
hls1_set	int
&&	O
!	O
hls2_set	int
)	O
{	O
len	int
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
NO_HLS	pointer
)	O
;	O
}	O
if	O
(	O
hls1_set	int
)	O
{	O
len	int
+=	O
ehls1e	struct
.	O
len	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
ehls1e	struct
.	O
seq	pointer
)	O
;	O
if	O
(	O
is_marking_char	int
)	O
{	O
skip_space	int
++	O
;	O
hlsxe_before_month	int
=	O
is_obsolete_space	int
=	O
TRUE	O
;	O
}	O
}	O
else	O
if	O
(	O
hls2_set	int
)	O
{	O
len	int
+=	O
ehls2e	struct
.	O
len	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
ehls2e	struct
.	O
seq	pointer
)	O
;	O
if	O
(	O
is_marking_char	int
)	O
{	O
skip_space	int
++	O
;	O
hlsxe_before_month	int
=	O
is_obsolete_space	int
=	O
TRUE	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
DAYNR_CHAR	char
:	O
if	O
(	O
hlsxe_before_month	int
)	O
{	O
hlsxe_before_month	int
=	O
FALSE	O
;	O
if	O
(	O
skip_space	int
)	O
skip_space	int
--	O
;	O
}	O
if	O
(	O
is_special_date	int
)	O
i	int
=	O
doy	int
;	O
else	O
i	int
=	O
day	int
;	O
if	O
(	O
is_suffix	pointer
)	O
k	int
=	O
len_suffix_max	int
;	O
else	O
k	int
=	O
0	int
;	O
if	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
is_special_date	int
)	O
fwidth	pointer
=	O
3	int
;	O
else	O
fwidth	pointer
=	O
2	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
+	O
k	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
else	O
if	O
(	O
is_special_date	int
)	O
{	O
fwidth	pointer
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
j	int
=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
,	O
""	pointer
,	O
i	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
len	int
+=	O
j	int
;	O
if	O
(	O
is_suffix	pointer
)	O
{	O
k	int
+=	O
fwidth	pointer
;	O
if	O
(	O
j	int
!=	O
k	int
)	O
{	O
if	O
(	O
j	int
<	O
k	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
k	int
-	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
+	O
k	int
-	O
j	int
)	O
=	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
k	int
-	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
j	int
+	O
i	int
)	O
=	O
' '	O
;	O
len	int
+=	O
(	O
k	int
-	O
j	int
)	O
;	O
}	O
else	O
if	O
(	O
is_fformat	pointer
)	O
len	int
-=	O
(	O
j	int
-	O
k	int
)	O
;	O
}	O
}	O
if	O
(	O
doy	int
)	O
{	O
if	O
(	O
!	O
d	int
)	O
{	O
ptr_char	pointer
=	O
_	O
(	O
" day"	pointer
)	O
;	O
len	int
+=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
ptr_char	pointer
)	O
;	O
}	O
else	O
{	O
fwidth	pointer
++	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
2	int
+	O
fwidth	pointer
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
"("	pointer
)	O
;	O
len	int
+=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
+	O
1	int
,	O
""	pointer
,	O
doy	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
FALSE	O
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
")"	pointer
)	O
;	O
len	int
+=	O
2	int
;	O
}	O
}	O
break	O
;	O
case	O
WDNAME_CHAR	char
:	O
if	O
(	O
hlsxe_before_month	int
)	O
{	O
hlsxe_before_month	int
=	O
FALSE	O
;	O
if	O
(	O
skip_space	int
)	O
skip_space	int
--	O
;	O
}	O
if	O
(	O
fixed_length_names	int
&&	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
)	O
{	O
fwidth	pointer
=	O
len_dayname_max	int
;	O
is_lformat	pointer
=	O
TRUE	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
len	int
+=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
,	O
day_name	function
(	O
weekday_of_date	function
(	O
day	int
,	O
month	int
,	O
year	int
)	O
)	O
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
MONTHNAME_CHAR	char
:	O
if	O
(	O
!	O
is_special_date	int
)	O
{	O
if	O
(	O
fixed_length_names	int
&&	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
)	O
{	O
fwidth	pointer
=	O
len_monthname_max	int
;	O
is_lformat	pointer
=	O
TRUE	O
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
len	int
+=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
,	O
month_name	function
(	O
month	int
)	O
,	O
0	int
,	O
FALSE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
len	int
)	O
{	O
if	O
(	O
(	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
==	O
' '	O
||	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
==	O
PSEUDO_BLANK	char
)	O
&&	O
(	O
*	O
(	O
*	O
result_txt	pointer
+	O
(	O
len	int
-	O
1	int
)	O
)	O
==	O
' '	O
)	O
)	O
skip_space	int
++	O
;	O
else	O
if	O
(	O
!	O
skip_space	int
&&	O
is_obsolete_space	int
&&	O
hlsxe_before_month	int
)	O
skip_space	int
++	O
;	O
}	O
hlsxe_before_month	int
=	O
is_obsolete_space	int
=	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
MONTHNR_CHAR	char
:	O
if	O
(	O
!	O
is_special_date	int
)	O
{	O
if	O
(	O
is_suffix	pointer
)	O
k	int
=	O
len_suffix_max	int
;	O
else	O
k	int
=	O
0	int
;	O
if	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
{	O
fwidth	pointer
=	O
2	int
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
+	O
k	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
j	int
=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
,	O
""	pointer
,	O
month	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
len	int
+=	O
j	int
;	O
if	O
(	O
is_suffix	pointer
)	O
{	O
k	int
+=	O
fwidth	pointer
;	O
if	O
(	O
j	int
!=	O
k	int
)	O
{	O
if	O
(	O
j	int
<	O
k	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
k	int
-	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
+	O
k	int
-	O
j	int
)	O
=	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
k	int
-	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
j	int
+	O
i	int
)	O
=	O
' '	O
;	O
len	int
+=	O
(	O
k	int
-	O
j	int
)	O
;	O
}	O
else	O
if	O
(	O
is_fformat	pointer
)	O
len	int
-=	O
(	O
j	int
-	O
k	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
len	int
)	O
{	O
if	O
(	O
(	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
==	O
' '	O
||	O
*	O
(	O
format_txt	pointer
+	O
1	int
)	O
==	O
PSEUDO_BLANK	char
)	O
&&	O
(	O
*	O
(	O
*	O
result_txt	pointer
+	O
(	O
len	int
-	O
1	int
)	O
)	O
==	O
' '	O
)	O
)	O
skip_space	int
++	O
;	O
else	O
if	O
(	O
!	O
skip_space	int
&&	O
is_obsolete_space	int
&&	O
hlsxe_before_month	int
)	O
skip_space	int
++	O
;	O
}	O
hlsxe_before_month	int
=	O
is_obsolete_space	int
=	O
FALSE	O
;	O
}	O
break	O
;	O
case	O
YEARNR_CHAR	char
:	O
if	O
(	O
hlsxe_before_month	int
)	O
{	O
hlsxe_before_month	int
=	O
FALSE	O
;	O
if	O
(	O
skip_space	int
)	O
skip_space	int
--	O
;	O
}	O
n	long
=	O
len_year_max	int
;	O
if	O
(	O
transform_year	int
)	O
{	O
j	int
=	O
year	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
j	int
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
j	int
++	O
;	O
if	O
(	O
abs	function
(	O
j	int
)	O
>	O
YEAR_MAX	int
)	O
n	long
++	O
;	O
}	O
else	O
j	int
=	O
year	int
;	O
if	O
(	O
is_suffix	pointer
)	O
k	int
=	O
len_suffix_max	int
;	O
else	O
k	int
=	O
0	int
;	O
if	O
(	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
{	O
fwidth	pointer
=	O
n	long
;	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
fwidth	pointer
+	O
k	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
}	O
j	int
=	O
use_format	function
(	O
result_txt	pointer
,	O
len	int
,	O
""	pointer
,	O
j	int
,	O
TRUE	O
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
0	int
)	O
;	O
len	int
+=	O
j	int
;	O
if	O
(	O
is_suffix	pointer
)	O
{	O
k	int
+=	O
fwidth	pointer
;	O
if	O
(	O
j	int
!=	O
k	int
)	O
{	O
if	O
(	O
j	int
<	O
k	int
)	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
k	int
-	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
+	O
k	int
-	O
j	int
)	O
=	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
i	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
k	int
-	O
j	int
;	O
i	int
++	O
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
-	O
j	int
+	O
i	int
)	O
=	O
' '	O
;	O
len	int
+=	O
(	O
k	int
-	O
j	int
)	O
;	O
}	O
else	O
if	O
(	O
is_fformat	pointer
)	O
len	int
-=	O
(	O
j	int
-	O
k	int
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
Uint	int
)	O
len	int
+	O
2	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
maxlen_max	int
<<	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
switch	O
(	O
*	O
++	O
format_txt	pointer
)	O
{	O
case	O
PSEUDO_BLANK	char
:	O
case	O
DFORMAT_CHAR	char
:	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
++	O
)	O
=	O
*	O
format_txt	pointer
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
)	O
=	O
'\0'	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
*	O
format_txt	pointer
)	O
{	O
if	O
(	O
*	O
format_txt	pointer
!=	O
QUOTE_CHAR	char
)	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
++	O
)	O
=	O
QUOTE_CHAR	char
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
++	O
)	O
=	O
*	O
format_txt	pointer
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
len	int
)	O
=	O
'\0'	O
;	O
}	O
else	O
format_txt	pointer
--	O
;	O
}	O
}	O
}	O
else	O
break	O
;	O
}	O
while	O
(	O
*	O
++	O
format_txt	pointer
)	O
;	O
return	O
(	O
hls_len	int
)	O
;	O
}	O
int	O
decode_format	function
(	O
format_txt	pointer
,	O
pos	int
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
)	O
char	O
*	O
format_txt	pointer
;	O
int	O
pos	int
;	O
Bool	int
*	O
is_cformat	pointer
;	O
Bool	int
*	O
is_lformat	pointer
;	O
Bool	int
*	O
is_sign	pointer
;	O
Bool	int
*	O
is_lzero	pointer
;	O
Bool	int
*	O
is_suffix	pointer
;	O
Bool	int
*	O
is_fformat	pointer
;	O
int	O
*	O
fstyle	pointer
;	O
int	O
*	O
fwidth	pointer
;	O
{	O
register	O
int	O
old_pos	int
=	O
pos	int
;	O
register	O
int	O
i	int
;	O
register	O
int	O
len	int
;	O
*	O
is_cformat	pointer
=	O
(	O
*	O
is_lformat	pointer
)	O
=	O
(	O
*	O
is_sign	pointer
)	O
=	O
(	O
*	O
is_lzero	pointer
)	O
=	O
(	O
*	O
is_suffix	pointer
)	O
=	O
(	O
*	O
is_fformat	pointer
)	O
=	O
FALSE	O
;	O
*	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
switch	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
{	O
case	O
FLEFT_CHAR	char
:	O
*	O
is_lformat	pointer
=	O
TRUE	O
;	O
pos	int
++	O
;	O
break	O
;	O
case	O
FCENTER_CHAR	char
:	O
*	O
is_cformat	pointer
=	O
TRUE	O
;	O
case	O
FRIGHT_CHAR	char
:	O
pos	int
++	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
old_pos	int
)	O
;	O
}	O
if	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
==	O
FSIGN_CHAR	char
)	O
{	O
pos	int
++	O
;	O
*	O
is_sign	pointer
=	O
TRUE	O
;	O
}	O
if	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
==	O
FLZERO_CHAR	char
)	O
{	O
pos	int
++	O
;	O
*	O
is_lzero	pointer
=	O
TRUE	O
;	O
}	O
if	O
(	O
isdigit	function
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
)	O
{	O
if	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
!=	O
FLZERO_CHAR	char
)	O
{	O
*	O
fwidth	pointer
=	O
atoi	function
(	O
format_txt	pointer
+	O
pos	int
)	O
;	O
if	O
(	O
*	O
fwidth	pointer
>	O
FWIDTH_MAX	int
)	O
*	O
fwidth	pointer
=	O
i	int
=	O
FWIDTH_MAX	int
;	O
else	O
i	int
=	O
*	O
fwidth	pointer
;	O
if	O
(	O
!	O
i	int
)	O
len	int
=	O
1	int
;	O
else	O
{	O
len	int
=	O
0	int
;	O
while	O
(	O
i	int
)	O
{	O
len	int
++	O
;	O
i	int
/=	O
10	int
;	O
}	O
}	O
pos	int
+=	O
len	int
;	O
if	O
(	O
toupper	function
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
==	O
toupper	function
(	O
FUPPER_CHAR	char
)	O
)	O
{	O
pos	int
++	O
;	O
*	O
fstyle	pointer
=	O
FSTYLE_UPPER	int
;	O
}	O
if	O
(	O
toupper	function
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
==	O
toupper	function
(	O
FLOWER_CHAR	char
)	O
)	O
{	O
if	O
(	O
*	O
fstyle	pointer
==	O
FSTYLE_NONE	O
)	O
{	O
pos	int
++	O
;	O
*	O
fstyle	pointer
=	O
FSTYLE_LOWER	int
;	O
}	O
else	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
if	O
(	O
toupper	function
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
==	O
toupper	function
(	O
FWORD_CHAR	char
)	O
)	O
{	O
if	O
(	O
*	O
fstyle	pointer
==	O
FSTYLE_NONE	O
)	O
{	O
pos	int
++	O
;	O
*	O
fstyle	pointer
=	O
FSTYLE_WORD	int
;	O
}	O
else	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
if	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
==	O
FSUFFIX_CHAR	char
)	O
{	O
pos	int
++	O
;	O
*	O
is_suffix	pointer
=	O
TRUE	O
;	O
}	O
switch	O
(	O
*	O
(	O
format_txt	pointer
+	O
pos	int
)	O
)	O
{	O
case	O
FFIX_CHAR	char
:	O
*	O
is_fformat	pointer
=	O
TRUE	O
;	O
case	O
FVAR_CHAR	char
:	O
pos	int
++	O
;	O
break	O
;	O
default	O
:	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
}	O
else	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
*	O
fwidth	pointer
==	O
SPECIAL_VALUE	O
)	O
{	O
*	O
is_cformat	pointer
=	O
(	O
*	O
is_lformat	pointer
)	O
=	O
(	O
*	O
is_sign	pointer
)	O
=	O
(	O
*	O
is_lzero	pointer
)	O
=	O
(	O
*	O
is_suffix	pointer
)	O
=	O
(	O
*	O
is_fformat	pointer
)	O
=	O
FALSE	O
;	O
*	O
fstyle	pointer
=	O
FSTYLE_NONE	O
;	O
return	O
(	O
old_pos	int
)	O
;	O
}	O
return	O
(	O
pos	int
)	O
;	O
}	O
int	O
use_format	function
(	O
result_txt	pointer
,	O
pos	int
,	O
string	pointer
,	O
value	long
,	O
is_numeric	int
,	O
is_cformat	pointer
,	O
is_lformat	pointer
,	O
is_sign	pointer
,	O
is_lzero	pointer
,	O
is_suffix	pointer
,	O
is_fformat	pointer
,	O
fstyle	pointer
,	O
fwidth	pointer
,	O
extra_len	int
)	O
char	O
*	O
*	O
result_txt	pointer
;	O
const	O
int	O
pos	int
;	O
const	O
char	O
*	O
string	pointer
;	O
const	O
long	O
value	long
;	O
const	O
Bool	int
is_numeric	int
;	O
const	O
Bool	int
is_cformat	pointer
;	O
const	O
Bool	int
is_lformat	pointer
;	O
const	O
Bool	int
is_sign	pointer
;	O
const	O
Bool	int
is_lzero	pointer
;	O
const	O
Bool	int
is_suffix	pointer
;	O
const	O
Bool	int
is_fformat	pointer
;	O
const	O
int	O
fstyle	pointer
;	O
const	O
int	O
fwidth	pointer
;	O
const	O
int	O
extra_len	int
;	O
{	O
register	O
int	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
string	pointer
)	O
;	O
register	O
int	O
j	int
;	O
register	O
int	O
n	long
;	O
register	O
int	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
result_txt	pointer
)	O
;	O
register	O
int	O
suffix_len	int
=	O
0	int
;	O
auto	O
char	O
*	O
buf	pointer
;	O
auto	O
char	O
*	O
tmp	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
Bool	int
is_translated	int
;	O
j	int
=	O
len	int
+	O
fwidth	pointer
;	O
if	O
(	O
!	O
is_fformat	pointer
&&	O
(	O
i	int
>	O
fwidth	pointer
)	O
)	O
j	int
=	O
len	int
+	O
i	int
;	O
if	O
(	O
is_suffix	pointer
)	O
j	int
+=	O
len_suffix_max	int
;	O
if	O
(	O
(	O
Uint	int
)	O
j	int
>=	O
maxlen_max	int
)	O
resize_all_strings	function
(	O
(	O
Uint	int
)	O
j	int
+	O
1	int
,	O
FALSE	O
,	O
__FILE__	O
,	O
(	O
long	O
)	O
__LINE__	O
)	O
;	O
if	O
(	O
is_numeric	int
)	O
{	O
auto	O
long	O
num	long
=	O
value	long
;	O
if	O
(	O
!	O
num	long
)	O
len	int
=	O
1	int
;	O
else	O
{	O
len	int
=	O
0	int
;	O
if	O
(	O
is_sign	pointer
||	O
(	O
num	long
<	O
0L	int
)	O
)	O
len	int
++	O
;	O
while	O
(	O
num	long
)	O
{	O
len	int
++	O
;	O
num	long
/=	O
10L	int
;	O
}	O
}	O
if	O
(	O
is_lzero	pointer
&&	O
(	O
len	int
<	O
fwidth	pointer
)	O
)	O
len	int
=	O
fwidth	pointer
;	O
if	O
(	O
is_suffix	pointer
)	O
len	int
+=	O
len_suffix_max	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
len	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"buf"	pointer
,	O
0	int
)	O
;	O
if	O
(	O
is_sign	pointer
)	O
{	O
if	O
(	O
is_lzero	pointer
)	O
sprintf	function
(	O
buf	pointer
,	O
"%+0*ld"	pointer
,	O
fwidth	pointer
,	O
value	long
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"%+ld"	pointer
,	O
value	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
is_lzero	pointer
)	O
sprintf	function
(	O
buf	pointer
,	O
"%0*ld"	pointer
,	O
fwidth	pointer
,	O
value	long
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"%ld"	pointer
,	O
value	long
)	O
;	O
}	O
if	O
(	O
is_suffix	pointer
)	O
{	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
day_suffix	function
(	O
(	O
int	O
)	O
value	long
)	O
;	O
suffix_len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
tmp	pointer
)	O
;	O
strcat	function
(	O
buf	pointer
,	O
tmp	pointer
)	O
;	O
}	O
}	O
else	O
{	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"buf"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
string	pointer
)	O
;	O
}	O
j	int
=	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
;	O
switch	O
(	O
fstyle	pointer
)	O
{	O
case	O
FSTYLE_UPPER	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
isupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
&&	O
(	O
translate_string	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
ptr_char	pointer
=	O
translate_string	pointer
+	O
1	int
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
buf	pointer
[	O
i	int
]	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
*	O
--	O
ptr_char	pointer
;	O
break	O
;	O
}	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
FSTYLE_LOWER	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
tolower	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
islower	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
&&	O
(	O
translate_string	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
{	O
ptr_char	pointer
=	O
translate_string	pointer
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
buf	pointer
[	O
i	int
]	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
*	O
++	O
ptr_char	pointer
;	O
break	O
;	O
}	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
FSTYLE_WORD	int
:	O
*	O
buf	pointer
=	O
(	O
char	O
)	O
toupper	function
(	O
*	O
buf	pointer
)	O
;	O
if	O
(	O
translate_string	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
isalpha	function
(	O
buf	pointer
[	O
i	int
-	O
1	int
]	O
)	O
)	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
else	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
tolower	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
is_translated	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
isupper	function
(	O
*	O
buf	pointer
)	O
)	O
{	O
ptr_char	pointer
=	O
translate_string	pointer
+	O
1	int
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
*	O
buf	pointer
)	O
{	O
*	O
buf	pointer
=	O
*	O
--	O
ptr_char	pointer
;	O
is_translated	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
*	O
(	O
ptr_char	pointer
-	O
1	int
)	O
==	O
*	O
buf	pointer
)	O
{	O
is_translated	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
isalpha	function
(	O
buf	pointer
[	O
i	int
-	O
1	int
]	O
)	O
&&	O
!	O
is_translated	int
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
toupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
isupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
)	O
{	O
ptr_char	pointer
=	O
translate_string	pointer
+	O
1	int
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
buf	pointer
[	O
i	int
]	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
*	O
--	O
ptr_char	pointer
;	O
is_translated	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
*	O
(	O
ptr_char	pointer
-	O
1	int
)	O
==	O
buf	pointer
[	O
i	int
]	O
)	O
{	O
is_translated	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
}	O
else	O
if	O
(	O
isupper	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
)	O
is_translated	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
(	O
char	O
)	O
tolower	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
islower	function
(	O
buf	pointer
[	O
i	int
]	O
)	O
)	O
{	O
ptr_char	pointer
=	O
translate_string	pointer
;	O
while	O
(	O
*	O
ptr_char	pointer
)	O
{	O
if	O
(	O
*	O
ptr_char	pointer
==	O
buf	pointer
[	O
i	int
]	O
)	O
{	O
buf	pointer
[	O
i	int
]	O
=	O
*	O
++	O
ptr_char	pointer
;	O
break	O
;	O
}	O
ptr_char	pointer
++	O
;	O
if	O
(	O
*	O
ptr_char	pointer
==	O
buf	pointer
[	O
i	int
]	O
)	O
break	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
if	O
(	O
!	O
*	O
ptr_char	pointer
)	O
is_translated	int
=	O
FALSE	O
;	O
}	O
}	O
}	O
}	O
break	O
;	O
default	O
:	O
;	O
}	O
if	O
(	O
!	O
is_numeric	int
&&	O
extra_len	int
&&	O
(	O
len	int
!=	O
extra_len	int
)	O
)	O
len	int
=	O
extra_len	int
;	O
if	O
(	O
is_cformat	pointer
)	O
{	O
if	O
(	O
len	int
<	O
fwidth	pointer
)	O
{	O
n	long
=	O
fwidth	pointer
-	O
len	int
;	O
n	long
>>=	O
1	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
n	long
+	O
2	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"tmp"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
tmp	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
tmp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
tmp	pointer
)	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
(	O
fwidth	pointer
-	O
len	int
)	O
%	O
2	int
)	O
{	O
tmp	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
tmp	pointer
[	O
i	int
+	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
else	O
{	O
if	O
(	O
is_fformat	pointer
)	O
{	O
if	O
(	O
is_numeric	int
)	O
{	O
if	O
(	O
is_suffix	pointer
)	O
{	O
i	int
=	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
else	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
+	O
suffix_len	int
)	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
is_lformat	pointer
)	O
{	O
if	O
(	O
is_fformat	pointer
&&	O
(	O
len	int
>	O
fwidth	pointer
)	O
)	O
{	O
if	O
(	O
is_numeric	int
)	O
{	O
if	O
(	O
is_suffix	pointer
)	O
{	O
i	int
=	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
else	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
+	O
suffix_len	int
)	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
{	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
len	int
<	O
fwidth	pointer
)	O
{	O
n	long
=	O
fwidth	pointer
-	O
len	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
n	long
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"tmp"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
tmp	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
tmp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
is_fformat	pointer
&&	O
(	O
len	int
>	O
fwidth	pointer
)	O
)	O
{	O
if	O
(	O
is_numeric	int
)	O
{	O
if	O
(	O
is_suffix	pointer
)	O
{	O
i	int
=	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
else	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
-	O
suffix_len	int
,	O
fwidth	pointer
+	O
suffix_len	int
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
+	O
suffix_len	int
)	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
+	O
len	int
-	O
fwidth	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
{	O
strncpy	function
(	O
*	O
result_txt	pointer
+	O
pos	int
,	O
buf	pointer
,	O
fwidth	pointer
)	O
;	O
*	O
(	O
*	O
result_txt	pointer
+	O
pos	int
+	O
fwidth	pointer
)	O
=	O
'\0'	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
len	int
<	O
fwidth	pointer
)	O
{	O
n	long
=	O
fwidth	pointer
-	O
len	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
n	long
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"tmp"	pointer
,	O
0	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
tmp	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
tmp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
j	int
=	O
fwidth	pointer
;	O
}	O
strcat	function
(	O
*	O
result_txt	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
(	O
j	int
)	O
;	O
}	O
void	O
print_all_holidays	function
(	O
init_data	pointer
,	O
detected	int
)	O
Bool	int
init_data	pointer
;	O
const	O
Bool	int
detected	int
;	O
{	O
auto	O
const	O
Cc_struct	struct
*	O
ptr_cc	pointer
;	O
register	O
int	O
easter	int
;	O
register	O
int	O
i	int
=	O
0	int
;	O
register	O
int	O
j	int
=	O
0	int
;	O
register	O
int	O
k	int
;	O
register	O
int	O
fday	int
=	O
0	int
;	O
register	O
int	O
count	int
=	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
?	O
2	int
:	O
1	int
;	O
auto	O
int	O
hd_elems	pointer
=	O
0	int
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
if	O
(	O
init_data	pointer
||	O
detected	int
)	O
{	O
if	O
(	O
init_data	pointer
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HD_MAX	int
;	O
i	int
++	O
)	O
hd_ldays	array
[	O
i	int
]	O
=	O
hd_mdays	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
{	O
fday	int
=	O
day_of_year	function
(	O
DAY_MIN	int
,	O
fiscal_month	int
,	O
year	int
)	O
;	O
j	int
=	O
is_leap_year	int
;	O
i	int
=	O
year	int
;	O
}	O
do	O
{	O
count	int
--	O
;	O
easter	int
=	O
knuth_easter_formula	function
(	O
year	int
)	O
;	O
if	O
(	O
hdy_astronomical	int
)	O
astronomical_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
hdy_bahai	int
)	O
bahai_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hdy_celtic	int
)	O
celtic_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hdy_chinese_flexible	int
)	O
chinese_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
hdy_chinese	int
)	O
chinese_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
hdy_christian	int
)	O
christian_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
easter	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
hdy_hebrew	int
)	O
hebrew_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hdy_islamic	int
)	O
islamic_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hdy_japanese_flexible	int
)	O
japanese_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
hdy_japanese	int
)	O
japanese_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
hdy_multicultural_new_year	int
)	O
multicultural_new_year_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
hdy_orthodox_new	int
)	O
orthodox_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
easter	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
hdy_orthodox_old	int
)	O
orthodox_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
easter	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
hdy_persian	int
)	O
persian_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hdy_zodiacal_marker	int
)	O
zodiacal_marker_hdy	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_bahai	int
)	O
bahai_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_chinese_flexible	int
)	O
chinese_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
mth_chinese	int
)	O
chinese_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
FALSE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
mth_coptic	int
)	O
coptic_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
TRUE	O
)	O
;	O
if	O
(	O
mth_ethiopic	int
)	O
coptic_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
mth_french_revolutionary	int
)	O
french_revolutionary_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_hebrew	int
)	O
hebrew_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_indian_civil	int
)	O
indian_civil_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_islamic	int
)	O
islamic_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
mth_japanese_flexible	int
)	O
chinese_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
TRUE	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
mth_japanese	int
)	O
chinese_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
FALSE	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
mth_old_armenic	int
)	O
old_egyptic_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
FALSE	O
)	O
;	O
if	O
(	O
mth_old_egyptic	int
)	O
old_egyptic_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
,	O
TRUE	O
)	O
;	O
if	O
(	O
mth_persian	int
)	O
persian_mth	function
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
cc	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
=	O
cc	pointer
;	O
do	O
{	O
k	int
=	O
0	int
;	O
while	O
(	O
*	O
ptr_char	pointer
&&	O
(	O
*	O
ptr_char	pointer
!=	O
*	O
CONNECT_SEP	pointer
)	O
)	O
s1	pointer
[	O
k	int
++	O
]	O
=	O
*	O
ptr_char	pointer
++	O
;	O
s1	pointer
[	O
k	int
]	O
=	O
'\0'	O
;	O
ptr_cc	pointer
=	O
binsearch_cc_id	function
(	O
s1	pointer
)	O
;	O
if	O
(	O
ptr_cc	pointer
==	O
(	O
Cc_struct	struct
*	O
)	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
else	O
(	O
*	O
ptr_cc	pointer
->	O
Cc_hdy_handler	pointer
)	O
(	O
&	O
init_data	pointer
,	O
detected	int
,	O
easter	int
,	O
year	int
,	O
&	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
;	O
if	O
(	O
*	O
ptr_char	pointer
)	O
ptr_char	pointer
++	O
;	O
}	O
while	O
(	O
*	O
ptr_char	pointer
)	O
;	O
}	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
{	O
year	int
++	O
;	O
is_leap_year	int
=	O
(	O
days_of_february	function
(	O
year	int
)	O
==	O
29	int
)	O
;	O
}	O
}	O
while	O
(	O
count	int
)	O
;	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
{	O
is_leap_year	int
=	O
j	int
;	O
year	int
=	O
i	int
;	O
}	O
}	O
if	O
(	O
hd_elems	pointer
&&	O
holiday_flag	int
)	O
{	O
if	O
(	O
hd_elems	pointer
>	O
1	int
)	O
{	O
if	O
(	O
!	O
is_presorted	function
(	O
hd_table	array
,	O
hd_elems	pointer
)	O
)	O
{	O
if	O
(	O
hd_sort_des_flag	int
)	O
qsort	function
(	O
(	O
VOID_PTR	O
)	O
hd_table	array
,	O
hd_elems	pointer
,	O
sizeof	O
*	O
hd_table	array
,	O
(	O
Cmp_func	pointer
)	O
des_sort	function
)	O
;	O
else	O
qsort	function
(	O
(	O
VOID_PTR	O
)	O
hd_table	array
,	O
hd_elems	pointer
,	O
sizeof	O
*	O
hd_table	array
,	O
(	O
Cmp_func	pointer
)	O
asc_sort	function
)	O
;	O
}	O
else	O
if	O
(	O
hd_sort_des_flag	int
)	O
reverse_order	function
(	O
hd_table	array
,	O
hd_elems	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
detected	int
)	O
{	O
register	O
int	O
n	long
;	O
register	O
int	O
lym	int
;	O
register	O
int	O
m2	int
=	O
fiscal_month	int
+	O
1	int
;	O
register	O
int	O
m3	int
=	O
fiscal_month	int
+	O
2	int
;	O
register	O
int	O
tmp_month	int
=	O
month	int
;	O
auto	O
Bool	int
hd_title_shown	int
=	O
FALSE	O
;	O
auto	O
Bool	int
tmp_ify	int
=	O
is_fiscal_year	int
;	O
if	O
(	O
hd_title_flag	int
&&	O
!	O
is_1month_mode	int
&&	O
!	O
is_2month_mode	int
&&	O
(	O
(	O
!	O
is_3month_mode	int
&&	O
!	O
is_3month_mode2	int
&&	O
(	O
(	O
!	O
is_fiscal_year	int
&&	O
!	O
month	int
)	O
||	O
(	O
is_fiscal_year	int
&&	O
(	O
fiscal_month	int
==	O
MONTH_MIN	int
)	O
)	O
)	O
)	O
||	O
is_3month_mode2	int
||	O
(	O
is_3month_mode	int
&&	O
(	O
fiscal_month	int
<	O
MONTH_MAX	int
-	O
1	int
)	O
)	O
)	O
)	O
{	O
*	O
s1	pointer
=	O
'\0'	O
;	O
if	O
(	O
!	O
hd_suppr_list_sep_flag	int
)	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
hd_title_flag	int
)	O
{	O
lym	int
=	O
len_year_max	int
;	O
if	O
(	O
transform_year	int
)	O
{	O
n	long
=	O
year	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
n	long
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
n	long
++	O
;	O
if	O
(	O
abs	function
(	O
n	long
)	O
>	O
YEAR_MAX	int
)	O
lym	int
++	O
;	O
}	O
else	O
n	long
=	O
year	int
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
)	O
;	O
if	O
(	O
use_year_zeroleaded	int
)	O
{	O
if	O
(	O
is_leap_year	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s:%*sThe year %0*d is A leap year"	pointer
)	O
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
,	O
LEN_HD_NAME	int
-	O
i	int
+	O
2	int
,	O
""	pointer
,	O
lym	int
,	O
n	long
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s:%*sThe year %0*d is NO leap year"	pointer
)	O
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
,	O
LEN_HD_NAME	int
-	O
i	int
+	O
2	int
,	O
""	pointer
,	O
lym	int
,	O
n	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
is_leap_year	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s:%*sThe year %d is A leap year"	pointer
)	O
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
,	O
LEN_HD_NAME	int
-	O
i	int
+	O
2	int
,	O
""	pointer
,	O
n	long
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s:%*sThe year %d is NO leap year"	pointer
)	O
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
,	O
LEN_HD_NAME	int
-	O
i	int
+	O
2	int
,	O
""	pointer
,	O
n	long
)	O
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
hd_table	array
[	O
0	int
]	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
}	O
hd_title_shown	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
is_3month_mode	int
||	O
is_1month_mode	int
||	O
is_2month_mode	int
||	O
is_3month_mode2	int
)	O
{	O
if	O
(	O
fiscal_month	int
>=	O
MONTH_MAX	int
-	O
1	int
)	O
{	O
m3	int
=	O
MONTH_MIN	int
;	O
if	O
(	O
fiscal_month	int
==	O
MONTH_MAX	int
)	O
{	O
m2	int
=	O
MONTH_MIN	int
;	O
m3	int
++	O
;	O
}	O
}	O
is_fiscal_year	int
=	O
FALSE	O
;	O
month	int
=	O
fiscal_month	int
;	O
}	O
i	int
=	O
j	int
=	O
0	int
;	O
while	O
(	O
(	O
hd_table	array
[	O
i	int
]	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
&&	O
(	O
i	int
<	O
HD_ELEMS_MAX	int
)	O
)	O
{	O
if	O
(	O
is_3month_mode	int
||	O
is_1month_mode	int
||	O
is_2month_mode	int
||	O
is_3month_mode2	int
||	O
(	O
month	int
&&	O
!	O
is_fiscal_year	int
)	O
)	O
{	O
s1	pointer
[	O
0	int
]	O
=	O
hd_table	array
[	O
i	int
]	O
[	O
len_year_max	int
]	O
;	O
s1	pointer
[	O
1	int
]	O
=	O
hd_table	array
[	O
i	int
]	O
[	O
len_year_max	int
+	O
1	int
]	O
;	O
s1	pointer
[	O
2	int
]	O
=	O
'\0'	O
;	O
j	int
=	O
my_atoi	function
(	O
s1	pointer
)	O
;	O
}	O
if	O
(	O
is_fiscal_year	int
||	O
!	O
month	int
||	O
month	int
==	O
j	int
||	O
(	O
is_1month_mode	int
&&	O
(	O
month	int
==	O
j	int
)	O
)	O
||	O
(	O
is_2month_mode	int
&&	O
(	O
j	int
==	O
m2	int
)	O
)	O
||	O
(	O
(	O
is_3month_mode	int
||	O
is_3month_mode2	int
)	O
&&	O
(	O
j	int
==	O
m2	int
||	O
j	int
==	O
m3	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
hd_legal_days_only	int
||	O
(	O
hd_legal_days_only	int
&&	O
(	O
*	O
(	O
*	O
(	O
hd_table	array
+	O
i	int
)	O
+	O
LEN_HD_NAME	int
+	O
len_year_max	int
+	O
4	int
+	O
2	int
)	O
!=	O
*	O
DIS_HLS_PREF	pointer
)	O
&&	O
(	O
*	O
(	O
*	O
(	O
hd_table	array
+	O
i	int
)	O
+	O
LEN_HD_NAME	int
+	O
len_year_max	int
+	O
4	int
+	O
2	int
)	O
!=	O
*	O
DIS_HLS_PREF2	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
hd_title_shown	int
)	O
{	O
*	O
s1	pointer
=	O
'\0'	O
;	O
if	O
(	O
!	O
hd_suppr_list_sep_flag	int
)	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
hd_title_flag	int
)	O
{	O
sprintf	function
(	O
s1	pointer
,	O
"%s:"	pointer
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
}	O
hd_title_shown	int
=	O
TRUE	O
;	O
}	O
sprintf	function
(	O
s1	pointer
,	O
"%s"	pointer
,	O
*	O
(	O
hd_table	array
+	O
i	int
)	O
+	O
len_year_max	int
+	O
4	int
+	O
1	int
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
}	O
}	O
free	function
(	O
hd_table	array
[	O
i	int
]	O
)	O
;	O
hd_table	array
[	O
i	int
++	O
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
is_3month_mode	int
||	O
is_1month_mode	int
||	O
is_2month_mode	int
||	O
is_3month_mode2	int
)	O
{	O
month	int
=	O
tmp_month	int
;	O
is_fiscal_year	int
=	O
tmp_ify	int
;	O
}	O
}	O
}	O
void	O
holiday	function
(	O
init_data	pointer
,	O
detected	int
,	O
holiday_name	pointer
,	O
country_code	pointer
,	O
holiday_prefix	pointer
,	O
day	int
,	O
month	int
,	O
year	int
,	O
hd_elems	pointer
,	O
fday	int
,	O
count	int
)	O
Bool	int
init_data	pointer
;	O
const	O
Bool	int
detected	int
;	O
const	O
char	O
*	O
holiday_name	pointer
;	O
const	O
char	O
*	O
country_code	pointer
;	O
const	O
char	O
*	O
holiday_prefix	pointer
;	O
int	O
day	int
;	O
int	O
month	int
;	O
const	O
int	O
year	int
;	O
int	O
*	O
hd_elems	pointer
;	O
const	O
int	O
fday	int
;	O
const	O
int	O
count	int
;	O
{	O
register	O
int	O
i	int
=	O
day	int
;	O
register	O
int	O
hd	int
;	O
register	O
int	O
hd2	int
;	O
if	O
(	O
!	O
month	int
)	O
(	O
void	O
)	O
doy2date	function
(	O
i	int
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
if	O
(	O
month	int
==	O
2	int
)	O
i	int
=	O
is_leap_year	int
;	O
else	O
i	int
=	O
0	int
;	O
hd	int
=	O
hd2	int
=	O
day_of_year	function
(	O
day	int
,	O
month	int
,	O
year	int
)	O
;	O
if	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
&&	O
(	O
day	int
>=	O
DAY_MIN	int
)	O
&&	O
(	O
day	int
<=	O
dvec	array
[	O
month	int
-	O
1	int
]	O
+	O
i	int
)	O
&&	O
(	O
!	O
fday	int
||	O
(	O
count	int
&&	O
(	O
hd	int
>=	O
fday	int
)	O
)	O
||	O
(	O
!	O
count	int
&&	O
(	O
hd	int
<	O
fday	int
-	O
(	O
days_of_february	function
(	O
year	int
-	O
1	int
)	O
==	O
29	int
)	O
)	O
)	O
)	O
)	O
{	O
if	O
(	O
holiday_flag	int
||	O
rc_enable_hda_flag	int
||	O
rc_enable_hdl_flag	int
)	O
{	O
register	O
int	O
d	int
=	O
day	int
;	O
sprintf	function
(	O
s1	pointer
,	O
" (%s)"	pointer
,	O
country_code	pointer
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
strncpy	function
(	O
s2	pointer
,	O
holiday_name	pointer
,	O
LEN_HD_NAME	int
-	O
i	int
)	O
;	O
s2	pointer
[	O
LEN_HD_NAME	int
-	O
i	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%0*d%02d%02d %-*s  %1s "	pointer
,	O
len_year_max	int
,	O
year	int
,	O
month	int
,	O
day	int
,	O
LEN_HD_NAME	int
-	O
1	int
,	O
s2	pointer
,	O
holiday_prefix	pointer
)	O
;	O
strcpy	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
i	int
=	O
hd	int
-	O
(	O
(	O
cal_special_flag	int
)	O
?	O
act_day	int
:	O
day_of_year	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
)	O
;	O
if	O
(	O
!	O
hd_both_dates_flag	int
)	O
{	O
if	O
(	O
!	O
hd_special_flag	int
)	O
hd2	int
=	O
0	int
;	O
else	O
d	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
i	int
&&	O
(	O
year	int
==	O
act_year	int
)	O
)	O
(	O
void	O
)	O
decode_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
s2	pointer
,	O
d	int
,	O
month	int
,	O
year	int
,	O
hd2	int
,	O
TRUE	O
,	O
FALSE	O
,	O
TRUE	O
)	O
;	O
else	O
if	O
(	O
(	O
*	O
holiday_prefix	pointer
!=	O
*	O
DIS_HLS_PREF	pointer
)	O
&&	O
(	O
*	O
holiday_prefix	pointer
!=	O
*	O
DIS_HLS_PREF2	pointer
)	O
)	O
(	O
void	O
)	O
decode_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
s2	pointer
,	O
d	int
,	O
month	int
,	O
year	int
,	O
hd2	int
,	O
FALSE	O
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
else	O
(	O
void	O
)	O
decode_date_format	function
(	O
date_format	pointer
->	O
df_format	pointer
,	O
&	O
s2	pointer
,	O
d	int
,	O
month	int
,	O
year	int
,	O
hd2	int
,	O
FALSE	O
,	O
FALSE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
(	O
fday	int
&&	O
(	O
(	O
(	O
year	int
==	O
act_year	int
-	O
1	int
)	O
&&	O
(	O
month	int
>=	O
fiscal_month	int
)	O
)	O
||	O
(	O
(	O
year	int
==	O
act_year	int
+	O
1	int
)	O
&&	O
(	O
month	int
<	O
fiscal_month	int
)	O
)	O
)	O
)	O
||	O
year	int
==	O
act_year	int
)	O
{	O
if	O
(	O
fday	int
&&	O
(	O
year	int
!=	O
act_year	int
)	O
)	O
{	O
if	O
(	O
year	int
==	O
act_year	int
-	O
1	int
)	O
i	int
=	O
hd	int
-	O
(	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
(	O
(	O
cal_special_flag	int
)	O
?	O
act_day	int
:	O
day_of_year	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
)	O
)	O
;	O
else	O
i	int
=	O
hd	int
+	O
(	O
DAY_LAST	int
+	O
(	O
days_of_february	function
(	O
act_year	int
)	O
==	O
29	int
)	O
-	O
(	O
(	O
cal_special_flag	int
)	O
?	O
act_day	int
:	O
day_of_year	function
(	O
act_day	int
,	O
act_month	int
,	O
act_year	int
)	O
)	O
)	O
;	O
}	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
abs	function
(	O
i	int
)	O
==	O
1	int
)	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
" = %+4d day"	pointer
)	O
,	O
i	int
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
" = %+4d days"	pointer
)	O
,	O
i	int
)	O
;	O
strcat	function
(	O
s2	pointer
,	O
s1	pointer
)	O
;	O
}	O
}	O
if	O
(	O
*	O
hd_elems	pointer
<	O
HD_ELEMS_MAX	int
)	O
{	O
hd_table	array
[	O
*	O
hd_elems	pointer
]	O
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
strlen	function
(	O
s2	pointer
)	O
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"hd_table[hd_elems]"	pointer
,	O
*	O
hd_elems	pointer
)	O
;	O
strcpy	function
(	O
hd_table	array
[	O
(	O
*	O
hd_elems	pointer
)	O
++	O
]	O
,	O
s2	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
warning_level	int
>=	O
0	int
)	O
&&	O
(	O
*	O
hd_elems	pointer
>=	O
HD_ELEMS_MAX	int
)	O
)	O
{	O
sprintf	function
(	O
s1	pointer
,	O
_	O
(	O
"%s%s contains %d maximum entries now!%s"	pointer
)	O
,	O
(	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
ehls1s	struct
.	O
seq	pointer
:	O
""	pointer
)	O
,	O
_	O
(	O
"Eternal holiday list"	pointer
)	O
,	O
HD_ELEMS_MAX	int
,	O
(	O
(	O
ehls1s	struct
.	O
len	int
!=	O
1	int
)	O
?	O
ehls1e	struct
.	O
seq	pointer
:	O
""	pointer
)	O
)	O
;	O
print_text	function
(	O
stderr	pointer
,	O
s1	pointer
)	O
;	O
}	O
if	O
(	O
init_data	pointer
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HD_MAX	int
;	O
i	int
++	O
)	O
hd_ldays	array
[	O
i	int
]	O
=	O
hd_mdays	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
detected	int
)	O
{	O
if	O
(	O
*	O
holiday_prefix	pointer
==	O
*	O
DIS_HLS_PREF	pointer
||	O
*	O
holiday_prefix	pointer
==	O
*	O
DIS_HLS_PREF2	pointer
)	O
hd_mdays	array
[	O
(	O
(	O
month	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
day	int
-	O
1	int
)	O
]	O
=	O
'@'	O
;	O
else	O
hd_ldays	array
[	O
(	O
(	O
month	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
day	int
-	O
1	int
)	O
]	O
=	O
'@'	O
;	O
}	O
}	O
else	O
if	O
(	O
init_data	pointer
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HD_MAX	int
;	O
i	int
++	O
)	O
hd_ldays	array
[	O
i	int
]	O
=	O
hd_mdays	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
