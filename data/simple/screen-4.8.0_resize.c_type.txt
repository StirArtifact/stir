static	O
void	O
CheckMaxSize	function
__P	O
(	O
(	O
int	O
)	O
)	O
;	O
static	O
void	O
FreeMline	function
__P	O
(	O
(	O
struct	O
mline	struct
*	O
)	O
)	O
;	O
static	O
int	O
AllocMline	function
__P	O
(	O
(	O
struct	O
mline	struct
*	O
ml	pointer
,	O
int	O
)	O
)	O
;	O
static	O
void	O
MakeBlankLine	function
__P	O
(	O
(	O
unsigned	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
kaablamm	function
__P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
int	O
BcopyMline	function
__P	O
(	O
(	O
struct	O
mline	struct
*	O
,	O
int	O
,	O
struct	O
mline	struct
*	O
,	O
int	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
SwapAltScreen	function
__P	O
(	O
(	O
struct	O
win	struct
*	O
)	O
)	O
;	O
extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
extern	O
struct	O
display	struct
*	O
display	struct
,	O
*	O
displays	pointer
;	O
extern	O
unsigned	O
char	O
*	O
blank	pointer
,	O
*	O
null	pointer
;	O
extern	O
struct	O
mline	struct
mline_blank	struct
,	O
mline_null	struct
,	O
mline_old	struct
;	O
extern	O
struct	O
win	struct
*	O
windows	pointer
;	O
extern	O
const	O
int	O
Z0width	int
,	O
Z1width	int
;	O
extern	O
int	O
captionalways	int
;	O
struct	O
winsize	struct
glwz	struct
;	O
static	O
struct	O
mline	struct
mline_zero	struct
=	O
{	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
}	O
;	O
void	O
CheckScreenSize	function
(	O
change_flag	int
)	O
int	O
change_flag	int
;	O
{	O
int	O
wi	int
,	O
he	int
;	O
if	O
(	O
display	struct
==	O
0	int
)	O
{	O
debug	O
(	O
"CheckScreenSize: No display -> no check.\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ioctl	function
(	O
D_userfd	O
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
glwz	struct
)	O
!=	O
0	int
)	O
{	O
debug2	O
(	O
"CheckScreenSize: ioctl(%d, TIOCGWINSZ) errno %d\n"	pointer
,	O
D_userfd	O
,	O
errno	O
)	O
;	O
wi	int
=	O
D_CO	O
;	O
he	int
=	O
D_LI	O
;	O
}	O
else	O
{	O
wi	int
=	O
glwz	struct
.	O
ws_col	short
;	O
he	int
=	O
glwz	struct
.	O
ws_row	short
;	O
if	O
(	O
wi	int
==	O
0	int
)	O
wi	int
=	O
D_CO	O
;	O
if	O
(	O
he	int
==	O
0	int
)	O
he	int
=	O
D_LI	O
;	O
}	O
debug2	O
(	O
"CheckScreenSize: screen is (%d,%d)\n"	pointer
,	O
wi	int
,	O
he	int
)	O
;	O
if	O
(	O
D_width	O
==	O
wi	int
&&	O
D_height	O
==	O
he	int
)	O
{	O
debug	O
(	O
"CheckScreenSize: No change -> return.\n"	pointer
)	O
;	O
return	O
;	O
}	O
KillBlanker	function
(	O
)	O
;	O
ResetIdle	function
(	O
)	O
;	O
ChangeScreenSize	function
(	O
wi	int
,	O
he	int
,	O
change_flag	int
)	O
;	O
}	O
void	O
ChangeScreenSize	function
(	O
wi	int
,	O
he	int
,	O
change_fore	int
)	O
int	O
wi	int
,	O
he	int
;	O
int	O
change_fore	int
;	O
{	O
struct	O
win	struct
*	O
p	pointer
;	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
int	O
wwi	int
;	O
debug2	O
(	O
"ChangeScreenSize from (%d,%d) "	pointer
,	O
D_width	O
,	O
D_height	O
)	O
;	O
debug3	O
(	O
"to (%d,%d) (change_fore: %d)\n"	pointer
,	O
wi	int
,	O
he	int
,	O
change_fore	int
)	O
;	O
cv	pointer
=	O
&	O
D_canvas	O
;	O
cv	pointer
->	O
c_xe	int
=	O
wi	int
-	O
1	int
;	O
cv	pointer
->	O
c_ys	int
=	O
(	O
D_has_hstatus	O
==	O
HSTATUS_FIRSTLINE	int
)	O
;	O
cv	pointer
->	O
c_ye	int
=	O
he	int
-	O
1	int
-	O
(	O
(	O
cv	pointer
->	O
c_slperp	pointer
&&	O
cv	pointer
->	O
c_slperp	pointer
->	O
c_slnext	pointer
)	O
||	O
captionalways	int
)	O
-	O
(	O
D_has_hstatus	O
==	O
HSTATUS_LASTLINE	int
)	O
;	O
cv	pointer
->	O
c_blank	struct
.	O
l_height	int
=	O
cv	pointer
->	O
c_ye	int
-	O
cv	pointer
->	O
c_ys	int
+	O
1	int
;	O
if	O
(	O
cv	pointer
->	O
c_slperp	pointer
)	O
{	O
ResizeCanvas	function
(	O
cv	pointer
)	O
;	O
RecreateCanvasChain	function
(	O
)	O
;	O
RethinkDisplayViewports	function
(	O
)	O
;	O
}	O
if	O
(	O
D_forecv	O
==	O
0	int
)	O
D_forecv	O
=	O
D_cvlist	O
;	O
if	O
(	O
D_forecv	O
)	O
D_fore	O
=	O
Layer2Window	O
(	O
D_forecv	O
->	O
c_layer	pointer
)	O
;	O
D_width	O
=	O
wi	int
;	O
D_height	O
=	O
he	int
;	O
CheckMaxSize	function
(	O
wi	int
)	O
;	O
if	O
(	O
D_CWS	O
)	O
{	O
D_defwidth	O
=	O
D_CO	O
;	O
D_defheight	O
=	O
D_LI	O
;	O
}	O
else	O
{	O
if	O
(	O
D_CZ0	O
&&	O
(	O
wi	int
==	O
Z0width	int
||	O
wi	int
==	O
Z1width	int
)	O
&&	O
(	O
D_CO	O
==	O
Z0width	int
||	O
D_CO	O
==	O
Z1width	int
)	O
)	O
D_defwidth	O
=	O
D_CO	O
;	O
else	O
D_defwidth	O
=	O
wi	int
;	O
D_defheight	O
=	O
he	int
;	O
}	O
debug2	O
(	O
"Default size: (%d,%d)\n"	pointer
,	O
D_defwidth	O
,	O
D_defheight	O
)	O
;	O
if	O
(	O
change_fore	int
)	O
ResizeLayersToCanvases	function
(	O
)	O
;	O
if	O
(	O
change_fore	int
==	O
2	int
&&	O
D_CWS	O
==	O
NULL	O
&&	O
displays	pointer
->	O
d_next	pointer
==	O
0	int
)	O
{	O
for	O
(	O
p	pointer
=	O
windows	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
w_next	pointer
)	O
{	O
debug1	O
(	O
"Trying to change window %d.\n"	pointer
,	O
p	pointer
->	O
w_number	int
)	O
;	O
wwi	int
=	O
wi	int
;	O
if	O
(	O
p	pointer
->	O
w_savelayer	pointer
&&	O
p	pointer
->	O
w_savelayer	pointer
->	O
l_cvlist	pointer
==	O
0	int
)	O
ResizeLayer	function
(	O
p	pointer
->	O
w_savelayer	pointer
,	O
wwi	int
,	O
he	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
void	O
ResizeLayersToCanvases	function
(	O
)	O
{	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
struct	O
layer	struct
*	O
l	pointer
;	O
int	O
lx	int
,	O
ly	int
;	O
debug	O
(	O
"ResizeLayersToCanvases\n"	pointer
)	O
;	O
D_kaablamm	O
=	O
0	int
;	O
for	O
(	O
cv	pointer
=	O
D_cvlist	O
;	O
cv	pointer
;	O
cv	pointer
=	O
cv	pointer
->	O
c_next	pointer
)	O
{	O
l	pointer
=	O
cv	pointer
->	O
c_layer	pointer
;	O
if	O
(	O
l	pointer
==	O
0	int
)	O
continue	O
;	O
debug	O
(	O
"Doing canvas: "	pointer
)	O
;	O
if	O
(	O
l	pointer
->	O
l_width	int
==	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
&&	O
l	pointer
->	O
l_height	int
==	O
cv	pointer
->	O
c_ye	int
-	O
cv	pointer
->	O
c_ys	int
+	O
1	int
)	O
{	O
debug	O
(	O
"already fitting.\n"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
MayResizeLayer	function
(	O
l	pointer
)	O
)	O
{	O
debug	O
(	O
"may not resize.\n"	pointer
)	O
;	O
}	O
else	O
{	O
debug	O
(	O
"doing resize.\n"	pointer
)	O
;	O
ResizeLayer	function
(	O
l	pointer
,	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
,	O
cv	pointer
->	O
c_ye	int
-	O
cv	pointer
->	O
c_ys	int
+	O
1	int
,	O
display	struct
)	O
;	O
}	O
lx	int
=	O
cv	pointer
->	O
c_layer	pointer
->	O
l_x	int
;	O
ly	int
=	O
cv	pointer
->	O
c_layer	pointer
->	O
l_y	int
;	O
if	O
(	O
ly	int
+	O
cv	pointer
->	O
c_yoff	int
<	O
cv	pointer
->	O
c_ys	int
)	O
{	O
cv	pointer
->	O
c_yoff	int
=	O
cv	pointer
->	O
c_ys	int
-	O
ly	int
;	O
RethinkViewportOffsets	function
(	O
cv	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ly	int
+	O
cv	pointer
->	O
c_yoff	int
>	O
cv	pointer
->	O
c_ye	int
)	O
{	O
cv	pointer
->	O
c_yoff	int
=	O
cv	pointer
->	O
c_ye	int
-	O
ly	int
;	O
RethinkViewportOffsets	function
(	O
cv	pointer
)	O
;	O
}	O
if	O
(	O
lx	int
+	O
cv	pointer
->	O
c_xoff	int
<	O
cv	pointer
->	O
c_xs	int
)	O
{	O
int	O
n	int
=	O
cv	pointer
->	O
c_xs	int
-	O
(	O
lx	int
+	O
cv	pointer
->	O
c_xoff	int
)	O
;	O
if	O
(	O
n	int
<	O
(	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
)	O
/	O
2	int
)	O
n	int
=	O
(	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
)	O
/	O
2	int
;	O
if	O
(	O
cv	pointer
->	O
c_xoff	int
+	O
n	int
>	O
cv	pointer
->	O
c_xs	int
)	O
n	int
=	O
cv	pointer
->	O
c_xs	int
-	O
cv	pointer
->	O
c_xoff	int
;	O
cv	pointer
->	O
c_xoff	int
+=	O
n	int
;	O
RethinkViewportOffsets	function
(	O
cv	pointer
)	O
;	O
}	O
else	O
if	O
(	O
lx	int
+	O
cv	pointer
->	O
c_xoff	int
>	O
cv	pointer
->	O
c_xe	int
)	O
{	O
int	O
n	int
=	O
lx	int
+	O
cv	pointer
->	O
c_xoff	int
-	O
cv	pointer
->	O
c_xe	int
;	O
if	O
(	O
n	int
<	O
(	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
)	O
/	O
2	int
)	O
n	int
=	O
(	O
cv	pointer
->	O
c_xe	int
-	O
cv	pointer
->	O
c_xs	int
+	O
1	int
)	O
/	O
2	int
;	O
if	O
(	O
cv	pointer
->	O
c_xoff	int
-	O
n	int
+	O
cv	pointer
->	O
c_layer	pointer
->	O
l_width	int
-	O
1	int
<	O
cv	pointer
->	O
c_xe	int
)	O
n	int
=	O
cv	pointer
->	O
c_xoff	int
+	O
cv	pointer
->	O
c_layer	pointer
->	O
l_width	int
-	O
1	int
-	O
cv	pointer
->	O
c_xe	int
;	O
cv	pointer
->	O
c_xoff	int
-=	O
n	int
;	O
RethinkViewportOffsets	function
(	O
cv	pointer
)	O
;	O
}	O
}	O
Redisplay	function
(	O
0	int
)	O
;	O
if	O
(	O
D_kaablamm	O
)	O
{	O
kaablamm	function
(	O
)	O
;	O
D_kaablamm	O
=	O
0	int
;	O
}	O
}	O
int	O
MayResizeLayer	function
(	O
l	pointer
)	O
struct	O
layer	struct
*	O
l	pointer
;	O
{	O
int	O
cvs	int
=	O
0	int
;	O
debug	O
(	O
"MayResizeLayer:\n"	pointer
)	O
;	O
for	O
(	O
;	O
l	pointer
;	O
l	pointer
=	O
l	pointer
->	O
l_next	pointer
)	O
{	O
if	O
(	O
l	pointer
->	O
l_cvlist	pointer
)	O
if	O
(	O
++	O
cvs	int
>	O
1	int
||	O
l	pointer
->	O
l_cvlist	pointer
->	O
c_lnext	pointer
)	O
{	O
debug1	O
(	O
"may not - cvs %d\n"	pointer
,	O
cvs	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
debug	O
(	O
"may resize\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
kaablamm	function
(	O
)	O
{	O
Msg	function
(	O
0	int
,	O
"Aborted because of window size change."	pointer
)	O
;	O
}	O
void	O
ResizeLayer	function
(	O
l	pointer
,	O
wi	int
,	O
he	int
,	O
norefdisp	pointer
)	O
struct	O
layer	struct
*	O
l	pointer
;	O
int	O
wi	int
,	O
he	int
;	O
struct	O
display	struct
*	O
norefdisp	pointer
;	O
{	O
struct	O
win	struct
*	O
p	pointer
;	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
struct	O
layer	struct
*	O
oldflayer	pointer
=	O
flayer	pointer
;	O
struct	O
display	struct
*	O
d	int
,	O
*	O
olddisplay	pointer
=	O
display	struct
;	O
if	O
(	O
l	pointer
->	O
l_width	int
==	O
wi	int
&&	O
l	pointer
->	O
l_height	int
==	O
he	int
)	O
return	O
;	O
p	pointer
=	O
Layer2Window	O
(	O
l	pointer
)	O
;	O
if	O
(	O
oldflayer	pointer
&&	O
(	O
l	pointer
==	O
oldflayer	pointer
||	O
Layer2Window	O
(	O
oldflayer	pointer
)	O
==	O
p	pointer
)	O
)	O
oldflayer	pointer
=	O
NULL	O
;	O
flayer	pointer
=	O
l	pointer
;	O
if	O
(	O
p	pointer
)	O
{	O
for	O
(	O
d	int
=	O
displays	pointer
;	O
d	int
;	O
d	int
=	O
d	int
->	O
d_next	pointer
)	O
for	O
(	O
cv	pointer
=	O
d	int
->	O
d_cvlist	pointer
;	O
cv	pointer
;	O
cv	pointer
=	O
cv	pointer
->	O
c_next	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
Layer2Window	O
(	O
cv	pointer
->	O
c_layer	pointer
)	O
)	O
{	O
RESIZE_OR_KILL_LAYERS	O
(	O
cv	pointer
->	O
c_layer	pointer
,	O
wi	int
,	O
he	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
RESIZE_OR_KILL_LAYERS	O
(	O
flayer	pointer
,	O
wi	int
,	O
he	int
)	O
;	O
}	O
for	O
(	O
display	struct
=	O
displays	pointer
;	O
display	struct
;	O
display	struct
=	O
display	struct
->	O
d_next	pointer
)	O
{	O
if	O
(	O
display	struct
==	O
norefdisp	pointer
)	O
continue	O
;	O
for	O
(	O
cv	pointer
=	O
D_cvlist	O
;	O
cv	pointer
;	O
cv	pointer
=	O
cv	pointer
->	O
c_next	pointer
)	O
if	O
(	O
Layer2Window	O
(	O
cv	pointer
->	O
c_layer	pointer
)	O
==	O
p	pointer
)	O
{	O
CV_CALL	O
(	O
cv	pointer
,	O
LayRedisplayLine	O
(	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
0	int
)	O
)	O
;	O
RefreshArea	function
(	O
cv	pointer
->	O
c_xs	int
,	O
cv	pointer
->	O
c_ys	int
,	O
cv	pointer
->	O
c_xe	int
,	O
cv	pointer
->	O
c_ye	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
D_kaablamm	O
)	O
{	O
kaablamm	function
(	O
)	O
;	O
D_kaablamm	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
oldflayer	pointer
)	O
flayer	pointer
=	O
oldflayer	pointer
;	O
display	struct
=	O
olddisplay	pointer
;	O
}	O
static	O
void	O
FreeMline	function
(	O
ml	pointer
)	O
struct	O
mline	struct
*	O
ml	pointer
;	O
{	O
if	O
(	O
ml	pointer
->	O
image	char
)	O
free	function
(	O
ml	pointer
->	O
image	char
)	O
;	O
if	O
(	O
ml	pointer
->	O
attr	char
&&	O
ml	pointer
->	O
attr	char
!=	O
null	pointer
)	O
free	function
(	O
ml	pointer
->	O
attr	char
)	O
;	O
if	O
(	O
ml	pointer
->	O
font	char
&&	O
ml	pointer
->	O
font	char
!=	O
null	pointer
)	O
free	function
(	O
ml	pointer
->	O
font	char
)	O
;	O
if	O
(	O
ml	pointer
->	O
fontx	char
&&	O
ml	pointer
->	O
fontx	char
!=	O
null	pointer
)	O
free	function
(	O
ml	pointer
->	O
fontx	char
)	O
;	O
if	O
(	O
ml	pointer
->	O
color	char
&&	O
ml	pointer
->	O
color	char
!=	O
null	pointer
)	O
free	function
(	O
ml	pointer
->	O
color	char
)	O
;	O
*	O
ml	pointer
=	O
mline_zero	struct
;	O
}	O
static	O
int	O
AllocMline	function
(	O
ml	pointer
,	O
w	int
)	O
struct	O
mline	struct
*	O
ml	pointer
;	O
int	O
w	int
;	O
{	O
ml	pointer
->	O
image	char
=	O
malloc	function
(	O
w	int
)	O
;	O
ml	pointer
->	O
attr	char
=	O
null	pointer
;	O
ml	pointer
->	O
font	char
=	O
null	pointer
;	O
ml	pointer
->	O
fontx	char
=	O
null	pointer
;	O
ml	pointer
->	O
color	char
=	O
null	pointer
;	O
if	O
(	O
ml	pointer
->	O
image	char
==	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
BcopyMline	function
(	O
mlf	pointer
,	O
xf	int
,	O
mlt	pointer
,	O
xt	int
,	O
l	pointer
,	O
w	int
)	O
struct	O
mline	struct
*	O
mlf	pointer
,	O
*	O
mlt	pointer
;	O
int	O
xf	int
,	O
xt	int
,	O
l	pointer
,	O
w	int
;	O
{	O
int	O
r	int
=	O
0	int
;	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
mlf	pointer
->	O
image	char
+	O
xf	int
,	O
(	O
char	O
*	O
)	O
mlt	pointer
->	O
image	char
+	O
xt	int
,	O
l	pointer
)	O
;	O
if	O
(	O
mlf	pointer
->	O
attr	char
!=	O
null	pointer
&&	O
mlt	pointer
->	O
attr	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
mlt	pointer
->	O
attr	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
w	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
mlt	pointer
->	O
attr	char
=	O
null	pointer
,	O
r	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
mlt	pointer
->	O
attr	char
!=	O
null	pointer
)	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
mlf	pointer
->	O
attr	char
+	O
xf	int
,	O
(	O
char	O
*	O
)	O
mlt	pointer
->	O
attr	char
+	O
xt	int
,	O
l	pointer
)	O
;	O
if	O
(	O
mlf	pointer
->	O
font	char
!=	O
null	pointer
&&	O
mlt	pointer
->	O
font	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
mlt	pointer
->	O
font	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
w	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
mlt	pointer
->	O
font	char
=	O
null	pointer
,	O
r	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
mlt	pointer
->	O
font	char
!=	O
null	pointer
)	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
mlf	pointer
->	O
font	char
+	O
xf	int
,	O
(	O
char	O
*	O
)	O
mlt	pointer
->	O
font	char
+	O
xt	int
,	O
l	pointer
)	O
;	O
if	O
(	O
mlf	pointer
->	O
fontx	char
!=	O
null	pointer
&&	O
mlt	pointer
->	O
fontx	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
mlt	pointer
->	O
fontx	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
w	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
mlt	pointer
->	O
fontx	char
=	O
null	pointer
,	O
r	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
mlt	pointer
->	O
fontx	char
!=	O
null	pointer
)	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
mlf	pointer
->	O
fontx	char
+	O
xf	int
,	O
(	O
char	O
*	O
)	O
mlt	pointer
->	O
fontx	char
+	O
xt	int
,	O
l	pointer
)	O
;	O
if	O
(	O
mlf	pointer
->	O
color	char
!=	O
null	pointer
&&	O
mlt	pointer
->	O
color	char
==	O
null	pointer
)	O
{	O
if	O
(	O
(	O
mlt	pointer
->	O
color	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
calloc	function
(	O
w	int
,	O
1	int
)	O
)	O
==	O
0	int
)	O
mlt	pointer
->	O
color	char
=	O
null	pointer
,	O
r	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
mlt	pointer
->	O
color	char
!=	O
null	pointer
)	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
mlf	pointer
->	O
color	char
+	O
xf	int
,	O
(	O
char	O
*	O
)	O
mlt	pointer
->	O
color	char
+	O
xt	int
,	O
l	pointer
)	O
;	O
return	O
r	int
;	O
}	O
static	O
int	O
maxwidth	int
;	O
static	O
void	O
CheckMaxSize	function
(	O
wi	int
)	O
int	O
wi	int
;	O
{	O
unsigned	O
char	O
*	O
oldnull	pointer
=	O
null	pointer
;	O
unsigned	O
char	O
*	O
oldblank	pointer
=	O
blank	pointer
;	O
struct	O
win	struct
*	O
p	pointer
;	O
int	O
i	int
;	O
struct	O
mline	struct
*	O
ml	pointer
;	O
if	O
(	O
wi	int
>	O
MAXWIDTH	int
)	O
wi	int
=	O
MAXWIDTH	int
;	O
if	O
(	O
wi	int
<=	O
maxwidth	int
)	O
return	O
;	O
maxwidth	int
=	O
wi	int
+	O
1	int
;	O
debug1	O
(	O
"New maxwidth: %d\n"	pointer
,	O
maxwidth	int
)	O
;	O
blank	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
blank	pointer
,	O
maxwidth	int
)	O
;	O
null	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
null	pointer
,	O
maxwidth	int
)	O
;	O
mline_old	struct
.	O
image	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
mline_old	struct
.	O
image	char
,	O
maxwidth	int
)	O
;	O
mline_old	struct
.	O
attr	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
mline_old	struct
.	O
attr	char
,	O
maxwidth	int
)	O
;	O
mline_old	struct
.	O
font	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
mline_old	struct
.	O
font	char
,	O
maxwidth	int
)	O
;	O
mline_old	struct
.	O
fontx	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
mline_old	struct
.	O
fontx	char
,	O
maxwidth	int
)	O
;	O
mline_old	struct
.	O
color	char
=	O
(	O
unsigned	O
char	O
*	O
)	O
xrealloc	function
(	O
(	O
char	O
*	O
)	O
mline_old	struct
.	O
color	char
,	O
maxwidth	int
)	O
;	O
if	O
(	O
!	O
(	O
blank	pointer
&&	O
null	pointer
&&	O
mline_old	struct
.	O
image	char
&&	O
mline_old	struct
.	O
attr	char
IFFONT	O
(	O
&&	O
mline_old	struct
.	O
font	char
)	O
IFFONTX	O
(	O
&&	O
mline_old	struct
.	O
fontx	char
)	O
IFCOLOR	O
(	O
&&	O
mline_old	struct
.	O
color	char
)	O
IFCOLORX	O
(	O
&&	O
mline_old	struct
.	O
colorx	O
)	O
)	O
)	O
Panic	function
(	O
0	int
,	O
"%s"	pointer
,	O
strnomem	array
)	O
;	O
MakeBlankLine	function
(	O
blank	pointer
,	O
maxwidth	int
)	O
;	O
bzero	function
(	O
(	O
char	O
*	O
)	O
null	pointer
,	O
maxwidth	int
)	O
;	O
mline_blank	struct
.	O
image	char
=	O
blank	pointer
;	O
mline_blank	struct
.	O
attr	char
=	O
null	pointer
;	O
mline_null	struct
.	O
image	char
=	O
null	pointer
;	O
mline_null	struct
.	O
attr	char
=	O
null	pointer
;	O
mline_blank	struct
.	O
font	char
=	O
null	pointer
;	O
mline_null	struct
.	O
font	char
=	O
null	pointer
;	O
mline_blank	struct
.	O
fontx	char
=	O
null	pointer
;	O
mline_null	struct
.	O
fontx	char
=	O
null	pointer
;	O
mline_blank	struct
.	O
color	char
=	O
null	pointer
;	O
mline_null	struct
.	O
color	char
=	O
null	pointer
;	O
for	O
(	O
p	pointer
=	O
windows	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
w_next	pointer
)	O
{	O
RESET_LINES	O
(	O
p	pointer
->	O
w_mlines	pointer
,	O
p	pointer
->	O
w_height	O
)	O
;	O
RESET_LINES	O
(	O
p	pointer
->	O
w_hlines	pointer
,	O
p	pointer
->	O
w_histheight	int
)	O
;	O
RESET_LINES	O
(	O
p	pointer
->	O
w_alt	struct
.	O
hlines	pointer
,	O
p	pointer
->	O
w_alt	struct
.	O
histheight	int
)	O
;	O
RESET_LINES	O
(	O
p	pointer
->	O
w_alt	struct
.	O
mlines	pointer
,	O
p	pointer
->	O
w_alt	struct
.	O
height	int
)	O
;	O
}	O
}	O
char	O
*	O
xrealloc	function
(	O
mem	pointer
,	O
len	int
)	O
char	O
*	O
mem	pointer
;	O
int	O
len	int
;	O
{	O
register	O
char	O
*	O
nmem	pointer
;	O
if	O
(	O
mem	pointer
==	O
0	int
)	O
return	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
(	O
nmem	pointer
=	O
realloc	function
(	O
mem	pointer
,	O
len	int
)	O
)	O
)	O
return	O
nmem	pointer
;	O
free	function
(	O
mem	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
0	int
;	O
}	O
static	O
void	O
MakeBlankLine	function
(	O
p	pointer
,	O
n	int
)	O
register	O
unsigned	O
char	O
*	O
p	pointer
;	O
register	O
int	O
n	int
;	O
{	O
while	O
(	O
n	int
--	O
)	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
}	O
int	O
ChangeWindowSize	function
(	O
p	pointer
,	O
wi	int
,	O
he	int
,	O
hi	int
)	O
struct	O
win	struct
*	O
p	pointer
;	O
int	O
wi	int
,	O
he	int
,	O
hi	int
;	O
{	O
struct	O
mline	struct
*	O
mlf	pointer
=	O
0	int
,	O
*	O
mlt	pointer
=	O
0	int
,	O
*	O
ml	pointer
,	O
*	O
nmlines	pointer
,	O
*	O
nhlines	pointer
;	O
int	O
fy	int
,	O
ty	int
,	O
l	pointer
,	O
lx	int
,	O
lf	int
,	O
lt	int
,	O
yy	int
,	O
oty	int
,	O
addone	int
;	O
int	O
ncx	int
,	O
ncy	int
,	O
naka	int
,	O
t	int
;	O
int	O
y	int
,	O
shift	int
;	O
if	O
(	O
wi	int
<=	O
0	int
||	O
he	int
<=	O
0	int
)	O
wi	int
=	O
he	int
=	O
hi	int
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
w_type	int
==	O
W_TYPE_GROUP	int
)	O
return	O
0	int
;	O
if	O
(	O
wi	int
>	O
MAXWIDTH	int
)	O
{	O
Msg	function
(	O
0	int
,	O
"Window width too large. Truncated to %d."	pointer
,	O
MAXWIDTH	int
)	O
;	O
wi	int
=	O
MAXWIDTH	int
;	O
}	O
if	O
(	O
he	int
>	O
MAXWIDTH	int
)	O
{	O
Msg	function
(	O
0	int
,	O
"Window height too large. Truncated to %d."	pointer
,	O
MAXWIDTH	int
)	O
;	O
he	int
=	O
MAXWIDTH	int
;	O
}	O
if	O
(	O
p	pointer
->	O
w_width	O
==	O
wi	int
&&	O
p	pointer
->	O
w_height	O
==	O
he	int
&&	O
p	pointer
->	O
w_histheight	int
==	O
hi	int
)	O
{	O
debug	O
(	O
"ChangeWindowSize: No change.\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
CheckMaxSize	function
(	O
wi	int
)	O
;	O
debug	O
(	O
"ChangeWindowSize"	pointer
)	O
;	O
debug3	O
(	O
" from (%d,%d)+%d"	pointer
,	O
p	pointer
->	O
w_width	O
,	O
p	pointer
->	O
w_height	O
,	O
p	pointer
->	O
w_histheight	int
)	O
;	O
debug3	O
(	O
" to(%d,%d)+%d\n"	pointer
,	O
wi	int
,	O
he	int
,	O
hi	int
)	O
;	O
fy	int
=	O
p	pointer
->	O
w_histheight	int
+	O
p	pointer
->	O
w_height	O
-	O
1	int
;	O
ty	int
=	O
hi	int
+	O
he	int
-	O
1	int
;	O
nmlines	pointer
=	O
nhlines	pointer
=	O
0	int
;	O
ncx	int
=	O
0	int
;	O
ncy	int
=	O
0	int
;	O
naka	int
=	O
0	int
;	O
if	O
(	O
wi	int
)	O
{	O
if	O
(	O
wi	int
!=	O
p	pointer
->	O
w_width	O
||	O
he	int
!=	O
p	pointer
->	O
w_height	O
)	O
{	O
if	O
(	O
(	O
nmlines	pointer
=	O
(	O
struct	O
mline	struct
*	O
)	O
calloc	function
(	O
he	int
,	O
sizeof	O
(	O
struct	O
mline	struct
)	O
)	O
)	O
==	O
0	int
)	O
{	O
KillWindow	function
(	O
p	pointer
)	O
;	O
Msg	function
(	O
0	int
,	O
"%s"	pointer
,	O
strnomem	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
debug1	O
(	O
"image stays the same: %d lines\n"	pointer
,	O
he	int
)	O
;	O
nmlines	pointer
=	O
p	pointer
->	O
w_mlines	pointer
;	O
fy	int
-=	O
he	int
;	O
ty	int
-=	O
he	int
;	O
ncx	int
=	O
p	pointer
->	O
w_x	O
;	O
ncy	int
=	O
p	pointer
->	O
w_y	O
;	O
naka	int
=	O
p	pointer
->	O
w_autoaka	int
;	O
}	O
}	O
if	O
(	O
hi	int
)	O
{	O
if	O
(	O
(	O
nhlines	pointer
=	O
(	O
struct	O
mline	struct
*	O
)	O
calloc	function
(	O
hi	int
,	O
sizeof	O
(	O
struct	O
mline	struct
)	O
)	O
)	O
==	O
0	int
)	O
{	O
Msg	function
(	O
0	int
,	O
"No memory for history buffer - turned off"	pointer
)	O
;	O
hi	int
=	O
0	int
;	O
ty	int
=	O
he	int
-	O
1	int
;	O
}	O
}	O
addone	int
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
w_width	O
&&	O
p	pointer
->	O
w_x	O
==	O
p	pointer
->	O
w_width	O
)	O
{	O
debug2	O
(	O
"Special addone case: %d %d\n"	pointer
,	O
p	pointer
->	O
w_x	O
,	O
p	pointer
->	O
w_y	O
)	O
;	O
addone	int
=	O
1	int
;	O
p	pointer
->	O
w_x	O
--	O
;	O
}	O
if	O
(	O
p	pointer
->	O
w_width	O
==	O
wi	int
)	O
{	O
ncx	int
=	O
p	pointer
->	O
w_x	O
+	O
addone	int
;	O
ncy	int
=	O
p	pointer
->	O
w_y	O
+	O
he	int
-	O
p	pointer
->	O
w_height	O
;	O
shift	int
=	O
-	O
ncy	int
;	O
for	O
(	O
yy	int
=	O
p	pointer
->	O
w_y	O
+	O
p	pointer
->	O
w_histheight	int
-	O
1	int
;	O
yy	int
>=	O
0	int
&&	O
ncy	int
+	O
shift	int
<	O
he	int
;	O
yy	int
--	O
)	O
{	O
ml	pointer
=	O
OLDWIN	O
(	O
yy	int
)	O
;	O
if	O
(	O
!	O
ml	pointer
->	O
image	char
)	O
break	O
;	O
if	O
(	O
ml	pointer
->	O
image	char
[	O
p	pointer
->	O
w_width	O
]	O
==	O
' '	O
)	O
break	O
;	O
shift	int
++	O
;	O
}	O
if	O
(	O
shift	int
<	O
0	int
)	O
shift	int
=	O
0	int
;	O
else	O
debug1	O
(	O
"resize: cursor out of bounds, shifting %d\n"	pointer
,	O
shift	int
)	O
;	O
ncy	int
+=	O
shift	int
;	O
if	O
(	O
p	pointer
->	O
w_autoaka	int
>	O
0	int
)	O
{	O
naka	int
=	O
p	pointer
->	O
w_autoaka	int
+	O
he	int
-	O
p	pointer
->	O
w_height	O
+	O
shift	int
;	O
if	O
(	O
naka	int
<	O
1	int
||	O
naka	int
>	O
he	int
)	O
naka	int
=	O
0	int
;	O
}	O
while	O
(	O
shift	int
--	O
>	O
0	int
)	O
{	O
ml	pointer
=	O
OLDWIN	O
(	O
fy	int
)	O
;	O
FreeMline	function
(	O
ml	pointer
)	O
;	O
fy	int
--	O
;	O
}	O
}	O
debug2	O
(	O
"fy %d ty %d\n"	pointer
,	O
fy	int
,	O
ty	int
)	O
;	O
if	O
(	O
fy	int
>=	O
0	int
)	O
mlf	pointer
=	O
OLDWIN	O
(	O
fy	int
)	O
;	O
if	O
(	O
ty	int
>=	O
0	int
)	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
while	O
(	O
fy	int
>=	O
0	int
&&	O
ty	int
>=	O
0	int
)	O
{	O
if	O
(	O
p	pointer
->	O
w_width	O
==	O
wi	int
)	O
{	O
*	O
mlt	pointer
=	O
*	O
mlf	pointer
;	O
*	O
mlf	pointer
=	O
mline_zero	struct
;	O
if	O
(	O
--	O
fy	int
>=	O
0	int
)	O
mlf	pointer
=	O
OLDWIN	O
(	O
fy	int
)	O
;	O
if	O
(	O
--	O
ty	int
>=	O
0	int
)	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
l	pointer
=	O
p	pointer
->	O
w_width	O
-	O
1	int
;	O
l	pointer
>	O
0	int
;	O
l	pointer
--	O
)	O
if	O
(	O
mlf	pointer
->	O
image	char
[	O
l	pointer
]	O
!=	O
' '	O
||	O
mlf	pointer
->	O
attr	char
[	O
l	pointer
]	O
)	O
break	O
;	O
if	O
(	O
fy	int
==	O
p	pointer
->	O
w_y	O
+	O
p	pointer
->	O
w_histheight	int
&&	O
l	pointer
<	O
p	pointer
->	O
w_x	O
)	O
l	pointer
=	O
p	pointer
->	O
w_x	O
;	O
l	pointer
++	O
;	O
lf	int
=	O
l	pointer
;	O
for	O
(	O
yy	int
=	O
fy	int
-	O
1	int
;	O
yy	int
>=	O
0	int
;	O
yy	int
--	O
)	O
{	O
ml	pointer
=	O
OLDWIN	O
(	O
yy	int
)	O
;	O
if	O
(	O
ml	pointer
->	O
image	char
[	O
p	pointer
->	O
w_width	O
]	O
==	O
' '	O
)	O
break	O
;	O
l	pointer
+=	O
p	pointer
->	O
w_width	O
;	O
}	O
lt	int
=	O
(	O
l	pointer
-	O
1	int
)	O
%	O
wi	int
+	O
1	int
;	O
oty	int
=	O
ty	int
;	O
while	O
(	O
l	pointer
>	O
0	int
&&	O
fy	int
>=	O
0	int
&&	O
ty	int
>=	O
0	int
)	O
{	O
lx	int
=	O
lt	int
>	O
lf	int
?	O
lf	int
:	O
lt	int
;	O
if	O
(	O
mlt	pointer
->	O
image	char
==	O
0	int
)	O
{	O
if	O
(	O
AllocMline	function
(	O
mlt	pointer
,	O
wi	int
+	O
1	int
)	O
)	O
goto	O
nomem	O
;	O
MakeBlankLine	function
(	O
mlt	pointer
->	O
image	char
+	O
lt	int
,	O
wi	int
-	O
lt	int
)	O
;	O
mlt	pointer
->	O
image	char
[	O
wi	int
]	O
=	O
(	O
(	O
oty	int
==	O
ty	int
)	O
?	O
' '	O
:	O
0	int
)	O
;	O
}	O
if	O
(	O
BcopyMline	function
(	O
mlf	pointer
,	O
lf	int
-	O
lx	int
,	O
mlt	pointer
,	O
lt	int
-	O
lx	int
,	O
lx	int
,	O
wi	int
+	O
1	int
)	O
)	O
goto	O
nomem	O
;	O
if	O
(	O
fy	int
==	O
p	pointer
->	O
w_y	O
+	O
p	pointer
->	O
w_histheight	int
&&	O
lf	int
-	O
lx	int
<=	O
p	pointer
->	O
w_x	O
&&	O
lf	int
>	O
p	pointer
->	O
w_x	O
)	O
{	O
ncx	int
=	O
p	pointer
->	O
w_x	O
+	O
lt	int
-	O
lf	int
+	O
addone	int
;	O
ncy	int
=	O
ty	int
-	O
hi	int
;	O
shift	int
=	O
wi	int
?	O
-	O
ncy	int
+	O
(	O
l	pointer
-	O
lx	int
)	O
/	O
wi	int
:	O
0	int
;	O
if	O
(	O
ty	int
+	O
shift	int
>	O
hi	int
+	O
he	int
-	O
1	int
)	O
shift	int
=	O
hi	int
+	O
he	int
-	O
1	int
-	O
ty	int
;	O
if	O
(	O
shift	int
>	O
0	int
)	O
{	O
debug3	O
(	O
"resize: cursor out of bounds, shifting %d [%d/%d]\n"	pointer
,	O
shift	int
,	O
lt	int
-	O
lx	int
,	O
wi	int
)	O
;	O
for	O
(	O
y	int
=	O
hi	int
+	O
he	int
-	O
1	int
;	O
y	int
>=	O
ty	int
;	O
y	int
--	O
)	O
{	O
mlt	pointer
=	O
NEWWIN	O
(	O
y	int
)	O
;	O
FreeMline	function
(	O
mlt	pointer
)	O
;	O
if	O
(	O
y	int
-	O
shift	int
<	O
ty	int
)	O
continue	O
;	O
ml	pointer
=	O
NEWWIN	O
(	O
y	int
-	O
shift	int
)	O
;	O
*	O
mlt	pointer
=	O
*	O
ml	pointer
;	O
*	O
ml	pointer
=	O
mline_zero	struct
;	O
}	O
ncy	int
+=	O
shift	int
;	O
ty	int
+=	O
shift	int
;	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
if	O
(	O
naka	int
>	O
0	int
)	O
naka	int
=	O
naka	int
+	O
shift	int
>	O
he	int
?	O
0	int
:	O
naka	int
+	O
shift	int
;	O
}	O
ASSERT	O
(	O
ncy	int
>=	O
0	int
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
w_autoaka	int
>	O
0	int
&&	O
fy	int
==	O
p	pointer
->	O
w_autoaka	int
-	O
1	int
+	O
p	pointer
->	O
w_histheight	int
&&	O
lf	int
-	O
lx	int
<=	O
0	int
)	O
naka	int
=	O
ty	int
-	O
hi	int
>=	O
0	int
?	O
1	int
+	O
ty	int
-	O
hi	int
:	O
0	int
;	O
lf	int
-=	O
lx	int
;	O
lt	int
-=	O
lx	int
;	O
l	pointer
-=	O
lx	int
;	O
if	O
(	O
lf	int
==	O
0	int
)	O
{	O
FreeMline	function
(	O
mlf	pointer
)	O
;	O
lf	int
=	O
p	pointer
->	O
w_width	O
;	O
if	O
(	O
--	O
fy	int
>=	O
0	int
)	O
mlf	pointer
=	O
OLDWIN	O
(	O
fy	int
)	O
;	O
}	O
if	O
(	O
lt	int
==	O
0	int
)	O
{	O
lt	int
=	O
wi	int
;	O
if	O
(	O
--	O
ty	int
>=	O
0	int
)	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
}	O
}	O
ASSERT	O
(	O
l	pointer
!=	O
0	int
||	O
fy	int
==	O
yy	int
)	O
;	O
}	O
while	O
(	O
fy	int
>=	O
0	int
)	O
{	O
FreeMline	function
(	O
mlf	pointer
)	O
;	O
if	O
(	O
--	O
fy	int
>=	O
0	int
)	O
mlf	pointer
=	O
OLDWIN	O
(	O
fy	int
)	O
;	O
}	O
while	O
(	O
ty	int
>=	O
0	int
)	O
{	O
if	O
(	O
AllocMline	function
(	O
mlt	pointer
,	O
wi	int
+	O
1	int
)	O
)	O
goto	O
nomem	O
;	O
MakeBlankLine	function
(	O
mlt	pointer
->	O
image	char
,	O
wi	int
+	O
1	int
)	O
;	O
if	O
(	O
--	O
ty	int
>=	O
0	int
)	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
w_mlines	pointer
&&	O
p	pointer
->	O
w_mlines	pointer
!=	O
nmlines	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
p	pointer
->	O
w_mlines	pointer
)	O
;	O
p	pointer
->	O
w_mlines	pointer
=	O
nmlines	pointer
;	O
if	O
(	O
p	pointer
->	O
w_hlines	pointer
&&	O
p	pointer
->	O
w_hlines	pointer
!=	O
nhlines	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
p	pointer
->	O
w_hlines	pointer
)	O
;	O
p	pointer
->	O
w_hlines	pointer
=	O
nhlines	pointer
;	O
nmlines	pointer
=	O
nhlines	pointer
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
w_width	O
!=	O
wi	int
)	O
{	O
if	O
(	O
wi	int
)	O
{	O
t	int
=	O
p	pointer
->	O
w_tabs	pointer
?	O
p	pointer
->	O
w_width	O
:	O
0	int
;	O
p	pointer
->	O
w_tabs	pointer
=	O
xrealloc	function
(	O
p	pointer
->	O
w_tabs	pointer
,	O
wi	int
+	O
1	int
)	O
;	O
if	O
(	O
p	pointer
->	O
w_tabs	pointer
==	O
0	int
)	O
goto	O
nomem	O
;	O
for	O
(	O
;	O
t	int
<	O
wi	int
;	O
t	int
++	O
)	O
p	pointer
->	O
w_tabs	pointer
[	O
t	int
]	O
=	O
t	int
&&	O
!	O
(	O
t	int
&	O
7	int
)	O
?	O
1	int
:	O
0	int
;	O
p	pointer
->	O
w_tabs	pointer
[	O
wi	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
w_tabs	pointer
)	O
free	function
(	O
p	pointer
->	O
w_tabs	pointer
)	O
;	O
p	pointer
->	O
w_tabs	pointer
=	O
0	int
;	O
}	O
}	O
p	pointer
->	O
w_saved	struct
.	O
y	int
+=	O
ncy	int
-	O
p	pointer
->	O
w_y	O
;	O
p	pointer
->	O
w_x	O
=	O
ncx	int
;	O
p	pointer
->	O
w_y	O
=	O
ncy	int
;	O
if	O
(	O
p	pointer
->	O
w_autoaka	int
>	O
0	int
)	O
p	pointer
->	O
w_autoaka	int
=	O
naka	int
;	O
if	O
(	O
p	pointer
->	O
w_x	O
>	O
wi	int
)	O
p	pointer
->	O
w_x	O
=	O
wi	int
;	O
if	O
(	O
p	pointer
->	O
w_y	O
>=	O
he	int
)	O
p	pointer
->	O
w_y	O
=	O
he	int
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
w_saved	struct
.	O
x	int
>	O
wi	int
)	O
p	pointer
->	O
w_saved	struct
.	O
x	int
=	O
wi	int
;	O
if	O
(	O
p	pointer
->	O
w_saved	struct
.	O
y	int
>=	O
he	int
)	O
p	pointer
->	O
w_saved	struct
.	O
y	int
=	O
he	int
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
w_saved	struct
.	O
y	int
<	O
0	int
)	O
p	pointer
->	O
w_saved	struct
.	O
y	int
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
x	int
>	O
wi	int
)	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
x	int
=	O
wi	int
;	O
if	O
(	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
y	int
>=	O
he	int
)	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
y	int
=	O
he	int
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
y	int
<	O
0	int
)	O
p	pointer
->	O
w_alt	struct
.	O
cursor	struct
.	O
y	int
=	O
0	int
;	O
p	pointer
->	O
w_top	int
=	O
0	int
;	O
p	pointer
->	O
w_bot	int
=	O
he	int
-	O
1	int
;	O
if	O
(	O
wi	int
&&	O
(	O
p	pointer
->	O
w_width	O
!=	O
wi	int
||	O
p	pointer
->	O
w_height	O
!=	O
he	int
)	O
&&	O
p	pointer
->	O
w_width	O
!=	O
0	int
&&	O
p	pointer
->	O
w_height	O
!=	O
0	int
&&	O
p	pointer
->	O
w_ptyfd	int
>=	O
0	int
&&	O
p	pointer
->	O
w_pid	int
)	O
{	O
glwz	struct
.	O
ws_col	short
=	O
wi	int
;	O
glwz	struct
.	O
ws_row	short
=	O
he	int
;	O
debug	O
(	O
"Setting pty winsize.\n"	pointer
)	O
;	O
if	O
(	O
ioctl	function
(	O
p	pointer
->	O
w_ptyfd	int
,	O
TIOCSWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
glwz	struct
)	O
)	O
debug2	O
(	O
"SetPtySize: errno %d (fd:%d)\n"	pointer
,	O
errno	O
,	O
p	pointer
->	O
w_ptyfd	int
)	O
;	O
}	O
p	pointer
->	O
w_width	O
=	O
wi	int
;	O
p	pointer
->	O
w_height	O
=	O
he	int
;	O
if	O
(	O
p	pointer
->	O
w_scrollback_height	int
>	O
hi	int
)	O
p	pointer
->	O
w_scrollback_height	int
=	O
hi	int
;	O
p	pointer
->	O
w_histidx	int
=	O
0	int
;	O
p	pointer
->	O
w_histheight	int
=	O
hi	int
;	O
return	O
0	int
;	O
nomem	O
:	O
if	O
(	O
nmlines	pointer
||	O
nhlines	pointer
)	O
{	O
for	O
(	O
ty	int
=	O
he	int
+	O
hi	int
-	O
1	int
;	O
ty	int
>=	O
0	int
;	O
ty	int
--	O
)	O
{	O
mlt	pointer
=	O
NEWWIN	O
(	O
ty	int
)	O
;	O
FreeMline	function
(	O
mlt	pointer
)	O
;	O
}	O
if	O
(	O
nmlines	pointer
&&	O
p	pointer
->	O
w_mlines	pointer
!=	O
nmlines	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
nmlines	pointer
)	O
;	O
if	O
(	O
nhlines	pointer
&&	O
p	pointer
->	O
w_hlines	pointer
!=	O
nhlines	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
nhlines	pointer
)	O
;	O
}	O
KillWindow	function
(	O
p	pointer
)	O
;	O
Msg	function
(	O
0	int
,	O
"%s"	pointer
,	O
strnomem	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
void	O
FreeAltScreen	function
(	O
p	pointer
)	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
int	O
i	int
;	O
if	O
(	O
p	pointer
->	O
w_alt	struct
.	O
mlines	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
p	pointer
->	O
w_alt	struct
.	O
height	int
;	O
i	int
++	O
)	O
FreeMline	function
(	O
p	pointer
->	O
w_alt	struct
.	O
mlines	pointer
+	O
i	int
)	O
;	O
free	function
(	O
p	pointer
->	O
w_alt	struct
.	O
mlines	pointer
)	O
;	O
}	O
p	pointer
->	O
w_alt	struct
.	O
mlines	pointer
=	O
0	int
;	O
p	pointer
->	O
w_alt	struct
.	O
width	int
=	O
0	int
;	O
p	pointer
->	O
w_alt	struct
.	O
height	int
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
w_alt	struct
.	O
hlines	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
p	pointer
->	O
w_alt	struct
.	O
histheight	int
;	O
i	int
++	O
)	O
FreeMline	function
(	O
p	pointer
->	O
w_alt	struct
.	O
hlines	pointer
+	O
i	int
)	O
;	O
free	function
(	O
p	pointer
->	O
w_alt	struct
.	O
hlines	pointer
)	O
;	O
}	O
p	pointer
->	O
w_alt	struct
.	O
hlines	pointer
=	O
0	int
;	O
p	pointer
->	O
w_alt	struct
.	O
histidx	int
=	O
0	int
;	O
p	pointer
->	O
w_alt	struct
.	O
histheight	int
=	O
0	int
;	O
}	O
static	O
void	O
SwapAltScreen	function
(	O
p	pointer
)	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
struct	O
mline	struct
*	O
ml	pointer
;	O
int	O
t	int
;	O
SWAP	O
(	O
mlines	pointer
,	O
ml	pointer
)	O
;	O
SWAP	O
(	O
width	int
,	O
t	int
)	O
;	O
SWAP	O
(	O
height	int
,	O
t	int
)	O
;	O
SWAP	O
(	O
histheight	int
,	O
t	int
)	O
;	O
SWAP	O
(	O
hlines	pointer
,	O
ml	pointer
)	O
;	O
SWAP	O
(	O
histidx	int
,	O
t	int
)	O
;	O
}	O
void	O
EnterAltScreen	function
(	O
p	pointer
)	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
if	O
(	O
!	O
p	pointer
->	O
w_alt	struct
.	O
on	int
)	O
{	O
FreeAltScreen	function
(	O
p	pointer
)	O
;	O
SwapAltScreen	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
p	pointer
->	O
w_height	O
=	O
0	int
;	O
p	pointer
->	O
w_histheight	int
=	O
0	int
;	O
}	O
ChangeWindowSize	function
(	O
p	pointer
,	O
p	pointer
->	O
w_alt	struct
.	O
width	int
,	O
p	pointer
->	O
w_alt	struct
.	O
height	int
,	O
p	pointer
->	O
w_alt	struct
.	O
histheight	int
)	O
;	O
p	pointer
->	O
w_alt	struct
.	O
on	int
=	O
1	int
;	O
}	O
void	O
LeaveAltScreen	function
(	O
p	pointer
)	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
if	O
(	O
!	O
p	pointer
->	O
w_alt	struct
.	O
on	int
)	O
return	O
;	O
SwapAltScreen	function
(	O
p	pointer
)	O
;	O
ChangeWindowSize	function
(	O
p	pointer
,	O
p	pointer
->	O
w_alt	struct
.	O
width	int
,	O
p	pointer
->	O
w_alt	struct
.	O
height	int
,	O
p	pointer
->	O
w_alt	struct
.	O
histheight	int
)	O
;	O
FreeAltScreen	function
(	O
p	pointer
)	O
;	O
p	pointer
->	O
w_alt	struct
.	O
on	int
=	O
0	int
;	O
}	O
