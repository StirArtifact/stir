struct	O
bst_table	struct
*	O
bst_create	function
(	O
bst_comparison_func	function
*	O
compare	pointer
,	O
void	O
*	O
param	pointer
,	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
)	O
{	O
struct	O
bst_table	struct
*	O
tree	pointer
;	O
assert	O
(	O
compare	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
allocator	pointer
==	O
NULL	O
)	O
allocator	pointer
=	O
&	O
bst_allocator_default	struct
;	O
tree	pointer
=	O
allocator	pointer
->	O
libavl_malloc	pointer
(	O
allocator	pointer
,	O
sizeof	O
*	O
tree	pointer
)	O
;	O
if	O
(	O
tree	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tree	pointer
->	O
bst_root	pointer
=	O
NULL	O
;	O
tree	pointer
->	O
bst_compare	pointer
=	O
compare	pointer
;	O
tree	pointer
->	O
bst_param	pointer
=	O
param	pointer
;	O
tree	pointer
->	O
bst_alloc	pointer
=	O
allocator	pointer
;	O
tree	pointer
->	O
bst_count	long
=	O
0	int
;	O
tree	pointer
->	O
bst_generation	long
=	O
0	int
;	O
return	O
tree	pointer
;	O
}	O
void	O
*	O
bst_find	function
(	O
const	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
const	O
void	O
*	O
item	pointer
)	O
{	O
const	O
struct	O
bst_node	struct
*	O
p	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
item	pointer
!=	O
NULL	O
)	O
;	O
for	O
(	O
p	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
)	O
{	O
int	O
cmp	int
=	O
tree	pointer
->	O
bst_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
p	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
p	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
else	O
return	O
p	pointer
->	O
bst_data	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
*	O
*	O
bst_probe	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
dir	int
;	O
struct	O
bst_node	struct
*	O
n	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
item	pointer
!=	O
NULL	O
)	O
;	O
for	O
(	O
q	pointer
=	O
NULL	O
,	O
p	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
p	pointer
,	O
p	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
dir	int
]	O
)	O
{	O
int	O
cmp	int
=	O
tree	pointer
->	O
bst_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
return	O
&	O
p	pointer
->	O
bst_data	pointer
;	O
dir	int
=	O
cmp	int
>	O
0	int
;	O
}	O
n	pointer
=	O
tree	pointer
->	O
bst_alloc	pointer
->	O
libavl_malloc	pointer
(	O
tree	pointer
->	O
bst_alloc	pointer
,	O
sizeof	O
*	O
p	pointer
)	O
;	O
if	O
(	O
n	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
tree	pointer
->	O
bst_count	long
++	O
;	O
n	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
n	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
n	pointer
->	O
bst_data	pointer
=	O
item	pointer
;	O
if	O
(	O
q	pointer
!=	O
NULL	O
)	O
q	pointer
->	O
bst_link	array
[	O
dir	int
]	O
=	O
n	pointer
;	O
else	O
tree	pointer
->	O
bst_root	pointer
=	O
n	pointer
;	O
return	O
&	O
n	pointer
->	O
bst_data	pointer
;	O
}	O
void	O
*	O
bst_insert	function
(	O
struct	O
bst_table	struct
*	O
table	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
*	O
p	pointer
=	O
bst_probe	function
(	O
table	pointer
,	O
item	pointer
)	O
;	O
return	O
p	pointer
==	O
NULL	O
||	O
*	O
p	pointer
==	O
item	pointer
?	O
NULL	O
:	O
*	O
p	pointer
;	O
}	O
void	O
*	O
bst_replace	function
(	O
struct	O
bst_table	struct
*	O
table	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
*	O
p	pointer
=	O
bst_probe	function
(	O
table	pointer
,	O
item	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
||	O
*	O
p	pointer
==	O
item	pointer
)	O
return	O
NULL	O
;	O
else	O
{	O
void	O
*	O
r	pointer
=	O
*	O
p	pointer
;	O
*	O
p	pointer
=	O
item	pointer
;	O
return	O
r	pointer
;	O
}	O
}	O
void	O
*	O
bst_delete	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
const	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
cmp	int
;	O
int	O
dir	int
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
item	pointer
!=	O
NULL	O
)	O
;	O
p	pointer
=	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
tree	pointer
->	O
bst_root	pointer
;	O
for	O
(	O
cmp	int
=	O
-	O
1	int
;	O
cmp	int
!=	O
0	int
;	O
cmp	int
=	O
tree	pointer
->	O
bst_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
)	O
{	O
dir	int
=	O
cmp	int
>	O
0	int
;	O
q	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
dir	int
]	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
item	pointer
=	O
p	pointer
->	O
bst_data	pointer
;	O
if	O
(	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
==	O
NULL	O
)	O
q	pointer
->	O
bst_link	array
[	O
dir	int
]	O
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
else	O
{	O
struct	O
bst_node	struct
*	O
r	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
if	O
(	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
q	pointer
->	O
bst_link	array
[	O
dir	int
]	O
=	O
r	pointer
;	O
}	O
else	O
{	O
struct	O
bst_node	struct
*	O
s	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
s	pointer
=	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
if	O
(	O
s	pointer
->	O
bst_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
break	O
;	O
r	pointer
=	O
s	pointer
;	O
}	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
s	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
s	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
s	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
q	pointer
->	O
bst_link	array
[	O
dir	int
]	O
=	O
s	pointer
;	O
}	O
}	O
tree	pointer
->	O
bst_alloc	pointer
->	O
libavl_free	pointer
(	O
tree	pointer
->	O
bst_alloc	pointer
,	O
p	pointer
)	O
;	O
tree	pointer
->	O
bst_count	long
--	O
;	O
tree	pointer
->	O
bst_generation	long
++	O
;	O
return	O
(	O
void	O
*	O
)	O
item	pointer
;	O
}	O
static	O
void	O
trav_refresh	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
)	O
{	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_generation	long
=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_generation	long
;	O
if	O
(	O
trav	pointer
->	O
bst_node	struct
!=	O
NULL	O
)	O
{	O
bst_comparison_func	function
*	O
cmp	int
=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_compare	pointer
;	O
void	O
*	O
param	pointer
=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_param	pointer
;	O
struct	O
bst_node	struct
*	O
node	pointer
=	O
trav	pointer
->	O
bst_node	struct
;	O
struct	O
bst_node	struct
*	O
i	pointer
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_root	pointer
;	O
i	pointer
!=	O
node	pointer
;	O
)	O
{	O
assert	O
(	O
trav	pointer
->	O
bst_height	long
<	O
BST_MAX_HEIGHT	int
)	O
;	O
assert	O
(	O
i	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
i	pointer
;	O
i	pointer
=	O
i	pointer
->	O
bst_link	array
[	O
cmp	int
(	O
node	pointer
->	O
bst_data	pointer
,	O
i	pointer
->	O
bst_data	pointer
,	O
param	pointer
)	O
>	O
0	int
]	O
;	O
}	O
}	O
}	O
void	O
bst_t_init	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
trav	pointer
->	O
bst_table	struct
=	O
tree	pointer
;	O
trav	pointer
->	O
bst_node	struct
=	O
NULL	O
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
}	O
void	O
*	O
bst_t_first	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
x	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
trav	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_table	struct
=	O
tree	pointer
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
x	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
if	O
(	O
x	pointer
!=	O
NULL	O
)	O
while	O
(	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
tree	pointer
)	O
;	O
return	O
bst_t_first	function
(	O
trav	pointer
,	O
tree	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
}	O
trav	pointer
->	O
bst_node	struct
=	O
x	pointer
;	O
return	O
x	pointer
!=	O
NULL	O
?	O
x	pointer
->	O
bst_data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_last	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
x	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
trav	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_table	struct
=	O
tree	pointer
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
x	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
if	O
(	O
x	pointer
!=	O
NULL	O
)	O
while	O
(	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
tree	pointer
)	O
;	O
return	O
bst_t_last	function
(	O
trav	pointer
,	O
tree	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
}	O
trav	pointer
->	O
bst_node	struct
=	O
x	pointer
;	O
return	O
x	pointer
!=	O
NULL	O
?	O
x	pointer
->	O
bst_data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_find	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
p	pointer
,	O
*	O
q	pointer
;	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
&&	O
tree	pointer
!=	O
NULL	O
&&	O
item	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_table	struct
=	O
tree	pointer
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
for	O
(	O
p	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
q	pointer
)	O
{	O
int	O
cmp	int
=	O
tree	pointer
->	O
bst_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
q	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
q	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
else	O
{	O
trav	pointer
->	O
bst_node	struct
=	O
p	pointer
;	O
return	O
p	pointer
->	O
bst_data	pointer
;	O
}	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
return	O
bst_t_find	function
(	O
trav	pointer
,	O
tree	pointer
,	O
item	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
p	pointer
;	O
}	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
trav	pointer
->	O
bst_node	struct
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_insert	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
*	O
q	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
&&	O
item	pointer
!=	O
NULL	O
)	O
;	O
trav	pointer
->	O
bst_table	struct
=	O
tree	pointer
;	O
trav	pointer
->	O
bst_height	long
=	O
0	int
;	O
q	pointer
=	O
&	O
tree	pointer
->	O
bst_root	pointer
;	O
while	O
(	O
*	O
q	pointer
!=	O
NULL	O
)	O
{	O
int	O
x	pointer
=	O
tree	pointer
->	O
bst_compare	pointer
(	O
item	pointer
,	O
(	O
*	O
q	pointer
)	O
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
;	O
if	O
(	O
x	pointer
==	O
0	int
)	O
{	O
trav	pointer
->	O
bst_node	struct
=	O
*	O
q	pointer
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
return	O
(	O
*	O
q	pointer
)	O
->	O
bst_data	pointer
;	O
}	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
tree	pointer
)	O
;	O
return	O
bst_t_insert	function
(	O
trav	pointer
,	O
tree	pointer
,	O
item	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
*	O
q	pointer
;	O
q	pointer
=	O
&	O
(	O
*	O
q	pointer
)	O
->	O
bst_link	array
[	O
x	pointer
>	O
0	int
]	O
;	O
}	O
trav	pointer
->	O
bst_node	struct
=	O
*	O
q	pointer
=	O
tree	pointer
->	O
bst_alloc	pointer
->	O
libavl_malloc	pointer
(	O
tree	pointer
->	O
bst_alloc	pointer
,	O
sizeof	O
*	O
*	O
q	pointer
)	O
;	O
if	O
(	O
*	O
q	pointer
==	O
NULL	O
)	O
{	O
trav	pointer
->	O
bst_node	struct
=	O
NULL	O
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
return	O
NULL	O
;	O
}	O
(	O
*	O
q	pointer
)	O
->	O
bst_link	array
[	O
0	int
]	O
=	O
(	O
*	O
q	pointer
)	O
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
(	O
*	O
q	pointer
)	O
->	O
bst_data	pointer
=	O
item	pointer
;	O
tree	pointer
->	O
bst_count	long
++	O
;	O
trav	pointer
->	O
bst_generation	long
=	O
tree	pointer
->	O
bst_generation	long
;	O
return	O
(	O
*	O
q	pointer
)	O
->	O
bst_data	pointer
;	O
}	O
void	O
*	O
bst_t_copy	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
const	O
struct	O
bst_traverser	struct
*	O
src	pointer
)	O
{	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
&&	O
src	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	pointer
!=	O
src	pointer
)	O
{	O
trav	pointer
->	O
bst_table	struct
=	O
src	pointer
->	O
bst_table	struct
;	O
trav	pointer
->	O
bst_node	struct
=	O
src	pointer
->	O
bst_node	struct
;	O
trav	pointer
->	O
bst_generation	long
=	O
src	pointer
->	O
bst_generation	long
;	O
if	O
(	O
trav	pointer
->	O
bst_generation	long
==	O
trav	pointer
->	O
bst_table	struct
->	O
bst_generation	long
)	O
{	O
trav	pointer
->	O
bst_height	long
=	O
src	pointer
->	O
bst_height	long
;	O
memcpy	function
(	O
trav	pointer
->	O
bst_stack	array
,	O
(	O
const	O
void	O
*	O
)	O
src	pointer
->	O
bst_stack	array
,	O
sizeof	O
*	O
trav	pointer
->	O
bst_stack	array
*	O
trav	pointer
->	O
bst_height	long
)	O
;	O
}	O
}	O
return	O
trav	pointer
->	O
bst_node	struct
!=	O
NULL	O
?	O
trav	pointer
->	O
bst_node	struct
->	O
bst_data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_next	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
x	pointer
;	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	pointer
->	O
bst_generation	long
!=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_generation	long
)	O
trav_refresh	function
(	O
trav	pointer
)	O
;	O
x	pointer
=	O
trav	pointer
->	O
bst_node	struct
;	O
if	O
(	O
x	pointer
==	O
NULL	O
)	O
{	O
return	O
bst_t_first	function
(	O
trav	pointer
,	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
}	O
else	O
if	O
(	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
return	O
bst_t_next	function
(	O
trav	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
while	O
(	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
return	O
bst_t_next	function
(	O
trav	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
struct	O
bst_node	struct
*	O
y	pointer
;	O
do	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
==	O
0	int
)	O
{	O
trav	pointer
->	O
bst_node	struct
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	pointer
=	O
x	pointer
;	O
x	pointer
=	O
trav	pointer
->	O
bst_stack	array
[	O
--	O
trav	pointer
->	O
bst_height	long
]	O
;	O
}	O
while	O
(	O
y	pointer
==	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
)	O
;	O
}	O
trav	pointer
->	O
bst_node	struct
=	O
x	pointer
;	O
return	O
x	pointer
->	O
bst_data	pointer
;	O
}	O
void	O
*	O
bst_t_prev	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
x	pointer
;	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
trav	pointer
->	O
bst_generation	long
!=	O
trav	pointer
->	O
bst_table	struct
->	O
bst_generation	long
)	O
trav_refresh	function
(	O
trav	pointer
)	O
;	O
x	pointer
=	O
trav	pointer
->	O
bst_node	struct
;	O
if	O
(	O
x	pointer
==	O
NULL	O
)	O
{	O
return	O
bst_t_last	function
(	O
trav	pointer
,	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
}	O
else	O
if	O
(	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
return	O
bst_t_prev	function
(	O
trav	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
while	O
(	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
>=	O
BST_MAX_HEIGHT	int
)	O
{	O
bst_balance	function
(	O
trav	pointer
->	O
bst_table	struct
)	O
;	O
return	O
bst_t_prev	function
(	O
trav	pointer
)	O
;	O
}	O
trav	pointer
->	O
bst_stack	array
[	O
trav	pointer
->	O
bst_height	long
++	O
]	O
=	O
x	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
}	O
}	O
else	O
{	O
struct	O
bst_node	struct
*	O
y	pointer
;	O
do	O
{	O
if	O
(	O
trav	pointer
->	O
bst_height	long
==	O
0	int
)	O
{	O
trav	pointer
->	O
bst_node	struct
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	pointer
=	O
x	pointer
;	O
x	pointer
=	O
trav	pointer
->	O
bst_stack	array
[	O
--	O
trav	pointer
->	O
bst_height	long
]	O
;	O
}	O
while	O
(	O
y	pointer
==	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
)	O
;	O
}	O
trav	pointer
->	O
bst_node	struct
=	O
x	pointer
;	O
return	O
x	pointer
->	O
bst_data	pointer
;	O
}	O
void	O
*	O
bst_t_cur	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
)	O
{	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
)	O
;	O
return	O
trav	pointer
->	O
bst_node	struct
!=	O
NULL	O
?	O
trav	pointer
->	O
bst_node	struct
->	O
bst_data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
bst_t_replace	function
(	O
struct	O
bst_traverser	struct
*	O
trav	pointer
,	O
void	O
*	O
new	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
old	pointer
;	O
assert	O
(	O
trav	pointer
!=	O
NULL	O
&&	O
trav	pointer
->	O
bst_node	struct
!=	O
NULL	O
&&	O
new	pointer
!=	O
NULL	O
)	O
;	O
old	pointer
=	O
trav	pointer
->	O
bst_node	struct
->	O
bst_data	pointer
;	O
trav	pointer
->	O
bst_node	struct
->	O
bst_data	pointer
=	O
new	pointer
;	O
return	O
old	pointer
;	O
}	O
static	O
void	O
copy_error_recovery	function
(	O
struct	O
bst_node	struct
*	O
*	O
stack	pointer
,	O
int	O
height	int
,	O
struct	O
bst_table	struct
*	O
new	pointer
,	O
bst_item_func	function
*	O
destroy	pointer
)	O
{	O
assert	O
(	O
stack	pointer
!=	O
NULL	O
&&	O
height	int
>=	O
0	int
&&	O
new	pointer
!=	O
NULL	O
)	O
;	O
for	O
(	O
;	O
height	int
>	O
2	int
;	O
height	int
-=	O
2	int
)	O
stack	pointer
[	O
height	int
-	O
1	int
]	O
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
bst_destroy	function
(	O
new	pointer
,	O
destroy	pointer
)	O
;	O
}	O
struct	O
bst_table	struct
*	O
bst_copy	function
(	O
const	O
struct	O
bst_table	struct
*	O
org	pointer
,	O
bst_copy_func	function
*	O
copy	pointer
,	O
bst_item_func	function
*	O
destroy	pointer
,	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
stack	pointer
[	O
2	int
*	O
(	O
BST_MAX_HEIGHT	int
+	O
1	int
)	O
]	O
;	O
int	O
height	int
=	O
0	int
;	O
struct	O
bst_table	struct
*	O
new	pointer
;	O
const	O
struct	O
bst_node	struct
*	O
x	pointer
;	O
struct	O
bst_node	struct
*	O
y	pointer
;	O
assert	O
(	O
org	pointer
!=	O
NULL	O
)	O
;	O
new	pointer
=	O
bst_create	function
(	O
org	pointer
->	O
bst_compare	pointer
,	O
org	pointer
->	O
bst_param	pointer
,	O
allocator	pointer
!=	O
NULL	O
?	O
allocator	pointer
:	O
org	pointer
->	O
bst_alloc	pointer
)	O
;	O
if	O
(	O
new	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new	pointer
->	O
bst_count	long
=	O
org	pointer
->	O
bst_count	long
;	O
if	O
(	O
new	pointer
->	O
bst_count	long
==	O
0	int
)	O
return	O
new	pointer
;	O
x	pointer
=	O
(	O
const	O
struct	O
bst_node	struct
*	O
)	O
&	O
org	pointer
->	O
bst_root	pointer
;	O
y	pointer
=	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
new	pointer
->	O
bst_root	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
height	int
>=	O
2	int
*	O
(	O
BST_MAX_HEIGHT	int
+	O
1	int
)	O
)	O
{	O
y	pointer
->	O
bst_data	pointer
=	O
NULL	O
;	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
copy_error_recovery	function
(	O
stack	pointer
,	O
height	int
,	O
new	pointer
,	O
destroy	pointer
)	O
;	O
bst_balance	function
(	O
(	O
struct	O
bst_table	struct
*	O
)	O
org	pointer
)	O
;	O
return	O
bst_copy	function
(	O
org	pointer
,	O
copy	pointer
,	O
destroy	pointer
,	O
allocator	pointer
)	O
;	O
}	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
new	pointer
->	O
bst_alloc	pointer
->	O
libavl_malloc	pointer
(	O
new	pointer
->	O
bst_alloc	pointer
,	O
sizeof	O
*	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
if	O
(	O
y	pointer
!=	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
new	pointer
->	O
bst_root	pointer
)	O
{	O
y	pointer
->	O
bst_data	pointer
=	O
NULL	O
;	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
}	O
copy_error_recovery	function
(	O
stack	pointer
,	O
height	int
,	O
new	pointer
,	O
destroy	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
stack	pointer
[	O
height	int
++	O
]	O
=	O
(	O
struct	O
bst_node	struct
*	O
)	O
x	pointer
;	O
stack	pointer
[	O
height	int
++	O
]	O
=	O
y	pointer
;	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
y	pointer
=	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
}	O
y	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
copy	pointer
==	O
NULL	O
)	O
y	pointer
->	O
bst_data	pointer
=	O
x	pointer
->	O
bst_data	pointer
;	O
else	O
{	O
y	pointer
->	O
bst_data	pointer
=	O
copy	pointer
(	O
x	pointer
->	O
bst_data	pointer
,	O
org	pointer
->	O
bst_param	pointer
)	O
;	O
if	O
(	O
y	pointer
->	O
bst_data	pointer
==	O
NULL	O
)	O
{	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
copy_error_recovery	function
(	O
stack	pointer
,	O
height	int
,	O
new	pointer
,	O
destroy	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
new	pointer
->	O
bst_alloc	pointer
->	O
libavl_malloc	pointer
(	O
new	pointer
->	O
bst_alloc	pointer
,	O
sizeof	O
*	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
==	O
NULL	O
)	O
{	O
copy_error_recovery	function
(	O
stack	pointer
,	O
height	int
,	O
new	pointer
,	O
destroy	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
x	pointer
=	O
x	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
y	pointer
=	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
break	O
;	O
}	O
else	O
y	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
height	int
<=	O
2	int
)	O
return	O
new	pointer
;	O
y	pointer
=	O
stack	pointer
[	O
--	O
height	int
]	O
;	O
x	pointer
=	O
stack	pointer
[	O
--	O
height	int
]	O
;	O
}	O
}	O
}	O
void	O
bst_destroy	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
,	O
bst_item_func	function
*	O
destroy	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
p	pointer
,	O
*	O
q	pointer
;	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
)	O
;	O
for	O
(	O
p	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
q	pointer
)	O
if	O
(	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
q	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
if	O
(	O
destroy	pointer
!=	O
NULL	O
&&	O
p	pointer
->	O
bst_data	pointer
!=	O
NULL	O
)	O
destroy	pointer
(	O
p	pointer
->	O
bst_data	pointer
,	O
tree	pointer
->	O
bst_param	pointer
)	O
;	O
tree	pointer
->	O
bst_alloc	pointer
->	O
libavl_free	pointer
(	O
tree	pointer
->	O
bst_alloc	pointer
,	O
p	pointer
)	O
;	O
}	O
else	O
{	O
q	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
q	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
q	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
p	pointer
;	O
}	O
tree	pointer
->	O
bst_alloc	pointer
->	O
libavl_free	pointer
(	O
tree	pointer
->	O
bst_alloc	pointer
,	O
tree	pointer
)	O
;	O
}	O
static	O
void	O
tree_to_vine	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
struct	O
bst_node	struct
*	O
q	pointer
,	O
*	O
p	pointer
;	O
q	pointer
=	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
tree	pointer
->	O
bst_root	pointer
;	O
p	pointer
=	O
tree	pointer
->	O
bst_root	pointer
;	O
while	O
(	O
p	pointer
!=	O
NULL	O
)	O
if	O
(	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
==	O
NULL	O
)	O
{	O
q	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
}	O
else	O
{	O
struct	O
bst_node	struct
*	O
r	pointer
=	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
p	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
r	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
p	pointer
;	O
p	pointer
=	O
r	pointer
;	O
q	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
r	pointer
;	O
}	O
}	O
static	O
void	O
compress	function
(	O
struct	O
bst_node	struct
*	O
root	pointer
,	O
unsigned	O
long	O
count	long
)	O
{	O
assert	O
(	O
root	pointer
!=	O
NULL	O
)	O
;	O
while	O
(	O
count	long
--	O
)	O
{	O
struct	O
bst_node	struct
*	O
red	pointer
=	O
root	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
struct	O
bst_node	struct
*	O
black	pointer
=	O
red	pointer
->	O
bst_link	array
[	O
0	int
]	O
;	O
root	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
black	pointer
;	O
red	pointer
->	O
bst_link	array
[	O
0	int
]	O
=	O
black	pointer
->	O
bst_link	array
[	O
1	int
]	O
;	O
black	pointer
->	O
bst_link	array
[	O
1	int
]	O
=	O
red	pointer
;	O
root	pointer
=	O
black	pointer
;	O
}	O
}	O
static	O
void	O
vine_to_tree	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
unsigned	O
long	O
vine	long
;	O
unsigned	O
long	O
leaves	long
;	O
int	O
height	int
;	O
leaves	long
=	O
tree	pointer
->	O
bst_count	long
+	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
unsigned	O
long	O
next	long
=	O
leaves	long
&	O
(	O
leaves	long
-	O
1	int
)	O
;	O
if	O
(	O
next	long
==	O
0	int
)	O
break	O
;	O
leaves	long
=	O
next	long
;	O
}	O
leaves	long
=	O
tree	pointer
->	O
bst_count	long
+	O
1	int
-	O
leaves	long
;	O
compress	function
(	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
tree	pointer
->	O
bst_root	pointer
,	O
leaves	long
)	O
;	O
vine	long
=	O
tree	pointer
->	O
bst_count	long
-	O
leaves	long
;	O
height	int
=	O
1	int
+	O
(	O
leaves	long
>	O
0	int
)	O
;	O
while	O
(	O
vine	long
>	O
1	int
)	O
{	O
compress	function
(	O
(	O
struct	O
bst_node	struct
*	O
)	O
&	O
tree	pointer
->	O
bst_root	pointer
,	O
vine	long
/	O
2	int
)	O
;	O
vine	long
/=	O
2	int
;	O
height	int
++	O
;	O
}	O
if	O
(	O
height	int
>	O
BST_MAX_HEIGHT	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"libavl: Tree too big (%lu nodes) to handle."	pointer
,	O
(	O
unsigned	O
long	O
)	O
tree	pointer
->	O
bst_count	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
void	O
bst_balance	function
(	O
struct	O
bst_table	struct
*	O
tree	pointer
)	O
{	O
assert	O
(	O
tree	pointer
!=	O
NULL	O
)	O
;	O
tree_to_vine	function
(	O
tree	pointer
)	O
;	O
vine_to_tree	function
(	O
tree	pointer
)	O
;	O
tree	pointer
->	O
bst_generation	long
++	O
;	O
}	O
void	O
*	O
bst_malloc	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
size_t	long
size	long
)	O
{	O
assert	O
(	O
allocator	pointer
!=	O
NULL	O
&&	O
size	long
>	O
0	int
)	O
;	O
return	O
malloc	function
(	O
size	long
)	O
;	O
}	O
void	O
bst_free	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
void	O
*	O
block	pointer
)	O
{	O
assert	O
(	O
allocator	pointer
!=	O
NULL	O
&&	O
block	pointer
!=	O
NULL	O
)	O
;	O
free	function
(	O
block	pointer
)	O
;	O
}	O
struct	O
libavl_allocator	struct
bst_allocator_default	struct
=	O
{	O
bst_malloc	function
,	O
bst_free	function
}	O
;	O
void	O
(	O
bst_assert_insert	function
)	O
(	O
struct	O
bst_table	struct
*	O
table	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
*	O
p	pointer
=	O
bst_probe	function
(	O
table	pointer
,	O
item	pointer
)	O
;	O
assert	O
(	O
p	pointer
!=	O
NULL	O
&&	O
*	O
p	pointer
==	O
item	pointer
)	O
;	O
}	O
void	O
*	O
(	O
bst_assert_delete	function
)	O
(	O
struct	O
bst_table	struct
*	O
table	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
void	O
*	O
p	pointer
=	O
bst_delete	function
(	O
table	pointer
,	O
item	pointer
)	O
;	O
assert	O
(	O
p	pointer
!=	O
NULL	O
)	O
;	O
return	O
p	pointer
;	O
}	O
