net_info_t	struct
*	O
mc_net_info_new	function
(	O
const	O
char	O
*	O
device	pointer
)	O
{	O
net_info_t	struct
*	O
new	pointer
=	O
(	O
net_info_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
net_info_t	struct
)	O
)	O
;	O
new	pointer
->	O
sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
new	pointer
->	O
sock	int
<	O
0	int
)	O
{	O
perror	function
(	O
"[ERROR] Socket"	pointer
)	O
;	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
new	pointer
->	O
dev	struct
.	O
ifr_name	O
,	O
device	pointer
)	O
;	O
if	O
(	O
ioctl	function
(	O
new	pointer
->	O
sock	int
,	O
SIOCGIFHWADDR	int
,	O
&	O
new	pointer
->	O
dev	struct
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"[ERROR] Set device name"	pointer
)	O
;	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
new	pointer
;	O
}	O
void	O
mc_net_info_free	function
(	O
net_info_t	struct
*	O
net	pointer
)	O
{	O
close	function
(	O
net	pointer
->	O
sock	int
)	O
;	O
free	function
(	O
net	pointer
)	O
;	O
}	O
mac_t	struct
*	O
mc_net_info_get_mac	function
(	O
const	O
net_info_t	struct
*	O
net	pointer
)	O
{	O
int	O
i	int
;	O
mac_t	struct
*	O
new	pointer
=	O
(	O
mac_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
mac_t	struct
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
new	pointer
->	O
byte	array
[	O
i	int
]	O
=	O
net	pointer
->	O
dev	struct
.	O
ifr_hwaddr	O
.	O
sa_data	array
[	O
i	int
]	O
&	O
0xFF	int
;	O
}	O
return	O
new	pointer
;	O
}	O
int	O
mc_net_info_set_mac	function
(	O
net_info_t	struct
*	O
net	pointer
,	O
const	O
mac_t	struct
*	O
mac	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
net	pointer
->	O
dev	struct
.	O
ifr_hwaddr	O
.	O
sa_data	array
[	O
i	int
]	O
=	O
mac	pointer
->	O
byte	array
[	O
i	int
]	O
;	O
}	O
if	O
(	O
ioctl	function
(	O
net	pointer
->	O
sock	int
,	O
SIOCSIFHWADDR	int
,	O
&	O
net	pointer
->	O
dev	struct
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"[ERROR] Could not change MAC: interface up or insufficient permissions"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
mac_t	struct
*	O
mc_net_info_get_permanent_mac	function
(	O
const	O
net_info_t	struct
*	O
net	pointer
)	O
{	O
int	O
i	int
;	O
struct	O
ifreq	struct
req	struct
;	O
struct	O
ethtool_perm_addr	struct
*	O
epa	pointer
;	O
mac_t	struct
*	O
newmac	pointer
;	O
newmac	pointer
=	O
(	O
mac_t	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
mac_t	struct
)	O
)	O
;	O
epa	pointer
=	O
(	O
struct	O
ethtool_perm_addr	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
ethtool_perm_addr	struct
)	O
+	O
IFHWADDRLEN	int
)	O
;	O
epa	pointer
->	O
cmd	int
=	O
ETHTOOL_GPERMADDR	int
;	O
epa	pointer
->	O
size	int
=	O
IFHWADDRLEN	int
;	O
memcpy	function
(	O
&	O
req	struct
,	O
&	O
(	O
net	pointer
->	O
dev	struct
)	O
,	O
sizeof	O
(	O
struct	O
ifreq	struct
)	O
)	O
;	O
req	struct
.	O
ifr_data	O
=	O
(	O
caddr_t	pointer
)	O
epa	pointer
;	O
if	O
(	O
ioctl	function
(	O
net	pointer
->	O
sock	int
,	O
SIOCETHTOOL	int
,	O
&	O
req	struct
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"[ERROR] Could not read permanent MAC"	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
newmac	pointer
->	O
byte	array
[	O
i	int
]	O
=	O
epa	pointer
->	O
data	int
[	O
i	int
]	O
;	O
}	O
}	O
free	function
(	O
epa	pointer
)	O
;	O
return	O
newmac	pointer
;	O
}	O
