static	O
int	O
format_int_realloc	function
(	O
char	O
*	O
*	O
out	pointer
,	O
int	O
*	O
len	pointer
,	O
int	O
*	O
alen	pointer
,	O
int	O
req	int
)	O
{	O
if	O
(	O
(	O
*	O
len	pointer
)	O
+	O
req	int
>	O
(	O
*	O
alen	pointer
)	O
)	O
{	O
req	int
+=	O
(	O
*	O
len	pointer
)	O
;	O
*	O
alen	pointer
=	O
BLOCK_FORMAT	int
*	O
(	O
(	O
req	int
+	O
BLOCK_FORMAT	int
-	O
1	int
)	O
/	O
BLOCK_FORMAT	int
)	O
;	O
*	O
out	pointer
=	O
realloc	function
(	O
*	O
out	pointer
,	O
*	O
alen	pointer
)	O
;	O
realloc_check	O
(	O
*	O
out	pointer
,	O
*	O
alen	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
format_get_parameters	function
(	O
char	O
*	O
format	pointer
,	O
int	O
*	O
d1	pointer
,	O
int	O
*	O
d2	pointer
,	O
int	O
*	O
fmt	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
int	O
set	int
;	O
char	O
*	O
fstart	pointer
;	O
fstart	pointer
=	O
format	pointer
;	O
set	int
=	O
0	int
;	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
&&	O
sscanf	function
(	O
format	pointer
,	O
"%d"	pointer
,	O
d1	pointer
)	O
==	O
1	int
)	O
{	O
set	int
|=	O
1	int
;	O
while	O
(	O
*	O
format	pointer
==	O
'-'	O
||	O
isdigit	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
}	O
if	O
(	O
*	O
format	pointer
==	O
'.'	O
)	O
format	pointer
++	O
;	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
if	O
(	O
*	O
format	pointer
&&	O
sscanf	function
(	O
format	pointer
,	O
"%d"	pointer
,	O
d2	pointer
)	O
==	O
1	int
)	O
{	O
set	int
|=	O
2	int
;	O
while	O
(	O
*	O
format	pointer
==	O
'-'	O
||	O
isdigit	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
format	pointer
++	O
;	O
}	O
if	O
(	O
islower	function
(	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
)	O
)	O
{	O
*	O
fmt	pointer
=	O
(	O
int	O
)	O
(	O
*	O
format	pointer
)	O
;	O
format	pointer
++	O
;	O
if	O
(	O
next	pointer
!=	O
NULL	O
)	O
*	O
next	pointer
=	O
format	pointer
;	O
return	O
(	O
set	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
next	pointer
!=	O
NULL	O
)	O
*	O
next	pointer
=	O
format	pointer
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
int	O
format_check_if_formatted	function
(	O
char	O
*	O
format	pointer
,	O
char	O
*	O
fchars	pointer
)	O
{	O
int	O
fmt	pointer
,	O
d1	pointer
,	O
d2	pointer
,	O
set	int
;	O
char	O
*	O
next	pointer
;	O
while	O
(	O
*	O
format	pointer
)	O
{	O
if	O
(	O
*	O
format	pointer
==	O
'%'	O
&&	O
*	O
(	O
format	pointer
+	O
1	int
)	O
)	O
{	O
format	pointer
++	O
;	O
set	int
=	O
format_get_parameters	function
(	O
format	pointer
,	O
&	O
d1	pointer
,	O
&	O
d2	pointer
,	O
&	O
fmt	pointer
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
set	int
>=	O
0	int
)	O
format	pointer
=	O
next	pointer
;	O
else	O
if	O
(	O
*	O
format	pointer
==	O
'%'	O
)	O
format	pointer
++	O
;	O
if	O
(	O
strchr	function
(	O
fchars	pointer
,	O
fmt	pointer
)	O
!=	O
NULL	O
)	O
return	O
(	O
1	int
)	O
;	O
}	O
else	O
format	pointer
++	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
format_int_add_string	function
(	O
char	O
*	O
*	O
out	pointer
,	O
int	O
*	O
len	pointer
,	O
int	O
*	O
alen	pointer
,	O
int	O
set	int
,	O
int	O
d1	pointer
,	O
char	O
*	O
vs	pointer
)	O
{	O
int	O
slen	int
,	O
req	int
;	O
slen	int
=	O
strlen	function
(	O
vs	pointer
)	O
;	O
if	O
(	O
(	O
set	int
&	O
1	int
)	O
&&	O
abs	function
(	O
d1	pointer
)	O
>	O
slen	int
)	O
req	int
=	O
abs	function
(	O
d1	pointer
)	O
;	O
else	O
req	int
=	O
slen	int
;	O
format_int_realloc	function
(	O
out	pointer
,	O
len	pointer
,	O
alen	pointer
,	O
req	int
)	O
;	O
if	O
(	O
(	O
set	int
&	O
1	int
)	O
&&	O
d1	pointer
>	O
slen	int
)	O
{	O
memset	function
(	O
(	O
*	O
out	pointer
)	O
+	O
(	O
*	O
len	pointer
)	O
,	O
32	int
,	O
d1	pointer
-	O
slen	int
)	O
;	O
strcpy	function
(	O
(	O
*	O
out	pointer
)	O
+	O
(	O
*	O
len	pointer
)	O
+	O
(	O
d1	pointer
-	O
slen	int
)	O
,	O
vs	pointer
)	O
;	O
*	O
len	pointer
+=	O
req	int
;	O
}	O
else	O
if	O
(	O
(	O
set	int
&	O
1	int
)	O
&&	O
-	O
d1	pointer
>	O
slen	int
)	O
{	O
strcpy	function
(	O
(	O
*	O
out	pointer
)	O
+	O
(	O
*	O
len	pointer
)	O
,	O
vs	pointer
)	O
;	O
memset	function
(	O
(	O
*	O
out	pointer
)	O
+	O
(	O
*	O
len	pointer
)	O
+	O
slen	int
,	O
32	int
,	O
(	O
-	O
d1	pointer
)	O
-	O
slen	int
)	O
;	O
(	O
*	O
out	pointer
)	O
[	O
(	O
*	O
len	pointer
)	O
+	O
req	int
]	O
=	O
0	int
;	O
*	O
len	pointer
+=	O
req	int
;	O
}	O
else	O
{	O
strcpy	function
(	O
(	O
*	O
out	pointer
)	O
+	O
(	O
*	O
len	pointer
)	O
,	O
vs	pointer
)	O
;	O
*	O
len	pointer
+=	O
slen	int
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
char	O
*	O
format_replace	function
(	O
char	O
*	O
format	pointer
,	O
int	O
is_escape	int
,	O
...	O
)	O
{	O
char	O
*	O
out	pointer
,	O
*	O
fstart	pointer
,	O
*	O
next	pointer
;	O
int	O
len	pointer
,	O
alen	pointer
,	O
set	int
,	O
d1	pointer
,	O
d2	pointer
,	O
fmt	pointer
,	O
chr	int
,	O
type	int
;	O
va_list	array
ap	array
;	O
alen	pointer
=	O
BLOCK_FORMAT	int
;	O
out	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
alen	pointer
)	O
;	O
malloc_check	O
(	O
out	pointer
)	O
;	O
out	pointer
[	O
0	int
]	O
=	O
0	int
;	O
len	pointer
=	O
0	int
;	O
while	O
(	O
*	O
format	pointer
)	O
{	O
if	O
(	O
is_escape	int
&&	O
*	O
format	pointer
==	O
'\\'	O
)	O
{	O
format	pointer
++	O
;	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
1	int
)	O
;	O
switch	O
(	O
*	O
format	pointer
)	O
{	O
case	O
'n'	O
:	O
out	pointer
[	O
len	pointer
]	O
=	O
'\n'	O
,	O
len	pointer
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
out	pointer
[	O
len	pointer
]	O
=	O
'\t'	O
,	O
len	pointer
++	O
;	O
break	O
;	O
case	O
'r'	O
:	O
out	pointer
[	O
len	pointer
]	O
=	O
'\r'	O
,	O
len	pointer
++	O
;	O
break	O
;	O
case	O
0	int
:	O
out	pointer
[	O
len	pointer
]	O
=	O
'\\'	O
,	O
len	pointer
++	O
;	O
break	O
;	O
default	O
:	O
out	pointer
[	O
len	pointer
]	O
=	O
*	O
format	pointer
,	O
len	pointer
++	O
;	O
}	O
if	O
(	O
*	O
format	pointer
)	O
format	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
format	pointer
==	O
'%'	O
&&	O
*	O
(	O
format	pointer
+	O
1	int
)	O
)	O
{	O
fstart	pointer
=	O
format	pointer
;	O
format	pointer
++	O
;	O
set	int
=	O
format_get_parameters	function
(	O
format	pointer
,	O
&	O
d1	pointer
,	O
&	O
d2	pointer
,	O
&	O
fmt	pointer
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
set	int
>=	O
0	int
)	O
{	O
va_start	O
(	O
ap	array
,	O
is_escape	int
)	O
;	O
while	O
(	O
(	O
chr	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
)	O
>	O
0	int
)	O
{	O
type	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
if	O
(	O
chr	int
==	O
fmt	pointer
)	O
break	O
;	O
else	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
FORMAT_INTEGER	int
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
break	O
;	O
case	O
FORMAT_STRING	int
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
chr	int
>	O
0	int
)	O
{	O
int	O
vi	int
;	O
char	O
*	O
vs	pointer
;	O
char	O
buff	array
[	O
256	int
]	O
,	O
sbuff	array
[	O
16	int
]	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
FORMAT_INTEGER	int
:	O
vi	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
if	O
(	O
(	O
set	int
&	O
2	int
)	O
&&	O
d2	pointer
>	O
0	int
)	O
{	O
if	O
(	O
d2	pointer
>	O
128	int
)	O
d2	pointer
=	O
128	int
;	O
sprintf	function
(	O
sbuff	array
,	O
"%%.%dd"	pointer
,	O
d2	pointer
)	O
;	O
sprintf	function
(	O
buff	array
,	O
sbuff	array
,	O
vi	int
)	O
;	O
}	O
else	O
sprintf	function
(	O
buff	array
,	O
"%d"	pointer
,	O
vi	int
)	O
;	O
format_int_add_string	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
set	int
,	O
d1	pointer
,	O
buff	array
)	O
;	O
break	O
;	O
case	O
FORMAT_STRING	int
:	O
vs	pointer
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
;	O
if	O
(	O
vs	pointer
==	O
NULL	O
)	O
vs	pointer
=	O
"(null)"	pointer
;	O
format_int_add_string	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
set	int
,	O
d1	pointer
,	O
vs	pointer
)	O
;	O
break	O
;	O
}	O
format	pointer
=	O
next	pointer
;	O
}	O
else	O
{	O
format	pointer
--	O
;	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
next	pointer
-	O
format	pointer
)	O
;	O
memcpy	function
(	O
out	pointer
+	O
len	pointer
,	O
format	pointer
,	O
next	pointer
-	O
format	pointer
)	O
;	O
len	pointer
+=	O
next	pointer
-	O
format	pointer
;	O
format	pointer
=	O
next	pointer
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
format	pointer
)	O
==	O
'%'	O
)	O
{	O
format	pointer
++	O
;	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
1	int
)	O
;	O
out	pointer
[	O
len	pointer
]	O
=	O
'%'	O
;	O
len	pointer
++	O
;	O
}	O
else	O
{	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
2	int
)	O
;	O
out	pointer
[	O
len	pointer
]	O
=	O
'%'	O
;	O
out	pointer
[	O
len	pointer
+	O
1	int
]	O
=	O
(	O
*	O
format	pointer
)	O
;	O
format	pointer
++	O
;	O
len	pointer
+=	O
2	int
;	O
}	O
}	O
else	O
{	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
1	int
)	O
;	O
out	pointer
[	O
len	pointer
]	O
=	O
*	O
format	pointer
,	O
len	pointer
++	O
;	O
format	pointer
++	O
;	O
}	O
}	O
;	O
format_int_realloc	function
(	O
&	O
out	pointer
,	O
&	O
len	pointer
,	O
&	O
alen	pointer
,	O
1	int
)	O
;	O
out	pointer
[	O
len	pointer
]	O
=	O
0	int
;	O
return	O
(	O
out	pointer
)	O
;	O
}	O
