int	O
openpipe	function
(	O
const	O
char	O
*	O
command	pointer
,	O
char	O
*	O
mode	pointer
)	O
{	O
int	O
fildes	array
[	O
2	int
]	O
;	O
int	O
parent_pipe_end	int
;	O
int	O
child_pipe_end	int
;	O
char	O
*	O
child_pipe_mode	pointer
;	O
if	O
(	O
strcmp	function
(	O
mode	pointer
,	O
"w"	pointer
)	O
==	O
0	int
)	O
{	O
parent_pipe_end	int
=	O
1	int
;	O
child_pipe_end	int
=	O
0	int
;	O
child_pipe_mode	pointer
=	O
"read"	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
mode	pointer
,	O
"r"	pointer
)	O
==	O
0	int
)	O
{	O
parent_pipe_end	int
=	O
0	int
;	O
child_pipe_end	int
=	O
1	int
;	O
child_pipe_mode	pointer
=	O
"write"	pointer
;	O
}	O
else	O
abort	function
(	O
)	O
;	O
if	O
(	O
pipe	function
(	O
fildes	array
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
CMD_NAME	pointer
": Cannot create pipe"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
dm	function
(	O
'f'	O
,	O
3	int
,	O
"openpipe(): opened pipe with handles read=%d and write=%d\n"	pointer
,	O
fildes	array
[	O
0	int
]	O
,	O
fildes	array
[	O
1	int
]	O
)	O
;	O
switch	O
(	O
fork	function
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
perror	function
(	O
CMD_NAME	pointer
": Cannot fork"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
case	O
0	int
:	O
if	O
(	O
!	O
(	O
(	O
close	function
(	O
fildes	array
[	O
parent_pipe_end	int
]	O
)	O
==	O
0	int
)	O
&&	O
(	O
close	function
(	O
child_pipe_end	int
)	O
==	O
0	int
)	O
&&	O
(	O
dup	function
(	O
fildes	array
[	O
child_pipe_end	int
]	O
)	O
==	O
child_pipe_end	int
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": cannot redirect %s for child, %s\n"	pointer
)	O
,	O
child_pipe_mode	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
child_pipe_end	int
==	O
1	int
)	O
{	O
write	function
(	O
fildes	array
[	O
child_pipe_end	int
]	O
,	O
"z"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
{	O
char	O
buff	array
[	O
1	int
]	O
;	O
read	function
(	O
fildes	array
[	O
child_pipe_end	int
]	O
,	O
buff	array
,	O
1	int
)	O
;	O
if	O
(	O
*	O
buff	array
!=	O
'z'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": failed to open pipe properly\n"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
if	O
(	O
system	function
(	O
command	pointer
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
CMD_NAME	pointer
": Cannot start pipe"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
else	O
exit	function
(	O
0	int
)	O
;	O
default	O
:	O
if	O
(	O
close	function
(	O
fildes	array
[	O
child_pipe_end	int
]	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": cannot close %s end of pipe for parent, %s\n"	pointer
)	O
,	O
child_pipe_mode	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
parent_pipe_end	int
==	O
1	int
)	O
{	O
write	function
(	O
fildes	array
[	O
parent_pipe_end	int
]	O
,	O
"z"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
{	O
char	O
buff	array
[	O
1	int
]	O
;	O
read	function
(	O
fildes	array
[	O
parent_pipe_end	int
]	O
,	O
buff	array
,	O
1	int
)	O
;	O
if	O
(	O
*	O
buff	array
!=	O
'z'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": failed to open pipe properly\n"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
return	O
fildes	array
[	O
parent_pipe_end	int
]	O
;	O
}	O
}	O
FILE	struct
*	O
fopenpipe	function
(	O
const	O
char	O
*	O
command	pointer
,	O
char	O
*	O
mode	pointer
)	O
{	O
int	O
handle	int
;	O
FILE	struct
*	O
fd	pointer
;	O
handle	int
=	O
openpipe	function
(	O
command	pointer
,	O
mode	pointer
)	O
;	O
fd	pointer
=	O
fdopen	function
(	O
handle	int
,	O
mode	pointer
)	O
;	O
dm	function
(	O
'f'	O
,	O
3	int
,	O
"Opened pipe %d, %s, handle %d for command = %s\n"	pointer
,	O
handle	int
,	O
mode	pointer
,	O
fd	pointer
,	O
command	pointer
)	O
;	O
return	O
fd	pointer
;	O
}	O
void	O
closepipe	function
(	O
int	O
handle	int
)	O
{	O
int	O
statloc	int
;	O
close	function
(	O
handle	int
)	O
;	O
waitpid	function
(	O
-	O
1	int
,	O
&	O
statloc	int
,	O
0	int
)	O
;	O
}	O
void	O
fclosepipe	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
closepipe	function
(	O
fileno	function
(	O
fp	pointer
)	O
)	O
;	O
if	O
(	O
fclose	function
(	O
fp	pointer
)	O
!=	O
EOF	O
)	O
perror	function
(	O
CMD_NAME	pointer
": could not close diff stream"	pointer
)	O
;	O
}	O
