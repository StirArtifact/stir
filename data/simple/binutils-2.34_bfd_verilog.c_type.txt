unsigned	O
int	O
VerilogDataWidth	int
=	O
1	int
;	O
static	O
const	O
char	O
digs	array
[	O
]	O
=	O
"0123456789ABCDEF"	pointer
;	O
struct	O
verilog_data_list_struct	struct
{	O
struct	O
verilog_data_list_struct	struct
*	O
next	pointer
;	O
bfd_byte	char
*	O
data	pointer
;	O
bfd_vma	long
where	long
;	O
bfd_size_type	long
size	long
;	O
}	O
;	O
typedef	O
struct	O
verilog_data_list_struct	struct
verilog_data_list_type	struct
;	O
typedef	O
struct	O
verilog_data_struct	struct
{	O
verilog_data_list_type	struct
*	O
head	pointer
;	O
verilog_data_list_type	struct
*	O
tail	pointer
;	O
}	O
tdata_type	struct
;	O
static	O
bfd_boolean	int
verilog_set_arch_mach	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
enum	O
bfd_architecture	enum
arch	enum
,	O
unsigned	O
long	O
mach	long
)	O
{	O
if	O
(	O
arch	enum
!=	O
bfd_arch_unknown	int
)	O
return	O
bfd_default_set_arch_mach	function
(	O
abfd	pointer
,	O
arch	enum
,	O
mach	long
)	O
;	O
abfd	pointer
->	O
arch_info	pointer
=	O
&	O
bfd_default_arch_struct	struct
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
verilog_set_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
section	pointer
,	O
const	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
bytes_to_do	long
)	O
{	O
tdata_type	struct
*	O
tdata	union
=	O
abfd	pointer
->	O
tdata	union
.	O
verilog_data	pointer
;	O
verilog_data_list_type	struct
*	O
entry	pointer
;	O
entry	pointer
=	O
(	O
verilog_data_list_type	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
*	O
entry	pointer
)	O
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
bytes_to_do	long
&&	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_ALLOC	int
)	O
&&	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
)	O
{	O
bfd_byte	char
*	O
data	pointer
;	O
data	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
bytes_to_do	long
)	O
;	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
memcpy	function
(	O
(	O
void	O
*	O
)	O
data	pointer
,	O
location	pointer
,	O
(	O
size_t	long
)	O
bytes_to_do	long
)	O
;	O
entry	pointer
->	O
data	pointer
=	O
data	pointer
;	O
entry	pointer
->	O
where	long
=	O
section	pointer
->	O
lma	long
+	O
offset	long
;	O
entry	pointer
->	O
size	long
=	O
bytes_to_do	long
;	O
if	O
(	O
tdata	union
->	O
tail	pointer
!=	O
NULL	O
&&	O
entry	pointer
->	O
where	long
>=	O
tdata	union
->	O
tail	pointer
->	O
where	long
)	O
{	O
tdata	union
->	O
tail	pointer
->	O
next	pointer
=	O
entry	pointer
;	O
entry	pointer
->	O
next	pointer
=	O
NULL	O
;	O
tdata	union
->	O
tail	pointer
=	O
entry	pointer
;	O
}	O
else	O
{	O
verilog_data_list_type	struct
*	O
*	O
look	pointer
;	O
for	O
(	O
look	pointer
=	O
&	O
tdata	union
->	O
head	pointer
;	O
*	O
look	pointer
!=	O
NULL	O
&&	O
(	O
*	O
look	pointer
)	O
->	O
where	long
<	O
entry	pointer
->	O
where	long
;	O
look	pointer
=	O
&	O
(	O
*	O
look	pointer
)	O
->	O
next	pointer
)	O
;	O
entry	pointer
->	O
next	pointer
=	O
*	O
look	pointer
;	O
*	O
look	pointer
=	O
entry	pointer
;	O
if	O
(	O
entry	pointer
->	O
next	pointer
==	O
NULL	O
)	O
tdata	union
->	O
tail	pointer
=	O
entry	pointer
;	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
verilog_write_address	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_vma	long
address	long
)	O
{	O
char	O
buffer	pointer
[	O
12	int
]	O
;	O
char	O
*	O
dst	pointer
=	O
buffer	pointer
;	O
bfd_size_type	long
wrlen	long
;	O
*	O
dst	pointer
++	O
=	O
'@'	O
;	O
TOHEX	O
(	O
dst	pointer
,	O
(	O
address	long
>>	O
24	int
)	O
)	O
;	O
dst	pointer
+=	O
2	int
;	O
TOHEX	O
(	O
dst	pointer
,	O
(	O
address	long
>>	O
16	int
)	O
)	O
;	O
dst	pointer
+=	O
2	int
;	O
TOHEX	O
(	O
dst	pointer
,	O
(	O
address	long
>>	O
8	int
)	O
)	O
;	O
dst	pointer
+=	O
2	int
;	O
TOHEX	O
(	O
dst	pointer
,	O
(	O
address	long
)	O
)	O
;	O
dst	pointer
+=	O
2	int
;	O
*	O
dst	pointer
++	O
=	O
'\r'	O
;	O
*	O
dst	pointer
++	O
=	O
'\n'	O
;	O
wrlen	long
=	O
dst	pointer
-	O
buffer	pointer
;	O
return	O
bfd_bwrite	function
(	O
(	O
void	O
*	O
)	O
buffer	pointer
,	O
wrlen	long
,	O
abfd	pointer
)	O
==	O
wrlen	long
;	O
}	O
static	O
bfd_boolean	int
verilog_write_record	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
bfd_byte	char
*	O
data	pointer
,	O
const	O
bfd_byte	char
*	O
end	pointer
)	O
{	O
char	O
buffer	pointer
[	O
52	int
]	O
;	O
const	O
bfd_byte	char
*	O
src	pointer
=	O
data	pointer
;	O
char	O
*	O
dst	pointer
=	O
buffer	pointer
;	O
bfd_size_type	long
wrlen	long
;	O
if	O
(	O
(	O
(	O
end	pointer
-	O
data	pointer
)	O
*	O
2	int
)	O
+	O
(	O
(	O
end	pointer
-	O
data	pointer
)	O
/	O
VerilogDataWidth	int
)	O
+	O
2	int
>	O
(	O
long	O
)	O
sizeof	O
(	O
buffer	pointer
)	O
)	O
{	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
VerilogDataWidth	int
==	O
1	int
)	O
{	O
for	O
(	O
src	pointer
=	O
data	pointer
;	O
src	pointer
<	O
end	pointer
;	O
)	O
{	O
TOHEX	O
(	O
dst	pointer
,	O
*	O
src	pointer
)	O
;	O
dst	pointer
+=	O
2	int
;	O
src	pointer
++	O
;	O
if	O
(	O
src	pointer
<	O
end	pointer
)	O
*	O
dst	pointer
++	O
=	O
' '	O
;	O
}	O
}	O
else	O
if	O
(	O
bfd_little_endian	function
(	O
abfd	pointer
)	O
)	O
{	O
int	O
i	pointer
;	O
for	O
(	O
src	pointer
=	O
data	pointer
;	O
src	pointer
<	O
(	O
end	pointer
-	O
VerilogDataWidth	int
)	O
;	O
src	pointer
+=	O
VerilogDataWidth	int
)	O
{	O
for	O
(	O
i	pointer
=	O
VerilogDataWidth	int
-	O
1	int
;	O
i	pointer
>=	O
0	int
;	O
i	pointer
--	O
)	O
{	O
TOHEX	O
(	O
dst	pointer
,	O
src	pointer
[	O
i	pointer
]	O
)	O
;	O
dst	pointer
+=	O
2	int
;	O
}	O
*	O
dst	pointer
++	O
=	O
' '	O
;	O
}	O
while	O
(	O
end	pointer
>	O
src	pointer
)	O
{	O
--	O
end	pointer
;	O
TOHEX	O
(	O
dst	pointer
,	O
*	O
end	pointer
)	O
;	O
dst	pointer
+=	O
2	int
;	O
}	O
}	O
else	O
{	O
for	O
(	O
src	pointer
=	O
data	pointer
;	O
src	pointer
<	O
end	pointer
;	O
)	O
{	O
TOHEX	O
(	O
dst	pointer
,	O
*	O
src	pointer
)	O
;	O
dst	pointer
+=	O
2	int
;	O
++	O
src	pointer
;	O
if	O
(	O
(	O
src	pointer
-	O
data	pointer
)	O
%	O
VerilogDataWidth	int
==	O
0	int
)	O
*	O
dst	pointer
++	O
=	O
' '	O
;	O
}	O
}	O
*	O
dst	pointer
++	O
=	O
'\r'	O
;	O
*	O
dst	pointer
++	O
=	O
'\n'	O
;	O
wrlen	long
=	O
dst	pointer
-	O
buffer	pointer
;	O
return	O
bfd_bwrite	function
(	O
(	O
void	O
*	O
)	O
buffer	pointer
,	O
wrlen	long
,	O
abfd	pointer
)	O
==	O
wrlen	long
;	O
}	O
static	O
bfd_boolean	int
verilog_write_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
tdata_type	struct
*	O
tdata	union
ATTRIBUTE_UNUSED	O
,	O
verilog_data_list_type	struct
*	O
list	pointer
)	O
{	O
unsigned	O
int	O
octets_written	int
=	O
0	int
;	O
bfd_byte	char
*	O
location	pointer
=	O
list	pointer
->	O
data	pointer
;	O
verilog_write_address	function
(	O
abfd	pointer
,	O
list	pointer
->	O
where	long
)	O
;	O
while	O
(	O
octets_written	int
<	O
list	pointer
->	O
size	long
)	O
{	O
unsigned	O
int	O
octets_this_chunk	int
=	O
list	pointer
->	O
size	long
-	O
octets_written	int
;	O
if	O
(	O
octets_this_chunk	int
>	O
16	int
)	O
octets_this_chunk	int
=	O
16	int
;	O
if	O
(	O
!	O
verilog_write_record	function
(	O
abfd	pointer
,	O
location	pointer
,	O
location	pointer
+	O
octets_this_chunk	int
)	O
)	O
return	O
FALSE	int
;	O
octets_written	int
+=	O
octets_this_chunk	int
;	O
location	pointer
+=	O
octets_this_chunk	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
verilog_write_object_contents	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
tdata_type	struct
*	O
tdata	union
=	O
abfd	pointer
->	O
tdata	union
.	O
verilog_data	pointer
;	O
verilog_data_list_type	struct
*	O
list	pointer
;	O
list	pointer
=	O
tdata	union
->	O
head	pointer
;	O
while	O
(	O
list	pointer
!=	O
(	O
verilog_data_list_type	struct
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
!	O
verilog_write_section	function
(	O
abfd	pointer
,	O
tdata	union
,	O
list	pointer
)	O
)	O
return	O
FALSE	int
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
void	O
verilog_init	function
(	O
void	O
)	O
{	O
static	O
bfd_boolean	int
inited	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
inited	int
)	O
{	O
inited	int
=	O
TRUE	int
;	O
hex_init	function
(	O
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
verilog_mkobject	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
tdata_type	struct
*	O
tdata	union
;	O
verilog_init	function
(	O
)	O
;	O
tdata	union
=	O
(	O
tdata_type	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
tdata_type	struct
)	O
)	O
;	O
if	O
(	O
tdata	union
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
abfd	pointer
->	O
tdata	union
.	O
verilog_data	pointer
=	O
tdata	union
;	O
tdata	union
->	O
head	pointer
=	O
NULL	O
;	O
tdata	union
->	O
tail	pointer
=	O
NULL	O
;	O
return	O
TRUE	int
;	O
}	O
const	O
bfd_target	struct
verilog_vec	struct
=	O
{	O
"verilog"	pointer
,	O
bfd_target_verilog_flavour	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
BFD_ENDIAN_UNKNOWN	int
,	O
(	O
HAS_RELOC	int
|	O
EXEC_P	int
|	O
HAS_LINENO	int
|	O
HAS_DEBUG	int
|	O
HAS_SYMS	int
|	O
HAS_LOCALS	int
|	O
WP_TEXT	int
|	O
D_PAGED	int
)	O
,	O
(	O
SEC_CODE	int
|	O
SEC_DATA	int
|	O
SEC_ROM	int
|	O
SEC_HAS_CONTENTS	int
|	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_RELOC	int
)	O
,	O
0	int
,	O
' '	O
,	O
16	int
,	O
0	int
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
bfd_getb64	function
,	O
bfd_getb_signed_64	function
,	O
bfd_putb64	function
,	O
bfd_getb32	function
,	O
bfd_getb_signed_32	function
,	O
bfd_putb32	function
,	O
bfd_getb16	function
,	O
bfd_getb_signed_16	function
,	O
bfd_putb16	function
,	O
{	O
_bfd_dummy_target	function
,	O
_bfd_dummy_target	function
,	O
_bfd_dummy_target	function
,	O
_bfd_dummy_target	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
verilog_mkobject	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
verilog_write_object_contents	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
BFD_JUMP_TABLE_GENERIC	O
(	O
_bfd_generic	O
)	O
,	O
BFD_JUMP_TABLE_COPY	O
(	O
_bfd_generic	O
)	O
,	O
BFD_JUMP_TABLE_CORE	O
(	O
_bfd_nocore	O
)	O
,	O
BFD_JUMP_TABLE_ARCHIVE	O
(	O
_bfd_noarchive	O
)	O
,	O
BFD_JUMP_TABLE_SYMBOLS	O
(	O
_bfd_nosymbols	O
)	O
,	O
BFD_JUMP_TABLE_RELOCS	O
(	O
_bfd_norelocs	O
)	O
,	O
BFD_JUMP_TABLE_WRITE	O
(	O
verilog	O
)	O
,	O
BFD_JUMP_TABLE_LINK	O
(	O
_bfd_nolink	O
)	O
,	O
BFD_JUMP_TABLE_DYNAMIC	O
(	O
_bfd_nodynamic	O
)	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
