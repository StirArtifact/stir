int	O
is_all_digits	function
(	O
char	O
*	O
value	int
)	O
{	O
char	O
*	O
w	pointer
=	O
value	int
;	O
while	O
(	O
*	O
w	pointer
&&	O
isdigit	function
(	O
*	O
w	pointer
)	O
)	O
w	pointer
++	O
;	O
if	O
(	O
*	O
w	pointer
==	O
'\0'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
local_v_close	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
{	O
ret	int
=	O
xformat_u_close_file	function
(	O
xux	pointer
,	O
fd	int
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
close	pointer
(	O
fd	int
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
local_v_open	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
source	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
{	O
ret	int
=	O
xformat_u_open_file	function
(	O
xux	pointer
,	O
source	pointer
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
open	function
(	O
source	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
local_v_lstat	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
{	O
ret	int
=	O
xformat_u_lstat	function
(	O
xux	pointer
,	O
path	pointer
,	O
st	pointer
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
lstat	function
(	O
path	pointer
,	O
st	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
PORINODE	struct
*	O
return_do_inodes	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
return	O
(	O
(	O
xux	pointer
->	O
make_false_inodesM	int
!=	O
0	int
)	O
||	O
(	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
==	O
arf_oldascii	int
)	O
)	O
?	O
xux	pointer
->	O
porinodeM	pointer
:	O
(	O
PORINODE	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
static	O
void	O
internal_set_format	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
*	O
instance_format	pointer
,	O
int	O
format	pointer
)	O
{	O
if	O
(	O
format	pointer
<=	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
&&	O
!	O
xux	pointer
->	O
deferM	pointer
)	O
{	O
xux	pointer
->	O
deferM	pointer
=	O
defer_open	function
(	O
format	pointer
)	O
;	O
defer_set_taru	function
(	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
taruM	pointer
)	O
;	O
}	O
if	O
(	O
format	pointer
>	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
&&	O
xux	pointer
->	O
deferM	pointer
)	O
{	O
defer_close	function
(	O
xux	pointer
->	O
deferM	pointer
)	O
;	O
xux	pointer
->	O
deferM	pointer
=	O
NULL	O
;	O
}	O
*	O
instance_format	pointer
=	O
(	O
enum	O
archive_format	enum
)	O
(	O
format	pointer
)	O
;	O
}	O
static	O
int	O
common_setup_write_header	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
new_cpio_header	struct
*	O
*	O
p_hdr1	pointer
,	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
,	O
struct	O
stat	struct
*	O
t_stat	pointer
,	O
char	O
*	O
t_name	pointer
,	O
char	O
*	O
t_source	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
*	O
strob_str	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
=	O
'\0'	O
;	O
*	O
p_hdr1	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
if	O
(	O
!	O
t_name	pointer
)	O
{	O
char	O
*	O
p1_name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
*	O
p_hdr1	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
p1_name	pointer
)	O
)	O
{	O
strob_strcpy	function
(	O
xux	pointer
->	O
name2M	pointer
,	O
p1_name	pointer
)	O
;	O
}	O
}	O
else	O
{	O
strob_strcpy	function
(	O
xux	pointer
->	O
name2M	pointer
,	O
t_name	pointer
)	O
;	O
}	O
if	O
(	O
t_name	pointer
==	O
NULL	O
&&	O
t_stat	pointer
==	O
NULL	O
&&	O
t_source	pointer
==	O
NULL	O
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"[0 0 0]"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
t_name	pointer
==	O
NULL	O
&&	O
t_stat	pointer
==	O
NULL	O
&&	O
t_source	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"[0 0 1]"	pointer
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"[0 0 1] %s"	pointer
,	O
t_source	pointer
)	O
;	O
if	O
(	O
lstat	function
(	O
t_source	pointer
,	O
&	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"lstat [xformat] %s: %s\n"	pointer
,	O
t_source	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
int	O
tartypeflag	int
;	O
xformat_set_filesize	function
(	O
xux	pointer
,	O
(	O
intmax_t	long
)	O
(	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
.	O
st_size	long
)	O
)	O
;	O
tartypeflag	int
=	O
taru_get_tar_filetype	function
(	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
.	O
st_mode	int
)	O
;	O
if	O
(	O
tartypeflag	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized file type in mode [%d] for file: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
(	O
int	O
)	O
(	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
.	O
st_mode	int
)	O
,	O
t_source	pointer
)	O
;	O
}	O
xformat_set_filetype_from_tartype	function
(	O
xux	pointer
,	O
tartypeflag	int
)	O
;	O
taru_filehdr2filehdr	function
(	O
hdr0	pointer
,	O
*	O
p_hdr1	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
t_name	pointer
&&	O
t_stat	pointer
==	O
NULL	O
&&	O
t_source	pointer
==	O
NULL	O
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"[1 0 0]"	pointer
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"[1 0 0] %s"	pointer
,	O
t_name	pointer
)	O
;	O
taru_filehdr2statbuf	function
(	O
&	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
,	O
*	O
p_hdr1	pointer
)	O
;	O
strob_strcpy	function
(	O
xux	pointer
->	O
linkname2M	pointer
,	O
ahsStaticGetTarLinkname	function
(	O
*	O
p_hdr1	pointer
)	O
)	O
;	O
taru_statbuf2filehdr	function
(	O
hdr0	pointer
,	O
&	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
,	O
strob_str	function
(	O
xux	pointer
->	O
name2M	pointer
)	O
,	O
strob_str	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
)	O
;	O
taru_filehdr2filehdr	function
(	O
hdr0	pointer
,	O
*	O
p_hdr1	pointer
)	O
;	O
ahsStaticSetTarFilename	function
(	O
hdr0	pointer
,	O
strob_str	function
(	O
xux	pointer
->	O
name2M	pointer
)	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
hdr0	pointer
,	O
strob_str	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
)	O
;	O
*	O
p_hdr1	pointer
=	O
hdr0	pointer
;	O
}	O
else	O
if	O
(	O
(	O
t_stat	pointer
&&	O
t_name	pointer
&&	O
t_source	pointer
==	O
NULL	O
)	O
||	O
(	O
t_stat	pointer
&&	O
t_name	pointer
&&	O
t_source	pointer
)	O
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"[1 1 0] || [1 1 1]"	pointer
)	O
;	O
XFORMAT_E_DEBUG3	O
(	O
"[1 1 0] || [1 1 1] %s %s"	pointer
,	O
t_name	pointer
,	O
t_source	pointer
)	O
;	O
taru_statbuf2filehdr	function
(	O
hdr0	pointer
,	O
t_stat	pointer
,	O
t_source	pointer
,	O
strob_str	function
(	O
xux	pointer
->	O
name2M	pointer
)	O
,	O
strob_str	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
)	O
;	O
*	O
p_hdr1	pointer
=	O
hdr0	pointer
;	O
}	O
else	O
if	O
(	O
t_source	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"[x x 1]"	pointer
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"[x x 1] %s"	pointer
,	O
t_source	pointer
)	O
;	O
if	O
(	O
local_v_lstat	function
(	O
xux	pointer
,	O
t_source	pointer
,	O
&	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"lstat (loc=2) %s %s\n"	pointer
,	O
t_source	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
taru_statbuf2filehdr	function
(	O
hdr0	pointer
,	O
&	O
(	O
xux	pointer
->	O
lt2M	struct
)	O
,	O
t_source	pointer
,	O
strob_str	function
(	O
xux	pointer
->	O
name2M	pointer
)	O
,	O
strob_str	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
)	O
;	O
*	O
p_hdr1	pointer
=	O
hdr0	pointer
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"bad use of common_setup_write, last else-if.\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
setup_1	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fmt	int
)	O
{	O
xux	pointer
->	O
eoaM	int
=	O
0	int
;	O
xux	pointer
->	O
trailer_bytesM	int
=	O
0	int
;	O
xux	pointer
->	O
bytes_writtenM	long
=	O
0	int
;	O
xux	pointer
->	O
ifdM	int
=	O
xux	pointer
->	O
ofdM	int
=	O
-	O
1	int
;	O
xux	pointer
->	O
link_recordM	pointer
=	O
hllist_open	function
(	O
)	O
;	O
xux	pointer
->	O
porinodeM	pointer
=	O
porinode_open	function
(	O
)	O
;	O
xux	pointer
->	O
use_false_inodesM	pointer
=	O
xux	pointer
->	O
porinodeM	pointer
;	O
xux	pointer
->	O
deferM	pointer
=	O
NULL	O
;	O
internal_set_format	function
(	O
xux	pointer
,	O
(	O
int	O
*	O
)	O
(	O
&	O
(	O
xux	pointer
->	O
format_codeM	enum
)	O
)	O
,	O
fmt	int
)	O
;	O
internal_set_format	function
(	O
xux	pointer
,	O
(	O
int	O
*	O
)	O
(	O
&	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
)	O
,	O
fmt	int
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
NULL	O
;	O
xux	pointer
->	O
ahsM	pointer
=	O
ahs_open	function
(	O
)	O
;	O
xux	pointer
->	O
make_false_inodesM	int
=	O
1	int
;	O
xux	pointer
->	O
swvarfs_is_externalM	int
=	O
0	int
;	O
xux	pointer
->	O
last_header_sizeM	int
=	O
0	int
;	O
xux	pointer
->	O
taruM	pointer
=	O
taru_create	function
(	O
)	O
;	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
=	O
0	int
;	O
xux	pointer
->	O
name2M	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
xux	pointer
->	O
linkname2M	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
}	O
static	O
int	O
u_open_file_common	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
char	O
*	O
s	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swvarfs_u_fstat	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
fd	int
,	O
&	O
st	pointer
)	O
;	O
taru_statbuf2filehdr	function
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
,	O
&	O
st	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_name	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
(	O
s	pointer
=	O
swvarfs_u_get_name	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
fd	int
)	O
)	O
?	O
s	pointer
:	O
""	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_linkname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
(	O
s	pointer
=	O
swvarfs_u_get_linkname	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
fd	int
)	O
)	O
?	O
s	pointer
:	O
""	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
fd	int
;	O
}	O
static	O
void	O
open_archive_init	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
swvarfs_set_ahs	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
xformat_set_format	function
(	O
xux	pointer
,	O
swvarfs_get_format	function
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
)	O
;	O
xformat_set_output_format	function
(	O
xux	pointer
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
xux	pointer
->	O
ifdM	int
=	O
swvarfs_fd	function
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
;	O
}	O
static	O
int	O
open_archive_dir	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
swvarfs_open_directory	function
(	O
pathname	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
open_archive_init	function
(	O
xux	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
internal_open_archive_file	function
(	O
mode_t	int
filetype	int
,	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
int	O
ret	int
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
filetype	int
&&	O
!	O
pathname	pointer
)	O
{	O
return	O
-	O
11	int
;	O
}	O
if	O
(	O
filetype	int
&&	O
pathname	pointer
)	O
{	O
rc	int
=	O
stat	struct
(	O
pathname	pointer
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"stat : %s : %s\n"	pointer
,	O
pathname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
9	int
;	O
}	O
}	O
if	O
(	O
filetype	int
==	O
0	int
)	O
{	O
ret	int
=	O
xformat_open_archive	function
(	O
xux	pointer
,	O
"-"	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
&&	O
filetype	int
==	O
S_IFDIR	O
)	O
{	O
ret	int
=	O
open_archive_dir	function
(	O
xux	pointer
,	O
pathname	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
}	O
else	O
if	O
(	O
S_ISREG	O
(	O
st	pointer
.	O
st_mode	int
)	O
&&	O
filetype	int
==	O
S_IFREG	O
)	O
{	O
ret	int
=	O
xformat_open_archive	function
(	O
xux	pointer
,	O
pathname	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"archive file is wrong type.\n"	pointer
)	O
;	O
ret	int
=	O
-	O
20	int
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
xformat_close	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
if	O
(	O
xux	pointer
->	O
link_recordM	pointer
)	O
hllist_close	function
(	O
xux	pointer
->	O
link_recordM	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
porinodeM	pointer
)	O
porinode_close	function
(	O
xux	pointer
->	O
porinodeM	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
deferM	pointer
)	O
defer_close	function
(	O
xux	pointer
->	O
deferM	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
ahsM	pointer
)	O
ahs_close	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
&&	O
xux	pointer
->	O
swvarfs_is_externalM	int
==	O
0	int
)	O
{	O
ret	int
=	O
swvarfs_close	function
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
;	O
}	O
if	O
(	O
xux	pointer
->	O
taruM	pointer
)	O
{	O
taru_delete	function
(	O
xux	pointer
->	O
taruM	pointer
)	O
;	O
xux	pointer
->	O
taruM	pointer
=	O
NULL	O
;	O
}	O
strob_close	function
(	O
xux	pointer
->	O
name2M	pointer
)	O
;	O
strob_close	function
(	O
xux	pointer
->	O
linkname2M	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
XFORMAT	struct
*	O
xformat_open	function
(	O
int	O
ifd	int
,	O
int	O
ofd	int
,	O
int	O
format	pointer
)	O
{	O
XFORMAT	struct
*	O
xux	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
XFORMAT	struct
)	O
)	O
;	O
setup_1	function
(	O
xux	pointer
,	O
format	pointer
)	O
;	O
xux	pointer
->	O
ifdM	int
=	O
ifd	int
;	O
xux	pointer
->	O
ofdM	int
=	O
ofd	int
;	O
return	O
xux	pointer
;	O
}	O
AHS	struct
*	O
xformat_ahs_object	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
return	O
xux	pointer
->	O
ahsM	pointer
;	O
}	O
char	O
*	O
xformat_get_header_buffer	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
if	O
(	O
buf	pointer
)	O
{	O
return	O
buf	pointer
;	O
}	O
else	O
{	O
static	O
char	O
a	pointer
[	O
512	int
]	O
;	O
return	O
a	pointer
;	O
}	O
}	O
void	O
xformat_set_tar_chksum	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
}	O
void	O
xformat_set_format	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
format	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
internal_set_format	function
(	O
xux	pointer
,	O
(	O
int	O
*	O
)	O
(	O
&	O
(	O
xux	pointer
->	O
format_codeM	enum
)	O
)	O
,	O
format	pointer
)	O
;	O
}	O
int	O
xformat_get_format	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
}	O
void	O
xformat_set_output_format	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
format	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
internal_set_format	function
(	O
xux	pointer
,	O
(	O
int	O
*	O
)	O
(	O
&	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
)	O
,	O
format	pointer
)	O
;	O
}	O
TARU	struct
*	O
xformat_get_taru_object	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
return	O
(	O
xux	pointer
->	O
taruM	pointer
)	O
;	O
}	O
int	O
xformat_get_output_format	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
;	O
}	O
void	O
xformat_init_vfile_header	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
taru_init_header	function
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
}	O
struct	O
new_cpio_header	struct
*	O
xformat_vfile_hdr	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_vfile_hdr	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
void	O
xformat_set_mode	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
mode_t	int
mode	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_mode	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
mode	int
)	O
;	O
}	O
void	O
xformat_set_perms	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
mode_t	int
mode	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_perms	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
mode	int
)	O
;	O
}	O
void	O
xformat_set_filetype_from_tartype	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
s	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_filetype_from_tartype	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
xformat_set_uid	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
uid_t	int
uid	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_uid	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
uid	int
)	O
;	O
}	O
void	O
xformat_set_username	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_username	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
xformat_set_user_systempair	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG2	O
(	O
"name=[%s]"	pointer
,	O
name	pointer
)	O
;	O
ret	int
=	O
ahs_set_user_systempair	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ret	int
&&	O
is_all_digits	function
(	O
name	pointer
)	O
==	O
0	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_username	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
}	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_set_group_systempair	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
ahs_set_group_systempair	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ret	int
&&	O
is_all_digits	function
(	O
name	pointer
)	O
==	O
0	int
)	O
{	O
ahs_set_tar_groupname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
void	O
xformat_set_groupname	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_groupname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
}	O
void	O
xformat_set_uid_by_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
username	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_uid_by_name	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
username	pointer
)	O
;	O
}	O
void	O
xformat_set_gid_by_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
groupname	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_gid_by_name	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
groupname	pointer
)	O
;	O
}	O
void	O
xformat_set_gid	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
gid_t	int
gid	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_gid	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
gid	int
)	O
;	O
}	O
void	O
xformat_set_filesize	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
intmax_t	long
filesize	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_filesize	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
filesize	long
)	O
;	O
}	O
void	O
xformat_set_nlink	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
nlink	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_nlink	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
nlink	int
)	O
;	O
}	O
void	O
xformat_set_inode	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
ino_t	long
ino	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_inode	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
ino	long
)	O
;	O
}	O
void	O
xformat_set_mtime	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
time_t	long
mtime	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_mtime	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
mtime	long
)	O
;	O
}	O
void	O
xformat_set_devmajor	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
dev_t	long
dev	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_devmajor	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
dev	long
)	O
;	O
}	O
void	O
xformat_set_devminor	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
dev_t	long
dev	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_devminor	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
dev	long
)	O
;	O
}	O
void	O
xformat_set_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_name	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
name	pointer
)	O
;	O
}	O
void	O
xformat_set_linkname	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
linkname	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_linkname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
linkname	pointer
)	O
;	O
}	O
int	O
xformat_set_virtual_eof	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
size_t	long
len	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
ifdM	int
<	O
UXFIO_FD_MIN	int
)	O
return	O
-	O
3	int
;	O
if	O
(	O
uxfio_fcntl	function
(	O
xux	pointer
->	O
ifdM	int
,	O
UXFIO_F_SET_BUFACTIVE	O
,	O
UXFIO_ON	int
)	O
)	O
return	O
-	O
2	int
;	O
if	O
(	O
uxfio_fcntl	function
(	O
xux	pointer
->	O
ifdM	int
,	O
UXFIO_F_SET_VEOF	O
,	O
(	O
int	O
)	O
len	long
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
xformat_set_to_statbuf	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_to_statbuf	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
st	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
xformat_set_from_statbuf_path	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
"Running lstat"	pointer
)	O
;	O
if	O
(	O
lstat	function
(	O
path	pointer
,	O
&	O
st	pointer
)	O
)	O
return	O
-	O
1	int
;	O
xformat_set_from_statbuf	function
(	O
xux	pointer
,	O
&	O
st	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
xformat_set_from_statbuf_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
"Running fstat"	pointer
)	O
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
st	pointer
)	O
)	O
return	O
-	O
1	int
;	O
xformat_set_from_statbuf	function
(	O
xux	pointer
,	O
&	O
st	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
xformat_set_from_statbuf	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_from_statbuf	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
st	pointer
)	O
;	O
}	O
void	O
xformat_set_preview_level	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
(	O
xux	pointer
->	O
taruM	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"AAARRRRGG xux->taruM is null at line %d\n"	pointer
,	O
__LINE__	O
)	O
;	O
return	O
;	O
}	O
taru_set_preview_level	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
fd	int
)	O
;	O
}	O
void	O
xformat_set_preview_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
(	O
xux	pointer
->	O
taruM	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"AAARRRRGG xux->taruM at line %d\n"	pointer
,	O
__LINE__	O
)	O
;	O
return	O
;	O
}	O
taru_set_preview_fd	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
fd	int
)	O
;	O
}	O
void	O
xformat_set_ofd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
ofdM	int
=	O
fd	int
;	O
}	O
void	O
xformat_set_ifd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
ifdM	int
=	O
fd	int
;	O
}	O
SWVARFS	struct
*	O
xformat_get_swvarfs	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xux	pointer
->	O
swvarfsM	pointer
;	O
}	O
int	O
xformat_get_preview_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taru_get_preview_fd	function
(	O
xux	pointer
->	O
taruM	pointer
)	O
;	O
}	O
int	O
xformat_get_ofd	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xux	pointer
->	O
ofdM	int
;	O
}	O
int	O
xformat_get_ifd	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xux	pointer
->	O
ifdM	int
;	O
}	O
void	O
xformat_set_pass_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_set_fd	function
(	O
fd	int
)	O
;	O
}	O
int	O
xformat_get_pass_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taruib_get_fd	function
(	O
)	O
;	O
}	O
int	O
xformat_clear_pass_buffer	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taruib_clear_buffer	function
(	O
)	O
;	O
}	O
char	O
*	O
xformat_get_next_dirent	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
char	O
*	O
name	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
name	pointer
=	O
swvarfs_get_next_dirent	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
st	pointer
)	O
;	O
xux	pointer
->	O
eoaM	int
=	O
xux	pointer
->	O
swvarfsM	pointer
->	O
eoaM	int
;	O
return	O
name	pointer
;	O
}	O
void	O
xformat_decrement_bytes_written	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
amount	long
)	O
{	O
xux	pointer
->	O
bytes_writtenM	long
-=	O
amount	long
;	O
}	O
int	O
xformat_setdir	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_setdir	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
path	pointer
)	O
;	O
}	O
intmax_t	long
xformat_read_file_data	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
)	O
{	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
intmax_t	long
ret	int
;	O
intmax_t	long
retval	long
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
ret	int
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
dst_fd	int
,	O
xux	pointer
->	O
ifdM	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
format_codeM	enum
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
retval	long
=	O
ret	int
;	O
ret	int
=	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
-	O
retval	long
;	O
retval	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
retval	long
;	O
}	O
intmax_t	long
xformat_write_file_data	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
source_fd	int
)	O
{	O
intmax_t	long
ret	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
ret	int
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
source_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
source_fd	int
==	O
xux	pointer
->	O
ifdM	int
)	O
{	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
output_format_codeM	enum
)	O
;	O
}	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_write_header	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xformat_write_header_wn	function
(	O
xux	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
int	O
xformat_write_header_wn	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
new_cpio_header	struct
*	O
hdr1	pointer
;	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
;	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
hdr0	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
ret	int
=	O
common_setup_write_header	function
(	O
xux	pointer
,	O
&	O
hdr1	pointer
,	O
hdr0	pointer
,	O
(	O
struct	O
stat	struct
*	O
)	O
(	O
NULL	O
)	O
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
ret	int
=	O
taru_write_archive_member_header	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
NULL	O
,	O
hdr1	pointer
,	O
xux	pointer
->	O
link_recordM	pointer
,	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
use_false_inodesM	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
hdr0	pointer
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
{	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
intmax_t	long
xformat_write_file_by_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
stat	struct
*	O
t	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
(	O
*	O
fout	pointer
)	O
(	O
int	O
)	O
,	O
int	O
source_fd	int
)	O
{	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
struct	O
new_cpio_header	struct
*	O
hdr1	pointer
;	O
intmax_t	long
ret	int
;	O
intmax_t	long
ret1	long
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
source_fd	int
<	O
0	int
&&	O
fout	pointer
==	O
NULL	O
)	O
{	O
ret	int
=	O
xformat_write_file	function
(	O
xux	pointer
,	O
t	pointer
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
common_setup_write_header	function
(	O
xux	pointer
,	O
&	O
hdr1	pointer
,	O
hdr0	pointer
,	O
t	pointer
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
)	O
==	O
0	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
taru_write_archive_member_header	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
NULL	O
,	O
hdr1	pointer
,	O
xux	pointer
->	O
link_recordM	pointer
,	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
use_false_inodesM	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
hdr0	pointer
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
)	O
>	O
0	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret1	long
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
hdr0	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
source_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
fout	pointer
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret1	long
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_write_archive_member_data failed unexpectedly\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
+=	O
ret1	long
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taru_write_archive_member_header failed return code=%s\n"	pointer
,	O
swlib_imaxtostr	function
(	O
ret	int
,	O
NULL	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"common_setup_write_header failed\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
intmax_t	long
xformat_write_by_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
intmax_t	long
ret	int
;	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_statbuf2filehdr	function
(	O
hdr0	pointer
,	O
st	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ret	int
=	O
taru_write_archive_member	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
name	pointer
,	O
(	O
struct	O
stat	struct
*	O
)	O
(	O
NULL	O
)	O
,	O
hdr0	pointer
,	O
xux	pointer
->	O
link_recordM	pointer
,	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
use_false_inodesM	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
-	O
1	int
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
intmax_t	long
xformat_write_by_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
srcfd	int
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
intmax_t	long
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
taru_write_archive_member	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
,	O
(	O
struct	O
stat	struct
*	O
)	O
(	O
NULL	O
)	O
,	O
file_hdr	pointer
,	O
xux	pointer
->	O
link_recordM	pointer
,	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
porinodeM	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
srcfd	int
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
intmax_t	long
xformat_write_file	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
struct	O
stat	struct
*	O
t	pointer
,	O
char	O
*	O
name	pointer
,	O
char	O
*	O
source	pointer
)	O
{	O
intmax_t	long
ret	int
=	O
0	int
,	O
ret1	long
,	O
fd	int
=	O
-	O
1	int
;	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
struct	O
new_cpio_header	struct
*	O
hdr1	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
common_setup_write_header	function
(	O
xux	pointer
,	O
&	O
hdr1	pointer
,	O
hdr0	pointer
,	O
t	pointer
,	O
name	pointer
,	O
source	pointer
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
hdr1	pointer
)	O
;	O
}	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
!	O
source	pointer
)	O
source	pointer
=	O
name	pointer
;	O
if	O
(	O
strlen	function
(	O
ahsStaticGetTarLinkname	function
(	O
hdr1	pointer
)	O
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
hdr1	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
{	O
case	O
CP_IFREG	int
:	O
XFORMAT_E_DEBUG	O
(	O
"Running open"	pointer
)	O
;	O
fd	int
=	O
local_v_open	function
(	O
xux	pointer
,	O
source	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"open %s: %s\n"	pointer
,	O
source	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
return	O
-	O
ret	int
;	O
}	O
}	O
}	O
XFORMAT_E_DEBUG	O
(	O
"calling taru_write_archive_member_header"	pointer
)	O
;	O
ret	int
=	O
taru_write_archive_member_header	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
NULL	O
,	O
hdr1	pointer
,	O
xux	pointer
->	O
link_recordM	pointer
,	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
use_false_inodesM	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
hdr0	pointer
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"taru_write_archive_member_header ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
&&	O
fd	int
>=	O
0	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
"calling taru_write_archive_member_data"	pointer
)	O
;	O
ret1	long
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
hdr0	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret1	long
<	O
0	int
)	O
return	O
-	O
ret	int
;	O
ret	int
+=	O
ret1	long
;	O
local_v_close	function
(	O
xux	pointer
,	O
fd	int
)	O
;	O
}	O
if	O
(	O
ret	int
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
ahsStaticDeleteFilehdr	function
(	O
hdr0	pointer
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"LEAVING with ret=%d"	pointer
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
void	O
xformat_write_archive_stats	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
fd	int
)	O
{	O
char	O
*	O
format	pointer
;	O
char	O
buf	pointer
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
char	O
buf2	array
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
char	O
*	O
buf_p	pointer
;	O
char	O
*	O
buf2_p	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
switch	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
{	O
case	O
arf_ustar	int
:	O
format	pointer
=	O
"ustar"	pointer
;	O
if	O
(	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
&	O
TARU_TAR_GNU_OLDGNUTAR	O
)	O
{	O
format	pointer
=	O
"gnutar"	pointer
;	O
}	O
break	O
;	O
case	O
arf_newascii	int
:	O
format	pointer
=	O
"newc"	pointer
;	O
break	O
;	O
case	O
arf_crcascii	int
:	O
format	pointer
=	O
"crc"	pointer
;	O
break	O
;	O
case	O
arf_oldascii	int
:	O
format	pointer
=	O
"odc"	pointer
;	O
break	O
;	O
case	O
arf_unknown	int
:	O
case	O
arf_binary	int
:	O
case	O
arf_tar	int
:	O
case	O
arf_hpoldascii	int
:	O
case	O
arf_hpbinary	int
:	O
case	O
arf_filesystem	int
:	O
default	O
:	O
format	pointer
=	O
"unknown"	pointer
;	O
break	O
;	O
}	O
buf_p	pointer
=	O
umaxtostr	function
(	O
xux	pointer
->	O
bytes_writtenM	long
,	O
buf	pointer
)	O
;	O
buf2_p	pointer
=	O
umaxtostr	function
(	O
(	O
uintmax_t	long
)	O
(	O
xux	pointer
->	O
bytes_writtenM	long
-	O
xux	pointer
->	O
trailer_bytesM	int
)	O
,	O
buf2	array
)	O
;	O
swlib_writef	function
(	O
fd	int
,	O
tmp	pointer
,	O
"%s: %s vol 1, %s+%d %s octets out.\n"	pointer
,	O
name	pointer
,	O
format	pointer
,	O
buf2_p	pointer
,	O
xux	pointer
->	O
trailer_bytesM	int
,	O
buf_p	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
}	O
int	O
xformat_write_trailer	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
,	O
ret1	long
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
deferM	pointer
&&	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
output_format_codeM	enum
)	O
!=	O
(	O
arf_ustar	int
)	O
)	O
{	O
ret	int
=	O
defer_writeout_final_defers	function
(	O
xux	pointer
->	O
deferM	pointer
,	O
xux	pointer
->	O
ofdM	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
}	O
ret1	long
=	O
taru_write_archive_trailer	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
xux	pointer
->	O
ofdM	int
,	O
0	int
,	O
xux	pointer
->	O
bytes_writtenM	long
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
if	O
(	O
ret1	long
<	O
0	int
)	O
return	O
ret1	long
;	O
ret	int
+=	O
ret1	long
;	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
xux	pointer
->	O
trailer_bytesM	int
=	O
ret	int
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_u_open_file	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
fd	int
=	O
swvarfs_u_open	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
name	pointer
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
fd	int
<=	O
0	int
)	O
{	O
return	O
fd	int
;	O
}	O
fd	int
=	O
u_open_file_common	function
(	O
xux	pointer
,	O
fd	int
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
fd	int
;	O
}	O
int	O
xformat_u_lstat	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
path	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_u_lstat	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
path	pointer
,	O
st	pointer
)	O
;	O
}	O
int	O
xformat_u_fstat	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_u_fstat	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
fd	int
,	O
st	pointer
)	O
;	O
}	O
int	O
xformat_u_readlink	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
path	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_u_readlink	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
path	pointer
,	O
buf	pointer
,	O
bufsize	int
)	O
;	O
}	O
int	O
xformat_u_close_file	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_u_close	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
fd	int
)	O
;	O
}	O
int	O
xformat_open_archive	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
swvarfs_open	function
(	O
pathname	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
open_archive_init	function
(	O
xux	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
xformat_open_archive_stdin	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
internal_open_archive_file	function
(	O
(	O
mode_t	int
)	O
0	int
,	O
xux	pointer
,	O
pathname	pointer
,	O
flags	int
,	O
0	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_open_archive_regfile	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
internal_open_archive_file	function
(	O
S_IFREG	O
,	O
xux	pointer
,	O
pathname	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_open_archive_dirfile	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
pathname	pointer
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
internal_open_archive_file	function
(	O
S_IFDIR	O
,	O
xux	pointer
,	O
pathname	pointer
,	O
flags	int
,	O
mode	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_close_archive	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
ret	int
=	O
swvarfs_close	function
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
NULL	O
;	O
xux	pointer
->	O
ifdM	int
=	O
-	O
1	int
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_open_archive_by_fd_and_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
,	O
char	O
*	O
name	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
xformat_open_archive_by_fd	function
(	O
xux	pointer
,	O
fd	int
,	O
flags	int
,	O
mode	int
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
swvarfs_opendup_with_name	function
(	O
fd	int
,	O
flags	int
,	O
mode	int
,	O
name	pointer
)	O
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
open_archive_init	function
(	O
xux	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
xformat_open_archive_by_fd	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
fd	int
,	O
int	O
flags	int
,	O
mode_t	int
mode	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
swvarfs_opendup	function
(	O
fd	int
,	O
flags	int
,	O
mode	int
)	O
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
open_archive_init	function
(	O
xux	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
xformat_open_archive_by_swvarfs	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
SWVARFS	struct
*	O
sfs	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
swvarfsM	pointer
=	O
sfs	pointer
;	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
open_archive_init	function
(	O
xux	pointer
)	O
;	O
xux	pointer
->	O
swvarfs_is_externalM	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
xformat_read_header	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
struct	O
new_cpio_header	struct
*	O
hdr0	pointer
;	O
hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
taru_read_header	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
hdr0	pointer
,	O
xux	pointer
->	O
ifdM	int
,	O
xux	pointer
->	O
format_codeM	enum
,	O
&	O
xux	pointer
->	O
eoaM	int
,	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
)	O
;	O
xux	pointer
->	O
last_header_sizeM	int
=	O
ret	int
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_unread_header	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
xux	pointer
->	O
last_header_sizeM	int
;	O
if	O
(	O
xux	pointer
->	O
last_header_sizeM	int
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
XFORMAT_E_DEBUG2	O
(	O
"lseeking back %d bytes."	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
xux	pointer
->	O
ifdM	int
,	O
-	O
ret	int
,	O
UXFIO_SEEK_VCUR	int
)	O
<	O
0	int
)	O
{	O
XFORMAT_E_FAIL	O
(	O
""	pointer
)	O
;	O
}	O
xux	pointer
->	O
last_header_sizeM	int
=	O
-	O
1	int
;	O
return	O
ret	int
;	O
}	O
int	O
xformat_read	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
count	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
uxfio_sfread	function
(	O
xux	pointer
->	O
ifdM	int
,	O
buf	pointer
,	O
count	int
)	O
;	O
}	O
intmax_t	long
xformat_copy_pass_thru	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xformat_copy_pass	function
(	O
xux	pointer
,	O
xux	pointer
->	O
ofdM	int
,	O
xux	pointer
->	O
ifdM	int
)	O
;	O
}	O
intmax_t	long
xformat_copy_pass_by_dst	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xformat_copy_pass	function
(	O
xux	pointer
,	O
dst_fd	int
,	O
xux	pointer
->	O
ifdM	int
)	O
;	O
}	O
intmax_t	long
xformat_copy_pass_md5	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
,	O
int	O
src_fd	int
,	O
char	O
*	O
md5buf	pointer
)	O
{	O
intmax_t	long
retval	long
=	O
0	int
;	O
FILE_DIGS	struct
*	O
digs	pointer
;	O
FILE_DIGS	struct
*	O
old_digs	pointer
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
file_hdr0	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
{	O
if	O
(	O
xux	pointer
->	O
format_codeM	enum
<=	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
dst_fd	int
<	O
0	int
)	O
{	O
digs	pointer
=	O
NULL	O
;	O
if	O
(	O
taru_read_amount	function
(	O
src_fd	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
!=	O
(	O
intmax_t	long
)	O
(	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
)	O
{	O
XFORMAT_E_FAIL	O
(	O
""	pointer
)	O
;	O
retval	long
=	O
-	O
3	int
;	O
}	O
}	O
else	O
{	O
digs	pointer
=	O
taru_digs_create	function
(	O
)	O
;	O
taru_digs_init	function
(	O
digs	pointer
,	O
DIGS_ENABLE_OFF	int
,	O
0	int
)	O
;	O
digs	pointer
->	O
do_md5	short
=	O
DIGS_ENABLE_ON	int
;	O
old_digs	pointer
=	O
file_hdr0	pointer
->	O
digsM	pointer
;	O
file_hdr0	pointer
->	O
digsM	pointer
=	O
digs	pointer
;	O
retval	long
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
dst_fd	int
,	O
src_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
,	O
digs	pointer
)	O
;	O
file_hdr0	pointer
->	O
digsM	pointer
=	O
old_digs	pointer
;	O
}	O
if	O
(	O
uxfio_getfd	function
(	O
xux	pointer
->	O
ifdM	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
)	O
==	O
src_fd	int
||	O
xux	pointer
->	O
ifdM	int
==	O
src_fd	int
)	O
{	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
}	O
if	O
(	O
md5buf	pointer
&&	O
digs	pointer
)	O
{	O
strcpy	function
(	O
md5buf	pointer
,	O
digs	pointer
->	O
md5	array
)	O
;	O
}	O
if	O
(	O
retval	long
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
retval	long
;	O
if	O
(	O
digs	pointer
)	O
taru_digs_delete	function
(	O
digs	pointer
)	O
;	O
return	O
retval	long
;	O
}	O
intmax_t	long
xformat_copy_pass	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
,	O
int	O
src_fd	int
)	O
{	O
intmax_t	long
ret	int
;	O
ret	int
=	O
xformat_copy_pass_digs	function
(	O
xux	pointer
,	O
dst_fd	int
,	O
src_fd	int
,	O
(	O
FILE_DIGS	struct
*	O
)	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
intmax_t	long
xformat_copy_pass_digs	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
,	O
int	O
src_fd	int
,	O
FILE_DIGS	struct
*	O
digs	pointer
)	O
{	O
intmax_t	long
retval	long
=	O
0	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
file_hdr0	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
{	O
if	O
(	O
xux	pointer
->	O
format_codeM	enum
<=	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
dst_fd	int
<	O
0	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taru_read_amount	function
(	O
src_fd	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
!=	O
(	O
intmax_t	long
)	O
(	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
)	O
{	O
XFORMAT_E_FAIL	O
(	O
""	pointer
)	O
;	O
retval	long
=	O
-	O
3	int
;	O
}	O
}	O
else	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
retval	long
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
dst_fd	int
,	O
src_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
,	O
digs	pointer
)	O
;	O
}	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
uxfio_getfd	function
(	O
xux	pointer
->	O
ifdM	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
)	O
==	O
src_fd	int
||	O
xux	pointer
->	O
ifdM	int
==	O
src_fd	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
}	O
if	O
(	O
retval	long
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
retval	long
;	O
XFORMAT_E_DEBUG2	O
(	O
"retval=%d"	pointer
,	O
retval	long
)	O
;	O
return	O
retval	long
;	O
}	O
intmax_t	long
xformat_copy_pass_file_data	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
,	O
int	O
src_fd	int
)	O
{	O
intmax_t	long
retval	long
=	O
0	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
file_hdr0	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
{	O
if	O
(	O
xux	pointer
->	O
format_codeM	enum
<=	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
dst_fd	int
<	O
0	int
)	O
{	O
if	O
(	O
taru_read_amount	function
(	O
src_fd	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
!=	O
(	O
intmax_t	long
)	O
(	O
file_hdr0	pointer
->	O
c_filesize	long
)	O
)	O
{	O
XFORMAT_E_FAIL	O
(	O
""	pointer
)	O
;	O
retval	long
=	O
-	O
3	int
;	O
}	O
}	O
else	O
{	O
retval	long
=	O
taru_write_archive_file_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
dst_fd	int
,	O
src_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
uxfio_getfd	function
(	O
xux	pointer
->	O
ifdM	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
)	O
==	O
src_fd	int
||	O
xux	pointer
->	O
ifdM	int
==	O
src_fd	int
)	O
{	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
}	O
if	O
(	O
retval	long
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
retval	long
;	O
return	O
retval	long
;	O
}	O
intmax_t	long
xformat_copy_pass2	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
dst_fd	int
,	O
int	O
src_fd	int
,	O
int	O
adjunct_ofd	int
)	O
{	O
intmax_t	long
retval	long
=	O
0	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr0	pointer
;	O
file_hdr0	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
xux	pointer
)	O
)	O
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
file_hdr0	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
{	O
if	O
(	O
xux	pointer
->	O
format_codeM	enum
<=	O
(	O
int	O
)	O
(	O
arf_crcascii	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
dst_fd	int
<	O
0	int
)	O
{	O
retval	long
=	O
-	O
3	int
;	O
}	O
else	O
{	O
retval	long
=	O
taru_write_archive_member_data	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
file_hdr0	pointer
,	O
dst_fd	int
,	O
src_fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
xux	pointer
->	O
output_format_codeM	enum
,	O
adjunct_ofd	int
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
uxfio_getfd	function
(	O
xux	pointer
->	O
ifdM	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
)	O
==	O
src_fd	int
||	O
xux	pointer
->	O
ifdM	int
==	O
src_fd	int
)	O
{	O
taru_tape_skip_padding	function
(	O
xux	pointer
->	O
ifdM	int
,	O
file_hdr0	pointer
->	O
c_filesize	long
,	O
xux	pointer
->	O
format_codeM	enum
)	O
;	O
}	O
if	O
(	O
retval	long
>	O
0	int
)	O
xux	pointer
->	O
bytes_writtenM	long
+=	O
retval	long
;	O
return	O
retval	long
;	O
}	O
char	O
xformat_get_tar_typeflag	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_tar_typeflag	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
int	O
xformat_file_has_data	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
swvarfs_file_has_data	function
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
;	O
}	O
unsigned	O
xformat_get_tar_chksum	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
void	O
*	O
tarhdr	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_tar_chksum	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
tarhdr	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_username	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_system_username	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_groupname	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_system_groupname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_tar_username	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_tar_username	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_tar_groupname	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_tar_groupname	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
void	O
xformat_set_sys_db_u_policy	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
c	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_sys_db_u_policy	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
c	int
)	O
;	O
}	O
void	O
xformat_set_sys_db_g_policy	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
c	int
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_sys_db_g_policy	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
c	int
)	O
;	O
}	O
intmax_t	long
xformat_get_filesize	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_filesize	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
time_t	long
xformat_get_mtime	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_mtime	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_name	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_name	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
xformat_get_linkname	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_linkname	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
buf	pointer
)	O
;	O
}	O
mode_t	int
xformat_get_mode	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_mode	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
mode_t	int
xformat_get_perms	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_perms	function
(	O
xux	pointer
->	O
ahsM	pointer
)	O
;	O
}	O
int	O
xformat_get_virtual_eof	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
xformat_get_layout_type	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
xux	pointer
->	O
swvarfsM	pointer
->	O
format_descM	pointer
->	O
layout_typeM	int
;	O
}	O
char	O
*	O
xformat_get_source_filename	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahs_get_source_filename	function
(	O
xux	pointer
->	O
ahsM	pointer
,	O
buf	pointer
)	O
;	O
}	O
int	O
xformat_is_end_of_archive	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
trailer_blocks_read_return	int
;	O
char	O
*	O
name	pointer
;	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
format_codeM	enum
)	O
==	O
(	O
arf_ustar	int
)	O
||	O
(	O
int	O
)	O
(	O
xux	pointer
->	O
format_codeM	enum
)	O
==	O
(	O
arf_tar	int
)	O
)	O
{	O
ret	int
=	O
xux	pointer
->	O
eoaM	int
;	O
}	O
else	O
{	O
name	pointer
=	O
xformat_get_name	function
(	O
xux	pointer
,	O
(	O
STROB	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
ret	int
=	O
!	O
strncmp	function
(	O
CPIO_INBAND_EOA_FILENAME	pointer
,	O
name	pointer
,	O
25	int
)	O
;	O
}	O
if	O
(	O
ret	int
)	O
{	O
if	O
(	O
xformat_get_pass_fd	function
(	O
xux	pointer
)	O
)	O
{	O
trailer_blocks_read_return	int
=	O
taru_read_amount	function
(	O
xformat_get_ifd	function
(	O
xux	pointer
)	O
,	O
-	O
1	int
)	O
;	O
XFORMAT_E_DEBUG2	O
(	O
"unread trailer blocks = [%d]"	pointer
,	O
trailer_blocks_read_return	int
)	O
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
void	O
xformat_set_strip_leading_slash	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
n	long
)	O
{	O
xformat_set_tarheader_flag	function
(	O
xux	pointer
,	O
TARU_TAR_DO_STRIP_LEADING_SLASH	O
,	O
n	long
)	O
;	O
}	O
int	O
xformat_get_tarheader_flags	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
return	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
;	O
}	O
void	O
xformat_set_tarheader_flags	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
swvarfs_set_tarheader_flags	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
flags	int
)	O
;	O
xux	pointer
->	O
taruM	pointer
->	O
taru_tarheaderflagsM	int
=	O
flags	int
;	O
}	O
void	O
xformat_set_tarheader_flag	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
flag	int
,	O
int	O
n	long
)	O
{	O
if	O
(	O
xux	pointer
->	O
swvarfsM	pointer
)	O
swvarfs_set_tarheader_flag	function
(	O
xux	pointer
->	O
swvarfsM	pointer
,	O
flag	int
,	O
n	long
)	O
;	O
taru_set_tarheader_flag	function
(	O
xux	pointer
->	O
taruM	pointer
,	O
flag	int
,	O
n	long
)	O
;	O
}	O
void	O
xformat_set_numeric_uids	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
n	long
)	O
{	O
xformat_set_tarheader_flag	function
(	O
xux	pointer
,	O
TARU_TAR_NUMERIC_UIDS	O
,	O
n	long
)	O
;	O
}	O
void	O
xformat_set_false_inodes	function
(	O
XFORMAT	struct
*	O
xux	pointer
,	O
int	O
n	long
)	O
{	O
XFORMAT_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xux	pointer
->	O
make_false_inodesM	int
=	O
n	long
;	O
xux	pointer
->	O
use_false_inodesM	pointer
=	O
return_do_inodes	function
(	O
xux	pointer
)	O
;	O
}	O
void	O
xformat_reset_bytes_written	function
(	O
XFORMAT	struct
*	O
xux	pointer
)	O
{	O
xux	pointer
->	O
bytes_writtenM	long
=	O
0	int
;	O
}	O
