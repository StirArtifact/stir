void	O
_umac_l3_init	O
(	O
unsigned	O
size	int
,	O
uint64_t	long
*	O
k	pointer
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	int
;	O
i	int
++	O
)	O
{	O
uint64_t	long
w	array
=	O
k	pointer
[	O
i	int
]	O
;	O
w	array
=	O
BE_SWAP64	O
(	O
w	array
)	O
;	O
k	pointer
[	O
i	int
]	O
=	O
w	array
%	O
P	int
;	O
}	O
}	O
static	O
uint64_t	long
umac_l3_word	function
(	O
const	O
uint64_t	long
*	O
k	pointer
,	O
uint64_t	long
w	array
)	O
{	O
unsigned	O
i	int
;	O
uint64_t	long
y	long
;	O
for	O
(	O
i	int
=	O
y	long
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
,	O
w	array
>>=	O
16	int
)	O
y	long
+=	O
(	O
w	array
&	O
0xffff	int
)	O
*	O
k	pointer
[	O
3	int
-	O
i	int
]	O
;	O
return	O
y	long
;	O
}	O
uint32_t	int
_umac_l3	O
(	O
const	O
uint64_t	long
*	O
key	pointer
,	O
const	O
uint64_t	long
*	O
m	long
)	O
{	O
uint32_t	int
y	long
=	O
(	O
umac_l3_word	function
(	O
key	pointer
,	O
m	long
[	O
0	int
]	O
)	O
+	O
umac_l3_word	function
(	O
key	pointer
+	O
4	int
,	O
m	long
[	O
1	int
]	O
)	O
)	O
%	O
P	int
;	O
y	long
=	O
(	O
(	O
ROTL32	O
(	O
8	int
,	O
y	long
)	O
&	O
0x00FF00FFUL	int
)	O
|	O
(	O
ROTL32	O
(	O
24	int
,	O
y	long
)	O
&	O
0xFF00FF00UL	int
)	O
)	O
;	O
return	O
y	long
;	O
}	O
