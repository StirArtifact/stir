inline	O
static	O
double	O
Stirling	function
(	O
double	O
y1	function
)	O
{	O
double	O
y2	double
=	O
y1	function
*	O
y1	function
;	O
double	O
s	pointer
=	O
(	O
13860.0	int
-	O
(	O
462.0	int
-	O
(	O
132.0	int
-	O
(	O
99.0	int
-	O
140.0	int
/	O
y2	double
)	O
/	O
y2	double
)	O
/	O
y2	double
)	O
/	O
y2	double
)	O
/	O
y1	function
/	O
166320.0	int
;	O
return	O
s	pointer
;	O
}	O
unsigned	O
int	O
gsl_ran_binomial_tpe	function
(	O
const	O
gsl_rng	struct
*	O
rng	pointer
,	O
double	O
p	int
,	O
unsigned	O
int	O
n	long
)	O
{	O
return	O
gsl_ran_binomial	function
(	O
rng	pointer
,	O
p	int
,	O
n	long
)	O
;	O
}	O
unsigned	O
int	O
gsl_ran_binomial	function
(	O
const	O
gsl_rng	struct
*	O
rng	pointer
,	O
double	O
p	int
,	O
unsigned	O
int	O
n	long
)	O
{	O
int	O
ix	int
;	O
int	O
flipped	int
=	O
0	int
;	O
double	O
q	double
,	O
s	pointer
,	O
np	double
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
p	int
>	O
0.5	int
)	O
{	O
p	int
=	O
1.0	int
-	O
p	int
;	O
flipped	int
=	O
1	int
;	O
}	O
q	double
=	O
1	int
-	O
p	int
;	O
s	pointer
=	O
p	int
/	O
q	double
;	O
np	double
=	O
n	long
*	O
p	int
;	O
if	O
(	O
np	double
<	O
SMALL_MEAN	int
)	O
{	O
double	O
f0	double
=	O
gsl_pow_uint	function
(	O
q	double
,	O
n	long
)	O
;	O
while	O
(	O
1	int
)	O
{	O
double	O
f	double
=	O
f0	double
;	O
double	O
u	pointer
=	O
gsl_rng_uniform	function
(	O
rng	pointer
)	O
;	O
for	O
(	O
ix	int
=	O
0	int
;	O
ix	int
<=	O
BINV_CUTOFF	int
;	O
++	O
ix	int
)	O
{	O
if	O
(	O
u	pointer
<	O
f	double
)	O
goto	O
Finish	O
;	O
u	pointer
-=	O
f	double
;	O
f	double
*=	O
s	pointer
*	O
(	O
n	long
-	O
ix	int
)	O
/	O
(	O
ix	int
+	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
int	O
k	long
;	O
double	O
ffm	double
=	O
np	double
+	O
p	int
;	O
int	O
m	pointer
=	O
(	O
int	O
)	O
ffm	double
;	O
double	O
fm	double
=	O
m	pointer
;	O
double	O
xm	double
=	O
fm	double
+	O
0.5	int
;	O
double	O
npq	double
=	O
np	double
*	O
q	double
;	O
double	O
p1	double
=	O
floor	function
(	O
2.195	int
*	O
sqrt	function
(	O
npq	double
)	O
-	O
4.6	int
*	O
q	double
)	O
+	O
0.5	int
;	O
double	O
xl	double
=	O
xm	double
-	O
p1	double
;	O
double	O
xr	double
=	O
xm	double
+	O
p1	double
;	O
double	O
c	pointer
=	O
0.134	int
+	O
20.5	int
/	O
(	O
15.3	int
+	O
fm	double
)	O
;	O
double	O
p2	double
=	O
p1	double
*	O
(	O
1.0	int
+	O
c	pointer
+	O
c	pointer
)	O
;	O
double	O
al	double
=	O
(	O
ffm	double
-	O
xl	double
)	O
/	O
(	O
ffm	double
-	O
xl	double
*	O
p	int
)	O
;	O
double	O
lambda_l	double
=	O
al	double
*	O
(	O
1.0	int
+	O
0.5	int
*	O
al	double
)	O
;	O
double	O
ar	double
=	O
(	O
xr	double
-	O
ffm	double
)	O
/	O
(	O
xr	double
*	O
q	double
)	O
;	O
double	O
lambda_r	double
=	O
ar	double
*	O
(	O
1.0	int
+	O
0.5	int
*	O
ar	double
)	O
;	O
double	O
p3	double
=	O
p2	double
+	O
c	pointer
/	O
lambda_l	double
;	O
double	O
p4	double
=	O
p3	double
+	O
c	pointer
/	O
lambda_r	double
;	O
double	O
var	double
,	O
accept	double
;	O
double	O
u	pointer
,	O
v	pointer
;	O
TryAgain	O
:	O
u	pointer
=	O
gsl_rng_uniform	function
(	O
rng	pointer
)	O
*	O
p4	double
;	O
v	pointer
=	O
gsl_rng_uniform	function
(	O
rng	pointer
)	O
;	O
if	O
(	O
u	pointer
<=	O
p1	double
)	O
{	O
ix	int
=	O
(	O
int	O
)	O
(	O
xm	double
-	O
p1	double
*	O
v	pointer
+	O
u	pointer
)	O
;	O
goto	O
Finish	O
;	O
}	O
else	O
if	O
(	O
u	pointer
<=	O
p2	double
)	O
{	O
double	O
x	double
=	O
xl	double
+	O
(	O
u	pointer
-	O
p1	double
)	O
/	O
c	pointer
;	O
v	pointer
=	O
v	pointer
*	O
c	pointer
+	O
1.0	int
-	O
fabs	function
(	O
x	double
-	O
xm	double
)	O
/	O
p1	double
;	O
if	O
(	O
v	pointer
>	O
1.0	int
||	O
v	pointer
<=	O
0.0	int
)	O
goto	O
TryAgain	O
;	O
ix	int
=	O
(	O
int	O
)	O
x	double
;	O
}	O
else	O
if	O
(	O
u	pointer
<=	O
p3	double
)	O
{	O
ix	int
=	O
(	O
int	O
)	O
(	O
xl	double
+	O
log	function
(	O
v	pointer
)	O
/	O
lambda_l	double
)	O
;	O
if	O
(	O
ix	int
<	O
0	int
)	O
goto	O
TryAgain	O
;	O
v	pointer
*=	O
(	O
(	O
u	pointer
-	O
p2	double
)	O
*	O
lambda_l	double
)	O
;	O
}	O
else	O
{	O
ix	int
=	O
(	O
int	O
)	O
(	O
xr	double
-	O
log	function
(	O
v	pointer
)	O
/	O
lambda_r	double
)	O
;	O
if	O
(	O
ix	int
>	O
(	O
double	O
)	O
n	long
)	O
goto	O
TryAgain	O
;	O
v	pointer
*=	O
(	O
(	O
u	pointer
-	O
p3	double
)	O
*	O
lambda_r	double
)	O
;	O
}	O
k	long
=	O
abs	function
(	O
ix	int
-	O
m	pointer
)	O
;	O
if	O
(	O
k	long
<=	O
FAR_FROM_MEAN	int
)	O
{	O
double	O
g	pointer
=	O
(	O
n	long
+	O
1	int
)	O
*	O
s	pointer
;	O
double	O
f	double
=	O
1.0	int
;	O
var	double
=	O
v	pointer
;	O
if	O
(	O
m	pointer
<	O
ix	int
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
m	pointer
+	O
1	int
;	O
i	long
<=	O
ix	int
;	O
i	long
++	O
)	O
{	O
f	double
*=	O
(	O
g	pointer
/	O
i	long
-	O
s	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
m	pointer
>	O
ix	int
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
ix	int
+	O
1	int
;	O
i	long
<=	O
m	pointer
;	O
i	long
++	O
)	O
{	O
f	double
/=	O
(	O
g	pointer
/	O
i	long
-	O
s	pointer
)	O
;	O
}	O
}	O
accept	double
=	O
f	double
;	O
}	O
else	O
{	O
var	double
=	O
log	function
(	O
v	pointer
)	O
;	O
if	O
(	O
k	long
<	O
npq	double
/	O
2	int
-	O
1	int
)	O
{	O
double	O
amaxp	double
=	O
k	long
/	O
npq	double
*	O
(	O
(	O
k	long
*	O
(	O
k	long
/	O
3.0	int
+	O
0.625	int
)	O
+	O
(	O
1.0	int
/	O
6.0	int
)	O
)	O
/	O
npq	double
+	O
0.5	int
)	O
;	O
double	O
ynorm	double
=	O
-	O
(	O
k	long
*	O
k	long
/	O
(	O
2.0	int
*	O
npq	double
)	O
)	O
;	O
if	O
(	O
var	double
<	O
ynorm	double
-	O
amaxp	double
)	O
goto	O
Finish	O
;	O
if	O
(	O
var	double
>	O
ynorm	double
+	O
amaxp	double
)	O
goto	O
TryAgain	O
;	O
}	O
{	O
double	O
x1	double
=	O
ix	int
+	O
1.0	int
;	O
double	O
w1	double
=	O
n	long
-	O
ix	int
+	O
1.0	int
;	O
double	O
f1	double
=	O
fm	double
+	O
1.0	int
;	O
double	O
z1	double
=	O
n	long
+	O
1.0	int
-	O
fm	double
;	O
accept	double
=	O
xm	double
*	O
log	function
(	O
f1	double
/	O
x1	double
)	O
+	O
(	O
n	long
-	O
m	pointer
+	O
0.5	int
)	O
*	O
log	function
(	O
z1	double
/	O
w1	double
)	O
+	O
(	O
ix	int
-	O
m	pointer
)	O
*	O
log	function
(	O
w1	double
*	O
p	int
/	O
(	O
x1	double
*	O
q	double
)	O
)	O
+	O
Stirling	function
(	O
f1	double
)	O
+	O
Stirling	function
(	O
z1	double
)	O
-	O
Stirling	function
(	O
x1	double
)	O
-	O
Stirling	function
(	O
w1	double
)	O
;	O
}	O
}	O
if	O
(	O
var	double
<=	O
accept	double
)	O
{	O
goto	O
Finish	O
;	O
}	O
else	O
{	O
goto	O
TryAgain	O
;	O
}	O
}	O
Finish	O
:	O
return	O
(	O
flipped	int
)	O
?	O
(	O
n	long
-	O
ix	int
)	O
:	O
(	O
unsigned	O
int	O
)	O
ix	int
;	O
}	O
