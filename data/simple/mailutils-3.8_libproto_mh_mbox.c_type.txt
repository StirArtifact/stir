struct	O
_mh_message	struct
{	O
struct	O
_amd_message	struct
amd_message	struct
;	O
size_t	long
seq_number	long
;	O
}	O
;	O
static	O
int	O
mh_message_cmp	function
(	O
struct	O
_amd_message	struct
*	O
a	pointer
,	O
struct	O
_amd_message	struct
*	O
b	pointer
)	O
{	O
struct	O
_mh_message	struct
*	O
ma	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
a	pointer
;	O
struct	O
_mh_message	struct
*	O
mb	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
b	pointer
;	O
if	O
(	O
ma	pointer
->	O
seq_number	long
<	O
mb	pointer
->	O
seq_number	long
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
ma	pointer
->	O
seq_number	long
>	O
mb	pointer
->	O
seq_number	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
_mh_next_seq	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
)	O
{	O
struct	O
_mh_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
_amd_get_message	function
(	O
amd	pointer
,	O
amd	pointer
->	O
msg_count	long
)	O
;	O
return	O
(	O
msg	pointer
?	O
msg	pointer
->	O
seq_number	long
:	O
0	int
)	O
+	O
1	int
;	O
}	O
static	O
int	O
_mh_cur_message_name	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
,	O
char	O
*	O
*	O
pname	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
struct	O
_mh_message	struct
*	O
mhm	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
amsg	pointer
;	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
pnum	pointer
;	O
size_t	long
len	int
;	O
status	int
=	O
mu_asprintf	function
(	O
&	O
pnum	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mhm	pointer
->	O
seq_number	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
len	int
=	O
strlen	function
(	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
pnum	pointer
)	O
+	O
1	int
;	O
filename	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
filename	pointer
)	O
{	O
strcpy	function
(	O
filename	pointer
,	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
)	O
;	O
strcat	function
(	O
filename	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
filename	pointer
,	O
pnum	pointer
)	O
;	O
*	O
pname	pointer
=	O
filename	pointer
;	O
}	O
else	O
status	int
=	O
ENOMEM	int
;	O
free	function
(	O
pnum	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_mh_new_message_name	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
,	O
int	O
flags	int
,	O
int	O
expunge	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
pname	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
struct	O
_mh_message	struct
*	O
mhm	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
amsg	pointer
;	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
pnum	pointer
;	O
size_t	long
len	int
;	O
status	int
=	O
mu_asprintf	function
(	O
&	O
pnum	pointer
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mhm	pointer
->	O
seq_number	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
len	int
=	O
strlen	function
(	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
)	O
+	O
1	int
+	O
(	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
?	O
1	int
:	O
0	int
)	O
+	O
strlen	function
(	O
pnum	pointer
)	O
+	O
1	int
;	O
filename	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
filename	pointer
)	O
{	O
strcpy	function
(	O
filename	pointer
,	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
)	O
;	O
strcat	function
(	O
filename	pointer
,	O
"/"	pointer
)	O
;	O
if	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
strcat	function
(	O
filename	pointer
,	O
","	pointer
)	O
;	O
strcat	function
(	O
filename	pointer
,	O
pnum	pointer
)	O
;	O
*	O
pname	pointer
=	O
filename	pointer
;	O
}	O
else	O
status	int
=	O
ENOMEM	int
;	O
free	function
(	O
pnum	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
struct	O
_mh_message	struct
*	O
_mh_get_message_seq	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
size_t	long
seq	long
)	O
{	O
struct	O
_mh_message	struct
msg	pointer
;	O
size_t	long
index	function
;	O
msg	pointer
.	O
seq_number	long
=	O
seq	long
;	O
if	O
(	O
amd_msg_lookup	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
&	O
msg	pointer
,	O
&	O
index	function
)	O
)	O
return	O
NULL	O
;	O
return	O
(	O
struct	O
_mh_message	struct
*	O
)	O
_amd_get_message	function
(	O
amd	pointer
,	O
index	function
)	O
;	O
}	O
static	O
int	O
mh_scan0	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
size_t	long
msgno	long
MU_ARG_UNUSED	O
,	O
size_t	long
*	O
pcount	pointer
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
struct	O
_mh_message	struct
*	O
msg	pointer
;	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
int	O
status	int
=	O
0	int
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
need_sort	int
=	O
0	int
;	O
if	O
(	O
amd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
dir	pointer
=	O
opendir	function
(	O
amd	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
return	O
errno	O
;	O
mu_monitor_wrlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	function
,	O
(	O
void	O
*	O
)	O
mailbox	pointer
)	O
;	O
mu_locker_lock	function
(	O
mailbox	pointer
->	O
locker	pointer
)	O
;	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
char	O
*	O
namep	pointer
;	O
int	O
attr_flags	int
;	O
size_t	long
num	long
;	O
attr_flags	int
=	O
0	int
;	O
switch	O
(	O
entry	pointer
->	O
d_name	array
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
continue	O
;	O
case	O
','	O
:	O
continue	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
namep	pointer
=	O
entry	pointer
->	O
d_name	array
;	O
break	O
;	O
default	O
:	O
continue	O
;	O
}	O
num	long
=	O
strtoul	function
(	O
namep	pointer
,	O
&	O
namep	pointer
,	O
10	int
)	O
;	O
if	O
(	O
namep	pointer
[	O
0	int
]	O
)	O
continue	O
;	O
msg	pointer
=	O
_mh_get_message_seq	function
(	O
amd	pointer
,	O
num	long
)	O
;	O
if	O
(	O
!	O
msg	pointer
)	O
{	O
msg	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	pointer
)	O
)	O
;	O
status	int
=	O
_amd_message_append	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
msg	pointer
)	O
;	O
break	O
;	O
}	O
msg	pointer
->	O
seq_number	long
=	O
num	long
;	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	pointer
->	O
amd_message	struct
.	O
orig_flags	int
=	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
;	O
need_sort	int
=	O
1	int
;	O
}	O
else	O
{	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	pointer
->	O
amd_message	struct
.	O
orig_flags	int
=	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
;	O
}	O
}	O
closedir	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
need_sort	int
)	O
amd_sort	function
(	O
amd	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
do_notify	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
amd	pointer
->	O
msg_count	long
;	O
i	long
++	O
)	O
{	O
DISPATCH_ADD_MSG	O
(	O
mailbox	pointer
,	O
amd	pointer
,	O
i	long
)	O
;	O
}	O
}	O
if	O
(	O
stat	struct
(	O
amd	pointer
->	O
name	pointer
,	O
&	O
st	pointer
)	O
==	O
0	int
)	O
amd	pointer
->	O
mtime	long
=	O
st	pointer
.	O
st_mtime	O
;	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
amd	pointer
->	O
msg_count	long
;	O
}	O
mu_locker_unlock	function
(	O
mailbox	pointer
->	O
locker	pointer
)	O
;	O
amd_cleanup	function
(	O
mailbox	pointer
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
mh_size_unlocked	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
rc	int
;	O
struct	O
stat	struct
st	pointer
;	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
dir	pointer
=	O
opendir	function
(	O
amd	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
return	O
errno	O
;	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
if	O
(	O
*	O
mu_str_skip_class	function
(	O
entry	pointer
->	O
d_name	array
,	O
MU_CTYPE_DIGIT	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
fname	pointer
=	O
mu_make_file_name	O
(	O
amd	pointer
->	O
name	pointer
,	O
entry	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
!	O
fname	pointer
)	O
continue	O
;	O
if	O
(	O
stat	struct
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't stat %s: %s"	pointer
,	O
fname	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
fname	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
S_ISREG	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
size	long
+=	O
st	pointer
.	O
st_size	long
;	O
}	O
}	O
*	O
psize	pointer
=	O
size	long
;	O
closedir	function
(	O
dir	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_size	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
mu_monitor_wrlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
pthread_cleanup_push	O
(	O
amd_cleanup	function
,	O
(	O
void	O
*	O
)	O
mailbox	pointer
)	O
;	O
mu_locker_lock	function
(	O
mailbox	pointer
->	O
locker	pointer
)	O
;	O
rc	int
=	O
mh_size_unlocked	function
(	O
amd	pointer
,	O
psize	pointer
)	O
;	O
mu_locker_unlock	function
(	O
mailbox	pointer
->	O
locker	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
pthread_cleanup_pop	O
(	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mh_qfetch	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
mu_message_qid_t	pointer
qid	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
num	long
=	O
0	int
;	O
int	O
attr_flags	int
=	O
0	int
;	O
struct	O
_mh_message	struct
*	O
msg	pointer
;	O
p	pointer
=	O
qid	pointer
+	O
strlen	function
(	O
qid	pointer
)	O
-	O
1	int
;	O
if	O
(	O
!	O
mu_isdigit	O
(	O
*	O
p	pointer
)	O
)	O
return	O
EINVAL	int
;	O
for	O
(	O
p	pointer
--	O
;	O
p	pointer
>=	O
qid	pointer
&&	O
mu_isdigit	O
(	O
*	O
p	pointer
)	O
;	O
p	pointer
--	O
)	O
;	O
if	O
(	O
p	pointer
==	O
qid	pointer
)	O
return	O
EINVAL	int
;	O
num	long
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
','	O
)	O
{	O
attr_flags	int
|=	O
MU_ATTRIBUTE_DELETED	int
;	O
p	pointer
--	O
;	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'/'	O
)	O
return	O
EINVAL	int
;	O
msg	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	pointer
)	O
)	O
;	O
msg	pointer
->	O
seq_number	long
=	O
num	long
;	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
attr_flags	int
;	O
msg	pointer
->	O
amd_message	struct
.	O
orig_flags	int
=	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
;	O
_amd_message_insert	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_message_uid	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
puid	pointer
)	O
{	O
struct	O
_mh_message	struct
*	O
mhm	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
puid	pointer
)	O
*	O
puid	pointer
=	O
mhm	pointer
->	O
seq_number	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mh_msg_init	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
struct	O
_amd_message	struct
*	O
amm	pointer
)	O
{	O
struct	O
_mh_message	struct
*	O
mhm	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
amm	pointer
;	O
mhm	pointer
->	O
seq_number	long
=	O
_mh_next_seq	function
(	O
amd	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mh_msg_delete	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
struct	O
_amd_message	struct
*	O
amm	pointer
)	O
{	O
int	O
rc	int
,	O
status	int
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
const	O
char	O
*	O
proc	pointer
=	O
mu_mhprop_get_value	function
(	O
mu_mh_profile	pointer
,	O
"rmmproc"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
proc	pointer
)	O
return	O
ENOSYS	int
;	O
rc	int
=	O
amd	pointer
->	O
cur_msg_file_name	pointer
(	O
amm	pointer
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
proc	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
rc	int
=	O
unlink	function
(	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
rc	int
=	O
errno	O
;	O
}	O
else	O
{	O
argv	pointer
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
proc	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
name	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
rc	int
=	O
mu_spawnvp	function
(	O
proc	pointer
,	O
argv	pointer
,	O
&	O
status	int
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mh_remove	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
)	O
{	O
return	O
amd_remove_dir	function
(	O
amd	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
int	O
mh_get_property	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
mu_property_t	pointer
*	O
pprop	pointer
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
struct	O
mu_mh_prop	struct
*	O
mhprop	pointer
;	O
const	O
char	O
*	O
p	pointer
;	O
mhprop	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
mhprop	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
mhprop	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
=	O
mu_mhprop_get_value	function
(	O
mu_mh_profile	pointer
,	O
"mh-sequences"	pointer
,	O
MU_MH_SEQUENCES_FILE	pointer
)	O
;	O
mhprop	pointer
->	O
filename	pointer
=	O
mu_make_file_name	O
(	O
amd	pointer
->	O
name	pointer
,	O
p	pointer
)	O
;	O
mu_property_create_init	function
(	O
&	O
property	pointer
,	O
mu_mh_property_init	function
,	O
mhprop	pointer
)	O
;	O
mu_mailbox_set_property	function
(	O
mailbox	pointer
,	O
property	pointer
)	O
;	O
*	O
pprop	pointer
=	O
property	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mh_translate	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
cmd	enum
,	O
size_t	long
from	pointer
,	O
size_t	long
*	O
to	int
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mbox	pointer
->	O
data	pointer
;	O
struct	O
_mh_message	struct
msg	pointer
,	O
*	O
mp	pointer
;	O
size_t	long
n	int
;	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
n	int
)	O
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
MU_MAILBOX_UID_TO_MSGNO	int
:	O
msg	pointer
.	O
seq_number	long
=	O
from	pointer
;	O
if	O
(	O
amd_msg_lookup	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
&	O
msg	pointer
,	O
&	O
n	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
to	int
=	O
n	int
;	O
break	O
;	O
case	O
MU_MAILBOX_MSGNO_TO_UID	int
:	O
mp	pointer
=	O
(	O
struct	O
_mh_message	struct
*	O
)	O
_amd_get_message	function
(	O
amd	pointer
,	O
from	pointer
)	O
;	O
if	O
(	O
!	O
mp	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
to	int
=	O
mp	pointer
->	O
seq_number	long
;	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_mailbox_mh_init	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_data	struct
*	O
amd	pointer
;	O
rc	int
=	O
amd_init_mailbox	function
(	O
mailbox	pointer
,	O
sizeof	O
(	O
struct	O
_amd_data	struct
)	O
,	O
&	O
amd	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
amd	pointer
->	O
msg_size	long
=	O
sizeof	O
(	O
struct	O
_mh_message	struct
)	O
;	O
amd	pointer
->	O
msg_free	pointer
=	O
NULL	O
;	O
amd	pointer
->	O
msg_init_delivery	pointer
=	O
_mh_msg_init	function
;	O
amd	pointer
->	O
msg_finish_delivery	pointer
=	O
NULL	O
;	O
amd	pointer
->	O
cur_msg_file_name	pointer
=	O
_mh_cur_message_name	function
;	O
amd	pointer
->	O
new_msg_file_name	pointer
=	O
_mh_new_message_name	function
;	O
amd	pointer
->	O
scan0	pointer
=	O
mh_scan0	function
;	O
amd	pointer
->	O
qfetch	pointer
=	O
mh_qfetch	function
;	O
amd	pointer
->	O
msg_cmp	pointer
=	O
mh_message_cmp	function
;	O
amd	pointer
->	O
message_uid	pointer
=	O
mh_message_uid	function
;	O
amd	pointer
->	O
next_uid	pointer
=	O
_mh_next_seq	function
;	O
amd	pointer
->	O
remove	function
=	O
mh_remove	function
;	O
amd	pointer
->	O
mailbox_size	pointer
=	O
mh_size	function
;	O
mailbox	pointer
->	O
_get_property	pointer
=	O
mh_get_property	function
;	O
mailbox	pointer
->	O
_translate	pointer
=	O
mh_translate	function
;	O
if	O
(	O
mu_mhprop_get_value	function
(	O
mu_mh_profile	pointer
,	O
"rmmproc"	pointer
,	O
NULL	O
)	O
)	O
amd	pointer
->	O
delete_msg	pointer
=	O
_mh_msg_delete	function
;	O
return	O
0	int
;	O
}	O
