static	O
void	O
endgame_analyze_worm_liberties	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
;	O
static	O
void	O
endgame_find_backfilling_dame	function
(	O
int	O
str	int
,	O
int	O
color	int
)	O
;	O
static	O
int	O
endgame_find_liberties	function
(	O
int	O
str	int
,	O
int	O
*	O
essential_liberties	pointer
,	O
int	O
essential_libs	array
[	O
MAXLIBS	O
]	O
,	O
int	O
*	O
inessential_liberties	pointer
,	O
int	O
inessential_libs	array
[	O
MAXLIBS	O
]	O
,	O
int	O
*	O
false_eye_liberties	pointer
,	O
int	O
false_eye_libs	array
[	O
MAXLIBS	O
]	O
)	O
;	O
void	O
endgame	function
(	O
int	O
color	int
)	O
{	O
int	O
pos	int
;	O
TRACE	O
(	O
"\nEndgame move generator tries to look for additional moves...\n"	pointer
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
==	O
pos	int
&&	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum
==	O
ALIVE	int
&&	O
!	O
worm	array
[	O
pos	int
]	O
.	O
invincible	int
&&	O
!	O
worm	array
[	O
pos	int
]	O
.	O
inessential	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
0	int
)	O
{	O
endgame_analyze_worm_liberties	function
(	O
pos	int
,	O
color	int
)	O
;	O
endgame_find_backfilling_dame	function
(	O
pos	int
,	O
color	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
endgame_analyze_worm_liberties	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
int	O
worm_color	int
=	O
board	pointer
[	O
pos	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
worm_color	int
)	O
;	O
int	O
essential_liberties	pointer
;	O
int	O
essential_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
inessential_liberties	pointer
;	O
int	O
inessential_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
false_eye_liberties	pointer
;	O
int	O
false_eye_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
num_attacks	int
;	O
int	O
num_attacks2	int
;	O
int	O
attacks	array
[	O
MAXLIBS	O
]	O
;	O
int	O
defenses	array
[	O
MAXLIBS	O
]	O
;	O
int	O
apos	int
;	O
int	O
value	pointer
;	O
if	O
(	O
!	O
endgame_find_liberties	function
(	O
pos	int
,	O
&	O
essential_liberties	pointer
,	O
essential_libs	array
,	O
&	O
inessential_liberties	pointer
,	O
inessential_libs	array
,	O
&	O
false_eye_liberties	pointer
,	O
false_eye_libs	array
)	O
)	O
return	O
;	O
apos	int
=	O
NO_MOVE	O
;	O
num_attacks	int
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
inessential_liberties	pointer
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
safe_move	function
(	O
inessential_libs	array
[	O
k	int
]	O
,	O
other	int
)	O
||	O
!	O
trymove	function
(	O
inessential_libs	array
[	O
k	int
]	O
,	O
other	int
,	O
"endgame"	pointer
,	O
pos	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
k	int
==	O
inessential_liberties	pointer
&&	O
board	pointer
[	O
pos	int
]	O
!=	O
EMPTY	int
)	O
{	O
if	O
(	O
countlib	function
(	O
pos	int
)	O
>	O
1	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
essential_liberties	pointer
;	O
k	int
++	O
)	O
{	O
int	O
lib	int
=	O
essential_libs	array
[	O
k	int
]	O
;	O
if	O
(	O
safe_move	function
(	O
lib	int
,	O
worm_color	int
)	O
&&	O
safe_move	function
(	O
lib	int
,	O
other	int
)	O
&&	O
trymove	function
(	O
lib	int
,	O
other	int
,	O
"endgame"	pointer
,	O
pos	int
)	O
)	O
{	O
if	O
(	O
attack	function
(	O
pos	int
,	O
NULL	O
)	O
!=	O
0	int
)	O
{	O
int	O
dpos	int
;	O
if	O
(	O
find_defense	function
(	O
pos	int
,	O
&	O
dpos	int
)	O
&&	O
is_proper_eye_space	function
(	O
dpos	int
)	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
essential_liberties	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
!=	O
k	int
&&	O
essential_libs	array
[	O
i	int
]	O
!=	O
dpos	int
&&	O
does_defend	function
(	O
essential_libs	array
[	O
i	int
]	O
,	O
pos	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
essential_liberties	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
false_eye_liberties	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
does_defend	function
(	O
false_eye_libs	array
[	O
i	int
]	O
,	O
pos	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
false_eye_liberties	pointer
)	O
{	O
int	O
adj	array
[	O
MAXCHAIN	int
]	O
;	O
int	O
adjs	int
;	O
adjs	int
=	O
chainlinks2	function
(	O
pos	int
,	O
adj	array
,	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
adjs	int
;	O
i	int
++	O
)	O
{	O
int	O
lib2	int
;	O
findlib	function
(	O
adj	array
[	O
i	int
]	O
,	O
1	int
,	O
&	O
lib2	int
)	O
;	O
if	O
(	O
lib2	int
!=	O
dpos	int
&&	O
!	O
is_proper_eye_space	function
(	O
lib2	int
)	O
&&	O
does_defend	function
(	O
lib2	int
,	O
pos	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
adjs	int
)	O
{	O
attacks	array
[	O
num_attacks	int
]	O
=	O
lib	int
;	O
defenses	array
[	O
num_attacks	int
]	O
=	O
dpos	int
;	O
num_attacks	int
++	O
;	O
}	O
}	O
}	O
}	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
essential_liberties	pointer
>	O
0	int
)	O
{	O
attacks	array
[	O
num_attacks	int
]	O
=	O
essential_libs	array
[	O
0	int
]	O
;	O
defenses	array
[	O
num_attacks	int
]	O
=	O
NO_MOVE	O
;	O
num_attacks	int
++	O
;	O
}	O
if	O
(	O
attack	function
(	O
pos	int
,	O
&	O
apos	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
is_proper_eye_space	function
(	O
apos	int
)	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
essential_liberties	pointer
;	O
k	int
++	O
)	O
{	O
if	O
(	O
does_defend	function
(	O
essential_libs	array
[	O
k	int
]	O
,	O
pos	int
)	O
)	O
{	O
apos	int
=	O
NO_MOVE	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
&&	O
worm_color	int
==	O
color	int
&&	O
!	O
does_defend	function
(	O
apos	int
,	O
pos	int
)	O
)	O
apos	int
=	O
NO_MOVE	O
;	O
}	O
else	O
apos	int
=	O
NO_MOVE	O
;	O
}	O
}	O
else	O
{	O
inessential_liberties	pointer
=	O
k	int
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
inessential_liberties	pointer
;	O
k	int
++	O
)	O
popgo	function
(	O
)	O
;	O
ASSERT1	O
(	O
stackp	int
==	O
0	int
,	O
pos	int
)	O
;	O
num_attacks2	int
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_attacks	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
safe_move	function
(	O
attacks	array
[	O
k	int
]	O
,	O
other	int
)	O
)	O
{	O
if	O
(	O
defenses	array
[	O
k	int
]	O
!=	O
NO_MOVE	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
int	O
pos2	int
=	O
defenses	array
[	O
k	int
]	O
+	O
delta	array
[	O
i	int
]	O
;	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
==	O
EMPTY	int
)	O
{	O
int	O
m	int
;	O
if	O
(	O
!	O
is_proper_eye_space	function
(	O
pos2	int
)	O
&&	O
safe_move	function
(	O
pos2	int
,	O
other	int
)	O
)	O
break	O
;	O
for	O
(	O
m	int
=	O
0	int
;	O
m	int
<	O
inessential_liberties	pointer
;	O
m	int
++	O
)	O
{	O
if	O
(	O
inessential_libs	array
[	O
m	int
]	O
==	O
pos2	int
)	O
break	O
;	O
}	O
if	O
(	O
m	int
<	O
inessential_liberties	pointer
)	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
==	O
4	int
)	O
attacks	array
[	O
num_attacks2	int
++	O
]	O
=	O
attacks	array
[	O
k	int
]	O
;	O
}	O
else	O
{	O
ASSERT1	O
(	O
num_attacks	int
==	O
1	int
,	O
pos	int
)	O
;	O
attacks	array
[	O
num_attacks2	int
++	O
]	O
=	O
attacks	array
[	O
k	int
]	O
;	O
}	O
}	O
}	O
value	pointer
=	O
0	int
;	O
if	O
(	O
apos	int
!=	O
NO_MOVE	O
)	O
{	O
value	pointer
=	O
accuratelib	function
(	O
apos	int
,	O
other	int
,	O
MAXLIBS	O
,	O
NULL	O
)	O
-	O
2	int
;	O
}	O
if	O
(	O
value	pointer
<=	O
0	int
&&	O
num_attacks2	int
==	O
0	int
)	O
return	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
inessential_liberties	pointer
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
trymove	function
(	O
inessential_libs	array
[	O
k	int
]	O
,	O
worm_color	int
,	O
"endgame"	pointer
,	O
pos	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
k	int
==	O
inessential_liberties	pointer
&&	O
board	pointer
[	O
pos	int
]	O
!=	O
EMPTY	int
)	O
{	O
if	O
(	O
countlib	function
(	O
pos	int
)	O
>	O
1	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_attacks2	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
trymove	function
(	O
attacks	array
[	O
k	int
]	O
,	O
other	int
,	O
"endgame"	pointer
,	O
pos	int
)	O
)	O
{	O
if	O
(	O
attack	function
(	O
pos	int
,	O
NULL	O
)	O
!=	O
0	int
)	O
{	O
TRACE	O
(	O
"  endgame move with territorial value %d.0 found at %1m\n"	pointer
,	O
1	int
,	O
attacks	array
[	O
k	int
]	O
)	O
;	O
add_expand_territory_move	function
(	O
attacks	array
[	O
k	int
]	O
)	O
;	O
set_minimum_territorial_value	function
(	O
attacks	array
[	O
k	int
]	O
,	O
1.0	int
)	O
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
essential_liberties	pointer
>	O
0	int
&&	O
essential_libs	array
[	O
0	int
]	O
==	O
attacks	array
[	O
0	int
]	O
)	O
{	O
TRACE	O
(	O
"  endgame move with territorial value %d.0 found at %1m\n"	pointer
,	O
1	int
,	O
attacks	array
[	O
k	int
]	O
)	O
;	O
add_expand_territory_move	function
(	O
attacks	array
[	O
0	int
]	O
)	O
;	O
set_minimum_territorial_value	function
(	O
attacks	array
[	O
0	int
]	O
,	O
1.0	int
)	O
;	O
}	O
if	O
(	O
value	pointer
>	O
0	int
&&	O
does_attack	function
(	O
apos	int
,	O
pos	int
)	O
)	O
{	O
TRACE	O
(	O
"  endgame move with territorial value %d.0 found at %1m\n"	pointer
,	O
value	pointer
,	O
apos	int
)	O
;	O
add_expand_territory_move	function
(	O
apos	int
)	O
;	O
set_minimum_territorial_value	function
(	O
apos	int
,	O
(	O
float	O
)	O
value	pointer
)	O
;	O
}	O
}	O
else	O
{	O
inessential_liberties	pointer
=	O
k	int
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
inessential_liberties	pointer
;	O
k	int
++	O
)	O
popgo	function
(	O
)	O
;	O
ASSERT1	O
(	O
stackp	int
==	O
0	int
,	O
pos	int
)	O
;	O
}	O
static	O
void	O
endgame_find_backfilling_dame	function
(	O
int	O
str	int
,	O
int	O
color_to_move	int
)	O
{	O
int	O
k	int
;	O
int	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
essential_liberties	pointer
;	O
int	O
essential_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
inessential_liberties	pointer
;	O
int	O
inessential_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
false_eye_liberties	pointer
;	O
int	O
false_eye_libs	array
[	O
MAXLIBS	O
]	O
;	O
int	O
dpos	int
;	O
int	O
loop_again	int
=	O
1	int
;	O
int	O
potential_moves	array
[	O
BOARDMAX	O
]	O
;	O
int	O
num_potential_moves	int
=	O
0	int
;	O
int	O
move	pointer
=	O
NO_MOVE	O
;	O
while	O
(	O
loop_again	int
)	O
{	O
loop_again	int
=	O
0	int
;	O
if	O
(	O
!	O
endgame_find_liberties	function
(	O
str	int
,	O
&	O
essential_liberties	pointer
,	O
essential_libs	array
,	O
&	O
inessential_liberties	pointer
,	O
inessential_libs	array
,	O
&	O
false_eye_liberties	pointer
,	O
false_eye_libs	array
)	O
)	O
break	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
inessential_liberties	pointer
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
safe_move	function
(	O
inessential_libs	array
[	O
k	int
]	O
,	O
other	int
)	O
||	O
!	O
trymove	function
(	O
inessential_libs	array
[	O
k	int
]	O
,	O
other	int
,	O
"endgame"	pointer
,	O
str	int
)	O
)	O
continue	O
;	O
increase_depth_values	function
(	O
)	O
;	O
if	O
(	O
board	pointer
[	O
str	int
]	O
==	O
EMPTY	int
)	O
break	O
;	O
if	O
(	O
attack_and_defend	function
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
dpos	int
)	O
)	O
{	O
if	O
(	O
worm	array
[	O
dpos	int
]	O
.	O
color	int
==	O
EMPTY	int
)	O
{	O
potential_moves	array
[	O
num_potential_moves	int
]	O
=	O
dpos	int
;	O
num_potential_moves	int
++	O
;	O
}	O
forced_backfilling_moves	array
[	O
dpos	int
]	O
=	O
1	int
;	O
if	O
(	O
trymove	function
(	O
dpos	int
,	O
color	int
,	O
"endgame"	pointer
,	O
str	int
)	O
)	O
increase_depth_values	function
(	O
)	O
;	O
loop_again	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
stackp	int
>	O
0	int
)	O
{	O
popgo	function
(	O
)	O
;	O
decrease_depth_values	function
(	O
)	O
;	O
}	O
for	O
(	O
k	int
=	O
num_potential_moves	int
-	O
1	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
if	O
(	O
safe_move	function
(	O
potential_moves	array
[	O
k	int
]	O
,	O
color	int
)	O
)	O
{	O
move	pointer
=	O
potential_moves	array
[	O
k	int
]	O
;	O
TRACE	O
(	O
"  backfilling dame found at %1m for string %1m\n"	pointer
,	O
move	pointer
,	O
str	int
)	O
;	O
if	O
(	O
color	int
==	O
color_to_move	int
)	O
{	O
add_expand_territory_move	function
(	O
move	pointer
)	O
;	O
set_minimum_territorial_value	function
(	O
move	pointer
,	O
0.1	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
static	O
int	O
endgame_find_liberties	function
(	O
int	O
str	int
,	O
int	O
*	O
essential_liberties	pointer
,	O
int	O
essential_libs	array
[	O
MAXLIBS	O
]	O
,	O
int	O
*	O
inessential_liberties	pointer
,	O
int	O
inessential_libs	array
[	O
MAXLIBS	O
]	O
,	O
int	O
*	O
false_eye_liberties	pointer
,	O
int	O
false_eye_libs	array
[	O
MAXLIBS	O
]	O
)	O
{	O
int	O
liberties	pointer
;	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
k	int
;	O
ASSERT1	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
,	O
str	int
)	O
;	O
*	O
essential_liberties	pointer
=	O
0	int
;	O
*	O
inessential_liberties	pointer
=	O
0	int
;	O
*	O
false_eye_liberties	pointer
=	O
0	int
;	O
liberties	pointer
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	pointer
;	O
k	int
++	O
)	O
{	O
int	O
lib	int
=	O
libs	pointer
[	O
k	int
]	O
;	O
if	O
(	O
!	O
is_proper_eye_space	function
(	O
lib	int
)	O
)	O
{	O
int	O
i	int
;	O
int	O
essential	int
=	O
0	int
;	O
int	O
found_other	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
int	O
pos	int
=	O
lib	int
+	O
delta	array
[	O
i	int
]	O
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
||	O
!	O
IS_STONE	O
(	O
worm	array
[	O
pos	int
]	O
.	O
color	int
)	O
)	O
continue	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
||	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum
!=	O
ALIVE	int
)	O
return	O
0	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
board	pointer
[	O
str	int
]	O
)	O
{	O
if	O
(	O
find_origin	function
(	O
pos	int
)	O
!=	O
find_origin	function
(	O
str	int
)	O
)	O
essential	int
=	O
1	int
;	O
}	O
else	O
found_other	int
=	O
1	int
;	O
}	O
if	O
(	O
i	int
<	O
4	int
)	O
break	O
;	O
if	O
(	O
found_other	int
)	O
{	O
if	O
(	O
essential	int
)	O
essential_libs	array
[	O
(	O
*	O
essential_liberties	pointer
)	O
++	O
]	O
=	O
lib	int
;	O
else	O
inessential_libs	array
[	O
(	O
*	O
inessential_liberties	pointer
)	O
++	O
]	O
=	O
lib	int
;	O
}	O
else	O
if	O
(	O
is_false_eye	function
(	O
half_eye	array
,	O
lib	int
)	O
&&	O
!	O
false_eye_territory	array
[	O
lib	int
]	O
)	O
false_eye_libs	array
[	O
(	O
*	O
false_eye_liberties	pointer
)	O
++	O
]	O
=	O
lib	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
