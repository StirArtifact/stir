struct	O
hashtable	struct
{	O
T_HashFunc	pointer
f1	pointer
,	O
f2	pointer
;	O
T_ComparFunc	pointer
compar	pointer
;	O
size_t	long
size	long
;	O
size_t	long
fill	long
;	O
size_t	long
inuse	long
;	O
size_t	long
max	long
;	O
T_HashTableEl	pointer
*	O
entries	pointer
;	O
}	O
;	O
static	O
size_t	long
sizes	array
[	O
]	O
=	O
{	O
5	int
,	O
11	int
,	O
23	int
,	O
47	int
,	O
97	int
,	O
197	int
,	O
397	int
,	O
797	int
,	O
1597	int
,	O
3203	int
,	O
6421	int
,	O
12853	int
,	O
25717	int
,	O
51437	int
,	O
102877	int
,	O
205759	int
,	O
411527	int
,	O
823117	int
,	O
1646237	int
,	O
3292489	int
,	O
6584983	int
,	O
13169977	int
,	O
26339969	int
,	O
52679969	int
,	O
105359939	int
,	O
210719881	int
,	O
421439783	int
,	O
842879579	int
,	O
1685759167	int
,	O
0	int
}	O
;	O
static	O
int	O
deleted	int
=	O
0	int
;	O
static	O
int	O
unallocated	int
=	O
0	int
;	O
static	O
int	O
alloc_ht	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
size_t	long
size	long
)	O
{	O
int	O
i	int
;	O
size_t	long
ii	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
sizes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
sizes	array
[	O
i	int
]	O
>	O
size	long
*	O
4	int
)	O
break	O
;	O
if	O
(	O
!	O
sizes	array
[	O
i	int
]	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
sizes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
sizes	array
[	O
i	int
]	O
>	O
size	long
*	O
2	int
)	O
break	O
;	O
if	O
(	O
!	O
sizes	array
[	O
i	int
]	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
sizes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
sizes	array
[	O
i	int
]	O
>	O
size	long
)	O
break	O
;	O
if	O
(	O
!	O
sizes	array
[	O
i	int
]	O
)	O
return	O
-	O
1	int
;	O
size	long
=	O
sizes	array
[	O
i	int
]	O
;	O
if	O
(	O
size	long
<	O
H	pointer
->	O
size	long
)	O
size	long
=	O
H	pointer
->	O
size	long
;	O
H	pointer
->	O
max	long
=	O
size	long
*	O
4	int
/	O
5	int
-	O
2	int
;	O
H	pointer
->	O
size	long
=	O
size	long
;	O
H	pointer
->	O
fill	long
=	O
0	int
;	O
H	pointer
->	O
inuse	long
=	O
0	int
;	O
H	pointer
->	O
entries	pointer
=	O
NewArray	O
(	O
size	long
,	O
T_HashTableEl	pointer
)	O
;	O
if	O
(	O
H	pointer
->	O
entries	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
ii	long
=	O
0	int
;	O
ii	long
<	O
size	long
;	O
ii	long
++	O
)	O
H	pointer
->	O
entries	pointer
[	O
ii	long
]	O
=	O
&	O
unallocated	int
;	O
return	O
0	int
;	O
}	O
int	O
make_ht	function
(	O
T_HashFunc	pointer
f1	pointer
,	O
T_HashFunc	pointer
f2	pointer
,	O
T_ComparFunc	pointer
c	pointer
,	O
size_t	long
size	long
,	O
T_HashTable	struct
*	O
*	O
H	pointer
)	O
{	O
*	O
H	pointer
=	O
New	O
(	O
T_HashTable	struct
)	O
;	O
if	O
(	O
*	O
H	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
(	O
*	O
H	pointer
)	O
->	O
f1	pointer
=	O
f1	pointer
;	O
(	O
*	O
H	pointer
)	O
->	O
f2	pointer
=	O
f2	pointer
;	O
(	O
*	O
H	pointer
)	O
->	O
compar	pointer
=	O
c	pointer
;	O
(	O
*	O
H	pointer
)	O
->	O
size	long
=	O
0	int
;	O
if	O
(	O
alloc_ht	function
(	O
*	O
H	pointer
,	O
size	long
)	O
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
free_ht	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashFunc	pointer
entry_free	pointer
)	O
{	O
size_t	long
i	int
;	O
if	O
(	O
entry_free	pointer
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
H	pointer
->	O
size	long
;	O
i	int
++	O
)	O
if	O
(	O
H	pointer
->	O
entries	pointer
[	O
i	int
]	O
!=	O
&	O
unallocated	int
&&	O
H	pointer
->	O
entries	pointer
[	O
i	int
]	O
!=	O
&	O
deleted	int
)	O
entry_free	pointer
(	O
H	pointer
->	O
entries	pointer
[	O
i	int
]	O
)	O
;	O
Free	O
(	O
H	pointer
->	O
entries	pointer
)	O
;	O
Free	O
(	O
H	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_hash_add	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashTableEl	pointer
*	O
E	pointer
,	O
size_t	long
*	O
hint	pointer
)	O
{	O
size_t	long
f2	pointer
,	O
pos	array
;	O
int	O
ctr	int
;	O
pos	array
=	O
H	pointer
->	O
f1	pointer
(	O
E	pointer
)	O
%	O
H	pointer
->	O
size	long
;	O
f2	pointer
=	O
(	O
size_t	long
)	O
-	O
1	int
;	O
ctr	int
=	O
0	int
;	O
while	O
(	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
!=	O
&	O
unallocated	int
&&	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
!=	O
&	O
deleted	int
)	O
{	O
if	O
(	O
f2	pointer
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
f2	pointer
=	O
H	pointer
->	O
f2	pointer
(	O
E	pointer
)	O
%	O
(	O
H	pointer
->	O
size	long
-	O
1	int
)	O
;	O
pos	array
=	O
(	O
pos	array
+	O
f2	pointer
+	O
1	int
)	O
%	O
H	pointer
->	O
size	long
;	O
ctr	int
++	O
;	O
}	O
if	O
(	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
==	O
&	O
unallocated	int
)	O
H	pointer
->	O
fill	long
++	O
;	O
H	pointer
->	O
inuse	long
++	O
;	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
=	O
E	pointer
;	O
if	O
(	O
hint	pointer
)	O
*	O
hint	pointer
=	O
pos	array
;	O
return	O
0	int
;	O
}	O
static	O
int	O
rehash	function
(	O
T_HashTable	struct
*	O
H	pointer
)	O
{	O
size_t	long
size	long
,	O
i	int
;	O
T_HashTableEl	pointer
*	O
oldentries	pointer
;	O
size	long
=	O
H	pointer
->	O
size	long
;	O
oldentries	pointer
=	O
H	pointer
->	O
entries	pointer
;	O
if	O
(	O
alloc_ht	function
(	O
H	pointer
,	O
(	O
(	O
H	pointer
->	O
inuse	long
+	O
1	int
)	O
*	O
4	int
+	O
H	pointer
->	O
fill	long
)	O
/	O
5	int
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
oldentries	pointer
[	O
i	int
]	O
!=	O
&	O
unallocated	int
&&	O
oldentries	pointer
[	O
i	int
]	O
!=	O
&	O
deleted	int
)	O
_hash_add	function
(	O
H	pointer
,	O
oldentries	pointer
[	O
i	int
]	O
,	O
0	int
)	O
;	O
}	O
Free	O
(	O
oldentries	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
hash_add	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashTableEl	pointer
*	O
E	pointer
,	O
size_t	long
*	O
hint	pointer
)	O
{	O
if	O
(	O
H	pointer
->	O
fill	long
>=	O
H	pointer
->	O
max	long
)	O
rehash	function
(	O
H	pointer
)	O
;	O
if	O
(	O
H	pointer
->	O
fill	long
==	O
H	pointer
->	O
size	long
)	O
return	O
-	O
1	int
;	O
return	O
_hash_add	function
(	O
H	pointer
,	O
E	pointer
,	O
hint	pointer
)	O
;	O
}	O
static	O
int	O
_hash_lookup	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashTableEl	pointer
*	O
E	pointer
,	O
T_HashTableEl	pointer
*	O
*	O
E2	pointer
,	O
size_t	long
*	O
hint	pointer
,	O
int	O
isIdentity	int
)	O
{	O
size_t	long
f2	pointer
,	O
pos	array
,	O
upos	long
,	O
ttl	long
;	O
pos	array
=	O
H	pointer
->	O
f1	pointer
(	O
E	pointer
)	O
%	O
H	pointer
->	O
size	long
;	O
ttl	long
=	O
H	pointer
->	O
size	long
;	O
f2	pointer
=	O
(	O
size_t	long
)	O
-	O
1	int
;	O
upos	long
=	O
(	O
size_t	long
)	O
-	O
1	int
;	O
while	O
(	O
ttl	long
&&	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
!=	O
&	O
unallocated	int
&&	O
(	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
==	O
&	O
deleted	int
||	O
(	O
(	O
isIdentity	int
||	O
H	pointer
->	O
compar	pointer
(	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
,	O
E	pointer
)	O
!=	O
0	int
)	O
&&	O
(	O
!	O
isIdentity	int
||	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
!=	O
E	pointer
)	O
)	O
)	O
)	O
{	O
if	O
(	O
f2	pointer
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
f2	pointer
=	O
H	pointer
->	O
f2	pointer
(	O
E	pointer
)	O
%	O
(	O
H	pointer
->	O
size	long
-	O
1	int
)	O
;	O
if	O
(	O
upos	long
==	O
(	O
size_t	long
)	O
-	O
1	int
&&	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
==	O
&	O
deleted	int
)	O
upos	long
=	O
pos	array
;	O
pos	array
=	O
(	O
pos	array
+	O
f2	pointer
+	O
1	int
)	O
%	O
H	pointer
->	O
size	long
;	O
ttl	long
--	O
;	O
}	O
if	O
(	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
==	O
&	O
unallocated	int
||	O
!	O
ttl	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
upos	long
!=	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
H	pointer
->	O
entries	pointer
[	O
upos	long
]	O
=	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
;	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
=	O
&	O
deleted	int
;	O
pos	array
=	O
upos	long
;	O
}	O
if	O
(	O
hint	pointer
)	O
*	O
hint	pointer
=	O
pos	array
;	O
*	O
E2	pointer
=	O
H	pointer
->	O
entries	pointer
[	O
pos	array
]	O
;	O
return	O
0	int
;	O
}	O
int	O
hash_lookup	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashTableEl	pointer
*	O
E	pointer
,	O
T_HashTableEl	pointer
*	O
*	O
E2	pointer
,	O
size_t	long
*	O
hint	pointer
)	O
{	O
return	O
_hash_lookup	function
(	O
H	pointer
,	O
E	pointer
,	O
E2	pointer
,	O
hint	pointer
,	O
0	int
)	O
;	O
}	O
int	O
hash_remove	function
(	O
T_HashTable	struct
*	O
H	pointer
,	O
T_HashTableEl	pointer
*	O
E	pointer
,	O
size_t	long
hint	pointer
)	O
{	O
T_HashTableEl	pointer
*	O
E2	pointer
;	O
if	O
(	O
hint	pointer
>=	O
0	int
&&	O
hint	pointer
<	O
H	pointer
->	O
size	long
&&	O
H	pointer
->	O
entries	pointer
[	O
hint	pointer
]	O
==	O
E	pointer
)	O
{	O
H	pointer
->	O
inuse	long
--	O
;	O
H	pointer
->	O
entries	pointer
[	O
hint	pointer
]	O
=	O
&	O
deleted	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
_hash_lookup	function
(	O
H	pointer
,	O
E	pointer
,	O
&	O
E2	pointer
,	O
&	O
hint	pointer
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Removing non-existent entry\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
H	pointer
->	O
inuse	long
--	O
;	O
H	pointer
->	O
entries	pointer
[	O
hint	pointer
]	O
=	O
&	O
deleted	int
;	O
return	O
0	int
;	O
}	O
