int	O
ov_env	int
=	O
1	int
,	O
ov_pipe	int
=	O
0	int
,	O
ov_asynch	int
=	O
0	int
;	O
int	O
ov_verbose	int
=	O
0	int
;	O
adns_rrtype	enum
ov_type	enum
=	O
adns_r_none	int
;	O
int	O
ov_search	int
=	O
0	int
,	O
ov_qc_query	int
=	O
0	int
,	O
ov_qc_anshost	int
=	O
0	int
,	O
ov_qc_cname	int
=	O
1	int
;	O
int	O
ov_tcp	int
=	O
0	int
,	O
ov_cname	int
=	O
0	int
,	O
ov_format	int
=	O
fmt_default	int
;	O
char	O
*	O
ov_id	pointer
=	O
0	int
;	O
struct	O
perqueryflags_remember	struct
ov_pqfr	struct
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
tm_none	int
}	O
;	O
static	O
const	O
struct	O
optioninfo	struct
global_options	array
[	O
]	O
=	O
{	O
{	O
ot_desconly	int
,	O
"global binary options:"	pointer
}	O
,	O
{	O
ot_flag	int
,	O
"Do not look at environment variables at all"	pointer
,	O
"e"	pointer
,	O
"env"	pointer
,	O
&	O
ov_env	int
,	O
0	int
}	O
,	O
{	O
ot_flag	int
,	O
"Read queries on stdin instead of using args"	pointer
,	O
"f"	pointer
,	O
"pipe"	pointer
,	O
&	O
ov_pipe	int
,	O
1	int
}	O
,	O
{	O
ot_flag	int
,	O
"Allow answers to be reordered"	pointer
,	O
"a"	pointer
,	O
"asynch"	pointer
,	O
&	O
ov_asynch	int
,	O
1	int
}	O
,	O
{	O
ot_desconly	int
,	O
"answer/error output format and destination (see below):"	pointer
}	O
,	O
{	O
ot_value	int
,	O
"Answers to stdout, errors as messages to stderr (default)"	pointer
,	O
"Fs"	pointer
,	O
"fmt-simple"	pointer
,	O
&	O
ov_format	int
,	O
fmt_simple	int
}	O
,	O
{	O
ot_value	int
,	O
"Answers and errors both to stdout in parseable format"	pointer
,	O
"Fi"	pointer
,	O
"fmt-inline"	pointer
,	O
&	O
ov_format	int
,	O
fmt_inline	int
}	O
,	O
{	O
ot_value	int
,	O
"Fully-parseable output format (default for --asynch)"	pointer
,	O
"Fa"	pointer
,	O
"fmt-asynch"	pointer
,	O
&	O
ov_format	int
,	O
fmt_asynch	int
}	O
,	O
{	O
ot_desconly	int
,	O
"global verbosity level:"	pointer
}	O
,	O
{	O
ot_value	int
,	O
"Do not print anything to stderr"	pointer
,	O
"Vq"	pointer
,	O
"quiet"	pointer
,	O
&	O
ov_verbose	int
,	O
adns_if_noerrprint	int
}	O
,	O
{	O
ot_value	int
,	O
"Report unexpected kinds of problem only  (default)"	pointer
,	O
"Vn"	pointer
,	O
"no-quiet"	pointer
,	O
&	O
ov_verbose	int
,	O
0	int
}	O
,	O
{	O
ot_value	int
,	O
"Debugging mode"	pointer
,	O
"Vd"	pointer
,	O
"debug"	pointer
,	O
&	O
ov_verbose	int
,	O
adns_if_debug	int
}	O
,	O
{	O
ot_desconly	int
,	O
"other global options:"	pointer
}	O
,	O
{	O
ot_funcarg	int
,	O
"Configuration to use instead of /etc/resolv.conf"	pointer
,	O
0	int
,	O
"config"	pointer
,	O
0	int
,	O
0	int
,	O
of_config	function
,	O
"<config-text>"	pointer
}	O
,	O
{	O
ot_func	int
,	O
"Print version number"	pointer
,	O
0	int
,	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
of_version	function
}	O
,	O
{	O
ot_func	int
,	O
"Print usage information"	pointer
,	O
0	int
,	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
of_help	function
}	O
,	O
{	O
ot_end	int
}	O
}	O
;	O
static	O
const	O
struct	O
optioninfo	struct
perquery_options	array
[	O
]	O
=	O
{	O
{	O
ot_desconly	int
,	O
"per-query options:"	pointer
}	O
,	O
{	O
ot_funcarg	int
,	O
"Query type (see below)"	pointer
,	O
"t"	pointer
,	O
"type"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
of_type	function
,	O
"type"	pointer
}	O
,	O
{	O
ot_funcarg	int
,	O
"Do reverse query (address -> name lookup)"	pointer
,	O
"i"	pointer
,	O
"ptr"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
of_ptr	function
,	O
"addr"	pointer
}	O
,	O
{	O
ot_funcarg2	int
,	O
"Lookup in in-addr-like `zone' (eg MAPS RBL)"	pointer
,	O
0	int
,	O
"reverse"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
of_reverse	function
,	O
"addr"	pointer
,	O
"zone"	pointer
}	O
,	O
{	O
ot_desconly	int
,	O
"per-query binary options:"	pointer
}	O
,	O
{	O
ot_flag	int
,	O
"Use the search list"	pointer
,	O
"s"	pointer
,	O
"search"	pointer
,	O
&	O
ov_search	int
,	O
1	int
}	O
,	O
{	O
ot_flag	int
,	O
"Let query domains contain quote-requiring chars"	pointer
,	O
"Qq"	pointer
,	O
"qc-query"	pointer
,	O
&	O
ov_qc_query	int
,	O
1	int
}	O
,	O
{	O
ot_flag	int
,	O
"Let hostnames in answers contain ..."	pointer
,	O
"Qa"	pointer
,	O
"qc-anshost"	pointer
,	O
&	O
ov_qc_anshost	int
,	O
1	int
}	O
,	O
{	O
ot_flag	int
,	O
"Prevent CNAME target domains from containing ..."	pointer
,	O
"Qc"	pointer
,	O
"qc-cname"	pointer
,	O
&	O
ov_qc_cname	int
,	O
0	int
}	O
,	O
{	O
ot_flag	int
,	O
"Force use of a virtual circuit"	pointer
,	O
"u"	pointer
,	O
"tcp"	pointer
,	O
&	O
ov_tcp	int
,	O
1	int
}	O
,	O
{	O
ot_flag	int
,	O
"Do not display owner name in output"	pointer
,	O
"Do"	pointer
,	O
"show-owner"	pointer
,	O
&	O
ov_pqfr	struct
.	O
show_owner	int
,	O
0	int
}	O
,	O
{	O
ot_flag	int
,	O
"Do not display RR type in output"	pointer
,	O
"Dt"	pointer
,	O
"show-type"	pointer
,	O
&	O
ov_pqfr	struct
.	O
show_type	int
,	O
0	int
}	O
,	O
{	O
ot_flag	int
,	O
"Do not display CNAME target in output"	pointer
,	O
"Dc"	pointer
,	O
"show-cname"	pointer
,	O
&	O
ov_pqfr	struct
.	O
show_cname	int
,	O
0	int
}	O
,	O
{	O
ot_desconly	int
,	O
"per-query TTL mode (NB TTL is minimum across all info in reply):"	pointer
}	O
,	O
{	O
ot_value	int
,	O
"Show the TTL as a TTL"	pointer
,	O
"Tt"	pointer
,	O
"ttl-ttl"	pointer
,	O
&	O
ov_pqfr	struct
.	O
ttl	int
,	O
tm_rel	int
}	O
,	O
{	O
ot_value	int
,	O
"Show the TTL as a time_t when the data might expire"	pointer
,	O
"Ta"	pointer
,	O
"ttl-abs"	pointer
,	O
&	O
ov_pqfr	struct
.	O
ttl	int
,	O
tm_abs	int
}	O
,	O
{	O
ot_value	int
,	O
"Do not show the TTL (default)"	pointer
,	O
"Tn"	pointer
,	O
"no-ttl"	pointer
,	O
&	O
ov_pqfr	struct
.	O
ttl	int
,	O
tm_none	int
}	O
,	O
{	O
ot_desconly	int
,	O
"per-query CNAME handling mode:"	pointer
}	O
,	O
{	O
ot_value	int
,	O
"Call it an error if a CNAME is found"	pointer
,	O
"Cf"	pointer
,	O
"cname-reject"	pointer
,	O
&	O
ov_cname	int
,	O
adns_qf_cname_forbid	int
}	O
,	O
{	O
ot_value	int
,	O
"Allow references to CNAMEs in other RRs"	pointer
,	O
"Cl"	pointer
,	O
"cname-loose"	pointer
,	O
&	O
ov_cname	int
,	O
adns_qf_cname_loose	int
}	O
,	O
{	O
ot_value	int
,	O
"CNAME ok for query domain, but not in RRs (default)"	pointer
,	O
"Cs"	pointer
,	O
"cname-ok"	pointer
,	O
&	O
ov_cname	int
,	O
0	int
}	O
,	O
{	O
ot_desconly	int
,	O
"asynchronous/pipe mode options:"	pointer
}	O
,	O
{	O
ot_funcarg	int
,	O
"Set <id>, default is decimal sequence starting 0"	pointer
,	O
0	int
,	O
"asynch-id"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
of_asynch_id	function
,	O
"id"	pointer
}	O
,	O
{	O
ot_funcarg	int
,	O
"Cancel the query with id <id> (no error if not found)"	pointer
,	O
0	int
,	O
"cancel-id"	pointer
,	O
0	int
,	O
0	int
,	O
&	O
of_cancel_id	function
,	O
"id"	pointer
}	O
,	O
{	O
ot_end	int
}	O
}	O
;	O
static	O
void	O
printusage	function
(	O
void	O
)	O
{	O
static	O
const	O
struct	O
optioninfo	struct
*	O
const	O
all_optiontables	array
[	O
]	O
=	O
{	O
global_options	array
,	O
perquery_options	array
,	O
0	int
}	O
;	O
const	O
struct	O
optioninfo	struct
*	O
const	O
*	O
oiap	pointer
,	O
*	O
oip	pointer
=	O
0	int
;	O
int	O
maxsopt	int
,	O
maxlopt	int
,	O
l	int
;	O
maxsopt	int
=	O
maxlopt	int
=	O
0	int
;	O
for	O
(	O
oiap	pointer
=	O
all_optiontables	array
;	O
*	O
oiap	pointer
;	O
oiap	pointer
++	O
)	O
{	O
for	O
(	O
oip	pointer
=	O
*	O
oiap	pointer
;	O
oip	pointer
->	O
type	enum
!=	O
ot_end	int
;	O
oip	pointer
++	O
)	O
{	O
if	O
(	O
oip	pointer
->	O
type	enum
==	O
ot_funcarg	int
)	O
continue	O
;	O
if	O
(	O
oip	pointer
->	O
sopt	pointer
)	O
{	O
l	int
=	O
strlen	function
(	O
oip	pointer
->	O
sopt	pointer
)	O
;	O
if	O
(	O
l	int
>	O
maxsopt	int
)	O
maxsopt	int
=	O
l	int
;	O
}	O
if	O
(	O
oip	pointer
->	O
lopt	pointer
)	O
{	O
l	int
=	O
strlen	function
(	O
oip	pointer
->	O
lopt	pointer
)	O
;	O
if	O
(	O
oip	pointer
->	O
type	enum
==	O
ot_flag	int
&&	O
!	O
oip	pointer
->	O
value	int
)	O
l	int
+=	O
3	int
;	O
if	O
(	O
l	int
>	O
maxlopt	int
)	O
maxlopt	int
=	O
l	int
;	O
}	O
}	O
}	O
fputs	function
(	O
"usage: adnshost [global-opts] [query-opts] query-domain\n"	pointer
"                             [[query-opts] query-domain ...]\n"	pointer
"       adnshost [global-opts] [query-opts] -f|--pipe\n"	pointer
,	O
stdout	pointer
)	O
;	O
for	O
(	O
oiap	pointer
=	O
all_optiontables	array
;	O
*	O
oiap	pointer
;	O
oiap	pointer
++	O
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
oip	pointer
=	O
*	O
oiap	pointer
;	O
oip	pointer
->	O
type	enum
!=	O
ot_end	int
;	O
oip	pointer
++	O
)	O
{	O
switch	O
(	O
oip	pointer
->	O
type	enum
)	O
{	O
case	O
ot_flag	int
:	O
if	O
(	O
!	O
oip	pointer
->	O
value	int
)	O
{	O
if	O
(	O
oip	pointer
->	O
sopt	pointer
)	O
{	O
printf	function
(	O
" +%-*s --no-%-*s %s\n"	pointer
,	O
maxsopt	int
,	O
oip	pointer
->	O
sopt	pointer
,	O
maxlopt	int
-	O
2	int
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
" --no-%-*s %s\n"	pointer
,	O
maxlopt	int
+	O
maxsopt	int
+	O
1	int
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
break	O
;	O
}	O
case	O
ot_value	int
:	O
case	O
ot_func	int
:	O
if	O
(	O
oip	pointer
->	O
sopt	pointer
)	O
{	O
printf	function
(	O
" -%-*s --%-*s %s\n"	pointer
,	O
maxsopt	int
,	O
oip	pointer
->	O
sopt	pointer
,	O
maxlopt	int
+	O
1	int
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
" --%-*s %s\n"	pointer
,	O
maxlopt	int
+	O
maxsopt	int
+	O
3	int
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
ot_funcarg	int
:	O
if	O
(	O
oip	pointer
->	O
sopt	pointer
)	O
{	O
l	int
=	O
(	O
maxlopt	int
+	O
maxsopt	int
-	O
9	int
-	O
(	O
strlen	function
(	O
oip	pointer
->	O
sopt	pointer
)	O
+	O
strlen	function
(	O
oip	pointer
->	O
lopt	pointer
)	O
+	O
2	int
*	O
strlen	function
(	O
oip	pointer
->	O
argdesc	pointer
)	O
)	O
)	O
;	O
printf	function
(	O
" -%s<%s> / --%s <%s>%*s%s\n"	pointer
,	O
oip	pointer
->	O
sopt	pointer
,	O
oip	pointer
->	O
argdesc	pointer
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
argdesc	pointer
,	O
l	int
>	O
2	int
?	O
l	int
:	O
2	int
,	O
""	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
else	O
{	O
l	int
=	O
(	O
maxlopt	int
+	O
maxsopt	int
+	O
1	int
-	O
(	O
strlen	function
(	O
oip	pointer
->	O
lopt	pointer
)	O
+	O
strlen	function
(	O
oip	pointer
->	O
argdesc	pointer
)	O
)	O
)	O
;	O
printf	function
(	O
" --%s <%s>%*s%s\n"	pointer
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
argdesc	pointer
,	O
l	int
>	O
2	int
?	O
l	int
:	O
2	int
,	O
""	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
}	O
break	O
;	O
case	O
ot_funcarg2	int
:	O
assert	O
(	O
!	O
oip	pointer
->	O
sopt	pointer
)	O
;	O
l	int
=	O
(	O
maxlopt	int
+	O
maxsopt	int
-	O
2	int
-	O
(	O
strlen	function
(	O
oip	pointer
->	O
lopt	pointer
)	O
+	O
strlen	function
(	O
oip	pointer
->	O
argdesc	pointer
)	O
+	O
strlen	function
(	O
oip	pointer
->	O
argdesc2	pointer
)	O
)	O
)	O
;	O
printf	function
(	O
" --%s <%s> <%s>%*s%s\n"	pointer
,	O
oip	pointer
->	O
lopt	pointer
,	O
oip	pointer
->	O
argdesc	pointer
,	O
oip	pointer
->	O
argdesc2	pointer
,	O
l	int
>	O
2	int
?	O
l	int
:	O
2	int
,	O
""	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
break	O
;	O
case	O
ot_desconly	int
:	O
printf	function
(	O
"%s\n"	pointer
,	O
oip	pointer
->	O
desc	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
printf	function
(	O
"\nEscaping domains which might start with `-':\n"	pointer
" - %-*s Next argument is a domain, but more options may follow\n"	pointer
,	O
maxlopt	int
+	O
maxsopt	int
+	O
3	int
,	O
"<domain>"	pointer
)	O
;	O
fputs	function
(	O
"\n"	pointer
"Query domains should always be quoted according to master file format.\n"	pointer
"\n"	pointer
"For binary options, --FOO and --no-FOO are opposites, as are\n"	pointer
"-X and +X.  In each case the default is the one not listed.\n"	pointer
"Per query options stay set a particular way until they are reset,\n"	pointer
"whether they appear on the command line or on stdin.\n"	pointer
"All global options must preceed the first query domain.\n"	pointer
"\n"	pointer
"With -f, the input should be lines with either an option, possibly\n"	pointer
"with a value argument (separated from the option by a space if it's a long\n"	pointer
"option), or a domain (possibly preceded by a hyphen and a space to\n"	pointer
"distinguish it from an option).\n"	pointer
"\n"	pointer
"Output format is master file format without class or TTL by default:\n"	pointer
"   [<owner>] [<ttl>] [<type>] <data>\n"	pointer
"or if the <owner> domain refers to a CNAME and --show-cname is on\n"	pointer
"   [<owner>] [<ttl>] CNAME <cname>\n"	pointer
"   [<cname>] [<ttl>] <type> <data>\n"	pointer
"When a query fails you get an error message to stderr (with --fmt-simple).\n"	pointer
"Specify --fmt-inline for lines like this (broken here for readability):\n"	pointer
"   ; failed <statustype> <statusnum> <statusabbrev> \\\n"	pointer
"       [<owner>] [<ttl>] [<cname>] \"<status string>\"\n"	pointer
"If you use --fmt-asynch, which is the default for --asynch,\n"	pointer
"each answer (success or failure) is preceded by a line\n"	pointer
"   <id> <nrrs> <statustype> <statusnum> <statusabbrev> \\\n"	pointer
"       [<owner>] [<ttl>] [<cname>] \"<status string>\"\n"	pointer
"where <nrrs> is the number of RRs that follow and <cname> will be `$' or\n"	pointer
"the CNAME target; the CNAME indirection and error formats above are not used.\n"	pointer
"\n"	pointer
"Exit status:\n"	pointer
" 0    all went well\n"	pointer
" 1-6  at least one query failed with statustype:\n"	pointer
"   1    localfail   )\n"	pointer
"   2    remotefail  ) temporary errors\n"	pointer
"   3    tempfail  __)_________________\n"	pointer
"   4    misconfig   )\n"	pointer
"   5    misquery    ) permanent errors\n"	pointer
"   6    permfail    )\n"	pointer
" 10   system trouble\n"	pointer
" 11   usage problems\n"	pointer
"\n"	pointer
"Query types (see adns.h; default is addr):\n"	pointer
"  ns  soa  ptr  mx  rp  srv  addr       - enhanced versions\n"	pointer
"  cname  hinfo  txt                     - types with only one version\n"	pointer
"  a  ns-  soa-  ptr-  mx-  rp-  srv-    - _raw versions\n"	pointer
"  type<number>                          - `unknown' type, RFC3597\n"	pointer
"Default is addr, or ptr for -i/--ptr queries\n"	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
sysfail	function
(	O
"write usage message"	pointer
,	O
errno	O
)	O
;	O
}	O
void	O
of_version	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
VERSION_PRINT_QUIT	O
(	O
"adnshost"	pointer
)	O
;	O
}	O
void	O
of_help	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oi	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
printusage	function
(	O
)	O
;	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
)	O
sysfail	function
(	O
"finish writing output"	pointer
,	O
errno	O
)	O
;	O
quitnow	function
(	O
0	int
)	O
;	O
}	O
typedef	O
int	O
comparer_type	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
,	O
const	O
struct	O
optioninfo	struct
*	O
entry	pointer
)	O
;	O
static	O
int	O
oc_long	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
,	O
const	O
struct	O
optioninfo	struct
*	O
entry	pointer
)	O
{	O
return	O
entry	pointer
->	O
lopt	pointer
&&	O
!	O
strcmp	function
(	O
*	O
optp	pointer
,	O
entry	pointer
->	O
lopt	pointer
)	O
;	O
}	O
static	O
int	O
oc_short	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
,	O
const	O
struct	O
optioninfo	struct
*	O
entry	pointer
)	O
{	O
const	O
char	O
*	O
sopt	pointer
;	O
int	O
l	int
;	O
sopt	pointer
=	O
entry	pointer
->	O
sopt	pointer
;	O
if	O
(	O
!	O
sopt	pointer
)	O
return	O
0	int
;	O
l	int
=	O
strlen	function
(	O
sopt	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
*	O
optp	pointer
,	O
sopt	pointer
,	O
l	int
)	O
)	O
return	O
0	int
;	O
(	O
*	O
optp	pointer
)	O
+=	O
l	int
;	O
return	O
1	int
;	O
}	O
static	O
const	O
struct	O
optioninfo	struct
*	O
find1	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
,	O
const	O
struct	O
optioninfo	struct
*	O
table	pointer
,	O
comparer_type	function
*	O
comparer	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
table	pointer
->	O
type	enum
==	O
ot_end	int
)	O
return	O
0	int
;	O
if	O
(	O
comparer	pointer
(	O
optp	pointer
,	O
table	pointer
)	O
)	O
return	O
table	pointer
;	O
table	pointer
++	O
;	O
}	O
}	O
static	O
const	O
struct	O
optioninfo	struct
*	O
find	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
,	O
const	O
char	O
*	O
prefix	pointer
,	O
comparer_type	function
*	O
comparer	pointer
)	O
{	O
const	O
struct	O
optioninfo	struct
*	O
oip	pointer
;	O
const	O
char	O
*	O
opt	pointer
;	O
opt	pointer
=	O
*	O
optp	pointer
;	O
oip	pointer
=	O
find1	function
(	O
optp	pointer
,	O
perquery_options	array
,	O
comparer	pointer
)	O
;	O
if	O
(	O
oip	pointer
)	O
return	O
oip	pointer
;	O
oip	pointer
=	O
find1	function
(	O
optp	pointer
,	O
global_options	array
,	O
comparer	pointer
)	O
;	O
if	O
(	O
!	O
oip	pointer
)	O
usageerr	function
(	O
"unknown option %s%s"	pointer
,	O
prefix	pointer
,	O
opt	pointer
)	O
;	O
if	O
(	O
ads	pointer
)	O
usageerr	function
(	O
"global option %s%s specified after query domain(s)"	pointer
,	O
prefix	pointer
,	O
opt	pointer
)	O
;	O
return	O
oip	pointer
;	O
}	O
const	O
struct	O
optioninfo	struct
*	O
opt_findl	function
(	O
const	O
char	O
*	O
opt	pointer
)	O
{	O
return	O
find	function
(	O
&	O
opt	pointer
,	O
"--"	pointer
,	O
oc_long	function
)	O
;	O
}	O
const	O
struct	O
optioninfo	struct
*	O
opt_finds	function
(	O
const	O
char	O
*	O
*	O
optp	pointer
)	O
{	O
return	O
find	function
(	O
optp	pointer
,	O
"-"	pointer
,	O
oc_short	function
)	O
;	O
}	O
static	O
void	O
noninvert	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oip	pointer
)	O
NONRETURNING	O
;	O
static	O
void	O
noninvert	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oip	pointer
)	O
{	O
usageerr	function
(	O
"option %s%s%s%s%s may not be inverted"	pointer
,	O
oip	pointer
->	O
sopt	pointer
?	O
"-"	pointer
:	O
""	pointer
,	O
oip	pointer
->	O
sopt	pointer
?	O
oip	pointer
->	O
sopt	pointer
:	O
""	pointer
,	O
oip	pointer
->	O
lopt	pointer
&&	O
oip	pointer
->	O
sopt	pointer
?	O
" / "	pointer
:	O
""	pointer
,	O
oip	pointer
->	O
lopt	pointer
?	O
"--"	pointer
:	O
""	pointer
,	O
oip	pointer
->	O
lopt	pointer
?	O
oip	pointer
->	O
lopt	pointer
:	O
""	pointer
)	O
;	O
}	O
void	O
opt_do	function
(	O
const	O
struct	O
optioninfo	struct
*	O
oip	pointer
,	O
int	O
invert	int
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
arg2	pointer
)	O
{	O
switch	O
(	O
oip	pointer
->	O
type	enum
)	O
{	O
case	O
ot_flag	int
:	O
assert	O
(	O
!	O
arg	pointer
)	O
;	O
*	O
oip	pointer
->	O
storep	pointer
=	O
!	O
invert	int
;	O
return	O
;	O
case	O
ot_value	int
:	O
assert	O
(	O
!	O
arg	pointer
)	O
;	O
if	O
(	O
invert	int
)	O
noninvert	function
(	O
oip	pointer
)	O
;	O
*	O
oip	pointer
->	O
storep	pointer
=	O
oip	pointer
->	O
value	int
;	O
return	O
;	O
case	O
ot_func	int
:	O
case	O
ot_funcarg	int
:	O
case	O
ot_funcarg2	int
:	O
if	O
(	O
invert	int
)	O
noninvert	function
(	O
oip	pointer
)	O
;	O
oip	pointer
->	O
func	pointer
(	O
oip	pointer
,	O
arg	pointer
,	O
arg2	pointer
)	O
;	O
return	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
