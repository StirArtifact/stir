struct	O
rpm_type_size	struct
{	O
int	O
typeM	int
;	O
int	O
sizeM	int
;	O
}	O
;	O
static	O
struct	O
rpm_type_size	struct
rpmTypeSizes	array
[	O
]	O
=	O
{	O
{	O
RPM_NULL_TYPE	int
,	O
0	int
}	O
,	O
{	O
RPM_CHAR_TYPE	int
,	O
1	int
}	O
,	O
{	O
RPM_INT8_TYPE	int
,	O
1	int
}	O
,	O
{	O
RPM_INT16_TYPE	int
,	O
2	int
}	O
,	O
{	O
RPM_INT32_TYPE	int
,	O
4	int
}	O
,	O
{	O
RPM_INT64_TYPE	int
,	O
8	int
}	O
,	O
{	O
RPM_STRING_TYPE	int
,	O
0	int
}	O
,	O
{	O
RPM_BIN_TYPE	int
,	O
0	int
}	O
,	O
{	O
RPM_STRING_ARRAY_TYPE	int
,	O
0	int
}	O
,	O
{	O
RPM_I18NSTRING_ARRAY_TYPE	int
,	O
0	int
}	O
}	O
;	O
static	O
int	O
get_size_by_type	function
(	O
int	O
type	int
)	O
{	O
if	O
(	O
type	int
>	O
RPM_I18NSTRING_ARRAY_TYPE	int
)	O
return	O
-	O
1	int
;	O
return	O
rpmTypeSizes	array
[	O
type	int
]	O
.	O
sizeM	int
;	O
}	O
void	O
rpmbis_px_lead_init	function
(	O
RPM_PX_LEAD	struct
*	O
px_lead	pointer
)	O
{	O
memset	function
(	O
px_lead	pointer
,	O
'\0'	O
,	O
RPM_LEAD_SIZE	int
)	O
;	O
memcpy	function
(	O
px_lead	pointer
->	O
px_magic	array
,	O
RPM_MAGIC	pointer
,	O
4	int
)	O
;	O
}	O
static	O
int	O
rpmbis_i_get_type	function
(	O
int	O
table_id	int
,	O
int	O
rpmtag	int
)	O
{	O
int	O
type	int
;	O
type	int
=	O
swatt_get_rpmtype	function
(	O
table_id	int
,	O
rpmtag	int
)	O
;	O
return	O
type	int
;	O
}	O
RPMHDRINDEX	struct
*	O
rpm_hdrindex_create	function
(	O
int	O
which_header	int
,	O
int	O
rpmtag	int
)	O
{	O
RPMHDRINDEX	struct
*	O
hdrindex	pointer
;	O
hdrindex	pointer
=	O
(	O
RPMHDRINDEX	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMHDRINDEX	struct
*	O
)	O
)	O
;	O
hdrindex	pointer
->	O
tag	int
=	O
rpmtag	int
;	O
hdrindex	pointer
->	O
type	int
=	O
rpmbis_i_get_type	function
(	O
which_header	int
,	O
rpmtag	int
)	O
;	O
if	O
(	O
hdrindex	pointer
->	O
type	int
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
hdrindex	pointer
->	O
offset	int
=	O
0	int
;	O
hdrindex	pointer
->	O
count	int
=	O
0	int
;	O
return	O
hdrindex	pointer
;	O
}	O
void	O
rpm_hdrindex_delete	function
(	O
RPMHDRINDEX	struct
*	O
hdrindex	pointer
)	O
{	O
free	function
(	O
hdrindex	pointer
)	O
;	O
}	O
RPMBIS_RECORD	struct
*	O
rpmbis_record_create	function
(	O
int	O
which_header	int
,	O
int	O
tag	int
)	O
{	O
RPMBIS_RECORD	struct
*	O
rcd	pointer
;	O
rcd	pointer
=	O
(	O
RPMBIS_RECORD	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMBIS_RECORD	struct
)	O
)	O
;	O
rcd	pointer
->	O
tag_valueM	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
rcd	pointer
->	O
indexM	pointer
=	O
rpm_hdrindex_create	function
(	O
which_header	int
,	O
tag	int
)	O
;	O
return	O
rcd	pointer
;	O
}	O
int	O
rpmbis_record_add_value	function
(	O
RPMBIS_RECORD	struct
*	O
rcd	pointer
,	O
void	O
*	O
value	int
,	O
int	O
table_id	int
)	O
{	O
int	O
type	int
;	O
int	O
size	long
;	O
if	O
(	O
table_id	int
>=	O
0	int
)	O
{	O
type	int
=	O
rpmbis_i_get_type	function
(	O
table_id	int
,	O
rcd	pointer
->	O
indexM	pointer
->	O
tag	int
)	O
;	O
if	O
(	O
type	int
!=	O
rcd	pointer
->	O
indexM	pointer
->	O
type	int
)	O
{	O
exit	function
(	O
254	int
)	O
;	O
}	O
}	O
else	O
{	O
type	int
=	O
rcd	pointer
->	O
indexM	pointer
->	O
type	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
rpmbis_record_delete	function
(	O
RPMBIS_RECORD	struct
*	O
rcd	pointer
)	O
{	O
strob_close	function
(	O
rcd	pointer
->	O
tag_valueM	pointer
)	O
;	O
rpm_hdrindex_delete	function
(	O
rcd	pointer
->	O
indexM	pointer
)	O
;	O
free	function
(	O
rcd	pointer
)	O
;	O
}	O
RPMLEAD	struct
*	O
rpmbis_rpmlead_create	function
(	O
void	O
)	O
{	O
return	O
(	O
RPMLEAD	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMLEAD	struct
)	O
)	O
;	O
}	O
void	O
rpmbis_rpmlead_delete	function
(	O
RPMLEAD	struct
*	O
rpmlead	struct
)	O
{	O
free	function
(	O
rpmlead	struct
)	O
;	O
}	O
RPMBIS	struct
*	O
rpmbis_create	function
(	O
void	O
)	O
{	O
RPMBIS	struct
*	O
rpmbis	pointer
;	O
rpmbis	pointer
=	O
(	O
RPMBIS	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMBIS	struct
)	O
)	O
;	O
rpmbis	pointer
->	O
h_leadM	pointer
=	O
(	O
RPMLEAD	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMLEAD	struct
)	O
)	O
;	O
rpmbis	pointer
->	O
n_leadM	pointer
=	O
(	O
RPM_PX_LEAD	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPM_PX_LEAD	struct
)	O
)	O
;	O
rpmbis	pointer
->	O
h_headerM	pointer
=	O
(	O
RPM_HSHEADER	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPM_HSHEADER	struct
)	O
)	O
;	O
rpmbis	pointer
->	O
n_headerM	pointer
=	O
(	O
RPM_PX_HSHEADER	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPM_PX_HSHEADER	struct
)	O
)	O
;	O
return	O
rpmbis	pointer
;	O
}	O
void	O
rpmbis_delete	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
)	O
{	O
free	function
(	O
rpmbis	pointer
->	O
h_leadM	pointer
)	O
;	O
free	function
(	O
rpmbis	pointer
->	O
n_leadM	pointer
)	O
;	O
free	function
(	O
rpmbis	pointer
->	O
h_headerM	pointer
)	O
;	O
free	function
(	O
rpmbis	pointer
->	O
n_headerM	pointer
)	O
;	O
free	function
(	O
rpmbis	pointer
)	O
;	O
}	O
RPMBIS_RPMH	struct
*	O
rpmbis_rpmh_create	function
(	O
void	O
)	O
{	O
RPMBIS_RPMH	struct
*	O
rpmh	pointer
;	O
rpmh	pointer
=	O
(	O
RPMBIS_RPMH	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPMBIS_RPMH	struct
)	O
)	O
;	O
rpmh	pointer
->	O
hshM	pointer
=	O
rpmbis_hsh_create	function
(	O
)	O
;	O
rpmh	pointer
->	O
host_recordsM	pointer
=	O
cplob_open	function
(	O
12	int
)	O
;	O
rpmh	pointer
->	O
hdrindex_fdM	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
rpmh	pointer
->	O
store_fdM	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
return	O
rpmh	pointer
;	O
}	O
void	O
rpmbis_rpmh_delete	function
(	O
RPMBIS_RPMH	struct
*	O
rpmh	pointer
)	O
{	O
uxfio_close	function
(	O
rpmh	pointer
->	O
store_fdM	int
)	O
;	O
uxfio_close	function
(	O
rpmh	pointer
->	O
hdrindex_fdM	int
)	O
;	O
free	function
(	O
rpmh	pointer
)	O
;	O
}	O
RPM_HSHEADER	struct
*	O
rpm_hsh_create	function
(	O
void	O
)	O
{	O
RPM_HSHEADER	struct
*	O
hsh	pointer
;	O
hsh	pointer
=	O
(	O
RPM_HSHEADER	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
RPM_HSHEADER	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
hsh	pointer
->	O
magic	array
)	O
,	O
RPM_HEADER_MAGIC	pointer
,	O
4	int
)	O
;	O
memset	function
(	O
hsh	pointer
->	O
reserved	array
,	O
'\0'	O
,	O
4	int
)	O
;	O
hsh	pointer
->	O
nindex	int
=	O
0	int
;	O
hsh	pointer
->	O
hsize	int
=	O
0	int
;	O
return	O
hsh	pointer
;	O
}	O
void	O
rpm_hsh_delete	function
(	O
RPM_HSHEADER	struct
*	O
hsh	pointer
)	O
{	O
free	function
(	O
hsh	pointer
)	O
;	O
}	O
int	O
rpmbis_ntoh_lead	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
RPMLEAD	struct
*	O
dst	pointer
,	O
RPM_PX_LEAD	struct
*	O
src	pointer
)	O
{	O
memcpy	function
(	O
dst	pointer
,	O
src	pointer
,	O
RPM_LEAD_SIZE	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_ntoh_header	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
RPM_HSHEADER	struct
*	O
dst	pointer
,	O
RPM_PX_HSHEADER	struct
*	O
src	pointer
)	O
{	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
magic	array
)	O
,	O
&	O
(	O
src	pointer
->	O
px_magic	array
)	O
,	O
sizeof	O
(	O
src	pointer
->	O
px_magic	array
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
reserved	array
)	O
,	O
&	O
(	O
src	pointer
->	O
px_reserved	array
)	O
,	O
sizeof	O
(	O
src	pointer
->	O
px_reserved	array
)	O
)	O
;	O
dst	pointer
->	O
nindex	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_nindex	array
)	O
)	O
)	O
;	O
dst	pointer
->	O
hsize	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_hsize	array
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_hton_header	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
RPM_PX_HSHEADER	struct
*	O
dst	pointer
,	O
RPM_HSHEADER	struct
*	O
src	pointer
)	O
{	O
uint32_t	int
tmp	pointer
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_magic	array
)	O
,	O
&	O
(	O
src	pointer
->	O
magic	array
)	O
,	O
sizeof	O
(	O
src	pointer
->	O
magic	array
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_reserved	array
)	O
,	O
&	O
(	O
src	pointer
->	O
magic	array
)	O
,	O
sizeof	O
(	O
src	pointer
->	O
reserved	array
)	O
)	O
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
nindex	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_nindex	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
hsize	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_hsize	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_hton_hdrindex	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
RPM_PX_HDRINDEX	struct
*	O
dst	pointer
,	O
RPMHDRINDEX	struct
*	O
src	pointer
)	O
{	O
uint32_t	int
tmp	pointer
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
tag	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_tag	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
type	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_type	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
offset	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_offset	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
tmp	pointer
=	O
htonl	function
(	O
(	O
uint32_t	int
)	O
src	pointer
->	O
count	int
)	O
;	O
memcpy	function
(	O
&	O
(	O
dst	pointer
->	O
px_count	array
)	O
,	O
&	O
(	O
tmp	pointer
)	O
,	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_ntoh_hdrindex	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
RPMHDRINDEX	struct
*	O
dst	pointer
,	O
RPM_PX_HDRINDEX	struct
*	O
src	pointer
)	O
{	O
dst	pointer
->	O
tag	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_tag	array
)	O
)	O
)	O
;	O
dst	pointer
->	O
type	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_type	array
)	O
)	O
)	O
;	O
dst	pointer
->	O
offset	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_offset	array
)	O
)	O
)	O
;	O
dst	pointer
->	O
count	int
=	O
(	O
int	O
)	O
ntohl	function
(	O
*	O
(	O
(	O
uint32_t	int
*	O
)	O
(	O
src	pointer
->	O
px_count	array
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_io_write_lead	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
ret	int
;	O
rpmbis_px_lead_init	function
(	O
rpmbis	pointer
->	O
n_leadM	pointer
)	O
;	O
ret	int
=	O
atomicio	function
(	O
(	O
ssize_t	long
(	O
*	O
)	O
(	O
int	O
,	O
void	O
*	O
,	O
size_t	long
)	O
)	O
(	O
write	function
)	O
,	O
ofd	int
,	O
(	O
void	O
*	O
)	O
(	O
rpmbis	pointer
->	O
n_leadM	pointer
)	O
,	O
RPM_LEAD_SIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
RPM_LEAD_SIZE	int
)	O
return	O
-	O
1	int
;	O
return	O
ret	int
;	O
}	O
int	O
rpmbis_io_read_lead	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ifd	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
uxfio_unix_safe_atomic_read	function
(	O
ifd	int
,	O
rpmbis	pointer
->	O
n_leadM	pointer
,	O
RPM_LEAD_SIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
RPM_LEAD_SIZE	int
)	O
return	O
-	O
1	int
;	O
rpmbis_ntoh_lead	function
(	O
rpmbis	pointer
,	O
rpmbis	pointer
->	O
h_leadM	pointer
,	O
rpmbis	pointer
->	O
n_leadM	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
rpmbis_io_read_header	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ifd	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
uxfio_unix_safe_atomic_read	function
(	O
ifd	int
,	O
(	O
void	O
*	O
)	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
)	O
,	O
RPM_HEADER_SIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
RPM_HEADER_SIZE	int
)	O
return	O
-	O
1	int
;	O
rpmbis_ntoh_header	function
(	O
rpmbis	pointer
,	O
rpmbis	pointer
->	O
h_headerM	pointer
,	O
rpmbis	pointer
->	O
n_headerM	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
rpmbis_io_write_header	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
rpmbis_hton_header	function
(	O
rpmbis	pointer
,	O
rpmbis	pointer
->	O
n_headerM	pointer
,	O
rpmbis	pointer
->	O
h_headerM	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
-	O
1	int
;	O
memcpy	function
(	O
&	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
->	O
px_magic	array
)	O
,	O
RPM_HEADER_MAGIC	pointer
,	O
sizeof	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
->	O
px_magic	array
)	O
)	O
;	O
memset	function
(	O
&	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
->	O
px_reserved	array
)	O
,	O
'\0'	O
,	O
sizeof	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
->	O
px_reserved	array
)	O
)	O
;	O
ret	int
=	O
atomicio	function
(	O
(	O
ssize_t	long
(	O
*	O
)	O
(	O
int	O
,	O
void	O
*	O
,	O
size_t	long
)	O
)	O
(	O
write	function
)	O
,	O
ofd	int
,	O
(	O
void	O
*	O
)	O
(	O
rpmbis	pointer
->	O
n_headerM	pointer
)	O
,	O
RPM_HEADER_SIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
RPM_HEADER_SIZE	int
)	O
return	O
-	O
1	int
;	O
return	O
RPM_HEADER_SIZE	int
;	O
}	O
int	O
rpmbis_io_read_hdrindexes	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
nhdrs	int
;	O
RPMHDRINDEX	struct
hdrindex	pointer
;	O
RPM_PX_HDRINDEX	struct
*	O
px_hdrindex	pointer
;	O
nhdrs	int
=	O
rpmbis	pointer
->	O
h_headerM	pointer
->	O
nindex	int
;	O
return	O
0	int
;	O
}	O
int	O
rpmbis_io_write_hdrindexes	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ofd	int
)	O
{	O
return	O
0	int
;	O
}	O
int	O
rpmbis_io_write_blob	function
(	O
RPMBIS	struct
*	O
rpmbis	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
ret	int
;	O
int	O
retval	int
;	O
retval	int
=	O
0	int
;	O
ret	int
=	O
rpmbis_io_write_lead	function
(	O
rpmbis	pointer
,	O
ofd	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
retval	int
+=	O
ret	int
;	O
ret	int
=	O
rpmbis_io_write_header	function
(	O
rpmbis	pointer
,	O
ofd	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
retval	int
+=	O
ret	int
;	O
ret	int
=	O
rpmbis_io_write_hdrindexes	function
(	O
rpmbis	pointer
,	O
ofd	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
retval	int
+=	O
ret	int
;	O
return	O
retval	int
;	O
}	O
