int	O
gsl_sf_bessel_Knu_scaled_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
||	O
nu	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
gsl_sf_result_e10	struct
result_e10	struct
;	O
int	O
status	int
=	O
gsl_sf_bessel_Knu_scaled_e10_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result_e10	struct
)	O
;	O
int	O
status2	int
=	O
gsl_sf_result_smash_e	function
(	O
&	O
result_e10	struct
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
status	int
,	O
status2	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_Knu_scaled_e10_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result_e10	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
||	O
nu	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR_E10	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
int	O
N	int
=	O
(	O
int	O
)	O
(	O
nu	double
+	O
0.5	int
)	O
;	O
double	O
mu	double
=	O
nu	double
-	O
N	int
;	O
double	O
K_mu	double
,	O
K_mup1	double
,	O
Kp_mu	double
;	O
double	O
K_nu	pointer
,	O
K_nup1	pointer
,	O
K_num1	double
;	O
int	O
n	int
,	O
e10	int
=	O
0	int
;	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
gsl_sf_bessel_K_scaled_temme	function
(	O
mu	double
,	O
x	double
,	O
&	O
K_mu	double
,	O
&	O
K_mup1	double
,	O
&	O
Kp_mu	double
)	O
;	O
}	O
else	O
{	O
gsl_sf_bessel_K_scaled_steed_temme_CF2	function
(	O
mu	double
,	O
x	double
,	O
&	O
K_mu	double
,	O
&	O
K_mup1	double
,	O
&	O
Kp_mu	double
)	O
;	O
}	O
K_nu	pointer
=	O
K_mu	double
;	O
K_nup1	pointer
=	O
K_mup1	double
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
N	int
;	O
n	int
++	O
)	O
{	O
K_num1	double
=	O
K_nu	pointer
;	O
K_nu	pointer
=	O
K_nup1	pointer
;	O
if	O
(	O
fabs	function
(	O
K_nu	pointer
)	O
>	O
GSL_SQRT_DBL_MAX	int
)	O
{	O
double	O
p	double
=	O
floor	function
(	O
log	function
(	O
fabs	function
(	O
K_nu	pointer
)	O
)	O
/	O
M_LN10	int
)	O
;	O
double	O
factor	double
=	O
pow	function
(	O
10.0	int
,	O
p	double
)	O
;	O
K_num1	double
/=	O
factor	double
;	O
K_nu	pointer
/=	O
factor	double
;	O
e10	int
+=	O
p	double
;	O
}	O
;	O
K_nup1	pointer
=	O
2.0	int
*	O
(	O
mu	double
+	O
n	int
+	O
1	int
)	O
/	O
x	double
*	O
K_nu	pointer
+	O
K_num1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
K_nu	pointer
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
N	int
+	O
4.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
result	pointer
->	O
e10	int
=	O
e10	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_Knu_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
gsl_sf_result	struct
b	double
;	O
int	O
stat_K	int
=	O
gsl_sf_bessel_Knu_scaled_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
b	double
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
-	O
x	double
,	O
0.0	int
,	O
b	double
.	O
val	double
,	O
b	double
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
int	O
gsl_sf_bessel_lnKnu_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
||	O
nu	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
nu	double
==	O
0.0	int
)	O
{	O
gsl_sf_result	struct
K_scaled	struct
;	O
gsl_sf_bessel_K0_scaled_e	function
(	O
x	double
,	O
&	O
K_scaled	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
x	double
+	O
log	function
(	O
fabs	function
(	O
K_scaled	struct
.	O
val	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
+	O
fabs	function
(	O
K_scaled	struct
.	O
err	double
/	O
K_scaled	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
&&	O
nu	double
>	O
1.0	int
)	O
{	O
double	O
ln_bound	double
;	O
gsl_sf_result	struct
lg_nu	struct
;	O
gsl_sf_lngamma_e	function
(	O
nu	double
,	O
&	O
lg_nu	struct
)	O
;	O
ln_bound	double
=	O
-	O
M_LN2	int
-	O
nu	double
*	O
log	function
(	O
0.5	int
*	O
x	double
)	O
+	O
lg_nu	struct
.	O
val	double
;	O
if	O
(	O
ln_bound	double
>	O
GSL_LOG_DBL_MAX	int
-	O
20.0	int
)	O
{	O
double	O
xi	double
=	O
0.25	int
*	O
x	double
*	O
x	double
;	O
double	O
sum	double
=	O
1.0	int
-	O
xi	double
/	O
(	O
nu	double
-	O
1.0	int
)	O
;	O
if	O
(	O
nu	double
>	O
2.0	int
)	O
sum	double
+=	O
(	O
xi	double
/	O
(	O
nu	double
-	O
1.0	int
)	O
)	O
*	O
(	O
xi	double
/	O
(	O
nu	double
-	O
2.0	int
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
ln_bound	double
+	O
log	function
(	O
sum	double
)	O
;	O
result	pointer
->	O
err	double
=	O
lg_nu	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
{	O
gsl_sf_result_e10	struct
K_scaled	struct
;	O
int	O
status	int
=	O
gsl_sf_bessel_Knu_scaled_e10_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
K_scaled	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
x	double
+	O
log	function
(	O
fabs	function
(	O
K_scaled	struct
.	O
val	double
)	O
)	O
+	O
K_scaled	struct
.	O
e10	int
*	O
M_LN10	int
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
+	O
fabs	function
(	O
K_scaled	struct
.	O
err	double
/	O
K_scaled	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_Knu_scaled	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Knu_scaled_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_Knu	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Knu_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_lnKnu	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_lnKnu_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
