typedef	O
struct	O
{	O
EPChar	pointer
FileName	pointer
;	O
EUint32	long
h	long
;	O
}	O
DtAUTOTOOLS_PROJECT	struct
;	O
ESint32	int
EDMAPROC	O
AUTOTOOLS_PROJECTbuildU32Z	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
,	O
EPChar	pointer
filename	pointer
)	O
{	O
DtAUTOTOOLS_PROJECT	struct
*	O
m	pointer
;	O
EChar	char
prj_name	array
[	O
80	int
]	O
,	O
ClassName	pointer
[	O
80	int
]	O
,	O
ModuleName	array
[	O
80	int
]	O
;	O
EChar	char
name_space	array
[	O
256	int
]	O
;	O
EChar	char
src_dir	array
[	O
128	int
]	O
,	O
aux	array
[	O
128	int
]	O
;	O
FILE	struct
*	O
f	pointer
;	O
OBJID	int
builder	int
;	O
ESint32	int
major_version	int
,	O
minor_version	int
;	O
EChar	char
ver_string	array
[	O
20	int
]	O
;	O
m	pointer
=	O
(	O
DtAUTOTOOLS_PROJECT	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
major_version	int
=	O
minor_version	int
=	O
0	int
;	O
edma_rprop3	function
(	O
id	int
,	O
"ClassName"	pointer
,	O
ClassName	pointer
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"NameSpace"	pointer
,	O
name_space	array
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"MajorVersion"	pointer
,	O
&	O
major_version	int
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"MinorVersion"	pointer
,	O
&	O
minor_version	int
)	O
;	O
snprintf	function
(	O
ver_string	array
,	O
20	int
,	O
"_%ld_%ld"	pointer
,	O
major_version	int
,	O
minor_version	int
)	O
;	O
sprintf	function
(	O
prj_name	array
,	O
"%s_v%s"	pointer
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"+ Working on dir : %s for class %s"	pointer
,	O
prj_name	array
,	O
ClassName	pointer
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
(	O
edma_smet3	function
(	O
"FILESYSTEM"	pointer
,	O
"CreateDirectory"	pointer
,	O
prj_name	array
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[ERROR] Can't create directory %s"	pointer
,	O
prj_name	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
src_dir	array
,	O
prj_name	array
)	O
;	O
strcat	function
(	O
src_dir	array
,	O
"/src"	pointer
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
(	O
edma_smet3	function
(	O
"FILESYSTEM"	pointer
,	O
"CreateDirectory"	pointer
,	O
src_dir	array
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[ERROR] Can't create directory %s"	pointer
,	O
src_dir	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sprintf	function
(	O
aux	array
,	O
"%s/configure.in"	pointer
,	O
prj_name	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Writing file: %s for project: %s"	pointer
,	O
aux	array
,	O
prj_name	array
)	O
;	O
if	O
(	O
(	O
f	pointer
=	O
fopen	function
(	O
aux	array
,	O
"wt"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't write configure.in"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
"dnl\n"	pointer
"dnl   Copyright (C) YEAR\n"	pointer
"dnl             by AUTHOR\n"	pointer
"dnl\n"	pointer
"dnl   This program is free software: you can redistribute it and/or modify\n"	pointer
"dnl   it under the terms of the GNU General Public License as published by\n"	pointer
"dnl   the Free Software Foundation, either version 3 of the License, or\n"	pointer
"dnl   (at your option) any later version.\n"	pointer
"dnl\n"	pointer
"dnl   This program is distributed in the hope that it will be useful,\n"	pointer
"dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"	pointer
"dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"	pointer
"dnl   GNU General Public License for more details.\n"	pointer
"dnl\n"	pointer
"dnl   You should have received a copy of the GNU General Public License\n"	pointer
"dnl   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"	pointer
"dnl\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nAC_INIT(src/%s%s_imp.c)"	pointer
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n\nAC_CONFIG_AUX_DIR(config)\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nAM_INIT_AUTOMAKE(EDMA_CLASS_%s,%ld.%ld.0)\n"	pointer
,	O
ClassName	pointer
,	O
major_version	int
,	O
minor_version	int
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nAC_PREFIX_DEFAULT(/usr/local)"	pointer
"\ndnl Checks for programs."	pointer
"\nAC_PROG_CXX"	pointer
"\nAC_PROG_AWK"	pointer
"\nAC_PROG_CC"	pointer
"\nAC_PROG_CPP"	pointer
"\nAC_PROG_INSTALL"	pointer
"\nAC_PROG_MAKE_SET"	pointer
"\nAC_PROG_LN_S"	pointer
"\nAC_LIBTOOL_DLOPEN"	pointer
"\nAC_DISABLE_STATIC"	pointer
"\nAM_PROG_LIBTOOL"	pointer
"\n"	pointer
"\ndnl Checks for libraries."	pointer
"\nAC_CHECK_LIB(dl,main)"	pointer
"\nAC_CHECK_LIB(EDMA, main)"	pointer
"\n"	pointer
"\ndnl How to check for our programs"	pointer
"\ndnl Be sure to not left any space between mactro and parenthesis"	pointer
"\nAC_CHECK_PROG(EDMACONFIG, edma-config, yes, no, $PATH)"	pointer
"\nif test ${EDMACONFIG} = no; then"	pointer
"\n	AC_MSG_WARN([---- Can't find edma-config                        ---])"	pointer
"\n	AC_MSG_WARN([---- Be sure it is installed and it's in your path ---])"	pointer
"\n	AC_MSG_ERROR([--- Aborting. edma-config needed. -------------------])"	pointer
"\nfi"	pointer
"\n"	pointer
"\ndnl Checks for header files."	pointer
"\nAC_C_CONST"	pointer
"\nAC_HEADER_STDC"	pointer
"\n"	pointer
"\ndnl Checks for typedefs, structures, and compiler characteristics."	pointer
"\n"	pointer
"\ndnl Checks for library functions."	pointer
"\ndnl AC_CHECK_FUNCS(strstr)"	pointer
"\nAC_MSG_RESULT(--- Building for $build_cpu in a $build_os)"	pointer
"\ncase \"$build_os\" in"	pointer
"\n	linux*)"	pointer
"\n		CFLAGS=\"-DLINUX \""	pointer
"\n		;;"	pointer
"\n"	pointer
"\n	*)"	pointer
"\n		AC_MSG_WARN([Unknow target OS. Build could fail])"	pointer
"\n	;;"	pointer
"\n"	pointer
"\nesac"	pointer
"\nif test ${CC} = gcc; then"	pointer
"\n	CFLAGS=\"$CFLAGS -DGCC\""	pointer
"\nfi"	pointer
"\n"	pointer
"\ndnl Test prefix directory"	pointer
"\nif test \"${prefix}\" = NONE; then"	pointer
"\n	AC_MSG_RESULT([prefix not defined... using default_prefix])"	pointer
"\n	mi_prefix=${ac_default_prefix}"	pointer
"\nelse"	pointer
"\n	mi_prefix=${prefix}"	pointer
"\nfi"	pointer
"\n"	pointer
"\nCFLAGS=\"$CFLAGS -c -fPIC -I ${mi_prefix}/include\""	pointer
"\n"	pointer
"\nAC_MSG_RESULT([--- Mi CFLAGS = ${CFLAGS} ---])"	pointer
"\n"	pointer
"\nAC_OUTPUT(Makefile src/Makefile)"	pointer
""	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
sprintf	function
(	O
aux	array
,	O
"%s/Makefile.am"	pointer
,	O
prj_name	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"+ Creating %s file"	pointer
,	O
aux	array
)	O
;	O
if	O
(	O
(	O
f	pointer
=	O
fopen	function
(	O
aux	array
,	O
"wt"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't write Makefile.am"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
"#\n"	pointer
"#   Copyright (C) YEAR\n"	pointer
"#             by Author\n"	pointer
"#\n"	pointer
"#   This program is free software: you can redistribute it and/or modify\n"	pointer
"#   it under the terms of the GNU General Public License as published by\n"	pointer
"#   the Free Software Foundation, either version 3 of the License, or\n"	pointer
"#   (at your option) any later version.\n"	pointer
"#\n"	pointer
"#   This program is distributed in the hope that it will be useful,\n"	pointer
"#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"	pointer
"#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"	pointer
"#   GNU General Public License for more details.\n"	pointer
"#\n"	pointer
"#   You should have received a copy of the GNU General Public License\n"	pointer
"#   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"	pointer
"#\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"SUBDIRS = src"	pointer
"\n"	pointer
"\nEXTRA_DIST= config"	pointer
"\n## Deleted these files when make maintainer-clean"	pointer
"\nMAINTAINERCLEANFILES =  Makefile.in aclocal.m4 configure config.cache"	pointer
"\n"	pointer
"\nmaintainer-clean-local:"	pointer
"\n\trm -fr $(ac_aux_dir)"	pointer
"\n\trm -f @PACKAGE@-*.tar.gz"	pointer
""	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
sprintf	function
(	O
aux	array
,	O
"%s/src/Makefile.am"	pointer
,	O
prj_name	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"+ Creating %s dir"	pointer
,	O
aux	array
)	O
;	O
if	O
(	O
(	O
f	pointer
=	O
fopen	function
(	O
aux	array
,	O
"wt"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't write src/Makefile.am"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_rprop3	function
(	O
id	int
,	O
"ModuleName"	pointer
,	O
ModuleName	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"lib_LTLIBRARIES = lib%s.la\n\n"	pointer
,	O
ClassName	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"NAMESPACE = %s\n"	pointer
,	O
name_space	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"idfdir=${prefix}/share/edma/idf/${NAMESPACE}\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"libdir=${exec_prefix}/lib/edma/${NAMESPACE}\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"EXTRA_DIST = %s%s.idf %s%s.ines\n"	pointer
,	O
ClassName	pointer
,	O
ver_string	array
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"idf_DATA = %s%s.idf\n\n"	pointer
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"lib%s_la_SOURCES = %s%s_imp.c\n"	pointer
,	O
ClassName	pointer
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"lib%s_la_LDFLAGS = -version-info %ld:%ld\n\n"	pointer
,	O
ClassName	pointer
,	O
major_version	int
,	O
minor_version	int
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"MAINTAINERCLEANFILES =  Makefile.in config.h.in stamp-h.in\n"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n"	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
if	O
(	O
(	O
builder	int
=	O
edma_new_obj	function
(	O
"EDMAIDF_BUILDER"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't create IDF file for class %s"	pointer
,	O
ClassName	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sprintf	function
(	O
aux	array
,	O
"%s/src/%s%s.idf"	pointer
,	O
prj_name	array
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
edma_met3	function
(	O
builder	int
,	O
"build"	pointer
,	O
id	int
,	O
aux	array
)	O
;	O
edma_free_obj	function
(	O
builder	int
)	O
;	O
if	O
(	O
(	O
builder	int
=	O
edma_new_obj	function
(	O
"EDMA_C_IMP_BUILDER"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't create C skel file for class %s"	pointer
,	O
ClassName	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sprintf	function
(	O
aux	array
,	O
"%s/src/%s%s_imp.c"	pointer
,	O
prj_name	array
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
edma_met3	function
(	O
builder	int
,	O
"build"	pointer
,	O
id	int
,	O
aux	array
)	O
;	O
edma_free_obj	function
(	O
builder	int
)	O
;	O
if	O
(	O
(	O
builder	int
=	O
edma_new_obj	function
(	O
"EDMA_INES_BUILDER"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't create ines file for class %s"	pointer
,	O
ClassName	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
sprintf	function
(	O
aux	array
,	O
"%s/src/%s%s.ines"	pointer
,	O
prj_name	array
,	O
ClassName	pointer
,	O
ver_string	array
)	O
;	O
edma_met3	function
(	O
builder	int
,	O
"build"	pointer
,	O
id	int
,	O
aux	array
)	O
;	O
edma_free_obj	function
(	O
builder	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
" Project Built...."	pointer
)	O
;	O
return	O
0	int
;	O
}	O
