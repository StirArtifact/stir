struct	O
name_val	struct
{	O
char	O
name	pointer
[	O
NAME_LENGTH_MAXIMUM	int
]	O
;	O
int	O
val	array
;	O
}	O
;	O
static	O
const	O
struct	O
name_val	struct
const	O
month_names	array
[	O
]	O
=	O
{	O
{	O
"jan"	pointer
,	O
0	int
}	O
,	O
{	O
"feb"	pointer
,	O
1	int
}	O
,	O
{	O
"mar"	pointer
,	O
2	int
}	O
,	O
{	O
"apr"	pointer
,	O
3	int
}	O
,	O
{	O
"may"	pointer
,	O
4	int
}	O
,	O
{	O
"jun"	pointer
,	O
5	int
}	O
,	O
{	O
"jul"	pointer
,	O
6	int
}	O
,	O
{	O
"aug"	pointer
,	O
7	int
}	O
,	O
{	O
"sep"	pointer
,	O
8	int
}	O
,	O
{	O
"oct"	pointer
,	O
9	int
}	O
,	O
{	O
"nov"	pointer
,	O
10	int
}	O
,	O
{	O
"dec"	pointer
,	O
11	int
}	O
,	O
{	O
""	pointer
,	O
TM_UNDEFINED	O
}	O
}	O
;	O
static	O
const	O
struct	O
name_val	struct
const	O
weekday_names	array
[	O
]	O
=	O
{	O
{	O
"sun"	pointer
,	O
0	int
}	O
,	O
{	O
"mon"	pointer
,	O
1	int
}	O
,	O
{	O
"tue"	pointer
,	O
2	int
}	O
,	O
{	O
"wed"	pointer
,	O
3	int
}	O
,	O
{	O
"thu"	pointer
,	O
4	int
}	O
,	O
{	O
"fri"	pointer
,	O
5	int
}	O
,	O
{	O
"sat"	pointer
,	O
6	int
}	O
,	O
{	O
""	pointer
,	O
TM_UNDEFINED	O
}	O
}	O
;	O
static	O
const	O
struct	O
name_val	struct
const	O
zone_names	array
[	O
]	O
=	O
{	O
zs	O
(	O
-	O
1000	int
,	O
"hst"	pointer
)	O
,	O
zd	O
(	O
-	O
1000	int
,	O
"hast"	pointer
,	O
"hadt"	pointer
)	O
,	O
zd	O
(	O
-	O
900	int
,	O
"akst"	pointer
,	O
"akdt"	pointer
)	O
,	O
zd	O
(	O
-	O
800	int
,	O
"pst"	pointer
,	O
"pdt"	pointer
)	O
,	O
zd	O
(	O
-	O
700	int
,	O
"mst"	pointer
,	O
"mdt"	pointer
)	O
,	O
zd	O
(	O
-	O
600	int
,	O
"cst"	pointer
,	O
"cdt"	pointer
)	O
,	O
zd	O
(	O
-	O
500	int
,	O
"est"	pointer
,	O
"edt"	pointer
)	O
,	O
zd	O
(	O
-	O
400	int
,	O
"ast"	pointer
,	O
"adt"	pointer
)	O
,	O
zd	O
(	O
-	O
330	int
,	O
"nst"	pointer
,	O
"ndt"	pointer
)	O
,	O
zs	O
(	O
000	int
,	O
"utc"	pointer
)	O
,	O
zs	O
(	O
000	int
,	O
"cut"	pointer
)	O
,	O
zs	O
(	O
000	int
,	O
"ut"	pointer
)	O
,	O
zs	O
(	O
000	int
,	O
"z"	pointer
)	O
,	O
zd	O
(	O
000	int
,	O
"gmt"	pointer
,	O
"bst"	pointer
)	O
,	O
zs	O
(	O
000	int
,	O
"wet"	pointer
)	O
,	O
zs	O
(	O
100	int
,	O
"met"	pointer
)	O
,	O
zs	O
(	O
100	int
,	O
"cet"	pointer
)	O
,	O
zs	O
(	O
200	int
,	O
"eet"	pointer
)	O
,	O
zs	O
(	O
530	int
,	O
"ist"	pointer
)	O
,	O
zd	O
(	O
900	int
,	O
"jst"	pointer
,	O
"jdt"	pointer
)	O
,	O
zd	O
(	O
900	int
,	O
"kst"	pointer
,	O
"kdt"	pointer
)	O
,	O
zd	O
(	O
1200	int
,	O
"nzst"	pointer
,	O
"nzdt"	pointer
)	O
,	O
{	O
"lt"	pointer
,	O
1	int
}	O
,	O
{	O
""	pointer
,	O
-	O
1	int
}	O
}	O
;	O
static	O
int	O
lookup	function
(	O
char	O
const	O
*	O
s	pointer
,	O
struct	O
name_val	struct
const	O
table	array
[	O
]	O
)	O
{	O
int	O
j	int
;	O
char	O
buf	pointer
[	O
NAME_LENGTH_MAXIMUM	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
NAME_LENGTH_MAXIMUM	int
;	O
j	int
++	O
)	O
{	O
unsigned	O
char	O
c	int
=	O
*	O
s	pointer
++	O
;	O
buf	pointer
[	O
j	int
]	O
=	O
isupper	function
(	O
c	int
)	O
?	O
tolower	function
(	O
c	int
)	O
:	O
c	int
;	O
if	O
(	O
!	O
isalpha	function
(	O
c	int
)	O
)	O
break	O
;	O
}	O
for	O
(	O
;	O
table	array
[	O
0	int
]	O
.	O
name	pointer
[	O
0	int
]	O
;	O
table	array
++	O
)	O
for	O
(	O
j	int
=	O
0	int
;	O
buf	pointer
[	O
j	int
]	O
==	O
table	array
[	O
0	int
]	O
.	O
name	pointer
[	O
j	int
]	O
;	O
)	O
if	O
(	O
++	O
j	int
==	O
NAME_LENGTH_MAXIMUM	int
||	O
!	O
table	array
[	O
0	int
]	O
.	O
name	pointer
[	O
j	int
]	O
)	O
goto	O
done	bool
;	O
done	bool
:	O
return	O
table	array
[	O
0	int
]	O
.	O
val	array
;	O
}	O
static	O
void	O
undefine	function
(	O
struct	O
partime	struct
*	O
t	pointer
)	O
{	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_min	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_mday	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
=	O
t	pointer
->	O
tm	struct
.	O
tm_yday	int
=	O
t	pointer
->	O
ymodulus	int
=	O
t	pointer
->	O
yweek	int
=	O
TM_UNDEFINED	O
;	O
t	pointer
->	O
zone	long
=	O
TM_UNDEFINED_ZONE	O
;	O
}	O
static	O
char	O
const	O
*	O
const	O
patterns	array
[	O
]	O
=	O
{	O
"E_n_y"	pointer
,	O
"x"	pointer
,	O
"E_n"	pointer
,	O
"n_E"	pointer
,	O
"n"	pointer
,	O
"t:m:s_A"	pointer
,	O
"t:m_A"	pointer
,	O
"t_A"	pointer
,	O
"y/N/D$"	pointer
,	O
"y-N-D$"	pointer
,	O
"4ND$"	pointer
,	O
"Y-N$"	pointer
,	O
"RND$"	pointer
,	O
"-R=N$"	pointer
,	O
"-R$"	pointer
,	O
"--N=D$"	pointer
,	O
"N=DT"	pointer
,	O
"--N$"	pointer
,	O
"---D$"	pointer
,	O
"DT"	pointer
,	O
"Y-d$"	pointer
,	O
"4d$"	pointer
,	O
"R=d$"	pointer
,	O
"-d$"	pointer
,	O
"dT"	pointer
,	O
"y-W-X"	pointer
,	O
"yWX"	pointer
,	O
"y=W"	pointer
,	O
"-r-W-X"	pointer
,	O
"r-W-XT"	pointer
,	O
"-rWX"	pointer
,	O
"rWXT"	pointer
,	O
"-W=X"	pointer
,	O
"W=XT"	pointer
,	O
"-W"	pointer
,	O
"-w-X"	pointer
,	O
"w-XT"	pointer
,	O
"---X$"	pointer
,	O
"XT"	pointer
,	O
"4$"	pointer
,	O
"T"	pointer
,	O
"h:m:s$"	pointer
,	O
"hms$"	pointer
,	O
"h:m$"	pointer
,	O
"hm$"	pointer
,	O
"h$"	pointer
,	O
"-m:s$"	pointer
,	O
"-ms$"	pointer
,	O
"-m$"	pointer
,	O
"--s$"	pointer
,	O
"Y"	pointer
,	O
"Z"	pointer
,	O
NULL	O
}	O
;	O
static	O
char	O
const	O
*	O
parse_fixed	function
(	O
char	O
const	O
*	O
s	pointer
,	O
int	O
digits	int
,	O
int	O
*	O
res	pointer
)	O
{	O
int	O
n	int
=	O
0	int
;	O
char	O
const	O
*	O
lim	pointer
=	O
s	pointer
+	O
digits	int
;	O
while	O
(	O
s	pointer
<	O
lim	pointer
)	O
{	O
unsigned	O
d	int
=	O
*	O
s	pointer
++	O
-	O
'0'	O
;	O
if	O
(	O
9	int
<	O
d	int
)	O
return	O
NULL	O
;	O
n	int
=	O
10	int
*	O
n	int
+	O
d	int
;	O
}	O
*	O
res	pointer
=	O
n	int
;	O
return	O
s	pointer
;	O
}	O
static	O
char	O
const	O
*	O
parse_ranged	function
(	O
char	O
const	O
*	O
s	pointer
,	O
int	O
digits	int
,	O
int	O
lo	int
,	O
int	O
hi	int
,	O
int	O
*	O
res	pointer
)	O
{	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
digits	int
,	O
res	pointer
)	O
;	O
return	O
s	pointer
&&	O
lo	int
<=	O
*	O
res	pointer
&&	O
*	O
res	pointer
<=	O
hi	int
?	O
s	pointer
:	O
NULL	O
;	O
}	O
static	O
char	O
const	O
*	O
parse_decimal	function
(	O
char	O
const	O
*	O
s	pointer
,	O
int	O
digits	int
,	O
int	O
lo	int
,	O
int	O
hi	int
,	O
int	O
resolution	int
,	O
int	O
*	O
res	pointer
,	O
int	O
*	O
fres	pointer
)	O
{	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
digits	int
,	O
res	pointer
)	O
;	O
*	O
fres	pointer
=	O
0	int
;	O
if	O
(	O
s	pointer
&&	O
lo	int
<=	O
*	O
res	pointer
&&	O
*	O
res	pointer
<=	O
hi	int
)	O
{	O
int	O
f	pointer
=	O
0	int
;	O
if	O
(	O
(	O
s	pointer
[	O
0	int
]	O
==	O
','	O
||	O
s	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
1	int
]	O
)	O
)	O
{	O
char	O
const	O
*	O
s1	pointer
=	O
++	O
s	pointer
;	O
int	O
num10	int
=	O
0	int
,	O
denom10	int
=	O
10	int
,	O
product	int
;	O
while	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
++	O
s	pointer
)	O
)	O
denom10	int
*=	O
10	int
;	O
s	pointer
=	O
parse_fixed	function
(	O
s1	pointer
,	O
s	pointer
-	O
s1	pointer
,	O
&	O
num10	int
)	O
;	O
product	int
=	O
num10	int
*	O
resolution	int
;	O
f	pointer
=	O
(	O
product	int
+	O
(	O
denom10	int
>>	O
1	int
)	O
)	O
/	O
denom10	int
;	O
f	pointer
-=	O
f	pointer
&	O
(	O
product	int
%	O
denom10	int
==	O
denom10	int
>>	O
1	int
)	O
;	O
if	O
(	O
f	pointer
<	O
0	int
||	O
product	int
/	O
resolution	int
!=	O
num10	int
)	O
return	O
NULL	O
;	O
}	O
*	O
fres	pointer
=	O
f	pointer
;	O
return	O
s	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
const	O
*	O
parzone	function
(	O
char	O
const	O
*	O
s	pointer
,	O
long	O
*	O
zone	long
)	O
{	O
char	O
sign	char
;	O
int	O
hh	int
,	O
mm	int
,	O
ss	int
;	O
int	O
minutesEastOfUTC	int
;	O
long	O
offset	long
,	O
z	long
;	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'-'	O
:	O
case	O
'+'	O
:	O
z	long
=	O
0	int
;	O
break	O
;	O
default	O
:	O
minutesEastOfUTC	int
=	O
lookup	function
(	O
s	pointer
,	O
zone_names	array
)	O
;	O
if	O
(	O
minutesEastOfUTC	int
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
while	O
(	O
isalpha	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
if	O
(	O
minutesEastOfUTC	int
==	O
1	int
)	O
{	O
*	O
zone	long
=	O
TM_LOCAL_ZONE	O
;	O
return	O
s	pointer
;	O
}	O
z	long
=	O
minutesEastOfUTC	int
*	O
60L	int
;	O
if	O
(	O
(	O
s	pointer
[	O
-	O
1	int
]	O
==	O
'T'	O
||	O
s	pointer
[	O
-	O
1	int
]	O
==	O
't'	O
)	O
&&	O
(	O
s	pointer
[	O
-	O
2	int
]	O
==	O
'S'	O
||	O
s	pointer
[	O
-	O
2	int
]	O
==	O
's'	O
)	O
&&	O
(	O
s	pointer
[	O
-	O
3	int
]	O
==	O
'D'	O
||	O
s	pointer
[	O
-	O
3	int
]	O
==	O
't'	O
)	O
)	O
goto	O
trailing_dst	O
;	O
while	O
(	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
if	O
(	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'D'	O
||	O
s	pointer
[	O
0	int
]	O
==	O
'd'	O
)	O
&&	O
(	O
s	pointer
[	O
1	int
]	O
==	O
'S'	O
||	O
s	pointer
[	O
1	int
]	O
==	O
's'	O
)	O
&&	O
(	O
s	pointer
[	O
2	int
]	O
==	O
'T'	O
||	O
s	pointer
[	O
2	int
]	O
==	O
't'	O
)	O
)	O
{	O
s	pointer
+=	O
3	int
;	O
trailing_dst	O
:	O
*	O
zone	long
=	O
z	long
+	O
60	int
*	O
60	int
;	O
return	O
s	pointer
;	O
}	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'-'	O
:	O
case	O
'+'	O
:	O
break	O
;	O
default	O
:	O
return	O
s	pointer
;	O
}	O
}	O
sign	char
=	O
*	O
s	pointer
++	O
;	O
if	O
(	O
!	O
(	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
23	int
,	O
&	O
hh	int
)	O
)	O
)	O
return	O
NULL	O
;	O
mm	int
=	O
ss	int
=	O
0	int
;	O
if	O
(	O
*	O
s	pointer
==	O
':'	O
)	O
s	pointer
++	O
;	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
{	O
if	O
(	O
!	O
(	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
59	int
,	O
&	O
mm	int
)	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
*	O
s	pointer
==	O
':'	O
&&	O
s	pointer
[	O
-	O
3	int
]	O
==	O
':'	O
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
1	int
]	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
+	O
1	int
,	O
2	int
,	O
0	int
,	O
59	int
,	O
&	O
ss	int
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
return	O
NULL	O
;	O
offset	long
=	O
(	O
hh	int
*	O
60	int
+	O
mm	int
)	O
*	O
60L	int
+	O
ss	int
;	O
*	O
zone	long
=	O
z	long
+	O
(	O
sign	char
==	O
'-'	O
?	O
-	O
offset	long
:	O
offset	long
)	O
;	O
return	O
s	pointer
;	O
}	O
static	O
char	O
const	O
*	O
parse_pattern_letter	function
(	O
char	O
const	O
*	O
s	pointer
,	O
int	O
c	int
,	O
struct	O
partime	struct
*	O
t	pointer
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'$'	O
:	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
return	O
NULL	O
;	O
break	O
;	O
case	O
'-'	O
:	O
case	O
'/'	O
:	O
case	O
':'	O
:	O
if	O
(	O
*	O
s	pointer
++	O
!=	O
c	int
)	O
return	O
NULL	O
;	O
break	O
;	O
case	O
'4'	O
:	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
4	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
)	O
;	O
break	O
;	O
case	O
'='	O
:	O
s	pointer
+=	O
*	O
s	pointer
==	O
'-'	O
;	O
break	O
;	O
case	O
'A'	O
:	O
switch	O
(	O
*	O
s	pointer
++	O
)	O
{	O
case	O
'A'	O
:	O
case	O
'a'	O
:	O
if	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
==	O
12	int
)	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
=	O
0	int
;	O
break	O
;	O
case	O
'P'	O
:	O
case	O
'p'	O
:	O
if	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
!=	O
12	int
)	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
+=	O
12	int
;	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'M'	O
:	O
case	O
'm'	O
:	O
s	pointer
++	O
;	O
break	O
;	O
}	O
if	O
(	O
isalnum	function
(	O
*	O
s	pointer
)	O
)	O
return	O
NULL	O
;	O
break	O
;	O
case	O
'D'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
2	int
,	O
1	int
,	O
31	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_mday	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
3	int
,	O
1	int
,	O
366	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_yday	int
)	O
;	O
t	pointer
->	O
tm	struct
.	O
tm_yday	int
--	O
;	O
break	O
;	O
case	O
'E'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
1	int
]	O
)	O
)	O
+	O
1	int
,	O
1	int
,	O
31	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_mday	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
{	O
int	O
frac	int
;	O
s	pointer
=	O
parse_decimal	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
23	int
,	O
60	int
*	O
60	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
,	O
&	O
frac	int
)	O
;	O
t	pointer
->	O
tm	struct
.	O
tm_min	int
=	O
frac	int
/	O
60	int
;	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
=	O
frac	int
%	O
60	int
;	O
}	O
break	O
;	O
case	O
'm'	O
:	O
s	pointer
=	O
parse_decimal	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
59	int
,	O
60	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_min	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
!	O
TM_DEFINED	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
=	O
lookup	function
(	O
s	pointer
,	O
month_names	array
)	O
)	O
)	O
return	O
NULL	O
;	O
while	O
(	O
isalpha	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
break	O
;	O
case	O
'N'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
2	int
,	O
1	int
,	O
12	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
)	O
;	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
--	O
;	O
break	O
;	O
case	O
'r'	O
:	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
1	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
)	O
;	O
t	pointer
->	O
ymodulus	int
=	O
10	int
;	O
break	O
;	O
case_R	O
:	O
case	O
'R'	O
:	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
2	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
)	O
;	O
t	pointer
->	O
ymodulus	int
=	O
100	int
;	O
break	O
;	O
case	O
's'	O
:	O
{	O
int	O
frac	int
;	O
s	pointer
=	O
parse_decimal	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
60	int
,	O
1	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
,	O
&	O
frac	int
)	O
;	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
+=	O
frac	int
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
switch	O
(	O
*	O
s	pointer
++	O
)	O
{	O
case	O
'T'	O
:	O
case	O
't'	O
:	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
break	O
;	O
case	O
't'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
1	int
]	O
)	O
)	O
+	O
1	int
,	O
1	int
,	O
12	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
switch	O
(	O
*	O
s	pointer
++	O
)	O
{	O
case	O
'W'	O
:	O
case	O
'w'	O
:	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
break	O
;	O
case	O
'W'	O
:	O
switch	O
(	O
*	O
s	pointer
++	O
)	O
{	O
case	O
'W'	O
:	O
case	O
'w'	O
:	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
2	int
,	O
0	int
,	O
53	int
,	O
&	O
t	pointer
->	O
yweek	int
)	O
;	O
break	O
;	O
case	O
'X'	O
:	O
s	pointer
=	O
parse_ranged	function
(	O
s	pointer
,	O
1	int
,	O
1	int
,	O
7	int
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
)	O
;	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
%=	O
7	int
;	O
break	O
;	O
case	O
'x'	O
:	O
if	O
(	O
!	O
TM_DEFINED	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
=	O
lookup	function
(	O
s	pointer
,	O
weekday_names	array
)	O
)	O
)	O
return	O
NULL	O
;	O
while	O
(	O
isalpha	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
break	O
;	O
case	O
'y'	O
:	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
0	int
]	O
)	O
&&	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
1	int
]	O
)	O
&&	O
!	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
2	int
]	O
)	O
)	O
goto	O
case_R	O
;	O
case	O
'Y'	O
:	O
{	O
int	O
len	char
=	O
0	int
;	O
while	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
s	pointer
[	O
len	char
]	O
)	O
)	O
len	char
++	O
;	O
if	O
(	O
len	char
<	O
4	int
)	O
return	O
NULL	O
;	O
s	pointer
=	O
parse_fixed	function
(	O
s	pointer
,	O
len	char
,	O
&	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
)	O
;	O
}	O
break	O
;	O
case	O
'Z'	O
:	O
s	pointer
=	O
parzone	function
(	O
s	pointer
,	O
&	O
t	pointer
->	O
zone	long
)	O
;	O
break	O
;	O
case	O
'_'	O
:	O
while	O
(	O
!	O
isalnum	function
(	O
*	O
s	pointer
)	O
&&	O
*	O
s	pointer
)	O
s	pointer
++	O
;	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
return	O
s	pointer
;	O
}	O
static	O
char	O
const	O
*	O
parse_prefix	function
(	O
char	O
const	O
*	O
str	pointer
,	O
struct	O
partime	struct
*	O
t	pointer
,	O
int	O
*	O
pi	pointer
)	O
{	O
int	O
i	int
=	O
*	O
pi	pointer
;	O
char	O
const	O
*	O
pat	pointer
;	O
unsigned	O
char	O
c	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
return	O
NULL	O
;	O
while	O
(	O
!	O
isalnum	function
(	O
c	int
=	O
*	O
str	pointer
)	O
&&	O
c	int
!=	O
'-'	O
&&	O
c	int
!=	O
'+'	O
)	O
{	O
if	O
(	O
!	O
c	int
)	O
{	O
undefine	function
(	O
t	pointer
)	O
;	O
*	O
pi	pointer
=	O
-	O
1	int
;	O
return	O
str	pointer
;	O
}	O
str	pointer
++	O
;	O
}	O
while	O
(	O
(	O
pat	pointer
=	O
patterns	array
[	O
i	int
++	O
]	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
const	O
*	O
s	pointer
=	O
str	pointer
;	O
undefine	function
(	O
t	pointer
)	O
;	O
do	O
{	O
if	O
(	O
!	O
(	O
c	int
=	O
*	O
pat	pointer
++	O
)	O
)	O
{	O
*	O
pi	pointer
=	O
i	int
;	O
return	O
s	pointer
;	O
}	O
}	O
while	O
(	O
(	O
s	pointer
=	O
parse_pattern_letter	function
(	O
s	pointer
,	O
c	int
,	O
t	pointer
)	O
)	O
!=	O
NULL	O
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
merge_partime	function
(	O
struct	O
partime	struct
*	O
t	pointer
,	O
struct	O
partime	struct
const	O
*	O
u	struct
)	O
{	O
if	O
(	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
,	O
u	struct
->	O
tm	struct
.	O
tm_sec	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_min	int
,	O
u	struct
->	O
tm	struct
.	O
tm_min	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
,	O
u	struct
->	O
tm	struct
.	O
tm_hour	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_mday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_mday	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
,	O
u	struct
->	O
tm	struct
.	O
tm_mon	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
,	O
u	struct
->	O
tm	struct
.	O
tm_year	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_wday	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_yday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_yday	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
ymodulus	int
,	O
u	struct
->	O
ymodulus	int
)	O
||	O
conflict	O
(	O
t	pointer
->	O
yweek	int
,	O
u	struct
->	O
yweek	int
)	O
||	O
(	O
t	pointer
->	O
zone	long
!=	O
u	struct
->	O
zone	long
&&	O
t	pointer
->	O
zone	long
!=	O
TM_UNDEFINED_ZONE	O
&&	O
u	struct
->	O
zone	long
!=	O
TM_UNDEFINED_ZONE	O
)	O
)	O
return	O
-	O
1	int
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_sec	int
,	O
u	struct
->	O
tm	struct
.	O
tm_sec	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_min	int
,	O
u	struct
->	O
tm	struct
.	O
tm_min	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_hour	int
,	O
u	struct
->	O
tm	struct
.	O
tm_hour	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_mday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_mday	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_mon	int
,	O
u	struct
->	O
tm	struct
.	O
tm_mon	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_year	int
,	O
u	struct
->	O
tm	struct
.	O
tm_year	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_wday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_wday	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
tm	struct
.	O
tm_yday	int
,	O
u	struct
->	O
tm	struct
.	O
tm_yday	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
ymodulus	int
,	O
u	struct
->	O
ymodulus	int
)	O
;	O
merge_	O
(	O
t	pointer
->	O
yweek	int
,	O
u	struct
->	O
yweek	int
)	O
;	O
if	O
(	O
u	struct
->	O
zone	long
!=	O
TM_UNDEFINED_ZONE	O
)	O
t	pointer
->	O
zone	long
=	O
u	struct
->	O
zone	long
;	O
return	O
0	int
;	O
}	O
char	O
const	O
*	O
partime	struct
(	O
char	O
const	O
*	O
s	pointer
,	O
struct	O
partime	struct
*	O
t	pointer
)	O
{	O
struct	O
partime	struct
p	pointer
;	O
undefine	function
(	O
t	pointer
)	O
;	O
while	O
(	O
*	O
s	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
char	O
const	O
*	O
s1	pointer
;	O
do	O
{	O
if	O
(	O
!	O
(	O
s1	pointer
=	O
parse_prefix	function
(	O
s	pointer
,	O
&	O
p	pointer
,	O
&	O
i	int
)	O
)	O
)	O
return	O
s	pointer
;	O
}	O
while	O
(	O
PROB	O
(	O
merge_partime	function
(	O
t	pointer
,	O
&	O
p	pointer
)	O
)	O
)	O
;	O
s	pointer
=	O
s1	pointer
;	O
}	O
return	O
s	pointer
;	O
}	O
