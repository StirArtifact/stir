static	O
void	O
transitive_closure	function
(	O
unsigned	O
*	O
R	pointer
,	O
int	O
n	long
)	O
{	O
register	O
size_t	long
rowsize	long
;	O
register	O
unsigned	O
mask	int
;	O
register	O
unsigned	O
*	O
rowj	pointer
;	O
register	O
unsigned	O
*	O
rp	pointer
;	O
register	O
unsigned	O
*	O
rend	pointer
;	O
register	O
unsigned	O
*	O
ccol	pointer
;	O
unsigned	O
*	O
relend	pointer
;	O
unsigned	O
*	O
cword	pointer
;	O
unsigned	O
*	O
rowi	pointer
;	O
rowsize	long
=	O
WORDSIZE	O
(	O
n	long
)	O
*	O
sizeof	O
(	O
unsigned	O
)	O
;	O
relend	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
R	pointer
+	O
(	O
n	long
*	O
rowsize	long
)	O
)	O
;	O
cword	pointer
=	O
R	pointer
;	O
mask	int
=	O
1	int
;	O
rowi	pointer
=	O
R	pointer
;	O
while	O
(	O
rowi	pointer
<	O
relend	pointer
)	O
{	O
ccol	pointer
=	O
cword	pointer
;	O
rowj	pointer
=	O
R	pointer
;	O
while	O
(	O
rowj	pointer
<	O
relend	pointer
)	O
{	O
if	O
(	O
*	O
ccol	pointer
&	O
mask	int
)	O
{	O
rp	pointer
=	O
rowi	pointer
;	O
rend	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	pointer
+	O
rowsize	long
)	O
;	O
while	O
(	O
rowj	pointer
<	O
rend	pointer
)	O
*	O
rowj	pointer
++	O
|=	O
*	O
rp	pointer
++	O
;	O
}	O
else	O
{	O
rowj	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	pointer
+	O
rowsize	long
)	O
;	O
}	O
ccol	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ccol	pointer
+	O
rowsize	long
)	O
;	O
}	O
mask	int
<<=	O
1	int
;	O
if	O
(	O
mask	int
==	O
0	int
)	O
{	O
mask	int
=	O
1	int
;	O
cword	pointer
++	O
;	O
}	O
rowi	pointer
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowi	pointer
+	O
rowsize	long
)	O
;	O
}	O
}	O
struct	O
cflow_depmap	struct
{	O
size_t	long
nrows	long
;	O
size_t	long
rowlen	long
;	O
unsigned	O
r	array
[	O
1	int
]	O
;	O
}	O
;	O
cflow_depmap_t	pointer
depmap_alloc	function
(	O
size_t	long
count	long
)	O
{	O
size_t	long
size	long
=	O
(	O
count	long
+	O
BITS_PER_WORD	O
-	O
1	int
)	O
/	O
BITS_PER_WORD	O
;	O
cflow_depmap_t	pointer
dmap	pointer
=	O
xzalloc	function
(	O
sizeof	O
(	O
*	O
dmap	pointer
)	O
-	O
1	int
+	O
count	long
*	O
size	long
*	O
sizeof	O
(	O
unsigned	O
)	O
)	O
;	O
dmap	pointer
->	O
nrows	long
=	O
count	long
;	O
dmap	pointer
->	O
rowlen	long
=	O
size	long
;	O
return	O
dmap	pointer
;	O
}	O
static	O
unsigned	O
*	O
depmap_rowptr	function
(	O
cflow_depmap_t	pointer
dmap	pointer
,	O
size_t	long
row	long
)	O
{	O
return	O
dmap	pointer
->	O
r	array
+	O
dmap	pointer
->	O
rowlen	long
*	O
row	long
;	O
}	O
void	O
depmap_set	function
(	O
cflow_depmap_t	pointer
dmap	pointer
,	O
size_t	long
row	long
,	O
size_t	long
col	long
)	O
{	O
unsigned	O
*	O
rptr	pointer
=	O
depmap_rowptr	function
(	O
dmap	pointer
,	O
row	long
)	O
;	O
SETBIT	O
(	O
rptr	pointer
,	O
col	long
)	O
;	O
}	O
int	O
depmap_isset	function
(	O
cflow_depmap_t	pointer
dmap	pointer
,	O
size_t	long
row	long
,	O
size_t	long
col	long
)	O
{	O
unsigned	O
*	O
rptr	pointer
=	O
depmap_rowptr	function
(	O
dmap	pointer
,	O
row	long
)	O
;	O
return	O
BITISSET	O
(	O
rptr	pointer
,	O
col	long
)	O
;	O
}	O
void	O
depmap_tc	function
(	O
cflow_depmap_t	pointer
dmap	pointer
)	O
{	O
transitive_closure	function
(	O
dmap	pointer
->	O
r	array
,	O
dmap	pointer
->	O
nrows	long
)	O
;	O
}	O
