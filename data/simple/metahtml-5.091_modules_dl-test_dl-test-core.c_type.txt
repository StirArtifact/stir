typedef	O
void	O
Function	function
(	O
char	O
*	O
)	O
;	O
int	O
necessary_symbol	int
=	O
4	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
void	O
*	O
handle	pointer
=	O
(	O
void	O
*	O
)	O
dlopen	function
(	O
"./dl-test-lib.so"	pointer
,	O
RTLD_LAZY	int
)	O
;	O
if	O
(	O
handle	pointer
==	O
(	O
void	O
*	O
)	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Error after dlopen(): %s\n"	pointer
,	O
dlerror	function
(	O
)	O
)	O
;	O
else	O
{	O
Function	function
*	O
func	pointer
=	O
(	O
Function	function
*	O
)	O
NULL	O
;	O
func	pointer
=	O
(	O
Function	function
*	O
)	O
dlsym	function
(	O
handle	pointer
,	O
"shared_lib_function"	pointer
)	O
;	O
if	O
(	O
func	pointer
==	O
(	O
Function	function
*	O
)	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error after dlsym(): %s\n"	pointer
,	O
dlerror	function
(	O
)	O
)	O
;	O
dlclose	function
(	O
handle	pointer
)	O
;	O
}	O
else	O
(	O
*	O
func	pointer
)	O
(	O
"From within dl-test-core.c"	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
