int	O
flapsDown	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
c	pointer
->	O
flapSetting	double
+=	O
10.0	int
*	O
pi	int
/	O
180.0	int
;	O
if	O
(	O
c	pointer
->	O
flapSetting	double
>	O
c	pointer
->	O
cinfo	pointer
->	O
maxFlap	double
)	O
c	pointer
->	O
flapSetting	double
=	O
c	pointer
->	O
cinfo	pointer
->	O
maxFlap	double
;	O
return	O
0	int
;	O
}	O
int	O
flapsUp	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
c	pointer
->	O
flapSetting	double
-=	O
10.0	int
*	O
pi	int
/	O
180.0	int
;	O
if	O
(	O
c	pointer
->	O
flapSetting	double
<	O
0.0	int
)	O
c	pointer
->	O
flapSetting	double
=	O
0.0	int
;	O
return	O
0	int
;	O
}	O
void	O
flapControl	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
double	O
geardown	double
;	O
if	O
(	O
isFunctioning	O
(	O
c	pointer
,	O
SYS_FLAPS	int
)	O
)	O
{	O
if	O
(	O
c	pointer
->	O
flapSetting	double
>	O
c	pointer
->	O
curFlap	double
)	O
{	O
c	pointer
->	O
curFlap	double
+=	O
c	pointer
->	O
cinfo	pointer
->	O
flapRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curFlap	double
>	O
c	pointer
->	O
flapSetting	double
)	O
c	pointer
->	O
curFlap	double
=	O
c	pointer
->	O
flapSetting	double
;	O
}	O
else	O
if	O
(	O
c	pointer
->	O
flapSetting	double
<	O
c	pointer
->	O
curFlap	double
)	O
{	O
c	pointer
->	O
curFlap	double
-=	O
c	pointer
->	O
cinfo	pointer
->	O
flapRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curFlap	double
<	O
c	pointer
->	O
flapSetting	double
)	O
c	pointer
->	O
curFlap	double
=	O
c	pointer
->	O
flapSetting	double
;	O
}	O
}	O
if	O
(	O
isFunctioning	O
(	O
c	pointer
,	O
SYS_SPEEDBRAKE	int
)	O
)	O
{	O
if	O
(	O
c	pointer
->	O
speedBrakeSetting	double
>	O
c	pointer
->	O
curSpeedBrake	double
)	O
{	O
c	pointer
->	O
curSpeedBrake	double
+=	O
c	pointer
->	O
cinfo	pointer
->	O
speedBrakeRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curSpeedBrake	double
>	O
c	pointer
->	O
speedBrakeSetting	double
)	O
c	pointer
->	O
curSpeedBrake	double
=	O
c	pointer
->	O
speedBrakeSetting	double
;	O
}	O
else	O
if	O
(	O
c	pointer
->	O
speedBrakeSetting	double
<	O
c	pointer
->	O
curSpeedBrake	double
)	O
{	O
c	pointer
->	O
curSpeedBrake	double
-=	O
c	pointer
->	O
cinfo	pointer
->	O
speedBrakeRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curSpeedBrake	double
<	O
c	pointer
->	O
speedBrakeSetting	double
)	O
c	pointer
->	O
curSpeedBrake	double
=	O
c	pointer
->	O
speedBrakeSetting	double
;	O
}	O
}	O
geardown	double
=	O
pi	int
/	O
2.0	int
;	O
if	O
(	O
isFunctioning	O
(	O
c	pointer
,	O
SYS_NOSEGEAR	int
)	O
)	O
{	O
if	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GHANDLE_DN	O
)	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
!=	O
geardown	double
)	O
{	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
+=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
>	O
geardown	double
)	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
=	O
geardown	double
;	O
c	pointer
->	O
flags	short
&=	O
~	O
FL_GEAR0_UP	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
!=	O
0.0	int
&&	O
(	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GND_CONTACT	O
)	O
==	O
0	int
)	O
)	O
{	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
-=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
<	O
0.0	int
)	O
{	O
c	pointer
->	O
flags	short
|=	O
FL_GEAR0_UP	O
;	O
c	pointer
->	O
curGear	array
[	O
0	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
isFunctioning	O
(	O
c	pointer
,	O
SYS_RIGHTMAIN	int
)	O
)	O
{	O
if	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GHANDLE_DN	O
)	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
!=	O
geardown	double
)	O
{	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
+=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
>	O
geardown	double
)	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
=	O
geardown	double
;	O
c	pointer
->	O
flags	short
&=	O
~	O
FL_GEAR1_UP	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
!=	O
0.0	int
&&	O
(	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GND_CONTACT	O
)	O
==	O
0	int
)	O
)	O
{	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
-=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
<	O
0.0	int
)	O
{	O
c	pointer
->	O
flags	short
|=	O
FL_GEAR1_UP	O
;	O
c	pointer
->	O
curGear	array
[	O
1	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
isFunctioning	O
(	O
c	pointer
,	O
SYS_LEFTMAIN	int
)	O
)	O
{	O
if	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GHANDLE_DN	O
)	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
!=	O
geardown	double
)	O
{	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
+=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
>	O
geardown	double
)	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
=	O
geardown	double
;	O
c	pointer
->	O
flags	short
&=	O
~	O
FL_GEAR2_UP	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
!=	O
0.0	int
&&	O
(	O
(	O
c	pointer
->	O
flags	short
&	O
FL_GND_CONTACT	O
)	O
==	O
0	int
)	O
)	O
{	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
-=	O
c	pointer
->	O
cinfo	pointer
->	O
gearRate	double
*	O
deltaT	double
;	O
if	O
(	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
<	O
0.0	int
)	O
{	O
c	pointer
->	O
flags	short
|=	O
FL_GEAR2_UP	O
;	O
c	pointer
->	O
curGear	array
[	O
2	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
c	pointer
->	O
fuel	double
<	O
(	O
c	pointer
->	O
cinfo	pointer
->	O
maxFuel	double
*	O
0.15	int
)	O
)	O
c	pointer
->	O
damageBits	long
&=	O
~	O
FLAG_LOWFUEL	int
;	O
else	O
c	pointer
->	O
damageBits	long
|=	O
FLAG_LOWFUEL	int
;	O
if	O
(	O
c	pointer
->	O
flags	short
&	O
FL_BRAKES	O
)	O
c	pointer
->	O
damageBits	long
&=	O
~	O
FLAG_WHEELBRAKE	int
;	O
else	O
c	pointer
->	O
damageBits	long
|=	O
FLAG_WHEELBRAKE	int
;	O
if	O
(	O
c	pointer
->	O
speedBrakeSetting	double
>	O
0.0	int
)	O
c	pointer
->	O
damageBits	long
&=	O
~	O
FLAG_SPEEDBRAKE	int
;	O
else	O
c	pointer
->	O
damageBits	long
|=	O
FLAG_SPEEDBRAKE	int
;	O
}	O
int	O
speedBrakeExtend	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
c	pointer
->	O
speedBrakeSetting	double
+=	O
c	pointer
->	O
cinfo	pointer
->	O
speedBrakeIncr	double
;	O
if	O
(	O
c	pointer
->	O
speedBrakeSetting	double
>	O
c	pointer
->	O
cinfo	pointer
->	O
maxSpeedBrake	double
)	O
c	pointer
->	O
speedBrakeSetting	double
=	O
c	pointer
->	O
cinfo	pointer
->	O
maxSpeedBrake	double
;	O
return	O
0	int
;	O
}	O
int	O
speedBrakeRetract	function
(	O
craft	struct
*	O
c	pointer
)	O
{	O
c	pointer
->	O
speedBrakeSetting	double
-=	O
c	pointer
->	O
cinfo	pointer
->	O
speedBrakeIncr	double
;	O
if	O
(	O
c	pointer
->	O
speedBrakeSetting	double
<	O
0.0	int
)	O
c	pointer
->	O
speedBrakeSetting	double
=	O
0.0	int
;	O
return	O
0	int
;	O
}	O
