void	O
clean_autopilot	function
(	O
uih_context	struct
*	O
context	pointer
)	O
{	O
context	pointer
->	O
minsize	double
=	O
1000	int
;	O
context	pointer
->	O
maxsize	double
=	O
0	int
;	O
context	pointer
->	O
autime	int
=	O
0	int
;	O
context	pointer
->	O
minlong	int
=	O
0	int
;	O
context	pointer
->	O
x1	double
=	O
INT_MAX	O
;	O
context	pointer
->	O
y1	function
=	O
INT_MAX	O
;	O
context	pointer
->	O
autopilotversion	int
=	O
context	pointer
->	O
fcontext	pointer
->	O
version	int
;	O
}	O
static	O
void	O
again	function
(	O
uih_context	struct
*	O
context	pointer
)	O
{	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
=	O
context	pointer
->	O
fcontext	pointer
->	O
currentformula	pointer
->	O
v	struct
;	O
context	pointer
->	O
fcontext	pointer
->	O
version	int
++	O
;	O
clean_autopilot	function
(	O
context	pointer
)	O
;	O
}	O
void	O
do_autopilot	function
(	O
uih_context	struct
*	O
context	pointer
,	O
int	O
*	O
x	pointer
,	O
int	O
*	O
y	pointer
,	O
int	O
*	O
controls	pointer
,	O
void	O
(	O
*	O
changed	pointer
)	O
(	O
void	O
)	O
,	O
int	O
times	array
)	O
{	O
int	O
c	pointer
=	O
0	int
;	O
volatile	O
number_t	double
step	double
=	O
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
)	O
/	O
context	pointer
->	O
zengine	pointer
->	O
image	struct
->	O
width	int
/	O
10	int
;	O
volatile	O
number_t	double
pos	int
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
;	O
volatile	O
number_t	double
pos1	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
;	O
volatile	O
number_t	double
ystep	double
=	O
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
ni	double
)	O
/	O
context	pointer
->	O
zengine	pointer
->	O
image	struct
->	O
height	int
/	O
10	int
;	O
volatile	O
number_t	double
ypos	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
;	O
volatile	O
number_t	double
ypos1	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
;	O
pos	int
+=	O
step	double
;	O
ypos	double
+=	O
ystep	double
;	O
pos1	double
-=	O
step	double
;	O
ypos1	double
-=	O
ystep	double
;	O
*	O
x	pointer
=	O
context	pointer
->	O
x1	double
;	O
*	O
y	pointer
=	O
context	pointer
->	O
y1	function
;	O
context	pointer
->	O
zengine	pointer
->	O
action	pointer
->	O
convertup	pointer
(	O
context	pointer
->	O
zengine	pointer
,	O
x	pointer
,	O
y	pointer
)	O
;	O
if	O
(	O
(	O
context	pointer
->	O
minlong	int
>	O
MINCOUNT	int
&&	O
context	pointer
->	O
c1	int
==	O
BUTTON3	int
)	O
||	O
!	O
(	O
pos	int
>	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
)	O
||	O
!	O
(	O
ypos	double
>	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
)	O
||	O
(	O
pos1	double
>=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
)	O
||	O
(	O
ypos1	double
>=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
)	O
||	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
>	O
100.0	int
||	O
isnan	function
(	O
pos	int
)	O
||	O
isnan	function
(	O
ypos	double
)	O
||	O
isnan	function
(	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
cr	double
)	O
||	O
isnan	function
(	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
ci	double
)	O
||	O
isnan	function
(	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
rr	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
ri	double
)	O
||	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
rr	double
==	O
0	int
||	O
context	pointer
->	O
fcontext	pointer
->	O
s	struct
.	O
ri	double
==	O
0	int
||	O
isnan	function
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mi	double
)	O
||	O
isnan	function
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
ni	double
)	O
)	O
{	O
again	function
(	O
context	pointer
)	O
;	O
changed	pointer
(	O
)	O
;	O
}	O
if	O
(	O
!	O
context	pointer
->	O
c1	int
&&	O
context	pointer
->	O
zengine	pointer
->	O
flags	int
&	O
UNCOMPLETTE	O
)	O
return	O
;	O
assert	O
(	O
changed	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
context	pointer
->	O
fcontext	pointer
->	O
version	int
!=	O
context	pointer
->	O
autopilotversion	int
)	O
clean_autopilot	function
(	O
context	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
<	O
context	pointer
->	O
minsize	double
)	O
{	O
context	pointer
->	O
minsize	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
;	O
context	pointer
->	O
minlong	int
=	O
0	int
;	O
}	O
if	O
(	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
>	O
context	pointer
->	O
maxsize	double
)	O
{	O
context	pointer
->	O
minsize	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
;	O
context	pointer
->	O
maxsize	double
=	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
mc	double
-	O
context	pointer
->	O
fcontext	pointer
->	O
rs	struct
.	O
nc	double
;	O
context	pointer
->	O
minlong	int
=	O
0	int
;	O
}	O
if	O
(	O
context	pointer
->	O
autime	int
<=	O
0	int
)	O
{	O
context	pointer
->	O
minlong	int
++	O
;	O
context	pointer
->	O
autime	int
=	O
rand	function
(	O
)	O
%	O
MAXTIME	int
;	O
if	O
(	O
context	pointer
->	O
zengine	pointer
->	O
flags	int
&	O
LOWQUALITY	O
)	O
{	O
context	pointer
->	O
c1	int
=	O
0	int
;	O
}	O
else	O
{	O
switch	O
(	O
context	pointer
->	O
zengine	pointer
->	O
image	struct
->	O
bytesperpixel	int
)	O
{	O
case	O
1	int
:	O
c	pointer
=	O
look18	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look28	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
(	O
rand	function
(	O
)	O
%	O
30	int
)	O
)	O
c	pointer
=	O
0	int
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look18	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES1	int
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look18	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES2	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
c	pointer
=	O
look116	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look216	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
(	O
rand	function
(	O
)	O
%	O
30	int
)	O
)	O
c	pointer
=	O
0	int
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look116	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES1	int
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look216	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES1	int
)	O
;	O
break	O
;	O
case	O
4	int
:	O
c	pointer
=	O
look132	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look232	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
RANGE1	int
,	O
NGUESSES	O
)	O
;	O
if	O
(	O
!	O
(	O
rand	function
(	O
)	O
%	O
30	int
)	O
)	O
c	pointer
=	O
0	int
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look132	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES1	int
)	O
;	O
if	O
(	O
!	O
c	pointer
)	O
c	pointer
=	O
look232	function
(	O
context	pointer
,	O
*	O
x	pointer
,	O
*	O
y	pointer
,	O
10000	int
,	O
NGUESSES1	int
)	O
;	O
}	O
if	O
(	O
!	O
c	pointer
)	O
{	O
if	O
(	O
(	O
context	pointer
->	O
zengine	pointer
->	O
flags	int
&	O
UNCOMPLETTE	O
)	O
)	O
{	O
context	pointer
->	O
c1	int
=	O
0	int
;	O
}	O
else	O
context	pointer
->	O
c1	int
=	O
BUTTON3	int
,	O
context	pointer
->	O
autime	int
>>=	O
1	int
;	O
}	O
}	O
}	O
context	pointer
->	O
autime	int
-=	O
times	array
;	O
*	O
x	pointer
=	O
context	pointer
->	O
x1	double
;	O
*	O
y	pointer
=	O
context	pointer
->	O
y1	function
;	O
context	pointer
->	O
zengine	pointer
->	O
action	pointer
->	O
convertup	pointer
(	O
context	pointer
->	O
zengine	pointer
,	O
x	pointer
,	O
y	pointer
)	O
;	O
*	O
controls	pointer
=	O
context	pointer
->	O
c1	int
;	O
}	O
