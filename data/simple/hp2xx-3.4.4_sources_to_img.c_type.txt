static	O
Byte	char
get_byte_IMG	function
(	O
int	O
row_c	int
,	O
int	O
pos	int
,	O
const	O
PicBuf	struct
*	O
picbuf	pointer
)	O
{	O
int	O
row_nr	int
;	O
RowBuf	struct
*	O
row	pointer
;	O
Byte	char
get_byte	char
;	O
row_nr	int
=	O
picbuf	pointer
->	O
nr	int
-	O
(	O
row_c	int
+	O
1	int
)	O
;	O
row	pointer
=	O
get_RowBuf	function
(	O
picbuf	pointer
,	O
row_nr	int
)	O
;	O
get_byte	char
=	O
(	O
Byte	char
)	O
row	pointer
->	O
buf	pointer
[	O
pos	int
]	O
;	O
return	O
(	O
get_byte	char
)	O
;	O
}	O
static	O
int	O
vert_rep_IMG	function
(	O
int	O
row_c	int
,	O
const	O
PicBuf	struct
*	O
picbuf	pointer
)	O
{	O
int	O
vert_rep	int
=	O
0	int
;	O
int	O
Img_w	int
=	O
picbuf	pointer
->	O
nb	int
;	O
int	O
Img_h	int
=	O
picbuf	pointer
->	O
nr	int
;	O
int	O
pos	int
;	O
Byte	char
org_byte	char
;	O
Byte	char
cmp_byte	char
;	O
int	O
cmp_row_c	int
=	O
row_c	int
+	O
1	int
;	O
while	O
(	O
cmp_row_c	int
<	O
Img_h	int
)	O
{	O
for	O
(	O
pos	int
=	O
0	int
;	O
pos	int
<	O
Img_w	int
;	O
pos	int
++	O
)	O
{	O
org_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
pos	int
,	O
picbuf	pointer
)	O
;	O
cmp_byte	char
=	O
get_byte_IMG	function
(	O
cmp_row_c	int
,	O
pos	int
,	O
picbuf	pointer
)	O
;	O
if	O
(	O
org_byte	char
!=	O
cmp_byte	char
)	O
return	O
vert_rep	int
;	O
}	O
cmp_row_c	int
++	O
;	O
vert_rep	int
++	O
;	O
if	O
(	O
vert_rep	int
>=	O
254	int
)	O
break	O
;	O
}	O
return	O
vert_rep	int
;	O
}	O
static	O
int	O
empty_SR_IMG	function
(	O
int	O
row_c	int
,	O
int	O
pos	int
,	O
const	O
PicBuf	struct
*	O
picbuf	pointer
)	O
{	O
int	O
empty_SR_c	int
=	O
0	int
;	O
int	O
cmp_pos	int
;	O
int	O
Img_w	int
=	O
picbuf	pointer
->	O
nb	int
;	O
for	O
(	O
cmp_pos	int
=	O
pos	int
;	O
cmp_pos	int
<	O
Img_w	int
;	O
cmp_pos	int
++	O
)	O
{	O
if	O
(	O
get_byte_IMG	function
(	O
row_c	int
,	O
cmp_pos	int
,	O
picbuf	pointer
)	O
!=	O
(	O
Byte	char
)	O
0	int
)	O
break	O
;	O
empty_SR_c	int
++	O
;	O
if	O
(	O
empty_SR_c	int
>=	O
127	int
)	O
break	O
;	O
}	O
return	O
empty_SR_c	int
;	O
}	O
static	O
int	O
full_SR_IMG	function
(	O
int	O
row_c	int
,	O
int	O
pos	int
,	O
const	O
PicBuf	struct
*	O
picbuf	pointer
)	O
{	O
int	O
full_SR_c	int
=	O
0	int
;	O
int	O
cmp_pos	int
;	O
int	O
Img_w	int
=	O
picbuf	pointer
->	O
nb	int
;	O
for	O
(	O
cmp_pos	int
=	O
pos	int
;	O
cmp_pos	int
<	O
Img_w	int
;	O
cmp_pos	int
++	O
)	O
{	O
if	O
(	O
get_byte_IMG	function
(	O
row_c	int
,	O
cmp_pos	int
,	O
picbuf	pointer
)	O
!=	O
(	O
Byte	char
)	O
255	int
)	O
break	O
;	O
full_SR_c	int
++	O
;	O
if	O
(	O
full_SR_c	int
>=	O
127	int
)	O
break	O
;	O
}	O
return	O
full_SR_c	int
;	O
}	O
static	O
int	O
PR_IMG	function
(	O
int	O
row_c	int
,	O
int	O
pos	int
,	O
const	O
PicBuf	struct
*	O
picbuf	pointer
)	O
{	O
int	O
PR_c	int
=	O
0	int
;	O
Byte	char
first_byte	char
;	O
Byte	char
second_byte	char
;	O
Byte	char
cmp_1st_byte	char
;	O
Byte	char
cmp_2nd_byte	char
;	O
int	O
cmp_pos	int
;	O
int	O
Img_w	int
=	O
picbuf	pointer
->	O
nb	int
;	O
if	O
(	O
pos	int
+	O
3	int
<	O
Img_w	int
)	O
{	O
first_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
pos	int
,	O
picbuf	pointer
)	O
;	O
second_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
pos	int
+	O
1	int
,	O
picbuf	pointer
)	O
;	O
for	O
(	O
cmp_pos	int
=	O
pos	int
+	O
2	int
;	O
cmp_pos	int
+	O
1	int
<	O
Img_w	int
;	O
cmp_pos	int
+=	O
2	int
)	O
{	O
cmp_1st_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
cmp_pos	int
,	O
picbuf	pointer
)	O
;	O
cmp_2nd_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
cmp_pos	int
+	O
1	int
,	O
picbuf	pointer
)	O
;	O
if	O
(	O
cmp_1st_byte	char
!=	O
first_byte	char
||	O
cmp_2nd_byte	char
!=	O
second_byte	char
)	O
break	O
;	O
PR_c	int
++	O
;	O
if	O
(	O
PR_c	int
>=	O
254	int
)	O
break	O
;	O
}	O
return	O
PR_c	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
write_byte_IMG	function
(	O
Byte	char
write_byte	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
if	O
(	O
fputc	function
(	O
(	O
int	O
)	O
write_byte	char
,	O
fd	pointer
)	O
==	O
EOF	O
)	O
{	O
PError	function
(	O
"\nhp2xx --- writing IMG file:"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
write_VR_IMG	function
(	O
Byte	char
number	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
255	int
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
return	O
write_byte_IMG	function
(	O
number	char
,	O
fd	pointer
)	O
;	O
}	O
static	O
int	O
write_PR_IMG	function
(	O
Byte	char
number	char
,	O
Byte	char
first_byte	char
,	O
Byte	char
second_byte	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
number	char
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
first_byte	char
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
return	O
write_byte_IMG	function
(	O
second_byte	char
,	O
fd	pointer
)	O
;	O
}	O
static	O
int	O
write_empty_SR_IMG	function
(	O
Byte	char
number	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
return	O
write_byte_IMG	function
(	O
number	char
,	O
fd	pointer
)	O
;	O
}	O
static	O
int	O
write_full_SR_IMG	function
(	O
Byte	char
number	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
Byte	char
write_byte	char
=	O
(	O
Byte	char
)	O
128	int
;	O
write_byte	char
=	O
write_byte	char
|	O
number	char
;	O
return	O
write_byte_IMG	function
(	O
write_byte	char
,	O
fd	pointer
)	O
;	O
}	O
static	O
int	O
write_BS_IMG	function
(	O
Byte	char
number	char
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
err	int
;	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
128	int
,	O
fd	pointer
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
return	O
write_byte_IMG	function
(	O
number	char
,	O
fd	pointer
)	O
;	O
}	O
int	O
PicBuf_to_IMG	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
FILE	struct
*	O
fd	pointer
;	O
int	O
row_c	int
;	O
int	O
Img_w	int
=	O
po	pointer
->	O
picbuf	pointer
->	O
nb	int
;	O
int	O
Img_h	int
=	O
po	pointer
->	O
picbuf	pointer
->	O
nr	int
;	O
int	O
percent	int
=	O
0	int
;	O
int	O
Dpi_x	int
=	O
po	pointer
->	O
dpi_x	int
;	O
int	O
Dpi_y	int
=	O
po	pointer
->	O
dpi_y	int
;	O
int	O
vert_rep	int
;	O
Byte	char
act_byte	char
;	O
int	O
act_pos	int
;	O
int	O
first_pos	int
=	O
0	int
;	O
int	O
last_pos	int
=	O
0	int
;	O
int	O
i_pos	int
;	O
int	O
open_BS	int
;	O
int	O
empty_SR_len	int
;	O
int	O
full_SR_len	int
;	O
int	O
PR_len	int
;	O
int	O
BS_len	int
;	O
int	O
idummy	int
;	O
int	O
err	int
;	O
double	O
ddummy	double
;	O
const	O
PicBuf	struct
*	O
pbuf	pointer
;	O
err	int
=	O
0	int
;	O
pbuf	pointer
=	O
po	pointer
->	O
picbuf	pointer
;	O
if	O
(	O
pbuf	pointer
->	O
depth	int
>	O
1	int
)	O
{	O
Eprintf	function
(	O
"\nIMG mode does not support colors yet -- sorry\n"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
Eprintf	function
(	O
"\n\nWriting IMG output: %d rows of %d bytes\n"	pointer
,	O
pbuf	pointer
->	O
nr	int
,	O
pbuf	pointer
->	O
nb	int
)	O
;	O
Eprintf	function
(	O
"\n%s:\no open"	pointer
,	O
*	O
po	pointer
->	O
outfile	pointer
==	O
'-'	O
?	O
"<stdout>"	pointer
:	O
po	pointer
->	O
outfile	pointer
)	O
;	O
}	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
fd	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
WRITE_BIN	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx -- opening output file"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
}	O
else	O
fd	pointer
=	O
stdout	pointer
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\no write\n  - header"	pointer
)	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
1	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
8	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
1	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
0	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
(	O
Byte	char
)	O
2	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
ddummy	double
=	O
(	O
double	O
)	O
Dpi_x	int
;	O
ddummy	double
=	O
25.4	int
/	O
ddummy	double
*	O
1000.0	int
/	O
256	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
ddummy	double
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
ddummy	double
=	O
(	O
double	O
)	O
Dpi_x	int
;	O
ddummy	double
=	O
25.4	int
/	O
ddummy	double
*	O
1000.0	int
;	O
idummy	int
=	O
(	O
int	O
)	O
ddummy	double
&	O
255	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
ddummy	double
=	O
(	O
double	O
)	O
Dpi_y	int
;	O
ddummy	double
=	O
25.4	int
/	O
ddummy	double
*	O
1000.0	int
/	O
256	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
ddummy	double
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
ddummy	double
=	O
(	O
double	O
)	O
Dpi_y	int
;	O
ddummy	double
=	O
25.4	int
/	O
ddummy	double
*	O
1000.0	int
;	O
idummy	int
=	O
(	O
int	O
)	O
ddummy	double
&	O
255	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
idummy	int
=	O
Img_w	int
*	O
8	int
/	O
256	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
idummy	int
=	O
Img_w	int
*	O
8	int
;	O
idummy	int
=	O
idummy	int
&	O
255	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
idummy	int
=	O
Img_h	int
/	O
256	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
idummy	int
=	O
Img_h	int
;	O
idummy	int
=	O
idummy	int
&	O
255	int
;	O
act_byte	char
=	O
(	O
Byte	char
)	O
idummy	int
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n  - data: "	pointer
)	O
;	O
for	O
(	O
row_c	int
=	O
0	int
;	O
row_c	int
<	O
Img_h	int
;	O
row_c	int
++	O
)	O
{	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
(	O
(	O
(	O
float	O
)	O
row_c	int
*	O
100.0	int
)	O
/	O
(	O
float	O
)	O
Img_h	int
)	O
>=	O
(	O
percent	int
+	O
10	int
)	O
)	O
{	O
percent	int
+=	O
10	int
;	O
Eprintf	function
(	O
"%d%% "	pointer
,	O
percent	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
vert_rep	int
=	O
vert_rep_IMG	function
(	O
row_c	int
,	O
pbuf	pointer
)	O
)	O
>	O
0	int
)	O
{	O
row_c	int
+=	O
vert_rep	int
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
(	O
(	O
(	O
float	O
)	O
row_c	int
*	O
100.0	int
)	O
/	O
(	O
float	O
)	O
Img_h	int
)	O
>=	O
(	O
percent	int
+	O
10	int
)	O
)	O
{	O
percent	int
+=	O
10	int
;	O
Eprintf	function
(	O
"%d%% "	pointer
,	O
percent	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
err	int
=	O
write_VR_IMG	function
(	O
(	O
Byte	char
)	O
(	O
vert_rep	int
+	O
1	int
)	O
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
}	O
open_BS	int
=	O
FALSE	int
;	O
act_pos	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
open_BS	int
==	O
TRUE	int
)	O
{	O
if	O
(	O
(	O
empty_SR_len	int
=	O
empty_SR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
3	int
||	O
(	O
full_SR_len	int
=	O
full_SR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
3	int
||	O
(	O
PR_len	int
=	O
PR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
2	int
||	O
act_pos	int
>=	O
Img_w	int
-	O
1	int
||	O
last_pos	int
-	O
first_pos	int
+	O
1	int
>=	O
254	int
)	O
{	O
open_BS	int
=	O
FALSE	int
;	O
if	O
(	O
act_pos	int
>=	O
Img_w	int
-	O
1	int
)	O
{	O
last_pos	int
=	O
act_pos	int
;	O
act_pos	int
++	O
;	O
}	O
BS_len	int
=	O
last_pos	int
-	O
first_pos	int
+	O
1	int
;	O
if	O
(	O
(	O
err	int
=	O
write_BS_IMG	function
(	O
(	O
Byte	char
)	O
BS_len	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
for	O
(	O
i_pos	int
=	O
first_pos	int
;	O
i_pos	int
<=	O
last_pos	int
;	O
i_pos	int
++	O
)	O
{	O
act_byte	char
=	O
get_byte_IMG	function
(	O
row_c	int
,	O
i_pos	int
,	O
pbuf	pointer
)	O
;	O
if	O
(	O
(	O
err	int
=	O
write_byte_IMG	function
(	O
act_byte	char
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
}	O
}	O
else	O
{	O
last_pos	int
=	O
act_pos	int
;	O
act_pos	int
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
empty_SR_len	int
=	O
empty_SR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
0	int
)	O
{	O
act_pos	int
+=	O
empty_SR_len	int
;	O
if	O
(	O
(	O
err	int
=	O
write_empty_SR_IMG	function
(	O
(	O
Byte	char
)	O
empty_SR_len	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
}	O
else	O
if	O
(	O
(	O
full_SR_len	int
=	O
full_SR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
0	int
)	O
{	O
act_pos	int
+=	O
full_SR_len	int
;	O
if	O
(	O
(	O
err	int
=	O
write_full_SR_IMG	function
(	O
(	O
Byte	char
)	O
full_SR_len	int
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
}	O
else	O
if	O
(	O
(	O
PR_len	int
=	O
PR_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
(	O
err	int
=	O
write_PR_IMG	function
(	O
(	O
Byte	char
)	O
(	O
PR_len	int
+	O
1	int
)	O
,	O
get_byte_IMG	function
(	O
row_c	int
,	O
act_pos	int
,	O
pbuf	pointer
)	O
,	O
get_byte_IMG	function
(	O
row_c	int
,	O
act_pos	int
+	O
1	int
,	O
pbuf	pointer
)	O
,	O
fd	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
IMG_exit	O
;	O
act_pos	int
+=	O
(	O
PR_len	int
+	O
1	int
)	O
*	O
2	int
;	O
}	O
else	O
{	O
open_BS	int
=	O
TRUE	int
;	O
first_pos	int
=	O
act_pos	int
;	O
last_pos	int
=	O
act_pos	int
;	O
if	O
(	O
act_pos	int
<	O
Img_w	int
-	O
1	int
)	O
act_pos	int
++	O
;	O
}	O
}	O
}	O
while	O
(	O
act_pos	int
<	O
Img_w	int
)	O
;	O
}	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
if	O
(	O
percent	int
<	O
100	int
)	O
Eprintf	function
(	O
"100%%"	pointer
)	O
;	O
Eprintf	function
(	O
"\no close\n"	pointer
)	O
;	O
IMG_exit	O
:	O
if	O
(	O
fd	pointer
!=	O
NULL	O
&&	O
fd	pointer
!=	O
stdout	pointer
)	O
if	O
(	O
fclose	function
(	O
fd	pointer
)	O
!=	O
0	int
)	O
{	O
PError	function
(	O
"\nhp2xx -- closing IMG:"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n(End of IMG)\n"	pointer
)	O
;	O
return	O
err	int
;	O
}	O
