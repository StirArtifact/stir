typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct
*	O
fvv	pointer
;	O
gsl_vector	struct
*	O
vel	pointer
;	O
gsl_vector	struct
*	O
acc	pointer
;	O
gsl_vector	struct
*	O
JTfvv	pointer
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
workn	pointer
;	O
int	O
accel	int
;	O
gsl_multilarge_nlinear_parameters	struct
params	pointer
;	O
}	O
lm_state_t	struct
;	O
static	O
void	O
*	O
lm_alloc	function
(	O
const	O
int	O
accel	int
,	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
*	O
lm_alloc_noaccel	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
*	O
lm_alloc_accel	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
lm_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
lm_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
lm_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
lm_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
lm_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
void	O
*	O
lm_alloc	function
(	O
const	O
int	O
accel	int
,	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
mparams	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
)	O
params	pointer
;	O
lm_state_t	struct
*	O
state	pointer
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
lm_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate lm state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
fvv	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
fvv	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for fvv"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
vel	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
vel	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for vel"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
acc	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
acc	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for acc"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
JTfvv	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
JTfvv	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JTfvv"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
params	pointer
=	O
*	O
mparams	pointer
;	O
state	pointer
->	O
accel	int
=	O
accel	int
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
*	O
lm_alloc_noaccel	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
return	O
lm_alloc	function
(	O
0	int
,	O
params	pointer
,	O
n	int
,	O
p	int
)	O
;	O
}	O
static	O
void	O
*	O
lm_alloc_accel	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
return	O
lm_alloc	function
(	O
1	int
,	O
params	pointer
,	O
n	int
,	O
p	int
)	O
;	O
}	O
static	O
void	O
lm_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
lm_state_t	struct
*	O
state	pointer
=	O
(	O
lm_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
fvv	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
fvv	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
vel	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
vel	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
acc	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
acc	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
JTfvv	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
JTfvv	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
lm_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
lm_state_t	struct
*	O
state	pointer
=	O
(	O
lm_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector_set_zero	function
(	O
state	pointer
->	O
vel	pointer
)	O
;	O
gsl_vector_set_zero	function
(	O
state	pointer
->	O
acc	pointer
)	O
;	O
*	O
(	O
trust_state	pointer
->	O
avratio	pointer
)	O
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lm_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
params	pointer
=	O
trust_state	pointer
->	O
params	pointer
;	O
(	O
void	O
)	O
vstate	pointer
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
init	pointer
)	O
(	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lm_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
lm_state_t	struct
*	O
state	pointer
=	O
(	O
lm_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
params	pointer
=	O
trust_state	pointer
->	O
params	pointer
;	O
const	O
double	O
mu	double
=	O
*	O
(	O
trust_state	pointer
->	O
mu	double
)	O
;	O
(	O
void	O
)	O
delta	double
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
presolve	pointer
)	O
(	O
mu	double
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
solve	pointer
)	O
(	O
trust_state	pointer
->	O
g	pointer
,	O
state	pointer
->	O
vel	pointer
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
state	pointer
->	O
accel	int
)	O
{	O
double	O
anorm	double
,	O
vnorm	double
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_fvv	function
(	O
params	pointer
->	O
h_fvv	double
,	O
trust_state	pointer
->	O
x	double
,	O
state	pointer
->	O
vel	pointer
,	O
trust_state	pointer
->	O
f	pointer
,	O
trust_state	pointer
->	O
sqrt_wts	pointer
,	O
trust_state	pointer
->	O
fdf	pointer
,	O
state	pointer
->	O
fvv	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_df	function
(	O
CblasTrans	int
,	O
trust_state	pointer
->	O
x	double
,	O
trust_state	pointer
->	O
f	pointer
,	O
state	pointer
->	O
fvv	pointer
,	O
trust_state	pointer
->	O
sqrt_wts	pointer
,	O
params	pointer
->	O
h_df	double
,	O
params	pointer
->	O
fdtype	enum
,	O
trust_state	pointer
->	O
fdf	pointer
,	O
state	pointer
->	O
JTfvv	pointer
,	O
NULL	O
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	pointer
->	O
solver	pointer
->	O
solve	pointer
)	O
(	O
state	pointer
->	O
JTfvv	pointer
,	O
state	pointer
->	O
acc	pointer
,	O
trust_state	pointer
,	O
trust_state	pointer
->	O
solver_state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
anorm	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
acc	pointer
)	O
;	O
vnorm	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
vel	pointer
)	O
;	O
*	O
(	O
trust_state	pointer
->	O
avratio	pointer
)	O
=	O
anorm	double
/	O
vnorm	double
;	O
}	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
vel	pointer
,	O
0.5	int
,	O
state	pointer
->	O
acc	pointer
,	O
dx	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lm_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
lm_state_t	struct
*	O
state	pointer
=	O
(	O
lm_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
gsl_vector	struct
*	O
diag	pointer
=	O
trust_state	pointer
->	O
diag	pointer
;	O
const	O
gsl_vector	struct
*	O
p	int
=	O
state	pointer
->	O
vel	pointer
;	O
const	O
double	O
norm_Dp	double
=	O
scaled_enorm	function
(	O
diag	pointer
,	O
p	int
)	O
;	O
const	O
double	O
normf	double
=	O
gsl_blas_dnrm2	function
(	O
trust_state	pointer
->	O
f	pointer
)	O
;	O
const	O
double	O
mu	double
=	O
*	O
(	O
trust_state	pointer
->	O
mu	double
)	O
;	O
double	O
u	pointer
,	O
v	pointer
;	O
(	O
void	O
)	O
dx	pointer
;	O
gsl_blas_dsymv	function
(	O
CblasLower	int
,	O
1.0	int
,	O
trust_state	pointer
->	O
JTJ	pointer
,	O
p	int
,	O
0.0	int
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
state	pointer
->	O
workp	pointer
,	O
p	int
,	O
&	O
u	pointer
)	O
;	O
u	pointer
/=	O
normf	double
*	O
normf	double
;	O
v	pointer
=	O
norm_Dp	double
/	O
normf	double
;	O
*	O
pred	pointer
=	O
u	pointer
+	O
2.0	int
*	O
mu	double
*	O
v	pointer
*	O
v	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multilarge_nlinear_trs	struct
lm_type	struct
=	O
{	O
"levenberg-marquardt"	pointer
,	O
lm_alloc_noaccel	function
,	O
lm_init	function
,	O
lm_preloop	function
,	O
lm_step	function
,	O
lm_preduction	function
,	O
lm_free	function
}	O
;	O
const	O
gsl_multilarge_nlinear_trs	struct
*	O
gsl_multilarge_nlinear_trs_lm	pointer
=	O
&	O
lm_type	struct
;	O
static	O
const	O
gsl_multilarge_nlinear_trs	struct
lmaccel_type	struct
=	O
{	O
"levenberg-marquardt+accel"	pointer
,	O
lm_alloc_accel	function
,	O
lm_init	function
,	O
lm_preloop	function
,	O
lm_step	function
,	O
lm_preduction	function
,	O
lm_free	function
}	O
;	O
const	O
gsl_multilarge_nlinear_trs	struct
*	O
gsl_multilarge_nlinear_trs_lmaccel	pointer
=	O
&	O
lmaccel_type	struct
;	O
