static	O
void	O
file_logger	function
(	O
void	O
*	O
cls	pointer
,	O
enum	O
MHD_StatusCode	enum
sc	enum
,	O
const	O
char	O
*	O
fm	pointer
,	O
va_list	array
ap	array
)	O
{	O
FILE	struct
*	O
f	pointer
=	O
cls	pointer
;	O
(	O
void	O
)	O
sc	enum
;	O
(	O
void	O
)	O
vfprintf	function
(	O
f	pointer
,	O
fm	pointer
,	O
ap	array
)	O
;	O
}	O
static	O
size_t	long
unescape_wrapper	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Request	struct
*	O
req	pointer
,	O
char	O
*	O
val	array
)	O
{	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
req	pointer
;	O
return	O
MHD_http_unescape	function
(	O
val	array
)	O
;	O
}	O
struct	O
MHD_Daemon	struct
*	O
MHD_daemon_create	function
(	O
MHD_RequestCallback	pointer
cb	pointer
,	O
void	O
*	O
cb_cls	pointer
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
;	O
MHD_check_global_init_	function
(	O
)	O
;	O
if	O
(	O
NULL	O
==	O
(	O
daemon	function
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
MHD_Daemon	struct
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
memset	function
(	O
daemon	function
,	O
0	int
,	O
sizeof	O
(	O
struct	O
MHD_Daemon	struct
)	O
)	O
;	O
daemon	function
->	O
epoll_itc_marker	pointer
=	O
"itc_marker"	pointer
;	O
daemon	function
->	O
rc	pointer
=	O
cb	pointer
;	O
daemon	function
->	O
rc_cls	pointer
=	O
cb_cls	pointer
;	O
daemon	function
->	O
logger	pointer
=	O
&	O
file_logger	function
;	O
daemon	function
->	O
logger_cls	pointer
=	O
stderr	pointer
;	O
daemon	function
->	O
unescape_cb	pointer
=	O
&	O
unescape_wrapper	function
;	O
daemon	function
->	O
connection_memory_limit_b	long
=	O
POOL_SIZE_DEFAULT	O
;	O
daemon	function
->	O
connection_memory_increment_b	long
=	O
BUF_INC_SIZE_DEFAULT	int
;	O
daemon	function
->	O
listen_backlog	int
=	O
LISTEN_BACKLOG_DEFAULT	O
;	O
daemon	function
->	O
fo_queue_length	int
=	O
FO_QUEUE_LENGTH_DEFAULT	int
;	O
daemon	function
->	O
listen_socket	int
=	O
MHD_INVALID_SOCKET	O
;	O
if	O
(	O
!	O
MHD_mutex_init_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
)	O
{	O
free	function
(	O
daemon	function
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
MHD_mutex_init_	O
(	O
&	O
daemon	function
->	O
per_ip_connection_mutex	union
)	O
)	O
{	O
(	O
void	O
)	O
MHD_mutex_destroy_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
free	function
(	O
daemon	function
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
MHD_mutex_init_	O
(	O
&	O
daemon	function
->	O
nnc_lock	union
)	O
)	O
{	O
(	O
void	O
)	O
MHD_mutex_destroy_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
(	O
void	O
)	O
MHD_mutex_destroy_	O
(	O
&	O
daemon	function
->	O
per_ip_connection_mutex	union
)	O
;	O
free	function
(	O
daemon	function
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
daemon	function
;	O
}	O
