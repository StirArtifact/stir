int	O
osip_authorization_init	function
(	O
osip_authorization_t	struct
*	O
*	O
dest	pointer
)	O
{	O
*	O
dest	pointer
=	O
(	O
osip_authorization_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_authorization_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
dest	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	function
(	O
*	O
dest	pointer
,	O
0	int
,	O
sizeof	O
(	O
osip_authorization_t	struct
)	O
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_authorization	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_authorization_t	struct
*	O
authorization	pointer
;	O
int	O
i	int
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
||	O
hvalue	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_authorization_init	function
(	O
&	O
authorization	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_authorization_parse	function
(	O
authorization	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_authorization_free	function
(	O
authorization	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
authorizations	struct
,	O
authorization	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_authorization_parse	function
(	O
osip_authorization_t	struct
*	O
auth	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
const	O
char	O
*	O
space	pointer
;	O
const	O
char	O
*	O
next	pointer
=	O
NULL	O
;	O
int	O
i	int
;	O
space	pointer
=	O
strchr	function
(	O
hvalue	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
space	pointer
-	O
hvalue	pointer
<	O
1	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
auth	pointer
->	O
auth_type	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
space	pointer
-	O
hvalue	pointer
+	O
1	int
)	O
;	O
if	O
(	O
auth	pointer
->	O
auth_type	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
auth	pointer
->	O
auth_type	pointer
,	O
hvalue	pointer
,	O
space	pointer
-	O
hvalue	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
parse_ok	int
=	O
0	int
;	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"username"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
username	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"realm"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
realm	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"nonce"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
nonce	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"uri"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
uri	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"response"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
response	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"digest"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
digest	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_token_set	function
(	O
"algorithm"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
algorithm	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"cnonce"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
cnonce	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"opaque"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
opaque	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_token_set	function
(	O
"qop"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
message_qop	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_token_set	function
(	O
"nc"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
nonce_count	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_token_set	function
(	O
"version"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
version	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"targetname"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
targetname	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"gssapi-data"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
gssapi_data	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"crand"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
crand	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
i	int
=	O
__osip_quoted_string_set	function
(	O
"cnum"	pointer
,	O
space	pointer
,	O
&	O
(	O
auth	pointer
->	O
cnum	pointer
)	O
,	O
&	O
next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
next	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
else	O
if	O
(	O
next	pointer
!=	O
space	pointer
)	O
{	O
space	pointer
=	O
next	pointer
;	O
parse_ok	int
++	O
;	O
}	O
if	O
(	O
0	int
==	O
parse_ok	int
)	O
{	O
const	O
char	O
*	O
quote1	pointer
,	O
*	O
quote2	pointer
,	O
*	O
tmp	pointer
;	O
if	O
(	O
strlen	function
(	O
space	pointer
)	O
<	O
1	int
)	O
return	O
OSIP_SUCCESS	int
;	O
tmp	pointer
=	O
strchr	function
(	O
space	pointer
+	O
1	int
,	O
','	O
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
quote1	pointer
=	O
__osip_quote_find	function
(	O
space	pointer
)	O
;	O
if	O
(	O
(	O
quote1	pointer
!=	O
NULL	O
)	O
&&	O
(	O
quote1	pointer
<	O
tmp	pointer
)	O
)	O
{	O
quote2	pointer
=	O
__osip_quote_find	function
(	O
quote1	pointer
+	O
1	int
)	O
;	O
if	O
(	O
quote2	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
tmp	pointer
<	O
quote2	pointer
)	O
space	pointer
=	O
strchr	function
(	O
quote2	pointer
,	O
','	O
)	O
;	O
else	O
space	pointer
=	O
tmp	pointer
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
else	O
space	pointer
=	O
tmp	pointer
;	O
}	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_authorization	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
int	O
pos	int
,	O
osip_authorization_t	struct
*	O
*	O
dest	pointer
)	O
{	O
osip_authorization_t	struct
*	O
authorization	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
authorizations	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
authorization	pointer
=	O
(	O
osip_authorization_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
authorizations	struct
,	O
pos	int
)	O
;	O
*	O
dest	pointer
=	O
authorization	pointer
;	O
return	O
pos	int
;	O
}	O
char	O
*	O
osip_authorization_get_auth_type	function
(	O
const	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
auth_type	pointer
;	O
}	O
void	O
osip_authorization_set_auth_type	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
auth_type	pointer
)	O
{	O
authorization	pointer
->	O
auth_type	pointer
=	O
(	O
char	O
*	O
)	O
auth_type	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_username	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
username	pointer
;	O
}	O
void	O
osip_authorization_set_username	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
username	pointer
)	O
{	O
authorization	pointer
->	O
username	pointer
=	O
(	O
char	O
*	O
)	O
username	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_realm	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
realm	pointer
;	O
}	O
void	O
osip_authorization_set_realm	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
realm	pointer
)	O
{	O
authorization	pointer
->	O
realm	pointer
=	O
(	O
char	O
*	O
)	O
realm	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_nonce	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
nonce	pointer
;	O
}	O
void	O
osip_authorization_set_nonce	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
nonce	pointer
)	O
{	O
authorization	pointer
->	O
nonce	pointer
=	O
(	O
char	O
*	O
)	O
nonce	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_uri	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
uri	pointer
;	O
}	O
void	O
osip_authorization_set_uri	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
uri	pointer
)	O
{	O
authorization	pointer
->	O
uri	pointer
=	O
(	O
char	O
*	O
)	O
uri	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_response	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
response	pointer
;	O
}	O
void	O
osip_authorization_set_response	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
response	pointer
)	O
{	O
authorization	pointer
->	O
response	pointer
=	O
(	O
char	O
*	O
)	O
response	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_digest	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
digest	pointer
;	O
}	O
void	O
osip_authorization_set_digest	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
digest	pointer
)	O
{	O
authorization	pointer
->	O
digest	pointer
=	O
(	O
char	O
*	O
)	O
digest	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_algorithm	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
algorithm	pointer
;	O
}	O
void	O
osip_authorization_set_algorithm	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
algorithm	pointer
)	O
{	O
authorization	pointer
->	O
algorithm	pointer
=	O
(	O
char	O
*	O
)	O
algorithm	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_cnonce	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
cnonce	pointer
;	O
}	O
void	O
osip_authorization_set_cnonce	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
cnonce	pointer
)	O
{	O
authorization	pointer
->	O
cnonce	pointer
=	O
(	O
char	O
*	O
)	O
cnonce	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_opaque	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
opaque	pointer
;	O
}	O
void	O
osip_authorization_set_opaque	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
opaque	pointer
)	O
{	O
authorization	pointer
->	O
opaque	pointer
=	O
(	O
char	O
*	O
)	O
opaque	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_message_qop	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
message_qop	pointer
;	O
}	O
void	O
osip_authorization_set_message_qop	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
message_qop	pointer
)	O
{	O
authorization	pointer
->	O
message_qop	pointer
=	O
(	O
char	O
*	O
)	O
message_qop	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_nonce_count	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
nonce_count	pointer
;	O
}	O
void	O
osip_authorization_set_nonce_count	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
nonce_count	pointer
)	O
{	O
authorization	pointer
->	O
nonce_count	pointer
=	O
(	O
char	O
*	O
)	O
nonce_count	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_version	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
version	pointer
;	O
}	O
void	O
osip_authorization_set_version	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
version	pointer
)	O
{	O
authorization	pointer
->	O
version	pointer
=	O
(	O
char	O
*	O
)	O
version	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_targetname	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
targetname	pointer
;	O
}	O
void	O
osip_authorization_set_targetname	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
targetname	pointer
)	O
{	O
authorization	pointer
->	O
targetname	pointer
=	O
(	O
char	O
*	O
)	O
targetname	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_gssapi_data	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
gssapi_data	pointer
;	O
}	O
void	O
osip_authorization_set_gssapi_data	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
gssapi_data	pointer
)	O
{	O
authorization	pointer
->	O
gssapi_data	pointer
=	O
(	O
char	O
*	O
)	O
gssapi_data	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_crand	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
crand	pointer
;	O
}	O
void	O
osip_authorization_set_crand	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
crand	pointer
)	O
{	O
authorization	pointer
->	O
crand	pointer
=	O
(	O
char	O
*	O
)	O
crand	pointer
;	O
}	O
char	O
*	O
osip_authorization_get_cnum	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
return	O
authorization	pointer
->	O
cnum	pointer
;	O
}	O
void	O
osip_authorization_set_cnum	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
,	O
char	O
*	O
cnum	pointer
)	O
{	O
authorization	pointer
->	O
cnum	pointer
=	O
(	O
char	O
*	O
)	O
cnum	pointer
;	O
}	O
int	O
osip_authorization_to_str	function
(	O
const	O
osip_authorization_t	struct
*	O
auth	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
tmp	pointer
;	O
int	O
first	int
=	O
1	int
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
auth	pointer
==	O
NULL	O
)	O
||	O
(	O
auth	pointer
->	O
auth_type	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
len	long
=	O
strlen	function
(	O
auth	pointer
->	O
auth_type	pointer
)	O
+	O
1	int
;	O
if	O
(	O
auth	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
10	int
+	O
strlen	function
(	O
auth	pointer
->	O
username	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
realm	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
8	int
+	O
strlen	function
(	O
auth	pointer
->	O
realm	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
nonce	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
8	int
+	O
strlen	function
(	O
auth	pointer
->	O
nonce	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
uri	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
6	int
+	O
strlen	function
(	O
auth	pointer
->	O
uri	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
response	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
11	int
+	O
strlen	function
(	O
auth	pointer
->	O
response	pointer
)	O
;	O
len	long
=	O
len	long
+	O
2	int
;	O
if	O
(	O
auth	pointer
->	O
digest	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
digest	pointer
)	O
+	O
9	int
;	O
if	O
(	O
auth	pointer
->	O
algorithm	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
algorithm	pointer
)	O
+	O
12	int
;	O
if	O
(	O
auth	pointer
->	O
cnonce	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
cnonce	pointer
)	O
+	O
9	int
;	O
if	O
(	O
auth	pointer
->	O
opaque	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
9	int
+	O
strlen	function
(	O
auth	pointer
->	O
opaque	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
nonce_count	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
nonce_count	pointer
)	O
+	O
5	int
;	O
if	O
(	O
auth	pointer
->	O
message_qop	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
message_qop	pointer
)	O
+	O
6	int
;	O
if	O
(	O
auth	pointer
->	O
version	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
version	pointer
)	O
+	O
10	int
;	O
if	O
(	O
auth	pointer
->	O
targetname	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
targetname	pointer
)	O
+	O
13	int
;	O
if	O
(	O
auth	pointer
->	O
gssapi_data	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
gssapi_data	pointer
)	O
+	O
14	int
;	O
if	O
(	O
auth	pointer
->	O
crand	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
crand	pointer
)	O
+	O
8	int
;	O
if	O
(	O
auth	pointer
->	O
cnum	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
auth	pointer
->	O
cnum	pointer
)	O
+	O
7	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
*	O
dest	pointer
=	O
tmp	pointer
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
auth_type	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" username="	pointer
,	O
10	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
username	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
realm	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" realm="	pointer
,	O
7	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
realm	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
nonce	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" nonce="	pointer
,	O
7	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
nonce	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
uri	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" uri="	pointer
,	O
5	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
uri	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
response	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" response="	pointer
,	O
10	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
response	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
digest	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" digest="	pointer
,	O
8	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
digest	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
algorithm	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" algorithm="	pointer
,	O
11	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
algorithm	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
cnonce	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" cnonce="	pointer
,	O
8	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
cnonce	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
opaque	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" opaque="	pointer
,	O
8	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
opaque	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
message_qop	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" qop="	pointer
,	O
5	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
message_qop	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
nonce_count	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" nc="	pointer
,	O
4	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
nonce_count	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
version	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" version="	pointer
,	O
9	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
version	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
targetname	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" targetname="	pointer
,	O
12	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
targetname	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
gssapi_data	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" gssapi-data="	pointer
,	O
13	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
gssapi_data	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
crand	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" crand="	pointer
,	O
7	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
crand	pointer
)	O
;	O
}	O
if	O
(	O
auth	pointer
->	O
cnum	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
","	pointer
,	O
1	int
)	O
;	O
first	int
=	O
0	int
;	O
tmp	pointer
=	O
osip_strn_append	function
(	O
tmp	pointer
,	O
" cnum="	pointer
,	O
6	int
)	O
;	O
tmp	pointer
=	O
osip_str_append	function
(	O
tmp	pointer
,	O
auth	pointer
->	O
cnum	pointer
)	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_authorization_free	function
(	O
osip_authorization_t	struct
*	O
authorization	pointer
)	O
{	O
if	O
(	O
authorization	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
auth_type	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
username	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
realm	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
nonce	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
uri	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
response	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
digest	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
algorithm	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
cnonce	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
opaque	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
message_qop	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
nonce_count	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
version	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
targetname	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
gssapi_data	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
crand	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
->	O
cnum	pointer
)	O
;	O
osip_free	O
(	O
authorization	pointer
)	O
;	O
}	O
int	O
osip_authorization_clone	function
(	O
const	O
osip_authorization_t	struct
*	O
auth	pointer
,	O
osip_authorization_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_authorization_t	struct
*	O
au	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
auth	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_authorization_init	function
(	O
&	O
au	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
auth	pointer
->	O
auth_type	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
auth_type	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
auth_type	pointer
)	O
;	O
if	O
(	O
au	pointer
->	O
auth_type	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
username	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
username	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
username	pointer
)	O
;	O
if	O
(	O
au	pointer
->	O
username	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
realm	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
realm	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
realm	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
realm	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
nonce	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
nonce	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
nonce	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
nonce	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
uri	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
uri	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
uri	pointer
)	O
;	O
if	O
(	O
au	pointer
->	O
uri	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
response	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
response	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
response	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
response	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
digest	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
digest	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
digest	pointer
)	O
;	O
if	O
(	O
au	pointer
->	O
digest	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
algorithm	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
algorithm	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
algorithm	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
algorithm	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
cnonce	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
cnonce	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
cnonce	pointer
)	O
;	O
if	O
(	O
au	pointer
->	O
cnonce	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
opaque	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
opaque	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
opaque	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
opaque	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
message_qop	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
message_qop	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
message_qop	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
message_qop	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
nonce_count	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
nonce_count	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
nonce_count	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
nonce_count	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
version	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
version	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
version	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
version	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
targetname	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
targetname	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
targetname	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
targetname	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
gssapi_data	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
gssapi_data	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
gssapi_data	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
gssapi_data	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
crand	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
crand	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
crand	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
crand	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
auth	pointer
->	O
cnum	pointer
!=	O
NULL	O
)	O
{	O
au	pointer
->	O
cnum	pointer
=	O
osip_strdup	function
(	O
auth	pointer
->	O
cnum	pointer
)	O
;	O
if	O
(	O
auth	pointer
->	O
cnum	pointer
==	O
NULL	O
)	O
{	O
osip_authorization_free	function
(	O
au	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
*	O
dest	pointer
=	O
au	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
