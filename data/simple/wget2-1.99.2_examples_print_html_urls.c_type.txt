static	O
void	O
html_parse_localfile	function
(	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
char	O
*	O
data	pointer
,	O
*	O
data_allocated	pointer
;	O
size_t	long
len	long
;	O
if	O
(	O
(	O
data_allocated	pointer
=	O
data	pointer
=	O
wget_read_file	function
(	O
fname	pointer
,	O
&	O
len	long
)	O
)	O
)	O
{	O
const	O
char	O
*	O
encoding	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
0	int
]	O
==	O
0xFE	int
&&	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
1	int
]	O
==	O
0xFF	int
)	O
{	O
encoding	pointer
=	O
"UTF-16BE"	pointer
;	O
data	pointer
+=	O
2	int
;	O
len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
0	int
]	O
==	O
0xFF	int
&&	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
1	int
]	O
==	O
0xFE	int
)	O
{	O
encoding	pointer
=	O
"UTF-16LE"	pointer
;	O
data	pointer
+=	O
2	int
;	O
len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
0	int
]	O
==	O
0xEF	int
&&	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
1	int
]	O
==	O
0xBB	int
&&	O
(	O
unsigned	O
char	O
)	O
data	pointer
[	O
2	int
]	O
==	O
0xBF	int
)	O
{	O
encoding	pointer
=	O
"UTF-8"	pointer
;	O
data	pointer
+=	O
3	int
;	O
len	long
-=	O
3	int
;	O
}	O
if	O
(	O
encoding	pointer
)	O
printf	function
(	O
"URI encoding '%s' set by BOM\n"	pointer
,	O
encoding	pointer
)	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
encoding	pointer
,	O
"UTF-16"	pointer
,	O
6	int
)	O
)	O
{	O
size_t	long
n	long
;	O
char	O
*	O
utf8	pointer
;	O
len	long
-=	O
len	long
&	O
1	int
;	O
if	O
(	O
wget_memiconv	function
(	O
encoding	pointer
,	O
data	pointer
,	O
len	long
,	O
"UTF-8"	pointer
,	O
&	O
utf8	pointer
,	O
&	O
n	long
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"Convert non-ASCII encoding '%s' to UTF-8\n"	pointer
,	O
encoding	pointer
)	O
;	O
wget_xfree	O
(	O
data_allocated	pointer
)	O
;	O
data_allocated	pointer
=	O
data	pointer
=	O
utf8	pointer
;	O
}	O
else	O
{	O
printf	function
(	O
"Failed to convert non-ASCII encoding '%s' to UTF-8, skip parsing\n"	pointer
,	O
encoding	pointer
)	O
;	O
return	O
;	O
}	O
}	O
wget_html_parsed_result	struct
*	O
res	pointer
=	O
wget_html_get_urls_inline	function
(	O
data	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
encoding	pointer
)	O
{	O
if	O
(	O
res	pointer
->	O
encoding	pointer
&&	O
wget_strcasecmp_ascii	function
(	O
encoding	pointer
,	O
res	pointer
->	O
encoding	pointer
)	O
)	O
printf	function
(	O
"Encoding '%s' as stated in document has been ignored\n"	pointer
,	O
encoding	pointer
)	O
;	O
}	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
res	pointer
->	O
uris	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_html_parsed_url	struct
*	O
html_url	pointer
=	O
wget_vector_get	function
(	O
res	pointer
->	O
uris	pointer
,	O
it	int
)	O
;	O
wget_string	struct
*	O
url	pointer
=	O
&	O
html_url	pointer
->	O
url	pointer
;	O
printf	function
(	O
"  %s.%s '%.*s'\n"	pointer
,	O
html_url	pointer
->	O
dir	array
,	O
html_url	pointer
->	O
attr	array
,	O
(	O
int	O
)	O
url	pointer
->	O
len	long
,	O
url	pointer
->	O
p	pointer
)	O
;	O
}	O
wget_xfree	O
(	O
data_allocated	pointer
)	O
;	O
wget_html_free_urls_inline	function
(	O
&	O
res	pointer
)	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
!	O
isatty	function
(	O
STDIN_FILENO	int
)	O
)	O
{	O
html_parse_localfile	function
(	O
"-"	pointer
)	O
;	O
}	O
else	O
{	O
int	O
argpos	int
;	O
for	O
(	O
argpos	int
=	O
1	int
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
printf	function
(	O
"%s:\n"	pointer
,	O
argv	pointer
[	O
argpos	int
]	O
)	O
;	O
html_parse_localfile	function
(	O
argv	pointer
[	O
argpos	int
]	O
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
