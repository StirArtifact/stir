struct	O
gcd_ctx	struct
{	O
mp_ptr	pointer
gp	pointer
;	O
mp_size_t	long
gn	long
;	O
}	O
;	O
static	O
void	O
gcd_hook	function
(	O
void	O
*	O
p	pointer
,	O
mp_srcptr	pointer
gp	pointer
,	O
mp_size_t	long
gn	long
,	O
mp_srcptr	pointer
qp	pointer
,	O
mp_size_t	long
qn	long
,	O
int	O
d	long
)	O
{	O
struct	O
gcd_ctx	struct
*	O
ctx	pointer
=	O
(	O
struct	O
gcd_ctx	struct
*	O
)	O
p	pointer
;	O
MPN_COPY	O
(	O
ctx	pointer
->	O
gp	pointer
,	O
gp	pointer
,	O
gn	long
)	O
;	O
ctx	pointer
->	O
gn	long
=	O
gn	long
;	O
}	O
static	O
inline	O
mp_size_t	long
gcd_2	function
(	O
mp_ptr	pointer
gp	pointer
,	O
mp_srcptr	pointer
up	pointer
,	O
mp_srcptr	pointer
vp	pointer
)	O
{	O
mp_limb_t	long
u0	pointer
,	O
u1	pointer
,	O
v0	long
,	O
v1	long
;	O
mp_size_t	long
gn	long
;	O
u0	pointer
=	O
up	pointer
[	O
0	int
]	O
;	O
u1	pointer
=	O
up	pointer
[	O
1	int
]	O
;	O
v0	long
=	O
vp	pointer
[	O
0	int
]	O
;	O
v1	long
=	O
vp	pointer
[	O
1	int
]	O
;	O
ASSERT	O
(	O
u0	pointer
&	O
1	int
)	O
;	O
ASSERT	O
(	O
v0	long
&	O
1	int
)	O
;	O
while	O
(	O
u1	pointer
!=	O
v1	long
&&	O
u0	pointer
!=	O
v0	long
)	O
{	O
unsigned	O
long	O
int	O
r	long
;	O
if	O
(	O
u1	pointer
>	O
v1	long
)	O
{	O
sub_ddmmss	O
(	O
u1	pointer
,	O
u0	pointer
,	O
u1	pointer
,	O
u0	pointer
,	O
v1	long
,	O
v0	long
)	O
;	O
count_trailing_zeros	O
(	O
r	long
,	O
u0	pointer
)	O
;	O
u0	pointer
=	O
(	O
(	O
u1	pointer
<<	O
(	O
GMP_NUMB_BITS	O
-	O
r	long
)	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
|	O
(	O
u0	pointer
>>	O
r	long
)	O
;	O
u1	pointer
>>=	O
r	long
;	O
}	O
else	O
{	O
sub_ddmmss	O
(	O
v1	long
,	O
v0	long
,	O
v1	long
,	O
v0	long
,	O
u1	pointer
,	O
u0	pointer
)	O
;	O
count_trailing_zeros	O
(	O
r	long
,	O
v0	long
)	O
;	O
v0	long
=	O
(	O
(	O
v1	long
<<	O
(	O
GMP_NUMB_BITS	O
-	O
r	long
)	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
|	O
(	O
v0	long
>>	O
r	long
)	O
;	O
v1	long
>>=	O
r	long
;	O
}	O
}	O
gp	pointer
[	O
0	int
]	O
=	O
u0	pointer
,	O
gp	pointer
[	O
1	int
]	O
=	O
u1	pointer
,	O
gn	long
=	O
1	int
+	O
(	O
u1	pointer
!=	O
0	int
)	O
;	O
if	O
(	O
u1	pointer
==	O
v1	long
&&	O
u0	pointer
==	O
v0	long
)	O
return	O
gn	long
;	O
v0	long
=	O
(	O
u0	pointer
==	O
v0	long
)	O
?	O
(	O
(	O
u1	pointer
>	O
v1	long
)	O
?	O
u1	pointer
-	O
v1	long
:	O
v1	long
-	O
u1	pointer
)	O
:	O
(	O
(	O
u0	pointer
>	O
v0	long
)	O
?	O
u0	pointer
-	O
v0	long
:	O
v0	long
-	O
u0	pointer
)	O
;	O
gp	pointer
[	O
0	int
]	O
=	O
mpn_gcd_1	O
(	O
gp	pointer
,	O
gn	long
,	O
v0	long
)	O
;	O
return	O
1	int
;	O
}	O
mp_size_t	long
mpn_gcd	O
(	O
mp_ptr	pointer
gp	pointer
,	O
mp_ptr	pointer
up	pointer
,	O
mp_size_t	long
usize	pointer
,	O
mp_ptr	pointer
vp	pointer
,	O
mp_size_t	long
n	long
)	O
{	O
mp_size_t	long
talloc	long
;	O
mp_size_t	long
scratch	long
;	O
mp_size_t	long
matrix_scratch	long
;	O
struct	O
gcd_ctx	struct
ctx	pointer
;	O
mp_ptr	pointer
tp	pointer
;	O
TMP_DECL	O
;	O
ASSERT	O
(	O
usize	pointer
>=	O
n	long
)	O
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vp	pointer
[	O
n	long
-	O
1	int
]	O
>	O
0	int
)	O
;	O
talloc	long
=	O
MPN_GCD_SUBDIV_STEP_ITCH	O
(	O
n	long
)	O
;	O
scratch	long
=	O
usize	pointer
-	O
n	long
+	O
1	int
;	O
if	O
(	O
scratch	long
>	O
talloc	long
)	O
talloc	long
=	O
scratch	long
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
GCD_DC_THRESHOLD	int
)	O
)	O
{	O
mp_size_t	long
hgcd_scratch	long
;	O
mp_size_t	long
update_scratch	long
;	O
mp_size_t	long
p	pointer
=	O
CHOOSE_P	O
(	O
n	long
)	O
;	O
mp_size_t	long
scratch	long
;	O
matrix_scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	pointer
)	O
;	O
hgcd_scratch	long
=	O
mpn_hgcd_itch	O
(	O
n	long
-	O
p	pointer
)	O
;	O
update_scratch	long
=	O
p	pointer
+	O
n	long
-	O
1	int
;	O
scratch	long
=	O
matrix_scratch	long
+	O
MAX	O
(	O
hgcd_scratch	long
,	O
update_scratch	long
)	O
;	O
if	O
(	O
scratch	long
>	O
talloc	long
)	O
talloc	long
=	O
scratch	long
;	O
}	O
TMP_MARK	O
;	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
talloc	long
)	O
;	O
if	O
(	O
usize	pointer
>	O
n	long
)	O
{	O
mpn_tdiv_qr	O
(	O
tp	pointer
,	O
up	pointer
,	O
0	int
,	O
up	pointer
,	O
usize	pointer
,	O
vp	pointer
,	O
n	long
)	O
;	O
if	O
(	O
mpn_zero_p	function
(	O
up	pointer
,	O
n	long
)	O
)	O
{	O
MPN_COPY	O
(	O
gp	pointer
,	O
vp	pointer
,	O
n	long
)	O
;	O
ctx	pointer
.	O
gn	long
=	O
n	long
;	O
goto	O
done	O
;	O
}	O
}	O
ctx	pointer
.	O
gp	pointer
=	O
gp	pointer
;	O
while	O
(	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
GCD_DC_THRESHOLD	int
)	O
)	O
{	O
struct	O
hgcd_matrix	struct
M	struct
;	O
mp_size_t	long
p	pointer
=	O
CHOOSE_P	O
(	O
n	long
)	O
;	O
mp_size_t	long
matrix_scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	pointer
)	O
;	O
mp_size_t	long
nn	long
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M	struct
,	O
n	long
-	O
p	pointer
,	O
tp	pointer
)	O
;	O
nn	long
=	O
mpn_hgcd	O
(	O
up	pointer
+	O
p	pointer
,	O
vp	pointer
+	O
p	pointer
,	O
n	long
-	O
p	pointer
,	O
&	O
M	struct
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
if	O
(	O
nn	long
>	O
0	int
)	O
{	O
ASSERT	O
(	O
M	struct
.	O
n	long
<=	O
(	O
n	long
-	O
p	pointer
-	O
1	int
)	O
/	O
2	int
)	O
;	O
ASSERT	O
(	O
M	struct
.	O
n	long
+	O
p	pointer
<=	O
(	O
p	pointer
+	O
n	long
-	O
1	int
)	O
/	O
2	int
)	O
;	O
n	long
=	O
mpn_hgcd_matrix_adjust	O
(	O
&	O
M	struct
,	O
p	pointer
+	O
nn	long
,	O
up	pointer
,	O
vp	pointer
,	O
p	pointer
,	O
tp	pointer
+	O
matrix_scratch	long
)	O
;	O
}	O
else	O
{	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
up	pointer
,	O
vp	pointer
,	O
n	long
,	O
0	int
,	O
gcd_hook	function
,	O
&	O
ctx	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
goto	O
done	O
;	O
}	O
}	O
while	O
(	O
n	long
>	O
2	int
)	O
{	O
struct	O
hgcd_matrix1	struct
M	struct
;	O
mp_limb_t	long
uh	long
,	O
ul	long
,	O
vh	long
,	O
vl	long
;	O
mp_limb_t	long
mask	long
;	O
mask	long
=	O
up	pointer
[	O
n	long
-	O
1	int
]	O
|	O
vp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
ASSERT	O
(	O
mask	long
>	O
0	int
)	O
;	O
if	O
(	O
mask	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
{	O
uh	long
=	O
up	pointer
[	O
n	long
-	O
1	int
]	O
;	O
ul	long
=	O
up	pointer
[	O
n	long
-	O
2	int
]	O
;	O
vh	long
=	O
vp	pointer
[	O
n	long
-	O
1	int
]	O
;	O
vl	long
=	O
vp	pointer
[	O
n	long
-	O
2	int
]	O
;	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
mask	long
)	O
;	O
uh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
up	pointer
[	O
n	long
-	O
1	int
]	O
,	O
up	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
ul	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
up	pointer
[	O
n	long
-	O
2	int
]	O
,	O
up	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
vh	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
vp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
vp	pointer
[	O
n	long
-	O
2	int
]	O
)	O
;	O
vl	long
=	O
MPN_EXTRACT_NUMB	O
(	O
shift	long
,	O
vp	pointer
[	O
n	long
-	O
2	int
]	O
,	O
vp	pointer
[	O
n	long
-	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
mpn_hgcd2	O
(	O
uh	long
,	O
ul	long
,	O
vh	long
,	O
vl	long
,	O
&	O
M	struct
)	O
)	O
{	O
n	long
=	O
mpn_matrix22_mul1_inverse_vector	O
(	O
&	O
M	struct
,	O
tp	pointer
,	O
up	pointer
,	O
vp	pointer
,	O
n	long
)	O
;	O
MP_PTR_SWAP	O
(	O
up	pointer
,	O
tp	pointer
)	O
;	O
}	O
else	O
{	O
n	long
=	O
mpn_gcd_subdiv_step	O
(	O
up	pointer
,	O
vp	pointer
,	O
n	long
,	O
0	int
,	O
&	O
gcd_hook	function
,	O
&	O
ctx	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
goto	O
done	O
;	O
}	O
}	O
ASSERT	O
(	O
up	pointer
[	O
n	long
-	O
1	int
]	O
|	O
vp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
;	O
if	O
(	O
n	long
==	O
1	int
)	O
{	O
*	O
gp	pointer
=	O
mpn_gcd_1	O
(	O
up	pointer
,	O
1	int
,	O
vp	pointer
[	O
0	int
]	O
)	O
;	O
ctx	pointer
.	O
gn	long
=	O
1	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
!	O
(	O
up	pointer
[	O
0	int
]	O
&	O
1	int
)	O
)	O
MP_PTR_SWAP	O
(	O
up	pointer
,	O
vp	pointer
)	O
;	O
ASSERT	O
(	O
up	pointer
[	O
0	int
]	O
&	O
1	int
)	O
;	O
if	O
(	O
vp	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
*	O
gp	pointer
=	O
mpn_gcd_1	O
(	O
up	pointer
,	O
2	int
,	O
vp	pointer
[	O
1	int
]	O
)	O
;	O
ctx	pointer
.	O
gn	long
=	O
1	int
;	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
vp	pointer
[	O
0	int
]	O
&	O
1	int
)	O
)	O
{	O
int	O
r	long
;	O
count_trailing_zeros	O
(	O
r	long
,	O
vp	pointer
[	O
0	int
]	O
)	O
;	O
vp	pointer
[	O
0	int
]	O
=	O
(	O
(	O
vp	pointer
[	O
1	int
]	O
<<	O
(	O
GMP_NUMB_BITS	O
-	O
r	long
)	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
|	O
(	O
vp	pointer
[	O
0	int
]	O
>>	O
r	long
)	O
;	O
vp	pointer
[	O
1	int
]	O
>>=	O
r	long
;	O
}	O
ctx	pointer
.	O
gn	long
=	O
gcd_2	function
(	O
gp	pointer
,	O
up	pointer
,	O
vp	pointer
)	O
;	O
done	O
:	O
TMP_FREE	O
;	O
return	O
ctx	pointer
.	O
gn	long
;	O
}	O
