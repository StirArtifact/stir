double	O
gsl_ran_beta	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
(	O
a	double
<=	O
1.0	int
)	O
&&	O
(	O
b	double
<=	O
1.0	int
)	O
)	O
{	O
double	O
U	double
,	O
V	double
,	O
X	pointer
,	O
Y	pointer
;	O
while	O
(	O
1	int
)	O
{	O
U	double
=	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
;	O
V	double
=	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
;	O
X	pointer
=	O
pow	function
(	O
U	double
,	O
1.0	int
/	O
a	double
)	O
;	O
Y	pointer
=	O
pow	function
(	O
V	double
,	O
1.0	int
/	O
b	double
)	O
;	O
if	O
(	O
(	O
X	pointer
+	O
Y	pointer
)	O
<=	O
1.0	int
)	O
{	O
if	O
(	O
X	pointer
+	O
Y	pointer
>	O
0	int
)	O
{	O
return	O
X	pointer
/	O
(	O
X	pointer
+	O
Y	pointer
)	O
;	O
}	O
else	O
{	O
double	O
logX	double
=	O
log	function
(	O
U	double
)	O
/	O
a	double
;	O
double	O
logY	double
=	O
log	function
(	O
V	double
)	O
/	O
b	double
;	O
double	O
logM	double
=	O
logX	double
>	O
logY	double
?	O
logX	double
:	O
logY	double
;	O
logX	double
-=	O
logM	double
;	O
logY	double
-=	O
logM	double
;	O
return	O
exp	function
(	O
logX	double
-	O
log	function
(	O
exp	function
(	O
logX	double
)	O
+	O
exp	function
(	O
logY	double
)	O
)	O
)	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
double	O
x1	double
=	O
gsl_ran_gamma	function
(	O
r	pointer
,	O
a	double
,	O
1.0	int
)	O
;	O
double	O
x2	double
=	O
gsl_ran_gamma	function
(	O
r	pointer
,	O
b	double
,	O
1.0	int
)	O
;	O
return	O
x1	double
/	O
(	O
x1	double
+	O
x2	double
)	O
;	O
}	O
}	O
double	O
gsl_ran_beta_pdf	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
x	double
<	O
0	int
||	O
x	double
>	O
1	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
double	O
p	int
;	O
double	O
gab	double
=	O
gsl_sf_lngamma	function
(	O
a	double
+	O
b	double
)	O
;	O
double	O
ga	double
=	O
gsl_sf_lngamma	function
(	O
a	double
)	O
;	O
double	O
gb	double
=	O
gsl_sf_lngamma	function
(	O
b	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
||	O
x	double
==	O
1.0	int
)	O
{	O
if	O
(	O
a	double
>	O
1.0	int
&&	O
b	double
>	O
1.0	int
)	O
{	O
p	int
=	O
0.0	int
;	O
}	O
else	O
{	O
p	int
=	O
exp	function
(	O
gab	double
-	O
ga	double
-	O
gb	double
)	O
*	O
pow	function
(	O
x	double
,	O
a	double
-	O
1	int
)	O
*	O
pow	function
(	O
1	int
-	O
x	double
,	O
b	double
-	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
p	int
=	O
exp	function
(	O
gab	double
-	O
ga	double
-	O
gb	double
+	O
log	function
(	O
x	double
)	O
*	O
(	O
a	double
-	O
1	int
)	O
+	O
log1p	function
(	O
-	O
x	double
)	O
*	O
(	O
b	double
-	O
1	int
)	O
)	O
;	O
}	O
return	O
p	int
;	O
}	O
}	O
