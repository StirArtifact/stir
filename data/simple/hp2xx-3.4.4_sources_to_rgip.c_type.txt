static	O
float	O
ax	float
,	O
ay	float
;	O
static	O
int	O
startx	int
,	O
starty	int
,	O
endx	int
,	O
endy	int
;	O
static	O
int	O
lwid	int
,	O
lsty	int
,	O
lcol	int
;	O
static	O
int	O
firstmove	int
;	O
static	O
int	O
rgipx	function
(	O
float	O
x	int
)	O
{	O
return	O
(	O
int	O
)	O
(	O
x	int
*	O
ax	float
)	O
;	O
}	O
static	O
int	O
rgipy	function
(	O
float	O
y	int
)	O
{	O
return	O
(	O
int	O
)	O
(	O
y	int
*	O
ay	float
)	O
;	O
}	O
static	O
void	O
rgip_set_linewidth	function
(	O
int	O
width	array
)	O
{	O
lwid	int
=	O
width	array
;	O
}	O
static	O
void	O
rgip_set_linestyle	function
(	O
int	O
style	int
)	O
{	O
lsty	int
=	O
style	int
;	O
}	O
static	O
void	O
rgip_set_color	function
(	O
double	O
red	int
,	O
double	O
green	int
,	O
double	O
blue	int
)	O
{	O
float	O
max	float
,	O
min	float
,	O
delta	float
,	O
r	char
,	O
g	char
,	O
b	char
,	O
h	float
,	O
s	float
,	O
v	float
;	O
if	O
(	O
red	int
>=	O
green	int
)	O
{	O
if	O
(	O
red	int
>=	O
blue	int
)	O
max	float
=	O
(	O
float	O
)	O
red	int
;	O
else	O
max	float
=	O
(	O
float	O
)	O
blue	int
;	O
}	O
else	O
{	O
if	O
(	O
green	int
>=	O
blue	int
)	O
max	float
=	O
(	O
float	O
)	O
green	int
;	O
else	O
max	float
=	O
(	O
float	O
)	O
blue	int
;	O
}	O
if	O
(	O
red	int
<=	O
green	int
)	O
{	O
if	O
(	O
red	int
<=	O
blue	int
)	O
min	float
=	O
(	O
float	O
)	O
red	int
;	O
else	O
min	float
=	O
(	O
float	O
)	O
blue	int
;	O
}	O
else	O
{	O
if	O
(	O
green	int
<=	O
blue	int
)	O
min	float
=	O
(	O
float	O
)	O
green	int
;	O
else	O
min	float
=	O
(	O
float	O
)	O
blue	int
;	O
}	O
delta	float
=	O
max	float
-	O
min	float
;	O
v	float
=	O
max	float
;	O
h	float
=	O
(	O
-	O
1	int
)	O
;	O
s	float
=	O
0.0	int
;	O
if	O
(	O
max	float
!=	O
0.0	int
)	O
{	O
s	float
=	O
delta	float
/	O
max	float
;	O
if	O
(	O
s	float
!=	O
0.0	int
)	O
{	O
r	char
=	O
(	O
max	float
-	O
red	int
)	O
/	O
delta	float
;	O
g	char
=	O
(	O
max	float
-	O
green	int
)	O
/	O
delta	float
;	O
b	char
=	O
(	O
max	float
-	O
blue	int
)	O
/	O
delta	float
;	O
if	O
(	O
red	int
==	O
max	float
)	O
h	float
=	O
b	char
-	O
g	char
;	O
else	O
if	O
(	O
green	int
==	O
max	float
)	O
h	float
=	O
2	int
+	O
r	char
-	O
b	char
;	O
else	O
h	float
=	O
4	int
+	O
g	char
-	O
r	char
;	O
h	float
=	O
h	float
*	O
60	int
;	O
if	O
(	O
h	float
<	O
0	int
)	O
h	float
=	O
h	float
+	O
360	int
;	O
}	O
}	O
lcol	int
=	O
7	int
;	O
if	O
(	O
s	float
>=	O
.2	int
)	O
{	O
if	O
(	O
(	O
(	O
h	float
>=	O
0	int
)	O
&&	O
(	O
h	float
<	O
30	int
)	O
)	O
||	O
(	O
h	float
>=	O
330	int
)	O
)	O
lcol	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
h	float
>=	O
30	int
)	O
&&	O
(	O
h	float
<	O
90	int
)	O
)	O
lcol	int
=	O
2	int
;	O
else	O
if	O
(	O
(	O
h	float
>=	O
90	int
)	O
&&	O
(	O
h	float
<	O
150	int
)	O
)	O
lcol	int
=	O
3	int
;	O
else	O
if	O
(	O
(	O
h	float
>=	O
150	int
)	O
&&	O
(	O
h	float
<	O
210	int
)	O
)	O
lcol	int
=	O
4	int
;	O
else	O
if	O
(	O
(	O
h	float
>=	O
210	int
)	O
&&	O
(	O
h	float
<	O
270	int
)	O
)	O
lcol	int
=	O
5	int
;	O
else	O
lcol	int
=	O
6	int
;	O
}	O
else	O
{	O
if	O
(	O
delta	float
==	O
0	int
)	O
lcol	int
=	O
7	int
;	O
else	O
{	O
if	O
(	O
v	float
<	O
0.15	int
)	O
lcol	int
=	O
8	int
;	O
else	O
if	O
(	O
v	float
<	O
0.5	int
)	O
lcol	int
=	O
16	int
;	O
else	O
if	O
(	O
v	float
<	O
0.75	int
)	O
lcol	int
=	O
15	int
;	O
else	O
lcol	int
=	O
7	int
;	O
}	O
}	O
}	O
int	O
to_rgip	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
PlotCmd	enum
cmd	enum
;	O
HPGL_Pt	struct
pt1	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
FILE	struct
*	O
md	pointer
;	O
PEN_W	float
pensize	float
;	O
PEN_C	short
pencolor	short
;	O
int	O
pen_no	int
=	O
0	int
,	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
Eprintf	function
(	O
"\n\n- Writing RGIP code to \"%s\"\n"	pointer
,	O
*	O
po	pointer
->	O
outfile	pointer
==	O
'-'	O
?	O
"stdout"	pointer
:	O
po	pointer
->	O
outfile	pointer
)	O
;	O
}	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
md	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
"w"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx (rgip)"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
RGIP_exit	O
;	O
}	O
}	O
else	O
{	O
md	pointer
=	O
stdout	pointer
;	O
}	O
firstmove	int
=	O
1	int
;	O
ax	float
=	O
RGIPXMAX	int
/	O
(	O
po	pointer
->	O
xmax	double
-	O
po	pointer
->	O
xmin	double
)	O
;	O
ay	float
=	O
RGIPYMAX	int
/	O
(	O
po	pointer
->	O
ymax	double
-	O
po	pointer
->	O
ymin	double
)	O
;	O
fprintf	function
(	O
md	pointer
,	O
"%%RGIP_METAFILE  :1.0a\n"	pointer
)	O
;	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
DEFAULT_PEN_NO	int
]	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
{	O
rgip_set_linewidth	function
(	O
(	O
int	O
)	O
(	O
1	int
+	O
pensize	float
*	O
po	pointer
->	O
HP_to_xdots	double
/	O
0.025	int
)	O
)	O
;	O
}	O
rgip_set_linestyle	function
(	O
1	int
)	O
;	O
rgip_set_color	function
(	O
1.0	int
,	O
1.0	int
,	O
1.0	int
)	O
;	O
while	O
(	O
(	O
cmd	enum
=	O
PlotCmd_from_tmpfile	function
(	O
)	O
)	O
!=	O
CMD_EOF	int
)	O
{	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
NOP	int
:	O
break	O
;	O
case	O
SET_PEN	int
:	O
if	O
(	O
(	O
pen_no	int
=	O
fgetc	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file: "	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
{	O
rgip_set_linewidth	function
(	O
(	O
int	O
)	O
(	O
1	int
+	O
pensize	float
*	O
po	pointer
->	O
HP_to_xdots	double
/	O
0.025	int
)	O
)	O
;	O
}	O
pencolor	short
=	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
;	O
rgip_set_color	function
(	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
0	int
]	O
/	O
255.0	int
,	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
1	int
]	O
/	O
255.0	int
,	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
2	int
]	O
/	O
255.0	int
)	O
;	O
break	O
;	O
case	O
DEF_PC	int
:	O
if	O
(	O
!	O
load_pen_color_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
pencolor	short
=	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
;	O
rgip_set_color	function
(	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
0	int
]	O
/	O
255.0	int
,	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
1	int
]	O
/	O
255.0	int
,	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
2	int
]	O
/	O
255.0	int
)	O
;	O
break	O
;	O
case	O
DEF_PW	int
:	O
if	O
(	O
!	O
load_pen_width_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
{	O
rgip_set_linewidth	function
(	O
(	O
int	O
)	O
(	O
1	int
+	O
pensize	float
*	O
po	pointer
->	O
HP_to_xdots	double
/	O
0.025	int
)	O
)	O
;	O
}	O
break	O
;	O
case	O
MOVE_TO	int
:	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
firstmove	int
==	O
1	int
)	O
{	O
firstmove	int
=	O
0	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
md	pointer
,	O
"%%%%RI_GROUPEND\n"	pointer
)	O
;	O
}	O
startx	int
=	O
rgipx	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
x	int
)	O
-	O
po	pointer
->	O
xmin	double
)	O
;	O
starty	int
=	O
rgipy	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
y	int
)	O
-	O
po	pointer
->	O
ymin	double
)	O
;	O
fprintf	function
(	O
md	pointer
,	O
"%%%%RI_GROUPSTART\n"	pointer
)	O
;	O
break	O
;	O
case	O
DRAW_TO	int
:	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
!=	O
0	int
)	O
{	O
endx	int
=	O
rgipx	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
x	int
)	O
-	O
po	pointer
->	O
xmin	double
)	O
;	O
endy	int
=	O
rgipy	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
y	int
)	O
-	O
po	pointer
->	O
ymin	double
)	O
;	O
fprintf	function
(	O
md	pointer
,	O
"%d %d %d %d %d %d %d LINE\n"	pointer
,	O
startx	int
,	O
starty	int
,	O
endx	int
,	O
endy	int
,	O
lwid	int
,	O
lsty	int
,	O
lcol	int
)	O
;	O
startx	int
=	O
endx	int
;	O
starty	int
=	O
endy	int
;	O
}	O
break	O
;	O
case	O
PLOT_AT	int
:	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
!=	O
0	int
)	O
{	O
startx	int
=	O
rgipx	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
x	int
)	O
-	O
po	pointer
->	O
xmin	double
)	O
;	O
starty	int
=	O
rgipy	function
(	O
(	O
(	O
&	O
pt1	struct
)	O
->	O
y	int
)	O
-	O
po	pointer
->	O
ymin	double
)	O
;	O
fprintf	function
(	O
md	pointer
,	O
"[ %d %d ] %d DOTS\n"	pointer
,	O
startx	int
,	O
starty	int
,	O
lcol	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Illegal cmd in temp. file!"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
RGIP_exit	O
;	O
}	O
}	O
fprintf	function
(	O
md	pointer
,	O
"%%%%RI_GROUPEND\n"	pointer
)	O
;	O
RGIP_exit	O
:	O
if	O
(	O
md	pointer
!=	O
NULL	O
&&	O
md	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
md	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
return	O
err	int
;	O
}	O
