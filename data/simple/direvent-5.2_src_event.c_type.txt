struct	O
symevt	struct
{	O
char	O
*	O
name	pointer
;	O
event_mask	struct
mask	struct
;	O
int	O
line	int
;	O
}	O
;	O
struct	O
grecs_symtab	O
*	O
evtab	pointer
;	O
unsigned	O
hash_string	function
(	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	pointer
;	O
name	pointer
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
;	O
}	O
return	O
i	int
%	O
hashsize	long
;	O
}	O
static	O
unsigned	O
symevt_hash	function
(	O
void	O
*	O
data	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
struct	O
symevt	struct
*	O
sym	pointer
=	O
data	pointer
;	O
return	O
hash_string	function
(	O
sym	pointer
->	O
name	pointer
,	O
hashsize	long
)	O
;	O
}	O
static	O
int	O
symevt_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
symevt	struct
const	O
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
symevt	struct
const	O
*	O
symb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
syma	pointer
->	O
name	pointer
,	O
symb	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
int	O
symevt_copy	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
symevt	struct
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
symevt	struct
*	O
symb	pointer
=	O
b	pointer
;	O
syma	pointer
->	O
name	pointer
=	O
estrdup	function
(	O
symb	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
symevt_free	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
symevt	struct
*	O
sym	pointer
=	O
p	pointer
;	O
free	function
(	O
sym	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
sym	pointer
)	O
;	O
}	O
int	O
defevt	function
(	O
const	O
char	O
*	O
name	pointer
,	O
event_mask	struct
*	O
mask	struct
,	O
int	O
line	int
)	O
{	O
struct	O
symevt	struct
key	pointer
,	O
*	O
evp	pointer
;	O
int	O
install	pointer
=	O
1	int
;	O
if	O
(	O
!	O
evtab	pointer
)	O
{	O
evtab	pointer
=	O
grecs_symtab_create	function
(	O
sizeof	O
(	O
struct	O
symevt	struct
)	O
,	O
symevt_hash	function
,	O
symevt_cmp	function
,	O
symevt_copy	function
,	O
NULL	O
,	O
symevt_free	function
)	O
;	O
if	O
(	O
!	O
evtab	pointer
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
"not enough memory"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
key	pointer
.	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
evp	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
evtab	pointer
,	O
&	O
key	pointer
,	O
&	O
install	pointer
)	O
;	O
if	O
(	O
!	O
install	pointer
)	O
return	O
evp	pointer
->	O
line	int
;	O
evp	pointer
->	O
mask	struct
=	O
*	O
mask	struct
;	O
evp	pointer
->	O
line	int
=	O
line	int
;	O
return	O
0	int
;	O
}	O
int	O
getevt	function
(	O
const	O
char	O
*	O
name	pointer
,	O
event_mask	struct
*	O
mask	struct
)	O
{	O
if	O
(	O
evtab	pointer
)	O
{	O
struct	O
symevt	struct
key	pointer
,	O
*	O
evp	pointer
;	O
key	pointer
.	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
evp	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
evtab	pointer
,	O
&	O
key	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
evp	pointer
)	O
{	O
*	O
mask	struct
=	O
evp	pointer
->	O
mask	struct
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
trans_strtotok	function
(	O
sysev_transtab	array
,	O
name	pointer
,	O
&	O
mask	struct
->	O
sys_mask	int
)	O
)	O
return	O
-	O
1	int
;	O
mask	struct
->	O
gen_mask	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
evtnullp	function
(	O
event_mask	struct
*	O
mask	struct
)	O
{	O
return	O
mask	struct
->	O
gen_mask	int
==	O
0	int
&&	O
mask	struct
->	O
sys_mask	int
==	O
0	int
;	O
}	O
struct	O
transtab	struct
genev_transtab	array
[	O
]	O
=	O
{	O
{	O
"create"	pointer
,	O
GENEV_CREATE	int
}	O
,	O
{	O
"write"	pointer
,	O
GENEV_WRITE	int
}	O
,	O
{	O
"attrib"	pointer
,	O
GENEV_ATTRIB	int
}	O
,	O
{	O
"delete"	pointer
,	O
GENEV_DELETE	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
event_mask	struct
*	O
event_mask_init	function
(	O
event_mask	struct
*	O
m	pointer
,	O
int	O
fflags	int
,	O
event_mask	struct
const	O
*	O
req	pointer
)	O
{	O
int	O
i	int
;	O
m	pointer
->	O
sys_mask	int
=	O
fflags	int
&	O
req	pointer
->	O
sys_mask	int
;	O
m	pointer
->	O
gen_mask	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
genev_xlat	array
[	O
i	int
]	O
.	O
gen_mask	int
;	O
i	int
++	O
)	O
if	O
(	O
genev_xlat	array
[	O
i	int
]	O
.	O
sys_mask	int
&	O
m	pointer
->	O
sys_mask	int
)	O
m	pointer
->	O
gen_mask	int
|=	O
genev_xlat	array
[	O
i	int
]	O
.	O
gen_mask	int
;	O
if	O
(	O
req	pointer
->	O
gen_mask	int
)	O
m	pointer
->	O
gen_mask	int
&=	O
req	pointer
->	O
gen_mask	int
;	O
return	O
m	pointer
;	O
}	O
void	O
evtsetall	function
(	O
event_mask	struct
*	O
m	pointer
)	O
{	O
int	O
i	int
;	O
m	pointer
->	O
sys_mask	int
=	O
0	int
;	O
m	pointer
->	O
gen_mask	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
genev_xlat	array
[	O
i	int
]	O
.	O
gen_mask	int
;	O
i	int
++	O
)	O
{	O
m	pointer
->	O
gen_mask	int
|=	O
genev_xlat	array
[	O
i	int
]	O
.	O
gen_mask	int
;	O
m	pointer
->	O
sys_mask	int
|=	O
genev_xlat	array
[	O
i	int
]	O
.	O
sys_mask	int
;	O
}	O
}	O
