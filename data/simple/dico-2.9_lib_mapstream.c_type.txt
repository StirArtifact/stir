struct	O
_mapfile_stream	struct
{	O
char	O
*	O
filename	pointer
;	O
int	O
fd	int
;	O
int	O
flags	int
;	O
char	O
*	O
start	pointer
;	O
size_t	long
size	long
;	O
off_t	long
offset	long
;	O
}	O
;	O
static	O
int	O
_mapfile_close	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
mfs	pointer
=	O
data	pointer
;	O
if	O
(	O
mfs	pointer
->	O
start	pointer
)	O
{	O
munmap	function
(	O
mfs	pointer
->	O
start	pointer
,	O
mfs	pointer
->	O
size	long
)	O
;	O
mfs	pointer
->	O
start	pointer
=	O
NULL	O
;	O
mfs	pointer
->	O
size	long
=	O
0	int
;	O
}	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
mfs	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
_mapfile_destroy	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
str	pointer
=	O
data	pointer
;	O
free	function
(	O
str	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_mapfile_open	function
(	O
void	O
*	O
data	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
mfs	pointer
=	O
data	pointer
;	O
struct	O
stat	struct
st	struct
;	O
int	O
mflags	int
=	O
0	int
,	O
oflags	int
=	O
0	int
;	O
_mapfile_close	function
(	O
data	pointer
)	O
;	O
if	O
(	O
flags	int
&	O
DICO_STREAM_READ	int
)	O
mflags	int
|=	O
PROT_READ	int
;	O
if	O
(	O
flags	int
&	O
DICO_STREAM_WRITE	int
)	O
mflags	int
|=	O
PROT_WRITE	int
;	O
if	O
(	O
(	O
flags	int
&	O
(	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_WRITE	int
)	O
)	O
==	O
(	O
DICO_STREAM_READ	int
|	O
DICO_STREAM_WRITE	int
)	O
)	O
oflags	int
=	O
O_RDWR	int
;	O
else	O
if	O
(	O
flags	int
&	O
DICO_STREAM_READ	int
)	O
oflags	int
=	O
O_RDONLY	int
;	O
else	O
oflags	int
=	O
O_WRONLY	int
;	O
mfs	pointer
->	O
fd	int
=	O
open	function
(	O
mfs	pointer
->	O
filename	pointer
,	O
oflags	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
fd	int
<	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
fstat	function
(	O
mfs	pointer
->	O
fd	int
,	O
&	O
st	struct
)	O
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
mfs	pointer
->	O
size	long
=	O
st	struct
.	O
st_size	long
;	O
if	O
(	O
mfs	pointer
->	O
size	long
)	O
{	O
mfs	pointer
->	O
start	pointer
=	O
mmap	function
(	O
NULL	O
,	O
mfs	pointer
->	O
size	long
,	O
mflags	int
,	O
MAP_SHARED	int
,	O
mfs	pointer
->	O
fd	int
,	O
0	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
start	pointer
==	O
MAP_FAILED	O
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
mfs	pointer
->	O
start	pointer
=	O
NULL	O
;	O
return	O
err	int
;	O
}	O
}	O
else	O
mfs	pointer
->	O
start	pointer
=	O
NULL	O
;	O
mfs	pointer
->	O
flags	int
=	O
mflags	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_seek	function
(	O
void	O
*	O
data	pointer
,	O
off_t	long
needle	pointer
,	O
int	O
whence	int
,	O
off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
str	pointer
=	O
data	pointer
;	O
off_t	long
offset	long
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
DICO_SEEK_SET	int
:	O
offset	long
=	O
needle	pointer
;	O
break	O
;	O
case	O
DICO_SEEK_CUR	int
:	O
offset	long
=	O
str	pointer
->	O
offset	long
+	O
needle	pointer
;	O
break	O
;	O
case	O
DICO_SEEK_END	int
:	O
offset	long
=	O
str	pointer
->	O
size	long
+	O
needle	pointer
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
||	O
offset	long
>	O
str	pointer
->	O
size	long
)	O
return	O
EINVAL	int
;	O
str	pointer
->	O
offset	long
=	O
offset	long
;	O
*	O
presult	pointer
=	O
offset	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_size	function
(	O
void	O
*	O
data	pointer
,	O
off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
mfs	pointer
=	O
data	pointer
;	O
if	O
(	O
mfs	pointer
->	O
start	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
*	O
presult	pointer
=	O
mfs	pointer
->	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_read	function
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mapfile_stream	struct
*	O
mfs	pointer
=	O
data	pointer
;	O
size_t	long
n	long
;	O
if	O
(	O
mfs	pointer
->	O
start	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
n	long
=	O
(	O
mfs	pointer
->	O
offset	long
+	O
size	long
>	O
mfs	pointer
->	O
size	long
)	O
?	O
mfs	pointer
->	O
size	long
-	O
mfs	pointer
->	O
offset	long
:	O
size	long
;	O
memcpy	function
(	O
buf	pointer
,	O
mfs	pointer
->	O
start	pointer
+	O
mfs	pointer
->	O
offset	long
,	O
n	long
)	O
;	O
mfs	pointer
->	O
offset	long
+=	O
n	long
;	O
*	O
pret	pointer
=	O
n	long
;	O
return	O
0	int
;	O
}	O
dico_stream_t	pointer
dico_mapfile_stream_create	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
dico_stream_t	pointer
str	pointer
;	O
struct	O
_mapfile_stream	struct
*	O
s	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
s	pointer
)	O
)	O
;	O
if	O
(	O
flags	int
&	O
DICO_STREAM_WRITE	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
s	pointer
)	O
return	O
NULL	O
;	O
memset	function
(	O
s	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
s	pointer
)	O
)	O
;	O
s	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
s	pointer
->	O
filename	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
->	O
filename	pointer
)	O
{	O
free	function
(	O
s	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
dico_stream_create	function
(	O
&	O
str	pointer
,	O
flags	int
,	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
s	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
dico_stream_set_open	function
(	O
str	pointer
,	O
_mapfile_open	function
)	O
;	O
dico_stream_set_seek	function
(	O
str	pointer
,	O
_mapfile_seek	function
)	O
;	O
dico_stream_set_size	function
(	O
str	pointer
,	O
_mapfile_size	function
)	O
;	O
dico_stream_set_read	function
(	O
str	pointer
,	O
_mapfile_read	function
)	O
;	O
dico_stream_set_close	function
(	O
str	pointer
,	O
_mapfile_close	function
)	O
;	O
dico_stream_set_destroy	function
(	O
str	pointer
,	O
_mapfile_destroy	function
)	O
;	O
return	O
str	pointer
;	O
}	O
