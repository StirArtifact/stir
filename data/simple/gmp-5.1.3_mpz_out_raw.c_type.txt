size_t	long
mpz_out_raw	O
(	O
FILE	struct
*	O
fp	pointer
,	O
mpz_srcptr	pointer
x	pointer
)	O
{	O
mp_size_t	long
xsize	long
,	O
abs_xsize	long
,	O
bytes	long
,	O
i	long
;	O
mp_srcptr	pointer
xp	pointer
;	O
char	O
*	O
tp	pointer
,	O
*	O
bp	pointer
;	O
mp_limb_t	long
xlimb	long
;	O
int	O
zeros	int
;	O
size_t	long
tsize	long
,	O
ssize	long
;	O
xsize	long
=	O
SIZ	O
(	O
x	pointer
)	O
;	O
abs_xsize	long
=	O
ABS	O
(	O
xsize	long
)	O
;	O
bytes	long
=	O
(	O
abs_xsize	long
*	O
GMP_NUMB_BITS	O
+	O
7	int
)	O
/	O
8	int
;	O
tsize	long
=	O
ROUND_UP_MULTIPLE	O
(	O
(	O
unsigned	O
)	O
4	int
,	O
BYTES_PER_MP_LIMB	int
)	O
+	O
bytes	long
;	O
tp	pointer
=	O
__GMP_ALLOCATE_FUNC_TYPE	O
(	O
tsize	long
,	O
char	O
)	O
;	O
bp	pointer
=	O
tp	pointer
+	O
ROUND_UP_MULTIPLE	O
(	O
(	O
unsigned	O
)	O
4	int
,	O
BYTES_PER_MP_LIMB	int
)	O
;	O
if	O
(	O
bytes	long
!=	O
0	int
)	O
{	O
bp	pointer
+=	O
bytes	long
;	O
xp	pointer
=	O
PTR	O
(	O
x	pointer
)	O
;	O
i	long
=	O
abs_xsize	long
;	O
if	O
(	O
GMP_NAIL_BITS	int
==	O
0	int
)	O
{	O
do	O
{	O
bp	pointer
-=	O
BYTES_PER_MP_LIMB	int
;	O
xlimb	long
=	O
*	O
xp	pointer
;	O
HTON_LIMB_STORE	O
(	O
(	O
mp_ptr	pointer
)	O
bp	pointer
,	O
xlimb	long
)	O
;	O
xp	pointer
++	O
;	O
}	O
while	O
(	O
--	O
i	long
>	O
0	int
)	O
;	O
count_leading_zeros	O
(	O
zeros	int
,	O
xlimb	long
)	O
;	O
zeros	int
/=	O
8	int
;	O
bp	pointer
+=	O
zeros	int
;	O
bytes	long
-=	O
zeros	int
;	O
}	O
else	O
{	O
mp_limb_t	long
new_xlimb	long
;	O
int	O
bits	int
;	O
ASSERT_CODE	O
(	O
char	O
*	O
bp_orig	O
=	O
bp	pointer
-	O
bytes	long
)	O
;	O
ASSERT_ALWAYS	O
(	O
GMP_NUMB_BITS	O
>=	O
8	int
)	O
;	O
bits	int
=	O
0	int
;	O
xlimb	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
bits	int
>=	O
8	int
)	O
{	O
ASSERT	O
(	O
bp	pointer
>	O
bp_orig	O
)	O
;	O
*	O
--	O
bp	pointer
=	O
xlimb	long
&	O
0xFF	int
;	O
xlimb	long
>>=	O
8	int
;	O
bits	int
-=	O
8	int
;	O
}	O
if	O
(	O
i	long
==	O
0	int
)	O
break	O
;	O
new_xlimb	long
=	O
*	O
xp	pointer
++	O
;	O
i	long
--	O
;	O
ASSERT	O
(	O
bp	pointer
>	O
bp_orig	O
)	O
;	O
*	O
--	O
bp	pointer
=	O
(	O
xlimb	long
|	O
(	O
new_xlimb	long
<<	O
bits	int
)	O
)	O
&	O
0xFF	int
;	O
xlimb	long
=	O
new_xlimb	long
>>	O
(	O
8	int
-	O
bits	int
)	O
;	O
bits	int
+=	O
GMP_NUMB_BITS	O
-	O
8	int
;	O
}	O
if	O
(	O
bits	int
!=	O
0	int
)	O
{	O
ASSERT	O
(	O
bp	pointer
>	O
bp_orig	O
)	O
;	O
*	O
--	O
bp	pointer
=	O
xlimb	long
;	O
}	O
ASSERT	O
(	O
bp	pointer
==	O
bp_orig	O
)	O
;	O
while	O
(	O
*	O
bp	pointer
==	O
0	int
)	O
{	O
bp	pointer
++	O
;	O
bytes	long
--	O
;	O
}	O
}	O
}	O
ssize	long
=	O
4	int
+	O
bytes	long
;	O
bytes	long
=	O
(	O
xsize	long
>=	O
0	int
?	O
bytes	long
:	O
-	O
bytes	long
)	O
;	O
ASSERT_ALWAYS	O
(	O
sizeof	O
(	O
bytes	long
)	O
>=	O
4	int
)	O
;	O
bp	pointer
[	O
-	O
4	int
]	O
=	O
bytes	long
>>	O
24	int
;	O
bp	pointer
[	O
-	O
3	int
]	O
=	O
bytes	long
>>	O
16	int
;	O
bp	pointer
[	O
-	O
2	int
]	O
=	O
bytes	long
>>	O
8	int
;	O
bp	pointer
[	O
-	O
1	int
]	O
=	O
bytes	long
;	O
bp	pointer
-=	O
4	int
;	O
if	O
(	O
fp	pointer
==	O
0	int
)	O
fp	pointer
=	O
stdout	pointer
;	O
if	O
(	O
fwrite	function
(	O
bp	pointer
,	O
ssize	long
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
)	O
ssize	long
=	O
0	int
;	O
(	O
*	O
__gmp_free_func	pointer
)	O
(	O
tp	pointer
,	O
tsize	long
)	O
;	O
return	O
ssize	long
;	O
}	O
