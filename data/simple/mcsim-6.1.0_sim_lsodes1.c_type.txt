double	O
conit	double
,	O
crate	double
,	O
el	array
[	O
13	int
]	O
,	O
elco	pointer
[	O
156	int
]	O
,	O
hold	double
,	O
rmax	double
,	O
tesco	pointer
[	O
36	int
]	O
,	O
ccmax	double
,	O
el0	double
,	O
h	double
,	O
hmin	double
,	O
hmxi	double
,	O
hu	double
,	O
rc	double
,	O
tn	double
,	O
uround	double
;	O
double	O
con0	double
,	O
conmin	double
,	O
ccmxj	double
,	O
psmall	double
,	O
rbig	double
,	O
seth	double
;	O
long	O
iplost	long
,	O
iesp	long
,	O
istatc	long
,	O
iys	long
,	O
iba	long
,	O
ibian	long
,	O
ibjan	long
,	O
ibjgp	long
,	O
ipian	long
,	O
ipjan	long
,	O
ipjgp	long
,	O
ipigp	long
,	O
ipr	long
,	O
ipc	long
,	O
ipic	long
,	O
ipisp	long
,	O
iprsp	long
,	O
ipa	long
,	O
lenyh	long
,	O
lenyhm	long
,	O
lenwk	long
,	O
lreq	long
,	O
lrat	long
,	O
lrest	long
,	O
lwmin	long
,	O
moss	long
,	O
msbj	long
,	O
nslj	long
,	O
ngp	long
,	O
nlu	long
,	O
nnz	long
,	O
nsp	pointer
,	O
nzl	long
,	O
nzu	long
;	O
long	O
illin	long
,	O
init	long
,	O
lyh	long
,	O
lewt	long
,	O
lacor	long
,	O
lsavf	long
,	O
lwm	long
,	O
liwm	long
,	O
mxstep	long
,	O
mxhnil	long
,	O
nhnil	long
,	O
ntrep	long
,	O
nslast	long
,	O
nyh	long
,	O
ialth	long
,	O
ipup	long
,	O
lmax	pointer
,	O
meo	long
,	O
nqnyh	long
,	O
nslp	long
,	O
icf	long
,	O
ierpj	long
,	O
iersl	long
,	O
jcur	long
,	O
jstart	long
,	O
kflag	long
,	O
l	pointer
,	O
meth	pointer
,	O
miter	long
,	O
maxord	long
,	O
maxcor	long
,	O
msbp	long
,	O
mxncf	long
,	O
n	pointer
,	O
nq	long
,	O
nst	long
,	O
nfe	long
,	O
nje	long
,	O
nqu	long
;	O
double	O
d_sign	function
(	O
double	O
*	O
pa1	pointer
,	O
double	O
*	O
pa2	pointer
)	O
{	O
double	O
a3	double
;	O
a3	double
=	O
(	O
*	O
pa1	pointer
>=	O
0	int
)	O
?	O
*	O
pa1	pointer
:	O
-	O
*	O
pa1	pointer
;	O
if	O
(	O
*	O
pa2	pointer
>=	O
0	int
)	O
return	O
a3	double
;	O
return	O
-	O
a3	double
;	O
}	O
int	O
lsodes_	function
(	O
long	O
*	O
neq	pointer
,	O
double	O
*	O
y	pointer
,	O
double	O
*	O
t	pointer
,	O
double	O
*	O
tout	double
,	O
long	O
*	O
itol	long
,	O
double	O
*	O
rtol	pointer
,	O
double	O
*	O
atol	function
,	O
long	O
*	O
itask	long
,	O
long	O
*	O
istate	pointer
,	O
long	O
*	O
iopt	long
,	O
double	O
*	O
rwork	pointer
,	O
long	O
*	O
lrw	long
,	O
long	O
*	O
iwork	pointer
,	O
long	O
*	O
liw	long
,	O
long	O
*	O
mf	pointer
)	O
{	O
static	O
long	O
mord	array
[	O
2	int
]	O
=	O
{	O
12	int
,	O
5	int
}	O
;	O
static	O
long	O
mxstp0	long
=	O
500	int
;	O
static	O
long	O
mxhnl0	long
=	O
10	int
;	O
long	O
i__1	long
,	O
i__2	long
;	O
double	O
d__1	double
,	O
d__2	double
;	O
long	O
irem	long
,	O
imax	long
,	O
imul	long
,	O
ipgo	long
,	O
lyhd	long
;	O
long	O
lyhn	long
;	O
double	O
ewti	double
,	O
hmax	double
,	O
size	int
;	O
long	O
ihit	long
=	O
1	int
;	O
long	O
i	long
,	O
j	long
,	O
iflag	long
,	O
leniw	long
,	O
imxer	long
,	O
lenrw	long
,	O
i1	long
,	O
i2	long
,	O
lrtem	long
,	O
lwtem	long
,	O
ncolm	long
;	O
double	O
atoli	double
,	O
h0	double
,	O
rtoli	double
,	O
tcrit	double
=	O
0	int
,	O
tdist	double
,	O
tnext	double
,	O
tolsf	double
,	O
w0	double
;	O
double	O
rh	double
;	O
long	O
ipflag	long
;	O
double	O
tp	double
;	O
long	O
lf0	long
,	O
lenyht	long
,	O
mf1	long
;	O
double	O
big	double
;	O
long	O
lia	long
,	O
lja	long
,	O
kgo	long
;	O
double	O
ayi	double
,	O
hmx	double
,	O
tol	double
,	O
sum	double
;	O
long	O
lenrat	long
;	O
lenrat	long
=	O
sizeof	O
(	O
double	O
)	O
/	O
sizeof	O
(	O
long	O
)	O
;	O
if	O
(	O
lenrat	long
<	O
1	int
)	O
lenrat	long
=	O
1	int
;	O
--	O
iwork	pointer
;	O
--	O
rwork	pointer
;	O
--	O
atol	function
;	O
--	O
rtol	pointer
;	O
--	O
y	pointer
;	O
--	O
neq	pointer
;	O
if	O
(	O
*	O
istate	pointer
<	O
1	int
||	O
*	O
istate	pointer
>	O
3	int
)	O
goto	O
L601	O
;	O
if	O
(	O
*	O
itask	long
<	O
1	int
||	O
*	O
itask	long
>	O
5	int
)	O
goto	O
L602	O
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
goto	O
L10	O
;	O
if	O
(	O
init	long
==	O
0	int
)	O
goto	O
L603	O
;	O
if	O
(	O
*	O
istate	pointer
==	O
2	int
)	O
goto	O
L200	O
;	O
goto	O
L20	O
;	O
L10	O
:	O
init	long
=	O
0	int
;	O
if	O
(	O
*	O
tout	double
==	O
*	O
t	pointer
)	O
goto	O
L430	O
;	O
L20	O
:	O
ntrep	long
=	O
0	int
;	O
if	O
(	O
neq	pointer
[	O
1	int
]	O
<=	O
0	int
)	O
goto	O
L604	O
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
goto	O
L25	O
;	O
if	O
(	O
neq	pointer
[	O
1	int
]	O
>	O
n	pointer
)	O
goto	O
L605	O
;	O
L25	O
:	O
n	pointer
=	O
neq	pointer
[	O
1	int
]	O
;	O
if	O
(	O
*	O
itol	long
<	O
1	int
||	O
*	O
itol	long
>	O
4	int
)	O
goto	O
L606	O
;	O
if	O
(	O
*	O
iopt	long
<	O
0	int
||	O
*	O
iopt	long
>	O
1	int
)	O
goto	O
L607	O
;	O
moss	long
=	O
*	O
mf	pointer
/	O
100	int
;	O
mf1	long
=	O
*	O
mf	pointer
-	O
moss	long
*	O
100	int
;	O
meth	pointer
=	O
mf1	long
/	O
10	int
;	O
miter	long
=	O
mf1	long
-	O
meth	pointer
*	O
10	int
;	O
if	O
(	O
moss	long
<	O
0	int
||	O
moss	long
>	O
2	int
)	O
goto	O
L608	O
;	O
if	O
(	O
meth	pointer
<	O
1	int
||	O
meth	pointer
>	O
2	int
)	O
goto	O
L608	O
;	O
if	O
(	O
miter	long
<	O
0	int
||	O
miter	long
>	O
3	int
)	O
goto	O
L608	O
;	O
if	O
(	O
miter	long
==	O
0	int
||	O
miter	long
==	O
3	int
)	O
moss	long
=	O
0	int
;	O
if	O
(	O
*	O
iopt	long
==	O
1	int
)	O
goto	O
L40	O
;	O
maxord	long
=	O
mord	array
[	O
meth	pointer
-	O
1	int
]	O
;	O
mxstep	long
=	O
mxstp0	long
;	O
mxhnil	long
=	O
mxhnl0	long
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
h0	double
=	O
0.0	int
;	O
hmxi	double
=	O
0.0	int
;	O
hmin	double
=	O
0.0	int
;	O
seth	double
=	O
0.0	int
;	O
goto	O
L60	O
;	O
L40	O
:	O
maxord	long
=	O
iwork	pointer
[	O
5	int
]	O
;	O
if	O
(	O
maxord	long
<	O
0	int
)	O
goto	O
L611	O
;	O
if	O
(	O
maxord	long
==	O
0	int
)	O
maxord	long
=	O
100	int
;	O
maxord	long
=	O
mymin	O
(	O
maxord	long
,	O
mord	array
[	O
meth	pointer
-	O
1	int
]	O
)	O
;	O
mxstep	long
=	O
iwork	pointer
[	O
6	int
]	O
;	O
if	O
(	O
mxstep	long
<	O
0	int
)	O
goto	O
L612	O
;	O
if	O
(	O
mxstep	long
==	O
0	int
)	O
mxstep	long
=	O
mxstp0	long
;	O
mxhnil	long
=	O
iwork	pointer
[	O
7	int
]	O
;	O
if	O
(	O
mxhnil	long
<	O
0	int
)	O
goto	O
L613	O
;	O
if	O
(	O
mxhnil	long
==	O
0	int
)	O
mxhnil	long
=	O
mxhnl0	long
;	O
if	O
(	O
*	O
istate	pointer
!=	O
1	int
)	O
goto	O
L50	O
;	O
h0	double
=	O
rwork	pointer
[	O
5	int
]	O
;	O
if	O
(	O
(	O
*	O
tout	double
-	O
*	O
t	pointer
)	O
*	O
h0	double
<	O
0.	int
)	O
goto	O
L614	O
;	O
L50	O
:	O
hmax	double
=	O
rwork	pointer
[	O
6	int
]	O
;	O
if	O
(	O
hmax	double
<	O
0.	int
)	O
goto	O
L615	O
;	O
hmxi	double
=	O
0.	int
;	O
if	O
(	O
hmax	double
>	O
0.	int
)	O
hmxi	double
=	O
1.0	int
/	O
hmax	double
;	O
hmin	double
=	O
rwork	pointer
[	O
7	int
]	O
;	O
if	O
(	O
hmin	double
<	O
0.	int
)	O
goto	O
L616	O
;	O
seth	double
=	O
rwork	pointer
[	O
8	int
]	O
;	O
if	O
(	O
seth	double
<	O
0.	int
)	O
goto	O
L609	O
;	O
L60	O
:	O
rtoli	double
=	O
rtol	pointer
[	O
1	int
]	O
;	O
atoli	double
=	O
atol	function
[	O
1	int
]	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
*	O
itol	long
>=	O
3	int
)	O
rtoli	double
=	O
rtol	pointer
[	O
i	long
]	O
;	O
if	O
(	O
*	O
itol	long
==	O
2	int
||	O
*	O
itol	long
==	O
4	int
)	O
atoli	double
=	O
atol	function
[	O
i	long
]	O
;	O
if	O
(	O
rtoli	double
<	O
0.	int
)	O
goto	O
L619	O
;	O
if	O
(	O
atoli	double
<	O
0.	int
)	O
goto	O
L620	O
;	O
}	O
lrat	long
=	O
lenrat	long
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
nyh	long
=	O
n	pointer
;	O
lwmin	long
=	O
0	int
;	O
if	O
(	O
miter	long
==	O
1	int
)	O
lwmin	long
=	O
(	O
n	pointer
<<	O
2	int
)	O
+	O
n	pointer
*	O
10	int
/	O
(	O
double	O
)	O
lrat	long
;	O
if	O
(	O
miter	long
==	O
2	int
)	O
lwmin	long
=	O
(	O
n	pointer
<<	O
2	int
)	O
+	O
n	pointer
*	O
11	int
/	O
(	O
double	O
)	O
lrat	long
;	O
if	O
(	O
miter	long
==	O
3	int
)	O
lwmin	long
=	O
n	pointer
+	O
2	int
;	O
lenyh	long
=	O
(	O
maxord	long
+	O
1	int
)	O
*	O
nyh	long
;	O
lrest	long
=	O
lenyh	long
+	O
n	pointer
*	O
3	int
;	O
lenrw	long
=	O
lwmin	long
+	O
20	int
+	O
lrest	long
;	O
iwork	pointer
[	O
17	int
]	O
=	O
lenrw	long
;	O
leniw	long
=	O
30	int
;	O
if	O
(	O
moss	long
==	O
0	int
&&	O
miter	long
!=	O
0	int
&&	O
miter	long
!=	O
3	int
)	O
leniw	long
=	O
leniw	long
+	O
n	pointer
+	O
1	int
;	O
iwork	pointer
[	O
18	int
]	O
=	O
leniw	long
;	O
if	O
(	O
lenrw	long
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
if	O
(	O
leniw	long
>	O
*	O
liw	long
)	O
goto	O
L618	O
;	O
lia	long
=	O
31	int
;	O
if	O
(	O
moss	long
==	O
0	int
&&	O
miter	long
!=	O
0	int
&&	O
miter	long
!=	O
3	int
)	O
leniw	long
=	O
leniw	long
+	O
iwork	pointer
[	O
lia	long
+	O
n	pointer
]	O
-	O
1	int
;	O
iwork	pointer
[	O
18	int
]	O
=	O
leniw	long
;	O
if	O
(	O
leniw	long
>	O
*	O
liw	long
)	O
goto	O
L618	O
;	O
lja	long
=	O
lia	long
+	O
n	pointer
+	O
1	int
;	O
lia	long
=	O
mymin	O
(	O
lia	long
,	O
*	O
liw	long
)	O
;	O
lja	long
=	O
mymin	O
(	O
lja	long
,	O
*	O
liw	long
)	O
;	O
lwm	long
=	O
21	int
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
nq	long
=	O
1	int
;	O
i__1	long
=	O
nq	long
+	O
1	int
;	O
i__2	long
=	O
maxord	long
+	O
2	int
;	O
ncolm	long
=	O
mymin	O
(	O
i__1	long
,	O
i__2	long
)	O
;	O
lenyhm	long
=	O
ncolm	long
*	O
nyh	long
;	O
lenyht	long
=	O
lenyh	long
;	O
if	O
(	O
miter	long
==	O
1	int
||	O
miter	long
==	O
2	int
)	O
lenyht	long
=	O
lenyhm	long
;	O
imul	long
=	O
2	int
;	O
if	O
(	O
*	O
istate	pointer
==	O
3	int
)	O
imul	long
=	O
moss	long
;	O
if	O
(	O
moss	long
==	O
2	int
)	O
imul	long
=	O
3	int
;	O
lrtem	long
=	O
lenyht	long
+	O
imul	long
*	O
n	pointer
;	O
lwtem	long
=	O
lwmin	long
;	O
if	O
(	O
miter	long
==	O
1	int
||	O
miter	long
==	O
2	int
)	O
lwtem	long
=	O
*	O
lrw	long
-	O
20	int
-	O
lrtem	long
;	O
lenwk	long
=	O
lwtem	long
;	O
lyhn	long
=	O
lwm	long
+	O
lwtem	long
;	O
lsavf	long
=	O
lyhn	long
+	O
lenyht	long
;	O
lewt	long
=	O
lsavf	long
+	O
n	pointer
;	O
lacor	long
=	O
lewt	long
+	O
n	pointer
;	O
istatc	long
=	O
*	O
istate	pointer
;	O
if	O
(	O
*	O
istate	pointer
==	O
1	int
)	O
goto	O
L100	O
;	O
lyhd	long
=	O
lyh	long
-	O
lyhn	long
;	O
imax	long
=	O
lyhn	long
-	O
1	int
+	O
lenyhm	long
;	O
if	O
(	O
lyhd	long
<	O
0	int
)	O
goto	O
L70	O
;	O
else	O
if	O
(	O
lyhd	long
==	O
0	int
)	O
goto	O
L80	O
;	O
else	O
goto	O
L74	O
;	O
L70	O
:	O
i__1	long
=	O
imax	long
;	O
for	O
(	O
i	long
=	O
lyhn	long
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
j	long
=	O
imax	long
+	O
lyhn	long
-	O
i	long
;	O
rwork	pointer
[	O
j	long
]	O
=	O
rwork	pointer
[	O
j	long
+	O
lyhd	long
]	O
;	O
}	O
goto	O
L80	O
;	O
L74	O
:	O
i__1	long
=	O
imax	long
;	O
for	O
(	O
i	long
=	O
lyhn	long
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
rwork	pointer
[	O
i	long
]	O
=	O
rwork	pointer
[	O
i	long
+	O
lyhd	long
]	O
;	O
L80	O
:	O
lyh	long
=	O
lyhn	long
;	O
iwork	pointer
[	O
22	int
]	O
=	O
lyh	long
;	O
if	O
(	O
miter	long
==	O
0	int
||	O
miter	long
==	O
3	int
)	O
goto	O
L92	O
;	O
if	O
(	O
moss	long
!=	O
2	int
)	O
goto	O
L85	O
;	O
ewset_	function
(	O
&	O
n	pointer
,	O
itol	long
,	O
&	O
rtol	pointer
[	O
1	int
]	O
,	O
&	O
atol	function
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
)	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L621	O
;	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
;	O
}	O
L85	O
:	O
lsavf	long
=	O
mymin	O
(	O
lsavf	long
,	O
*	O
lrw	long
)	O
;	O
lewt	long
=	O
mymin	O
(	O
lewt	long
,	O
*	O
lrw	long
)	O
;	O
lacor	long
=	O
mymin	O
(	O
lacor	long
,	O
*	O
lrw	long
)	O
;	O
iprep_	function
(	O
&	O
neq	pointer
[	O
1	int
]	O
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
1	int
]	O
,	O
&	O
iwork	pointer
[	O
lia	long
]	O
,	O
&	O
iwork	pointer
[	O
lja	long
]	O
,	O
&	O
ipflag	long
)	O
;	O
lenrw	long
=	O
lwm	long
-	O
1	int
+	O
lenwk	long
+	O
lrest	long
;	O
iwork	pointer
[	O
17	int
]	O
=	O
lenrw	long
;	O
if	O
(	O
ipflag	long
!=	O
-	O
1	int
)	O
iwork	pointer
[	O
23	int
]	O
=	O
ipian	long
;	O
if	O
(	O
ipflag	long
!=	O
-	O
1	int
)	O
iwork	pointer
[	O
24	int
]	O
=	O
ipjan	long
;	O
ipgo	long
=	O
-	O
ipflag	long
+	O
1	int
;	O
switch	O
(	O
ipgo	long
)	O
{	O
case	O
1	int
:	O
goto	O
L90	O
;	O
case	O
2	int
:	O
goto	O
L628	O
;	O
case	O
3	int
:	O
goto	O
L629	O
;	O
case	O
4	int
:	O
goto	O
L630	O
;	O
case	O
5	int
:	O
goto	O
L631	O
;	O
case	O
6	int
:	O
goto	O
L632	O
;	O
case	O
7	int
:	O
goto	O
L633	O
;	O
}	O
L90	O
:	O
iwork	pointer
[	O
22	int
]	O
=	O
lyh	long
;	O
if	O
(	O
lenrw	long
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
L92	O
:	O
jstart	long
=	O
-	O
1	int
;	O
if	O
(	O
n	pointer
==	O
nyh	long
)	O
goto	O
L200	O
;	O
i1	long
=	O
lyh	long
+	O
l	pointer
*	O
nyh	long
;	O
i2	long
=	O
lyh	long
+	O
(	O
maxord	long
+	O
1	int
)	O
*	O
nyh	long
-	O
1	int
;	O
if	O
(	O
i1	long
>	O
i2	long
)	O
goto	O
L200	O
;	O
i__1	long
=	O
i2	long
;	O
for	O
(	O
i	long
=	O
i1	long
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
rwork	pointer
[	O
i	long
]	O
=	O
0.0	int
;	O
goto	O
L200	O
;	O
L100	O
:	O
lyh	long
=	O
lyhn	long
;	O
iwork	pointer
[	O
22	int
]	O
=	O
lyh	long
;	O
tn	double
=	O
*	O
t	pointer
;	O
nst	long
=	O
0	int
;	O
h	double
=	O
1.0	int
;	O
nnz	long
=	O
0	int
;	O
ngp	long
=	O
0	int
;	O
nzl	long
=	O
0	int
;	O
nzu	long
=	O
0	int
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
rwork	pointer
[	O
i	long
+	O
lyh	long
-	O
1	int
]	O
=	O
y	pointer
[	O
i	long
]	O
;	O
lf0	long
=	O
lyh	long
+	O
nyh	long
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lf0	long
]	O
,	O
t	pointer
)	O
;	O
nfe	long
=	O
1	int
;	O
ewset_	function
(	O
&	O
n	pointer
,	O
itol	long
,	O
&	O
rtol	pointer
[	O
1	int
]	O
,	O
&	O
atol	function
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
)	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L621	O
;	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
;	O
}	O
if	O
(	O
miter	long
==	O
0	int
||	O
miter	long
==	O
3	int
)	O
goto	O
L120	O
;	O
lacor	long
=	O
mymin	O
(	O
lacor	long
,	O
*	O
lrw	long
)	O
;	O
iprep_	function
(	O
&	O
neq	pointer
[	O
1	int
]	O
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
1	int
]	O
,	O
&	O
iwork	pointer
[	O
lia	long
]	O
,	O
&	O
iwork	pointer
[	O
lja	long
]	O
,	O
&	O
ipflag	long
)	O
;	O
lenrw	long
=	O
lwm	long
-	O
1	int
+	O
lenwk	long
+	O
lrest	long
;	O
iwork	pointer
[	O
17	int
]	O
=	O
lenrw	long
;	O
if	O
(	O
ipflag	long
!=	O
-	O
1	int
)	O
iwork	pointer
[	O
23	int
]	O
=	O
ipian	long
;	O
if	O
(	O
ipflag	long
!=	O
-	O
1	int
)	O
iwork	pointer
[	O
24	int
]	O
=	O
ipjan	long
;	O
ipgo	long
=	O
-	O
ipflag	long
+	O
1	int
;	O
switch	O
(	O
ipgo	long
)	O
{	O
case	O
1	int
:	O
goto	O
L115	O
;	O
case	O
2	int
:	O
goto	O
L628	O
;	O
case	O
3	int
:	O
goto	O
L629	O
;	O
case	O
4	int
:	O
goto	O
L630	O
;	O
case	O
5	int
:	O
goto	O
L631	O
;	O
case	O
6	int
:	O
goto	O
L632	O
;	O
case	O
7	int
:	O
goto	O
L633	O
;	O
}	O
L115	O
:	O
iwork	pointer
[	O
22	int
]	O
=	O
lyh	long
;	O
if	O
(	O
lenrw	long
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
L120	O
:	O
if	O
(	O
*	O
itask	long
!=	O
4	int
&&	O
*	O
itask	long
!=	O
5	int
)	O
goto	O
L125	O
;	O
tcrit	double
=	O
rwork	pointer
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tcrit	double
-	O
*	O
tout	double
)	O
*	O
(	O
*	O
tout	double
-	O
*	O
t	pointer
)	O
<	O
0.	int
)	O
goto	O
L625	O
;	O
if	O
(	O
h0	double
!=	O
0.	int
&&	O
(	O
*	O
t	pointer
+	O
h0	double
-	O
tcrit	double
)	O
*	O
h0	double
>	O
0.0	int
)	O
h0	double
=	O
tcrit	double
-	O
*	O
t	pointer
;	O
L125	O
:	O
uround	double
=	O
DBL_EPSILON	O
;	O
jstart	long
=	O
0	int
;	O
if	O
(	O
miter	long
!=	O
0	int
)	O
rwork	pointer
[	O
lwm	long
]	O
=	O
sqrt	function
(	O
(	O
double	O
)	O
uround	double
)	O
;	O
msbj	long
=	O
50	int
;	O
nslj	long
=	O
0	int
;	O
ccmxj	double
=	O
0.2	int
;	O
psmall	double
=	O
uround	double
*	O
1e3	int
;	O
rbig	double
=	O
0.01	int
/	O
psmall	double
;	O
nhnil	long
=	O
0	int
;	O
nje	long
=	O
0	int
;	O
nlu	long
=	O
0	int
;	O
nslast	long
=	O
0	int
;	O
hu	double
=	O
0.0	int
;	O
nqu	long
=	O
0	int
;	O
ccmax	double
=	O
0.3	int
;	O
maxcor	long
=	O
3	int
;	O
msbp	long
=	O
20	int
;	O
mxncf	long
=	O
10	int
;	O
lf0	long
=	O
lyh	long
+	O
nyh	long
;	O
if	O
(	O
h0	double
!=	O
0.	int
)	O
goto	O
L180	O
;	O
tdist	double
=	O
fabs	function
(	O
*	O
tout	double
-	O
*	O
t	pointer
)	O
;	O
w0	double
=	O
mymax	O
(	O
fabs	function
(	O
*	O
t	pointer
)	O
,	O
fabs	function
(	O
*	O
tout	double
)	O
)	O
;	O
if	O
(	O
tdist	double
<	O
uround	double
*	O
2.0	int
*	O
w0	double
)	O
goto	O
L622	O
;	O
tol	double
=	O
rtol	pointer
[	O
1	int
]	O
;	O
if	O
(	O
*	O
itol	long
<=	O
2	int
)	O
goto	O
L140	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
d__1	double
=	O
tol	double
,	O
d__2	double
=	O
rtol	pointer
[	O
i	long
]	O
;	O
tol	double
=	O
mymax	O
(	O
d__1	double
,	O
d__2	double
)	O
;	O
}	O
L140	O
:	O
if	O
(	O
tol	double
>	O
0.	int
)	O
goto	O
L160	O
;	O
atoli	double
=	O
atol	function
[	O
1	int
]	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
*	O
itol	long
==	O
2	int
||	O
*	O
itol	long
==	O
4	int
)	O
atoli	double
=	O
atol	function
[	O
i	long
]	O
;	O
ayi	double
=	O
fabs	function
(	O
y	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
ayi	double
!=	O
0.0	int
)	O
{	O
d__1	double
=	O
tol	double
,	O
d__2	double
=	O
atoli	double
/	O
ayi	double
;	O
tol	double
=	O
mymax	O
(	O
d__1	double
,	O
d__2	double
)	O
;	O
}	O
}	O
L160	O
:	O
d__1	double
=	O
tol	double
;	O
d__2	double
=	O
uround	double
*	O
100.	int
;	O
tol	double
=	O
mymax	O
(	O
d__1	double
,	O
d__2	double
)	O
;	O
tol	double
=	O
mymin	O
(	O
tol	double
,	O
0.001	int
)	O
;	O
sum	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
rwork	pointer
[	O
lf0	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
)	O
;	O
d__1	double
=	O
sum	double
;	O
sum	double
=	O
1.0	int
/	O
(	O
tol	double
*	O
w0	double
*	O
w0	double
)	O
+	O
tol	double
*	O
(	O
d__1	double
*	O
d__1	double
)	O
;	O
h0	double
=	O
1.0	int
/	O
sqrt	function
(	O
(	O
double	O
)	O
sum	double
)	O
;	O
h0	double
=	O
mymin	O
(	O
h0	double
,	O
tdist	double
)	O
;	O
d__1	double
=	O
*	O
tout	double
-	O
*	O
t	pointer
;	O
h0	double
=	O
d_sign	function
(	O
&	O
h0	double
,	O
&	O
d__1	double
)	O
;	O
L180	O
:	O
rh	double
=	O
fabs	function
(	O
h0	double
)	O
*	O
hmxi	double
;	O
if	O
(	O
rh	double
>	O
1.0	int
)	O
h0	double
/=	O
rh	double
;	O
h	double
=	O
h0	double
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
rwork	pointer
[	O
i	long
+	O
lf0	long
-	O
1	int
]	O
=	O
h0	double
*	O
rwork	pointer
[	O
i	long
+	O
lf0	long
-	O
1	int
]	O
;	O
goto	O
L270	O
;	O
L200	O
:	O
nslast	long
=	O
nst	long
;	O
switch	O
(	O
*	O
itask	long
)	O
{	O
case	O
1	int
:	O
goto	O
L210	O
;	O
case	O
2	int
:	O
goto	O
L250	O
;	O
case	O
3	int
:	O
goto	O
L220	O
;	O
case	O
4	int
:	O
goto	O
L230	O
;	O
case	O
5	int
:	O
goto	O
L240	O
;	O
}	O
L210	O
:	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L250	O
;	O
intdy_	function
(	O
tout	double
,	O
0	int
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
nyh	long
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
iflag	long
)	O
;	O
if	O
(	O
iflag	long
!=	O
0	int
)	O
goto	O
L627	O
;	O
*	O
t	pointer
=	O
*	O
tout	double
;	O
goto	O
L420	O
;	O
L220	O
:	O
tp	double
=	O
tn	double
-	O
hu	double
*	O
(	O
uround	double
*	O
100.0	int
+	O
1.	int
)	O
;	O
if	O
(	O
(	O
tp	double
-	O
*	O
tout	double
)	O
*	O
h	double
>	O
0.0	int
)	O
goto	O
L623	O
;	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L250	O
;	O
goto	O
L400	O
;	O
L230	O
:	O
tcrit	double
=	O
rwork	pointer
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tn	double
-	O
tcrit	double
)	O
*	O
h	double
>	O
0.0	int
)	O
goto	O
L624	O
;	O
if	O
(	O
(	O
tcrit	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L625	O
;	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L245	O
;	O
intdy_	function
(	O
tout	double
,	O
0	int
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
nyh	long
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
iflag	long
)	O
;	O
if	O
(	O
iflag	long
!=	O
0	int
)	O
goto	O
L627	O
;	O
*	O
t	pointer
=	O
*	O
tout	double
;	O
goto	O
L420	O
;	O
L240	O
:	O
tcrit	double
=	O
rwork	pointer
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tn	double
-	O
tcrit	double
)	O
*	O
h	double
>	O
0.0	int
)	O
goto	O
L624	O
;	O
L245	O
:	O
hmx	double
=	O
fabs	function
(	O
tn	double
)	O
+	O
fabs	function
(	O
h	double
)	O
;	O
ihit	long
=	O
fabs	function
(	O
tn	double
-	O
tcrit	double
)	O
<=	O
uround	double
*	O
100.0	int
*	O
hmx	double
;	O
if	O
(	O
ihit	long
)	O
goto	O
L400	O
;	O
tnext	double
=	O
tn	double
+	O
h	double
*	O
(	O
uround	double
*	O
4.0	int
+	O
1.0	int
)	O
;	O
if	O
(	O
(	O
tnext	double
-	O
tcrit	double
)	O
*	O
h	double
<=	O
0.0	int
)	O
goto	O
L250	O
;	O
h	double
=	O
(	O
tcrit	double
-	O
tn	double
)	O
*	O
(	O
1.0	int
-	O
uround	double
*	O
4.0	int
)	O
;	O
if	O
(	O
*	O
istate	pointer
==	O
2	int
)	O
jstart	long
=	O
-	O
2	int
;	O
L250	O
:	O
if	O
(	O
nst	long
-	O
nslast	long
>=	O
mxstep	long
)	O
goto	O
L500	O
;	O
ewset_	function
(	O
&	O
n	pointer
,	O
itol	long
,	O
&	O
rtol	pointer
[	O
1	int
]	O
,	O
&	O
atol	function
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
)	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L510	O
;	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
;	O
}	O
L270	O
:	O
tolsf	double
=	O
uround	double
*	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
)	O
;	O
if	O
(	O
tolsf	double
<=	O
1.	int
)	O
goto	O
L280	O
;	O
tolsf	double
*=	O
2.	int
;	O
if	O
(	O
nst	long
==	O
0	int
)	O
goto	O
L626	O
;	O
goto	O
L520	O
;	O
L280	O
:	O
if	O
(	O
tn	double
+	O
h	double
!=	O
tn	double
)	O
goto	O
L290	O
;	O
++	O
nhnil	long
;	O
if	O
(	O
nhnil	long
>	O
mxhnil	long
)	O
goto	O
L290	O
;	O
xerrwv	function
(	O
"lsodes-- warning..internal t (=r1) and h (=r2) are"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         such that in the machine, t + h = t on the next step  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         (h = step size). solver will continue anyway"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
h	double
)	O
;	O
if	O
(	O
nhnil	long
<	O
mxhnil	long
)	O
goto	O
L290	O
;	O
xerrwv	function
(	O
"lsodes-- above warning has been issued i1 times.  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         it will not be issued again for this problem"	pointer
,	O
0	int
,	O
1	int
,	O
mxhnil	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L290	O
:	O
if	O
(	O
bDelays	int
)	O
StoreDelayed	function
(	O
tn	double
)	O
;	O
DoStep_by_Step	function
(	O
)	O
;	O
stode_	function
(	O
&	O
neq	pointer
[	O
0	int
]	O
,	O
&	O
y	pointer
[	O
0	int
]	O
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
nyh	long
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
,	O
&	O
rwork	pointer
[	O
lsavf	long
]	O
,	O
&	O
rwork	pointer
[	O
lacor	long
]	O
,	O
&	O
rwork	pointer
[	O
lwm	long
]	O
,	O
(	O
long	O
*	O
)	O
&	O
rwork	pointer
[	O
lwm	long
]	O
)	O
;	O
kgo	long
=	O
1	int
-	O
kflag	long
;	O
switch	O
(	O
kgo	long
)	O
{	O
case	O
1	int
:	O
goto	O
L300	O
;	O
case	O
2	int
:	O
goto	O
L530	O
;	O
case	O
3	int
:	O
goto	O
L540	O
;	O
case	O
4	int
:	O
goto	O
L550	O
;	O
}	O
L300	O
:	O
init	long
=	O
1	int
;	O
switch	O
(	O
*	O
itask	long
)	O
{	O
case	O
1	int
:	O
goto	O
L310	O
;	O
case	O
2	int
:	O
goto	O
L400	O
;	O
case	O
3	int
:	O
goto	O
L330	O
;	O
case	O
4	int
:	O
goto	O
L340	O
;	O
case	O
5	int
:	O
goto	O
L350	O
;	O
}	O
L310	O
:	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L250	O
;	O
intdy_	function
(	O
tout	double
,	O
0	int
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
nyh	long
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
iflag	long
)	O
;	O
*	O
t	pointer
=	O
*	O
tout	double
;	O
goto	O
L420	O
;	O
L330	O
:	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
>=	O
0.0	int
)	O
goto	O
L400	O
;	O
goto	O
L250	O
;	O
L340	O
:	O
if	O
(	O
(	O
tn	double
-	O
*	O
tout	double
)	O
*	O
h	double
<	O
0.0	int
)	O
goto	O
L345	O
;	O
intdy_	function
(	O
tout	double
,	O
0	int
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
nyh	long
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
iflag	long
)	O
;	O
*	O
t	pointer
=	O
*	O
tout	double
;	O
goto	O
L420	O
;	O
L345	O
:	O
hmx	double
=	O
fabs	function
(	O
tn	double
)	O
+	O
fabs	function
(	O
h	double
)	O
;	O
ihit	long
=	O
fabs	function
(	O
tn	double
-	O
tcrit	double
)	O
<=	O
uround	double
*	O
100.0	int
*	O
hmx	double
;	O
if	O
(	O
ihit	long
)	O
goto	O
L400	O
;	O
tnext	double
=	O
tn	double
+	O
h	double
*	O
(	O
uround	double
*	O
4.0	int
+	O
1.0	int
)	O
;	O
if	O
(	O
(	O
tnext	double
-	O
tcrit	double
)	O
*	O
h	double
<=	O
0.0	int
)	O
goto	O
L250	O
;	O
h	double
=	O
(	O
tcrit	double
-	O
tn	double
)	O
*	O
(	O
1.0	int
-	O
uround	double
*	O
4.0	int
)	O
;	O
jstart	long
=	O
-	O
2	int
;	O
goto	O
L250	O
;	O
L350	O
:	O
hmx	double
=	O
fabs	function
(	O
tn	double
)	O
+	O
fabs	function
(	O
h	double
)	O
;	O
ihit	long
=	O
fabs	function
(	O
tn	double
-	O
tcrit	double
)	O
<=	O
uround	double
*	O
100.0	int
*	O
hmx	double
;	O
L400	O
:	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
rwork	pointer
[	O
i	long
+	O
lyh	long
-	O
1	int
]	O
;	O
*	O
t	pointer
=	O
tn	double
;	O
if	O
(	O
*	O
itask	long
!=	O
4	int
&&	O
*	O
itask	long
!=	O
5	int
)	O
goto	O
L420	O
;	O
if	O
(	O
ihit	long
)	O
*	O
t	pointer
=	O
tcrit	double
;	O
L420	O
:	O
*	O
istate	pointer
=	O
2	int
;	O
illin	long
=	O
0	int
;	O
rwork	pointer
[	O
11	int
]	O
=	O
hu	double
;	O
rwork	pointer
[	O
12	int
]	O
=	O
h	double
;	O
rwork	pointer
[	O
13	int
]	O
=	O
tn	double
;	O
iwork	pointer
[	O
11	int
]	O
=	O
nst	long
;	O
iwork	pointer
[	O
12	int
]	O
=	O
nfe	long
;	O
iwork	pointer
[	O
13	int
]	O
=	O
nje	long
;	O
iwork	pointer
[	O
14	int
]	O
=	O
nqu	long
;	O
iwork	pointer
[	O
15	int
]	O
=	O
nq	long
;	O
iwork	pointer
[	O
19	int
]	O
=	O
nnz	long
;	O
iwork	pointer
[	O
20	int
]	O
=	O
ngp	long
;	O
iwork	pointer
[	O
21	int
]	O
=	O
nlu	long
;	O
iwork	pointer
[	O
25	int
]	O
=	O
nzl	long
;	O
iwork	pointer
[	O
26	int
]	O
=	O
nzu	long
;	O
return	O
0	int
;	O
L430	O
:	O
++	O
ntrep	long
;	O
if	O
(	O
ntrep	long
<	O
5	int
)	O
return	O
0	int
;	O
xerrwv	function
(	O
"lsodes-- repeated calls with istate = 1 and tout = t (=r1)  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
*	O
t	pointer
,	O
0.0	int
)	O
;	O
goto	O
L800	O
;	O
L500	O
:	O
xerrwv	function
(	O
"lsodes-- at current t (=r1), mxstep (=i1) steps   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         taken on this call before reaching tout     "	pointer
,	O
0	int
,	O
1	int
,	O
mxstep	long
,	O
0	int
,	O
1	int
,	O
tn	double
,	O
0.0	int
)	O
;	O
*	O
istate	pointer
=	O
-	O
1	int
;	O
goto	O
L580	O
;	O
L510	O
:	O
ewti	double
=	O
rwork	pointer
[	O
lewt	long
+	O
i	long
-	O
1	int
]	O
;	O
xerrwv	function
(	O
"lsodes-- at t (=r1), ewt(i1) has become r2 .le. 0."	pointer
,	O
0	int
,	O
1	int
,	O
i	long
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
ewti	double
)	O
;	O
*	O
istate	pointer
=	O
-	O
6	int
;	O
goto	O
L580	O
;	O
L520	O
:	O
xerrwv	function
(	O
"lsodes-- at t (=r1), too much accuracy requested  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         for precision of machine..  see tolsf (=r2) "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
tolsf	double
)	O
;	O
rwork	pointer
[	O
14	int
]	O
=	O
tolsf	double
;	O
*	O
istate	pointer
=	O
-	O
2	int
;	O
goto	O
L580	O
;	O
L530	O
:	O
xerrwv	function
(	O
"lsodes-- at t(=r1) and step size h(=r2), the error"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         test failed repeatedly or with abs(h) = hmin"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
h	double
)	O
;	O
*	O
istate	pointer
=	O
-	O
4	int
;	O
goto	O
L560	O
;	O
L540	O
:	O
xerrwv	function
(	O
"lsodes-- at t (=r1) and step size h (=r2), the    "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         corrector convergence failed repeatedly     "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         or with abs(h) = hmin   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
h	double
)	O
;	O
*	O
istate	pointer
=	O
-	O
5	int
;	O
goto	O
L560	O
;	O
L550	O
:	O
xerrwv	function
(	O
"lsodes-- at t (=r1) and step size h (=r2), a fatal"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         error flag was returned by cdrv (by way of  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         subroutine prjs or slss)"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	double
,	O
h	double
)	O
;	O
*	O
istate	pointer
=	O
-	O
7	int
;	O
goto	O
L580	O
;	O
L560	O
:	O
big	double
=	O
0.	int
;	O
imxer	long
=	O
1	int
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
size	int
=	O
fabs	function
(	O
rwork	pointer
[	O
i	long
+	O
lacor	long
-	O
1	int
]	O
*	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
)	O
;	O
if	O
(	O
big	double
>=	O
size	int
)	O
goto	O
L570	O
;	O
big	double
=	O
size	int
;	O
imxer	long
=	O
i	long
;	O
L570	O
:	O
;	O
}	O
iwork	pointer
[	O
16	int
]	O
=	O
imxer	long
;	O
L580	O
:	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
rwork	pointer
[	O
i	long
+	O
lyh	long
-	O
1	int
]	O
;	O
*	O
t	pointer
=	O
tn	double
;	O
illin	long
=	O
0	int
;	O
rwork	pointer
[	O
11	int
]	O
=	O
hu	double
;	O
rwork	pointer
[	O
12	int
]	O
=	O
h	double
;	O
rwork	pointer
[	O
13	int
]	O
=	O
tn	double
;	O
iwork	pointer
[	O
11	int
]	O
=	O
nst	long
;	O
iwork	pointer
[	O
12	int
]	O
=	O
nfe	long
;	O
iwork	pointer
[	O
13	int
]	O
=	O
nje	long
;	O
iwork	pointer
[	O
14	int
]	O
=	O
nqu	long
;	O
iwork	pointer
[	O
15	int
]	O
=	O
nq	long
;	O
iwork	pointer
[	O
19	int
]	O
=	O
nnz	long
;	O
iwork	pointer
[	O
20	int
]	O
=	O
ngp	long
;	O
iwork	pointer
[	O
21	int
]	O
=	O
nlu	long
;	O
iwork	pointer
[	O
25	int
]	O
=	O
nzl	long
;	O
iwork	pointer
[	O
26	int
]	O
=	O
nzu	long
;	O
return	O
0	int
;	O
L601	O
:	O
xerrwv	function
(	O
"lsodes-- istate (=i1) illegal "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
istate	pointer
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L602	O
:	O
xerrwv	function
(	O
"lsodes-- itask (=i1) illegal  "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L603	O
:	O
xerrwv	function
(	O
"lsodes-- istate .gt. 1 but lsodes not initialized "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L604	O
:	O
xerrwv	function
(	O
"lsodes-- neq (=i1) .lt. 1     "	pointer
,	O
0	int
,	O
1	int
,	O
neq	pointer
[	O
1	int
]	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L605	O
:	O
xerrwv	function
(	O
"lsodes-- istate = 3 and neq increased (i1 to i2)  "	pointer
,	O
0	int
,	O
2	int
,	O
n	pointer
,	O
neq	pointer
[	O
1	int
]	O
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L606	O
:	O
xerrwv	function
(	O
"lsodes-- itol (=i1) illegal   "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
itol	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L607	O
:	O
xerrwv	function
(	O
"lsodes-- iopt (=i1) illegal   "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
iopt	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L608	O
:	O
xerrwv	function
(	O
"lsodes-- mf (=i1) illegal     "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
mf	pointer
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L609	O
:	O
xerrwv	function
(	O
"lsodes-- seth (=r1) .lt. 0.0  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
seth	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L611	O
:	O
xerrwv	function
(	O
"lsodes-- maxord (=i1) .lt. 0  "	pointer
,	O
0	int
,	O
1	int
,	O
maxord	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L612	O
:	O
xerrwv	function
(	O
"lsodes-- mxstep (=i1) .lt. 0  "	pointer
,	O
0	int
,	O
1	int
,	O
mxstep	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L613	O
:	O
xerrwv	function
(	O
"lsodes-- mxhnil (=i1) .lt. 0  "	pointer
,	O
0	int
,	O
1	int
,	O
mxhnil	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L614	O
:	O
xerrwv	function
(	O
"lsodes-- tout (=r1) behind t (=r2)      "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
*	O
tout	double
,	O
*	O
t	pointer
)	O
;	O
xerrwv	function
(	O
"         integration direction is given by h0 (=r1)  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
h0	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L615	O
:	O
xerrwv	function
(	O
"lsodes-- hmax (=r1) .lt. 0.0  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
hmax	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L616	O
:	O
xerrwv	function
(	O
"lsodes-- hmin (=r1) .lt. 0.0  "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
hmin	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L617	O
:	O
xerrwv	function
(	O
"lsodes-- rwork length is insufficient to proceed. "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
lenrw	long
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L618	O
:	O
xerrwv	function
(	O
"lsodes-- iwork length is insufficient to proceed. "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. leniw (=i1), exceeds liw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
leniw	long
,	O
*	O
liw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L619	O
:	O
xerrwv	function
(	O
"lsodes-- rtol(i1) is r1 .lt. 0.0        "	pointer
,	O
0	int
,	O
1	int
,	O
i	long
,	O
0	int
,	O
1	int
,	O
rtoli	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L620	O
:	O
xerrwv	function
(	O
"lsodes-- atol(i1) is r1 .lt. 0.0        "	pointer
,	O
0	int
,	O
1	int
,	O
i	long
,	O
0	int
,	O
1	int
,	O
atoli	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L621	O
:	O
ewti	double
=	O
rwork	pointer
[	O
lewt	long
+	O
i	long
-	O
1	int
]	O
;	O
xerrwv	function
(	O
"lsodes-- ewt(i1) is r1 .le. 0.0         "	pointer
,	O
0	int
,	O
1	int
,	O
i	long
,	O
0	int
,	O
1	int
,	O
ewti	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L622	O
:	O
xerrwv	function
(	O
"lsodes-- tout (=r1) too close to t(=r2) to start integration"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
*	O
tout	double
,	O
*	O
t	pointer
)	O
;	O
goto	O
L700	O
;	O
L623	O
:	O
xerrwv	function
(	O
"lsodes-- itask = i1 and tout (=r1) behind tcur - hu (= r2)  "	pointer
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
2	int
,	O
*	O
tout	double
,	O
tp	double
)	O
;	O
goto	O
L700	O
;	O
L624	O
:	O
xerrwv	function
(	O
"lsodes-- itask = 4 or 5 and tcrit (=r1) behind tcur (=r2)   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tcrit	double
,	O
tn	double
)	O
;	O
goto	O
L700	O
;	O
L625	O
:	O
xerrwv	function
(	O
"lsodes-- itask = 4 or 5 and tcrit (=r1) behind tout (=r2)   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tcrit	double
,	O
*	O
tout	double
)	O
;	O
goto	O
L700	O
;	O
L626	O
:	O
xerrwv	function
(	O
"lsodes-- at start of problem, too much accuracy   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         requested for precision of machine..  see tolsf (=r1) "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
tolsf	double
,	O
0.0	int
)	O
;	O
rwork	pointer
[	O
14	int
]	O
=	O
tolsf	double
;	O
goto	O
L700	O
;	O
L627	O
:	O
xerrwv	function
(	O
"lsodes-- trouble from intdy. itask = i1, tout = r1"	pointer
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
1	int
,	O
*	O
tout	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L628	O
:	O
xerrwv	function
(	O
"lsodes-- rwork length insufficient (for subroutine prep).   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
lenrw	long
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L629	O
:	O
xerrwv	function
(	O
"lsodes-- rwork length insufficient (for subroutine jgroup). "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
lenrw	long
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L630	O
:	O
xerrwv	function
(	O
"lsodes-- rwork length insufficient (for subroutine odrv).   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
lenrw	long
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L631	O
:	O
xerrwv	function
(	O
"lsodes-- error from odrv in yale sparse matrix package      "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
imul	long
=	O
(	O
iys	long
-	O
1	int
)	O
/	O
n	pointer
;	O
irem	long
=	O
iys	long
-	O
imul	long
*	O
n	pointer
;	O
xerrwv	function
(	O
"         at t (=r1), odrv returned error flag = i1*neq + i2.   "	pointer
,	O
0	int
,	O
2	int
,	O
imul	long
,	O
irem	long
,	O
1	int
,	O
tn	double
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L632	O
:	O
xerrwv	function
(	O
"lsodes-- rwork length insufficient (for subroutine cdrv).   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	pointer
,	O
0	int
,	O
2	int
,	O
lenrw	long
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L633	O
:	O
xerrwv	function
(	O
"lsodes-- error from cdrv in yale sparse matrix package      "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
imul	long
=	O
(	O
iys	long
-	O
1	int
)	O
/	O
n	pointer
;	O
irem	long
=	O
iys	long
-	O
imul	long
*	O
n	pointer
;	O
xerrwv	function
(	O
"         at t (=r1), cdrv returned error flag = i1*neq + i2.   "	pointer
,	O
0	int
,	O
2	int
,	O
imul	long
,	O
irem	long
,	O
1	int
,	O
tn	double
,	O
0.0	int
)	O
;	O
if	O
(	O
imul	long
==	O
2	int
)	O
xerrwv	function
(	O
"         duplicate entry in sparsity structure descriptors   "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
if	O
(	O
imul	long
==	O
3	int
||	O
imul	long
==	O
6	int
)	O
xerrwv	function
(	O
"         insufficient storage for nsfc (called by cdrv)      "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L700	O
:	O
if	O
(	O
illin	long
==	O
5	int
)	O
goto	O
L710	O
;	O
++	O
illin	long
;	O
*	O
istate	pointer
=	O
-	O
3	int
;	O
return	O
0	int
;	O
L710	O
:	O
xerrwv	function
(	O
"lsodes-- repeated occurrences of illegal input    "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L800	O
:	O
xerrwv	function
(	O
"lsodes-- run aborted.. apparent infinite loop     "	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
slss_	function
(	O
double	O
*	O
wk	pointer
,	O
long	O
*	O
iwk	pointer
,	O
double	O
*	O
x	pointer
,	O
double	O
*	O
tem	pointer
)	O
{	O
long	O
i__1	long
;	O
long	O
i	long
;	O
double	O
r	pointer
,	O
di	double
,	O
hl0	double
,	O
phl0	double
;	O
--	O
tem	pointer
;	O
--	O
x	pointer
;	O
--	O
iwk	pointer
;	O
--	O
wk	pointer
;	O
iersl	long
=	O
0	int
;	O
switch	O
(	O
miter	long
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
case	O
3	int
:	O
goto	O
L300	O
;	O
}	O
L100	O
:	O
cdrv_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipr	long
]	O
,	O
&	O
iwk	pointer
[	O
ipc	long
]	O
,	O
&	O
iwk	pointer
[	O
ipic	long
]	O
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
wk	pointer
[	O
ipa	long
]	O
,	O
&	O
x	pointer
[	O
1	int
]	O
,	O
&	O
x	pointer
[	O
1	int
]	O
,	O
&	O
nsp	pointer
,	O
&	O
iwk	pointer
[	O
ipisp	long
]	O
,	O
&	O
wk	pointer
[	O
iprsp	long
]	O
,	O
&	O
iesp	long
,	O
4	int
,	O
&	O
iersl	long
)	O
;	O
if	O
(	O
iersl	long
!=	O
0	int
)	O
iersl	long
=	O
-	O
1	int
;	O
return	O
0	int
;	O
L300	O
:	O
phl0	double
=	O
wk	pointer
[	O
2	int
]	O
;	O
hl0	double
=	O
h	double
*	O
el0	double
;	O
wk	pointer
[	O
2	int
]	O
=	O
hl0	double
;	O
if	O
(	O
hl0	double
==	O
phl0	double
)	O
goto	O
L330	O
;	O
r	pointer
=	O
hl0	double
/	O
phl0	double
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
di	double
=	O
1.0	int
-	O
r	pointer
*	O
(	O
1.0	int
-	O
1.0	int
/	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
)	O
;	O
if	O
(	O
fabs	function
(	O
di	double
)	O
==	O
0.	int
)	O
goto	O
L390	O
;	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
=	O
1.0	int
/	O
di	double
;	O
}	O
L330	O
:	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
x	pointer
[	O
i	long
]	O
=	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
*	O
x	pointer
[	O
i	long
]	O
;	O
return	O
0	int
;	O
L390	O
:	O
iersl	long
=	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
prjs_	function
(	O
long	O
*	O
neq	pointer
,	O
double	O
*	O
y	pointer
,	O
double	O
*	O
yh	pointer
,	O
long	O
*	O
nyh	long
,	O
double	O
*	O
ewt	pointer
,	O
double	O
*	O
ftem	pointer
,	O
double	O
*	O
savf	pointer
,	O
double	O
*	O
wk	pointer
,	O
long	O
*	O
iwk	pointer
)	O
{	O
long	O
yh_dim1	long
,	O
yh_offset	long
,	O
i__1	long
,	O
i__2	long
,	O
i__3	long
;	O
double	O
d__1	double
,	O
d__2	double
,	O
d__3	double
;	O
long	O
jmin	long
,	O
jmax	long
,	O
imul	long
,	O
kmax	long
,	O
kmin	long
;	O
double	O
rcon	double
;	O
double	O
srur	double
;	O
long	O
i	long
,	O
j	long
,	O
k	pointer
;	O
double	O
r	pointer
,	O
rcont	double
;	O
double	O
r0	double
,	O
di	double
;	O
long	O
jj	long
,	O
ng	long
;	O
double	O
hl0	double
,	O
fac	double
,	O
con	double
,	O
pij	double
;	O
long	O
jok	long
;	O
--	O
iwk	pointer
;	O
--	O
wk	pointer
;	O
--	O
savf	pointer
;	O
--	O
ftem	pointer
;	O
--	O
ewt	pointer
;	O
yh_dim1	long
=	O
*	O
nyh	long
;	O
yh_offset	long
=	O
yh_dim1	long
+	O
1	int
;	O
yh	pointer
-=	O
yh_offset	long
;	O
--	O
y	pointer
;	O
--	O
neq	pointer
;	O
hl0	double
=	O
h	double
*	O
el0	double
;	O
con	double
=	O
-	O
hl0	double
;	O
if	O
(	O
miter	long
==	O
3	int
)	O
{	O
jcur	long
=	O
1	int
;	O
++	O
nje	long
;	O
wk	pointer
[	O
2	int
]	O
=	O
hl0	double
;	O
ierpj	long
=	O
0	int
;	O
r	pointer
=	O
el0	double
*	O
0.1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
+=	O
r	pointer
*	O
(	O
h	double
*	O
savf	pointer
[	O
i	long
]	O
-	O
yh	pointer
[	O
i	long
+	O
(	O
yh_dim1	long
<<	O
1	int
)	O
]	O
)	O
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
wk	pointer
[	O
3	int
]	O
,	O
&	O
tn	double
)	O
;	O
++	O
nfe	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
{	O
r0	double
=	O
h	double
*	O
savf	pointer
[	O
i	long
]	O
-	O
yh	pointer
[	O
i	long
+	O
(	O
yh_dim1	long
<<	O
1	int
)	O
]	O
;	O
di	double
=	O
r0	double
*	O
0.1	int
-	O
h	double
*	O
(	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
-	O
savf	pointer
[	O
i	long
]	O
)	O
;	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
=	O
1.0	int
;	O
if	O
(	O
fabs	function
(	O
r0	double
)	O
>=	O
(	O
uround	double
/	O
ewt	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
fabs	function
(	O
di	double
)	O
==	O
0.0	int
)	O
{	O
ierpj	long
=	O
2	int
;	O
return	O
0	int
;	O
}	O
wk	pointer
[	O
i	long
+	O
2	int
]	O
=	O
r0	double
*	O
0.1	int
/	O
di	double
;	O
}	O
}	O
return	O
0	int
;	O
}	O
jok	long
=	O
1	int
;	O
if	O
(	O
nst	long
==	O
0	int
||	O
nst	long
>=	O
nslj	long
+	O
msbj	long
)	O
jok	long
=	O
0	int
;	O
if	O
(	O
(	O
icf	long
==	O
1	int
)	O
&&	O
(	O
fabs	function
(	O
rc	double
-	O
1	int
)	O
<	O
ccmxj	double
)	O
)	O
jok	long
=	O
0	int
;	O
if	O
(	O
icf	long
==	O
2	int
)	O
jok	long
=	O
0	int
;	O
if	O
(	O
jok	long
==	O
1	int
)	O
goto	O
L250	O
;	O
L20	O
:	O
jcur	long
=	O
1	int
;	O
++	O
nje	long
;	O
nslj	long
=	O
nst	long
;	O
iplost	long
=	O
0	int
;	O
conmin	double
=	O
fabs	function
(	O
con	double
)	O
;	O
switch	O
(	O
miter	long
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L200	O
;	O
}	O
L100	O
:	O
kmin	long
=	O
iwk	pointer
[	O
ipian	long
]	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
kmax	long
=	O
iwk	pointer
[	O
ipian	long
+	O
j	long
]	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
ftem	pointer
[	O
i	long
]	O
=	O
0.0	int
;	O
CalcJacob	function
(	O
&	O
tn	double
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
j	long
,	O
&	O
ftem	pointer
[	O
1	int
]	O
)	O
;	O
i__2	long
=	O
kmax	long
;	O
for	O
(	O
k	pointer
=	O
kmin	long
;	O
k	pointer
<=	O
i__2	long
;	O
++	O
k	pointer
)	O
{	O
i	long
=	O
iwk	pointer
[	O
ibjan	long
+	O
k	pointer
]	O
;	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
=	O
ftem	pointer
[	O
i	long
]	O
*	O
con	double
;	O
if	O
(	O
i	long
==	O
j	long
)	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
+=	O
1.0	int
;	O
}	O
kmin	long
=	O
kmax	long
+	O
1	int
;	O
}	O
goto	O
L290	O
;	O
L200	O
:	O
fac	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
;	O
r0	double
=	O
fabs	function
(	O
h	double
)	O
*	O
1e3	int
*	O
uround	double
*	O
(	O
double	O
)	O
n	pointer
*	O
fac	double
;	O
if	O
(	O
r0	double
==	O
0.	int
)	O
r0	double
=	O
1.0	int
;	O
srur	double
=	O
wk	pointer
[	O
1	int
]	O
;	O
jmin	long
=	O
iwk	pointer
[	O
ipigp	long
]	O
;	O
i__1	long
=	O
ngp	long
;	O
for	O
(	O
ng	long
=	O
1	int
;	O
ng	long
<=	O
i__1	long
;	O
++	O
ng	long
)	O
{	O
jmax	long
=	O
iwk	pointer
[	O
ipigp	long
+	O
ng	long
]	O
-	O
1	int
;	O
i__2	long
=	O
jmax	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
i__2	long
;	O
++	O
j	long
)	O
{	O
jj	long
=	O
iwk	pointer
[	O
ibjgp	long
+	O
j	long
]	O
;	O
d__2	double
=	O
srur	double
*	O
fabs	function
(	O
y	pointer
[	O
jj	long
]	O
)	O
,	O
d__3	double
=	O
r0	double
/	O
ewt	pointer
[	O
jj	long
]	O
;	O
r	pointer
=	O
mymax	O
(	O
d__2	double
,	O
d__3	double
)	O
;	O
y	pointer
[	O
jj	long
]	O
+=	O
r	pointer
;	O
}	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
ftem	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
i__2	long
=	O
jmax	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
i__2	long
;	O
++	O
j	long
)	O
{	O
jj	long
=	O
iwk	pointer
[	O
ibjgp	long
+	O
j	long
]	O
;	O
y	pointer
[	O
jj	long
]	O
=	O
yh	pointer
[	O
jj	long
+	O
yh_dim1	long
]	O
;	O
d__2	double
=	O
srur	double
*	O
fabs	function
(	O
y	pointer
[	O
jj	long
]	O
)	O
,	O
d__3	double
=	O
r0	double
/	O
ewt	pointer
[	O
jj	long
]	O
;	O
r	pointer
=	O
mymax	O
(	O
d__2	double
,	O
d__3	double
)	O
;	O
fac	double
=	O
-	O
hl0	double
/	O
r	pointer
;	O
kmin	long
=	O
iwk	pointer
[	O
ibian	long
+	O
jj	long
]	O
;	O
kmax	long
=	O
iwk	pointer
[	O
ibian	long
+	O
jj	long
+	O
1	int
]	O
-	O
1	int
;	O
i__3	long
=	O
kmax	long
;	O
for	O
(	O
k	pointer
=	O
kmin	long
;	O
k	pointer
<=	O
i__3	long
;	O
++	O
k	pointer
)	O
{	O
i	long
=	O
iwk	pointer
[	O
ibjan	long
+	O
k	pointer
]	O
;	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
=	O
(	O
ftem	pointer
[	O
i	long
]	O
-	O
savf	pointer
[	O
i	long
]	O
)	O
*	O
fac	double
;	O
if	O
(	O
i	long
==	O
jj	long
)	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
+=	O
1.0	int
;	O
}	O
}	O
jmin	long
=	O
jmax	long
+	O
1	int
;	O
}	O
nfe	long
+=	O
ngp	long
;	O
goto	O
L290	O
;	O
L250	O
:	O
jcur	long
=	O
0	int
;	O
rcon	double
=	O
con	double
/	O
con0	double
;	O
rcont	double
=	O
fabs	function
(	O
con	double
)	O
/	O
conmin	double
;	O
if	O
(	O
rcont	double
>	O
rbig	double
&&	O
iplost	long
==	O
1	int
)	O
goto	O
L20	O
;	O
kmin	long
=	O
iwk	pointer
[	O
ipian	long
]	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
kmax	long
=	O
iwk	pointer
[	O
ipian	long
+	O
j	long
]	O
-	O
1	int
;	O
i__2	long
=	O
kmax	long
;	O
for	O
(	O
k	pointer
=	O
kmin	long
;	O
k	pointer
<=	O
i__2	long
;	O
++	O
k	pointer
)	O
{	O
i	long
=	O
iwk	pointer
[	O
ibjan	long
+	O
k	pointer
]	O
;	O
pij	double
=	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
;	O
if	O
(	O
i	long
!=	O
j	long
)	O
goto	O
L260	O
;	O
pij	double
+=	O
-	O
1.	int
;	O
if	O
(	O
fabs	function
(	O
pij	double
)	O
>=	O
psmall	double
)	O
goto	O
L260	O
;	O
iplost	long
=	O
1	int
;	O
d__1	double
=	O
fabs	function
(	O
con0	double
)	O
;	O
conmin	double
=	O
mymin	O
(	O
d__1	double
,	O
conmin	double
)	O
;	O
L260	O
:	O
pij	double
*=	O
rcon	double
;	O
if	O
(	O
i	long
==	O
j	long
)	O
pij	double
+=	O
1.0	int
;	O
wk	pointer
[	O
iba	long
+	O
k	pointer
]	O
=	O
pij	double
;	O
}	O
kmin	long
=	O
kmax	long
+	O
1	int
;	O
}	O
L290	O
:	O
++	O
nlu	long
;	O
con0	double
=	O
con	double
;	O
ierpj	long
=	O
0	int
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
ftem	pointer
[	O
i	long
]	O
=	O
0.0	int
;	O
cdrv_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipr	long
]	O
,	O
&	O
iwk	pointer
[	O
ipc	long
]	O
,	O
&	O
iwk	pointer
[	O
ipic	long
]	O
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
wk	pointer
[	O
ipa	long
]	O
,	O
&	O
ftem	pointer
[	O
1	int
]	O
,	O
&	O
ftem	pointer
[	O
1	int
]	O
,	O
&	O
nsp	pointer
,	O
&	O
iwk	pointer
[	O
ipisp	long
]	O
,	O
&	O
wk	pointer
[	O
iprsp	long
]	O
,	O
&	O
iesp	long
,	O
2	int
,	O
&	O
iys	long
)	O
;	O
if	O
(	O
iys	long
==	O
0	int
)	O
return	O
0	int
;	O
imul	long
=	O
(	O
iys	long
-	O
1	int
)	O
/	O
n	pointer
;	O
ierpj	long
=	O
-	O
2	int
;	O
if	O
(	O
imul	long
==	O
8	int
)	O
ierpj	long
=	O
1	int
;	O
if	O
(	O
imul	long
==	O
10	int
)	O
ierpj	long
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
stode_	function
(	O
long	O
*	O
neq	pointer
,	O
double	O
*	O
y	pointer
,	O
double	O
*	O
yh	pointer
,	O
long	O
*	O
nyh	long
,	O
double	O
*	O
yh1	pointer
,	O
double	O
*	O
ewt	pointer
,	O
double	O
*	O
savf	pointer
,	O
double	O
*	O
acor	pointer
,	O
double	O
*	O
wm	pointer
,	O
long	O
*	O
iwm	pointer
)	O
{	O
long	O
yh_dim1	long
,	O
yh_offset	long
,	O
i__1	long
,	O
i__2	long
;	O
double	O
d__1	double
,	O
d__2	double
,	O
d__3	double
;	O
double	O
dcon	double
,	O
delp	double
,	O
rhdn	double
,	O
exdn	double
;	O
long	O
iret	long
;	O
double	O
told	double
,	O
rhsm	double
;	O
long	O
newq	long
;	O
double	O
exsm	double
,	O
rhup	double
,	O
exup	double
;	O
long	O
i	long
,	O
j	long
,	O
m	long
;	O
double	O
r	pointer
;	O
long	O
i1	long
,	O
iredo	long
=	O
0	int
;	O
long	O
jb	long
;	O
double	O
del	double
,	O
ddn	double
,	O
rh	double
=	O
0.0	int
;	O
long	O
ncf	long
;	O
double	O
dup	double
,	O
dsm	double
=	O
0.0	int
;	O
--	O
iwm	pointer
;	O
--	O
wm	pointer
;	O
--	O
acor	pointer
;	O
--	O
savf	pointer
;	O
--	O
ewt	pointer
;	O
--	O
yh1	pointer
;	O
yh_dim1	long
=	O
*	O
nyh	long
;	O
yh_offset	long
=	O
yh_dim1	long
+	O
1	int
;	O
yh	pointer
-=	O
yh_offset	long
;	O
kflag	long
=	O
0	int
;	O
told	double
=	O
tn	double
;	O
ncf	long
=	O
0	int
;	O
ierpj	long
=	O
0	int
;	O
iersl	long
=	O
0	int
;	O
jcur	long
=	O
0	int
;	O
icf	long
=	O
0	int
;	O
delp	double
=	O
0.	int
;	O
if	O
(	O
jstart	long
>	O
0	int
)	O
goto	O
L200	O
;	O
if	O
(	O
jstart	long
==	O
-	O
1	int
)	O
goto	O
L100	O
;	O
if	O
(	O
jstart	long
==	O
-	O
2	int
)	O
goto	O
L160	O
;	O
lmax	pointer
=	O
maxord	long
+	O
1	int
;	O
nq	long
=	O
1	int
;	O
l	pointer
=	O
2	int
;	O
ialth	long
=	O
2	int
;	O
rmax	double
=	O
1e4	int
;	O
rc	double
=	O
0.	int
;	O
el0	double
=	O
1.	int
;	O
crate	double
=	O
.7	int
;	O
hold	double
=	O
h	double
;	O
meo	long
=	O
meth	pointer
;	O
nslp	long
=	O
0	int
;	O
ipup	long
=	O
miter	long
;	O
iret	long
=	O
3	int
;	O
goto	O
L140	O
;	O
L100	O
:	O
ipup	long
=	O
miter	long
;	O
lmax	pointer
=	O
maxord	long
+	O
1	int
;	O
if	O
(	O
ialth	long
==	O
1	int
)	O
ialth	long
=	O
2	int
;	O
if	O
(	O
meth	pointer
==	O
meo	long
)	O
goto	O
L110	O
;	O
cfode_	function
(	O
&	O
meth	pointer
,	O
elco	pointer
,	O
tesco	pointer
)	O
;	O
meo	long
=	O
meth	pointer
;	O
if	O
(	O
nq	long
>	O
maxord	long
)	O
goto	O
L120	O
;	O
ialth	long
=	O
l	pointer
;	O
iret	long
=	O
1	int
;	O
goto	O
L150	O
;	O
L110	O
:	O
if	O
(	O
nq	long
<=	O
maxord	long
)	O
goto	O
L160	O
;	O
L120	O
:	O
nq	long
=	O
maxord	long
;	O
l	pointer
=	O
lmax	pointer
;	O
i__1	long
=	O
l	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
i__1	long
;	O
++	O
i	long
)	O
el	array
[	O
i	long
]	O
=	O
elco	pointer
[	O
i	long
+	O
nq	long
*	O
13	int
-	O
13	int
]	O
;	O
nqnyh	long
=	O
nq	long
*	O
*	O
nyh	long
;	O
rc	double
=	O
rc	double
*	O
el	array
[	O
0	int
]	O
/	O
el0	double
;	O
el0	double
=	O
el	array
[	O
0	int
]	O
;	O
conit	double
=	O
0.5	int
/	O
(	O
double	O
)	O
(	O
nq	long
+	O
2	int
)	O
;	O
ddn	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
/	O
tesco	pointer
[	O
l	pointer
*	O
3	int
-	O
3	int
]	O
;	O
exdn	double
=	O
1.0	int
/	O
(	O
double	O
)	O
l	pointer
;	O
rhdn	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
ddn	double
,	O
exdn	double
)	O
*	O
1.3	int
+	O
1.3e-6	int
)	O
;	O
rh	double
=	O
mymin	O
(	O
rhdn	double
,	O
1.0	int
)	O
;	O
iredo	long
=	O
3	int
;	O
if	O
(	O
h	double
==	O
hold	double
)	O
goto	O
L170	O
;	O
d__3	double
=	O
fabs	function
(	O
h	double
/	O
hold	double
)	O
;	O
rh	double
=	O
mymin	O
(	O
rh	double
,	O
d__3	double
)	O
;	O
h	double
=	O
hold	double
;	O
goto	O
L175	O
;	O
L140	O
:	O
cfode_	function
(	O
&	O
meth	pointer
,	O
elco	pointer
,	O
tesco	pointer
)	O
;	O
L150	O
:	O
i__1	long
=	O
l	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
el	array
[	O
i	long
-	O
1	int
]	O
=	O
elco	pointer
[	O
i	long
+	O
nq	long
*	O
13	int
-	O
14	int
]	O
;	O
nqnyh	long
=	O
nq	long
*	O
*	O
nyh	long
;	O
rc	double
=	O
rc	double
*	O
el	array
[	O
0	int
]	O
/	O
el0	double
;	O
el0	double
=	O
el	array
[	O
0	int
]	O
;	O
conit	double
=	O
0.5	int
/	O
(	O
double	O
)	O
(	O
nq	long
+	O
2	int
)	O
;	O
switch	O
(	O
iret	long
)	O
{	O
case	O
1	int
:	O
goto	O
L160	O
;	O
case	O
2	int
:	O
goto	O
L170	O
;	O
case	O
3	int
:	O
goto	O
L200	O
;	O
}	O
L160	O
:	O
if	O
(	O
h	double
==	O
hold	double
)	O
goto	O
L200	O
;	O
rh	double
=	O
h	double
/	O
hold	double
;	O
h	double
=	O
hold	double
;	O
iredo	long
=	O
3	int
;	O
goto	O
L175	O
;	O
L170	O
:	O
d__2	double
=	O
hmin	double
/	O
fabs	function
(	O
h	double
)	O
;	O
rh	double
=	O
mymax	O
(	O
rh	double
,	O
d__2	double
)	O
;	O
L175	O
:	O
rh	double
=	O
mymin	O
(	O
rh	double
,	O
rmax	double
)	O
;	O
d__2	double
=	O
fabs	function
(	O
h	double
)	O
*	O
hmxi	double
*	O
rh	double
;	O
rh	double
/=	O
mymax	O
(	O
1.0	int
,	O
d__2	double
)	O
;	O
r	pointer
=	O
1.0	int
;	O
i__1	long
=	O
l	pointer
;	O
for	O
(	O
j	long
=	O
2	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
r	pointer
*=	O
rh	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
yh	pointer
[	O
i	long
+	O
j	long
*	O
yh_dim1	long
]	O
*=	O
r	pointer
;	O
}	O
h	double
*=	O
rh	double
;	O
rc	double
*=	O
rh	double
;	O
ialth	long
=	O
l	pointer
;	O
if	O
(	O
iredo	long
==	O
0	int
)	O
goto	O
L690	O
;	O
L200	O
:	O
if	O
(	O
fabs	function
(	O
rc	double
-	O
1	int
)	O
>	O
ccmax	double
)	O
ipup	long
=	O
miter	long
;	O
if	O
(	O
nst	long
>=	O
nslp	long
+	O
msbp	long
)	O
ipup	long
=	O
miter	long
;	O
tn	double
+=	O
h	double
;	O
i1	long
=	O
nqnyh	long
+	O
1	int
;	O
i__2	long
=	O
nq	long
;	O
for	O
(	O
jb	long
=	O
1	int
;	O
jb	long
<=	O
i__2	long
;	O
++	O
jb	long
)	O
{	O
i1	long
-=	O
*	O
nyh	long
;	O
i__1	long
=	O
nqnyh	long
;	O
for	O
(	O
i	long
=	O
i1	long
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
yh1	pointer
[	O
i	long
]	O
+=	O
yh1	pointer
[	O
i	long
+	O
*	O
nyh	long
]	O
;	O
}	O
L220	O
:	O
m	long
=	O
0	int
;	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
+	O
yh_dim1	long
]	O
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
++	O
nfe	long
;	O
if	O
(	O
ipup	long
<=	O
0	int
)	O
goto	O
L250	O
;	O
prjs_	function
(	O
&	O
neq	pointer
[	O
1	int
]	O
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
yh	pointer
[	O
yh_offset	long
]	O
,	O
nyh	long
,	O
&	O
ewt	pointer
[	O
1	int
]	O
,	O
&	O
acor	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
wm	pointer
[	O
1	int
]	O
,	O
&	O
iwm	pointer
[	O
1	int
]	O
)	O
;	O
ipup	long
=	O
0	int
;	O
rc	double
=	O
1.0	int
;	O
nslp	long
=	O
nst	long
;	O
crate	double
=	O
0.7	int
;	O
if	O
(	O
ierpj	long
!=	O
0	int
)	O
goto	O
L430	O
;	O
L250	O
:	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
acor	pointer
[	O
i	long
]	O
=	O
0.	int
;	O
L270	O
:	O
if	O
(	O
miter	long
!=	O
0	int
)	O
goto	O
L350	O
;	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
{	O
savf	pointer
[	O
i	long
]	O
=	O
h	double
*	O
savf	pointer
[	O
i	long
]	O
-	O
yh	pointer
[	O
i	long
+	O
(	O
yh_dim1	long
<<	O
1	int
)	O
]	O
;	O
y	pointer
[	O
i	long
]	O
=	O
savf	pointer
[	O
i	long
]	O
-	O
acor	pointer
[	O
i	long
]	O
;	O
}	O
del	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
{	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
+	O
yh_dim1	long
]	O
+	O
el	array
[	O
0	int
]	O
*	O
savf	pointer
[	O
i	long
]	O
;	O
acor	pointer
[	O
i	long
]	O
=	O
savf	pointer
[	O
i	long
]	O
;	O
}	O
goto	O
L400	O
;	O
L350	O
:	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
h	double
*	O
savf	pointer
[	O
i	long
]	O
-	O
(	O
yh	pointer
[	O
i	long
+	O
(	O
yh_dim1	long
<<	O
1	int
)	O
]	O
+	O
acor	pointer
[	O
i	long
]	O
)	O
;	O
slss_	function
(	O
&	O
wm	pointer
[	O
1	int
]	O
,	O
&	O
iwm	pointer
[	O
1	int
]	O
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
iersl	long
<	O
0	int
)	O
goto	O
L430	O
;	O
if	O
(	O
iersl	long
>	O
0	int
)	O
goto	O
L410	O
;	O
del	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
;	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
{	O
acor	pointer
[	O
i	long
]	O
+=	O
y	pointer
[	O
i	long
]	O
;	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
+	O
yh_dim1	long
]	O
+	O
el	array
[	O
0	int
]	O
*	O
acor	pointer
[	O
i	long
]	O
;	O
}	O
L400	O
:	O
if	O
(	O
m	long
!=	O
0	int
)	O
{	O
d__1	double
=	O
crate	double
*	O
0.2	int
;	O
d__2	double
=	O
del	double
/	O
delp	double
;	O
crate	double
=	O
mymax	O
(	O
d__1	double
,	O
d__2	double
)	O
;	O
}	O
d__2	double
=	O
crate	double
*	O
1.5	int
;	O
dcon	double
=	O
del	double
*	O
mymin	O
(	O
1.0	int
,	O
d__2	double
)	O
/	O
(	O
tesco	pointer
[	O
nq	long
*	O
3	int
-	O
2	int
]	O
*	O
conit	double
)	O
;	O
if	O
(	O
dcon	double
<=	O
1.	int
)	O
goto	O
L450	O
;	O
++	O
m	long
;	O
if	O
(	O
m	long
==	O
maxcor	long
)	O
goto	O
L410	O
;	O
if	O
(	O
m	long
>=	O
2	int
&&	O
del	double
>	O
delp	double
*	O
2.0	int
)	O
goto	O
L410	O
;	O
delp	double
=	O
del	double
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
++	O
nfe	long
;	O
goto	O
L270	O
;	O
L410	O
:	O
if	O
(	O
miter	long
==	O
0	int
||	O
jcur	long
==	O
1	int
)	O
goto	O
L430	O
;	O
icf	long
=	O
1	int
;	O
ipup	long
=	O
miter	long
;	O
goto	O
L220	O
;	O
L430	O
:	O
icf	long
=	O
2	int
;	O
++	O
ncf	long
;	O
rmax	double
=	O
2.0	int
;	O
tn	double
=	O
told	double
;	O
i1	long
=	O
nqnyh	long
+	O
1	int
;	O
for	O
(	O
jb	long
=	O
1	int
;	O
jb	long
<=	O
nq	long
;	O
++	O
jb	long
)	O
{	O
i1	long
-=	O
*	O
nyh	long
;	O
for	O
(	O
i	long
=	O
i1	long
;	O
i	long
<=	O
nqnyh	long
;	O
++	O
i	long
)	O
yh1	pointer
[	O
i	long
]	O
-=	O
yh1	pointer
[	O
i	long
+	O
*	O
nyh	long
]	O
;	O
}	O
if	O
(	O
ierpj	long
<	O
0	int
||	O
iersl	long
<	O
0	int
)	O
goto	O
L680	O
;	O
if	O
(	O
fabs	function
(	O
h	double
)	O
<=	O
hmin	double
*	O
1.00001	int
)	O
goto	O
L670	O
;	O
if	O
(	O
ncf	long
==	O
mxncf	long
)	O
goto	O
L670	O
;	O
rh	double
=	O
0.25	int
;	O
ipup	long
=	O
miter	long
;	O
iredo	long
=	O
1	int
;	O
goto	O
L170	O
;	O
L450	O
:	O
jcur	long
=	O
0	int
;	O
if	O
(	O
m	long
==	O
0	int
)	O
dsm	double
=	O
del	double
/	O
tesco	pointer
[	O
nq	long
*	O
3	int
-	O
2	int
]	O
;	O
if	O
(	O
m	long
>	O
0	int
)	O
dsm	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
acor	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
/	O
tesco	pointer
[	O
nq	long
*	O
3	int
-	O
2	int
]	O
;	O
if	O
(	O
dsm	double
>	O
1.0	int
)	O
goto	O
L500	O
;	O
kflag	long
=	O
0	int
;	O
iredo	long
=	O
0	int
;	O
++	O
nst	long
;	O
hu	double
=	O
h	double
;	O
nqu	long
=	O
nq	long
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
l	pointer
;	O
++	O
j	long
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
yh	pointer
[	O
i	long
+	O
j	long
*	O
yh_dim1	long
]	O
+=	O
el	array
[	O
j	long
-	O
1	int
]	O
*	O
acor	pointer
[	O
i	long
]	O
;	O
}	O
--	O
ialth	long
;	O
if	O
(	O
ialth	long
==	O
0	int
)	O
goto	O
L520	O
;	O
if	O
(	O
ialth	long
>	O
1	int
)	O
goto	O
L700	O
;	O
if	O
(	O
l	pointer
==	O
lmax	pointer
)	O
goto	O
L700	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
yh	pointer
[	O
i	long
+	O
lmax	pointer
*	O
yh_dim1	long
]	O
=	O
acor	pointer
[	O
i	long
]	O
;	O
goto	O
L700	O
;	O
L500	O
:	O
--	O
kflag	long
;	O
tn	double
=	O
told	double
;	O
i1	long
=	O
nqnyh	long
+	O
1	int
;	O
i__1	long
=	O
nq	long
;	O
for	O
(	O
jb	long
=	O
1	int
;	O
jb	long
<=	O
i__1	long
;	O
++	O
jb	long
)	O
{	O
i1	long
-=	O
*	O
nyh	long
;	O
i__2	long
=	O
nqnyh	long
;	O
for	O
(	O
i	long
=	O
i1	long
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
yh1	pointer
[	O
i	long
]	O
-=	O
yh1	pointer
[	O
i	long
+	O
*	O
nyh	long
]	O
;	O
}	O
rmax	double
=	O
2.0	int
;	O
if	O
(	O
fabs	function
(	O
h	double
)	O
<=	O
hmin	double
*	O
1.00001	int
)	O
goto	O
L660	O
;	O
if	O
(	O
kflag	long
<=	O
-	O
3	int
)	O
goto	O
L640	O
;	O
iredo	long
=	O
2	int
;	O
rhup	double
=	O
0.0	int
;	O
goto	O
L540	O
;	O
L520	O
:	O
rhup	double
=	O
0.0	int
;	O
if	O
(	O
l	pointer
==	O
lmax	pointer
)	O
goto	O
L540	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
savf	pointer
[	O
i	long
]	O
=	O
acor	pointer
[	O
i	long
]	O
-	O
yh	pointer
[	O
i	long
+	O
lmax	pointer
*	O
yh_dim1	long
]	O
;	O
dup	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
/	O
tesco	pointer
[	O
nq	long
*	O
3	int
-	O
1	int
]	O
;	O
exup	double
=	O
1.0	int
/	O
(	O
double	O
)	O
(	O
l	pointer
+	O
1	int
)	O
;	O
rhup	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
dup	double
,	O
exup	double
)	O
*	O
1.4	int
+	O
1.4e-6	int
)	O
;	O
L540	O
:	O
exsm	double
=	O
1.0	int
/	O
(	O
double	O
)	O
l	pointer
;	O
rhsm	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
dsm	double
,	O
exsm	double
)	O
*	O
1.2	int
+	O
1.2e-6	int
)	O
;	O
rhdn	double
=	O
0.0	int
;	O
if	O
(	O
nq	long
==	O
1	int
)	O
goto	O
L560	O
;	O
ddn	double
=	O
vnorm_	function
(	O
&	O
n	pointer
,	O
&	O
yh	pointer
[	O
l	pointer
*	O
yh_dim1	long
+	O
1	int
]	O
,	O
&	O
ewt	pointer
[	O
1	int
]	O
)	O
/	O
tesco	pointer
[	O
nq	long
*	O
3	int
-	O
3	int
]	O
;	O
exdn	double
=	O
1.0	int
/	O
(	O
double	O
)	O
nq	long
;	O
rhdn	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
ddn	double
,	O
exdn	double
)	O
*	O
1.3	int
+	O
1.3e-6	int
)	O
;	O
L560	O
:	O
if	O
(	O
rhsm	double
>=	O
rhup	double
)	O
goto	O
L570	O
;	O
if	O
(	O
rhup	double
>	O
rhdn	double
)	O
goto	O
L590	O
;	O
goto	O
L580	O
;	O
L570	O
:	O
if	O
(	O
rhsm	double
<	O
rhdn	double
)	O
goto	O
L580	O
;	O
newq	long
=	O
nq	long
;	O
rh	double
=	O
rhsm	double
;	O
goto	O
L620	O
;	O
L580	O
:	O
newq	long
=	O
nq	long
-	O
1	int
;	O
rh	double
=	O
rhdn	double
;	O
if	O
(	O
kflag	long
<	O
0	int
&&	O
rh	double
>	O
1.0	int
)	O
rh	double
=	O
1.0	int
;	O
goto	O
L620	O
;	O
L590	O
:	O
newq	long
=	O
l	pointer
;	O
rh	double
=	O
rhup	double
;	O
if	O
(	O
rh	double
<	O
1.1	int
)	O
goto	O
L610	O
;	O
r	pointer
=	O
el	array
[	O
l	pointer
-	O
1	int
]	O
/	O
(	O
double	O
)	O
l	pointer
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
yh	pointer
[	O
i	long
+	O
(	O
newq	long
+	O
1	int
)	O
*	O
yh_dim1	long
]	O
=	O
acor	pointer
[	O
i	long
]	O
*	O
r	pointer
;	O
goto	O
L630	O
;	O
L610	O
:	O
ialth	long
=	O
3	int
;	O
goto	O
L700	O
;	O
L620	O
:	O
if	O
(	O
kflag	long
==	O
0	int
&&	O
rh	double
<	O
1.1	int
)	O
goto	O
L610	O
;	O
if	O
(	O
kflag	long
<=	O
-	O
2	int
)	O
rh	double
=	O
mymin	O
(	O
rh	double
,	O
0.2	int
)	O
;	O
if	O
(	O
newq	long
==	O
nq	long
)	O
goto	O
L170	O
;	O
L630	O
:	O
nq	long
=	O
newq	long
;	O
l	pointer
=	O
nq	long
+	O
1	int
;	O
iret	long
=	O
2	int
;	O
goto	O
L150	O
;	O
L640	O
:	O
if	O
(	O
kflag	long
==	O
-	O
10	int
)	O
goto	O
L660	O
;	O
d__1	double
=	O
hmin	double
/	O
fabs	function
(	O
h	double
)	O
;	O
rh	double
=	O
mymax	O
(	O
d__1	double
,	O
0.1	int
)	O
;	O
h	double
*=	O
rh	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
+	O
yh_dim1	long
]	O
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
++	O
nfe	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
yh	pointer
[	O
i	long
+	O
(	O
yh_dim1	long
<<	O
1	int
)	O
]	O
=	O
h	double
*	O
savf	pointer
[	O
i	long
]	O
;	O
ipup	long
=	O
miter	long
;	O
ialth	long
=	O
5	int
;	O
if	O
(	O
nq	long
==	O
1	int
)	O
goto	O
L200	O
;	O
nq	long
=	O
1	int
;	O
l	pointer
=	O
2	int
;	O
iret	long
=	O
3	int
;	O
goto	O
L150	O
;	O
L660	O
:	O
kflag	long
=	O
-	O
1	int
;	O
goto	O
L720	O
;	O
L670	O
:	O
kflag	long
=	O
-	O
2	int
;	O
goto	O
L720	O
;	O
L680	O
:	O
kflag	long
=	O
-	O
3	int
;	O
goto	O
L720	O
;	O
L690	O
:	O
rmax	double
=	O
10.0	int
;	O
L700	O
:	O
r	pointer
=	O
1.0	int
/	O
tesco	pointer
[	O
nqu	long
*	O
3	int
-	O
2	int
]	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
acor	pointer
[	O
i	long
]	O
*=	O
r	pointer
;	O
L720	O
:	O
hold	double
=	O
h	double
;	O
jstart	long
=	O
1	int
;	O
return	O
0	int
;	O
}	O
double	O
vnorm_	function
(	O
long	O
*	O
n	pointer
,	O
double	O
*	O
v	pointer
,	O
double	O
*	O
w	pointer
)	O
{	O
register	O
double	O
d__1	double
;	O
register	O
long	O
i	long
;	O
register	O
double	O
sum	double
;	O
sum	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
*	O
n	pointer
;	O
++	O
i	long
)	O
{	O
d__1	double
=	O
v	pointer
[	O
i	long
]	O
*	O
w	pointer
[	O
i	long
]	O
;	O
sum	double
+=	O
d__1	double
*	O
d__1	double
;	O
}	O
return	O
sqrt	function
(	O
sum	double
/	O
(	O
double	O
)	O
(	O
*	O
n	pointer
)	O
)	O
;	O
}	O
int	O
cfode_	function
(	O
long	O
*	O
meth	pointer
,	O
double	O
*	O
elco	pointer
,	O
double	O
*	O
tesco	pointer
)	O
{	O
double	O
ragq	double
,	O
pint	double
,	O
xpin	double
,	O
fnqm1	double
;	O
long	O
i	long
;	O
double	O
agamq	double
,	O
rqfac	double
,	O
tsign	double
,	O
rq1fac	double
;	O
long	O
ib	long
;	O
double	O
pc	array
[	O
12	int
]	O
;	O
long	O
nq	long
;	O
double	O
fnq	double
;	O
long	O
nqm1	long
,	O
nqp1	long
;	O
tesco	pointer
-=	O
4	int
;	O
elco	pointer
-=	O
14	int
;	O
switch	O
(	O
*	O
meth	pointer
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L200	O
;	O
}	O
L100	O
:	O
elco	pointer
[	O
14	int
]	O
=	O
1.	int
;	O
elco	pointer
[	O
15	int
]	O
=	O
1.	int
;	O
tesco	pointer
[	O
4	int
]	O
=	O
0.	int
;	O
tesco	pointer
[	O
5	int
]	O
=	O
2.	int
;	O
tesco	pointer
[	O
7	int
]	O
=	O
1.	int
;	O
tesco	pointer
[	O
39	int
]	O
=	O
0.	int
;	O
pc	array
[	O
0	int
]	O
=	O
1.	int
;	O
rqfac	double
=	O
1.	int
;	O
for	O
(	O
nq	long
=	O
2	int
;	O
nq	long
<=	O
12	int
;	O
++	O
nq	long
)	O
{	O
rq1fac	double
=	O
rqfac	double
;	O
rqfac	double
/=	O
(	O
double	O
)	O
nq	long
;	O
nqm1	long
=	O
nq	long
-	O
1	int
;	O
fnqm1	double
=	O
(	O
double	O
)	O
nqm1	long
;	O
nqp1	long
=	O
nq	long
+	O
1	int
;	O
pc	array
[	O
nq	long
-	O
1	int
]	O
=	O
0.	int
;	O
for	O
(	O
ib	long
=	O
1	int
;	O
ib	long
<=	O
nqm1	long
;	O
++	O
ib	long
)	O
{	O
i	long
=	O
nqp1	long
-	O
ib	long
;	O
pc	array
[	O
i	long
-	O
1	int
]	O
=	O
pc	array
[	O
i	long
-	O
2	int
]	O
+	O
fnqm1	double
*	O
pc	array
[	O
i	long
-	O
1	int
]	O
;	O
}	O
pc	array
[	O
0	int
]	O
=	O
fnqm1	double
*	O
pc	array
[	O
0	int
]	O
;	O
pint	double
=	O
pc	array
[	O
0	int
]	O
;	O
xpin	double
=	O
pc	array
[	O
0	int
]	O
/	O
2.	int
;	O
tsign	double
=	O
1.	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<=	O
nq	long
;	O
++	O
i	long
)	O
{	O
tsign	double
=	O
-	O
tsign	double
;	O
pint	double
+=	O
tsign	double
*	O
pc	array
[	O
i	long
-	O
1	int
]	O
/	O
(	O
double	O
)	O
i	long
;	O
xpin	double
+=	O
tsign	double
*	O
pc	array
[	O
i	long
-	O
1	int
]	O
/	O
(	O
double	O
)	O
(	O
i	long
+	O
1	int
)	O
;	O
}	O
elco	pointer
[	O
nq	long
*	O
13	int
+	O
1	int
]	O
=	O
pint	double
*	O
rq1fac	double
;	O
elco	pointer
[	O
nq	long
*	O
13	int
+	O
2	int
]	O
=	O
1.	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<=	O
nq	long
;	O
++	O
i	long
)	O
elco	pointer
[	O
i	long
+	O
1	int
+	O
nq	long
*	O
13	int
]	O
=	O
rq1fac	double
*	O
pc	array
[	O
i	long
-	O
1	int
]	O
/	O
(	O
double	O
)	O
i	long
;	O
agamq	double
=	O
rqfac	double
*	O
xpin	double
;	O
ragq	double
=	O
1.0	int
/	O
agamq	double
;	O
tesco	pointer
[	O
nq	long
*	O
3	int
+	O
2	int
]	O
=	O
ragq	double
;	O
if	O
(	O
nq	long
<	O
12	int
)	O
tesco	pointer
[	O
nqp1	long
*	O
3	int
+	O
1	int
]	O
=	O
ragq	double
*	O
rqfac	double
/	O
(	O
double	O
)	O
nqp1	long
;	O
tesco	pointer
[	O
nqm1	long
*	O
3	int
+	O
3	int
]	O
=	O
ragq	double
;	O
}	O
return	O
0	int
;	O
L200	O
:	O
pc	array
[	O
0	int
]	O
=	O
1.	int
;	O
rq1fac	double
=	O
1.	int
;	O
for	O
(	O
nq	long
=	O
1	int
;	O
nq	long
<=	O
5	int
;	O
++	O
nq	long
)	O
{	O
fnq	double
=	O
(	O
double	O
)	O
nq	long
;	O
nqp1	long
=	O
nq	long
+	O
1	int
;	O
pc	array
[	O
nqp1	long
-	O
1	int
]	O
=	O
0.	int
;	O
for	O
(	O
ib	long
=	O
1	int
;	O
ib	long
<=	O
nq	long
;	O
++	O
ib	long
)	O
{	O
i	long
=	O
nq	long
+	O
2	int
-	O
ib	long
;	O
pc	array
[	O
i	long
-	O
1	int
]	O
=	O
pc	array
[	O
i	long
-	O
2	int
]	O
+	O
fnq	double
*	O
pc	array
[	O
i	long
-	O
1	int
]	O
;	O
}	O
pc	array
[	O
0	int
]	O
=	O
fnq	double
*	O
pc	array
[	O
0	int
]	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nqp1	long
;	O
++	O
i	long
)	O
elco	pointer
[	O
i	long
+	O
nq	long
*	O
13	int
]	O
=	O
pc	array
[	O
i	long
-	O
1	int
]	O
/	O
pc	array
[	O
1	int
]	O
;	O
elco	pointer
[	O
nq	long
*	O
13	int
+	O
2	int
]	O
=	O
1.	int
;	O
tesco	pointer
[	O
nq	long
*	O
3	int
+	O
1	int
]	O
=	O
rq1fac	double
;	O
tesco	pointer
[	O
nq	long
*	O
3	int
+	O
2	int
]	O
=	O
(	O
double	O
)	O
nqp1	long
/	O
elco	pointer
[	O
nq	long
*	O
13	int
+	O
1	int
]	O
;	O
tesco	pointer
[	O
nq	long
*	O
3	int
+	O
3	int
]	O
=	O
(	O
double	O
)	O
(	O
nq	long
+	O
2	int
)	O
/	O
elco	pointer
[	O
nq	long
*	O
13	int
+	O
1	int
]	O
;	O
rq1fac	double
/=	O
fnq	double
;	O
}	O
return	O
0	int
;	O
}	O
int	O
intdy_	function
(	O
double	O
*	O
t	pointer
,	O
long	O
k	pointer
,	O
double	O
*	O
yh	pointer
,	O
long	O
*	O
nyh	long
,	O
double	O
*	O
dky	pointer
,	O
long	O
*	O
iflag	long
)	O
{	O
long	O
yh_dim1	long
,	O
yh_offset	long
,	O
i__1	long
;	O
double	O
c	pointer
;	O
long	O
i	long
,	O
j	long
;	O
double	O
r	pointer
,	O
s	double
;	O
long	O
ic	pointer
,	O
jb	long
,	O
jj	long
;	O
double	O
tp	double
;	O
long	O
jb2	long
,	O
jj1	long
,	O
jp1	long
;	O
--	O
dky	pointer
;	O
yh_dim1	long
=	O
*	O
nyh	long
;	O
yh_offset	long
=	O
yh_dim1	long
+	O
1	int
;	O
yh	pointer
-=	O
yh_offset	long
;	O
*	O
iflag	long
=	O
0	int
;	O
if	O
(	O
k	pointer
<	O
0	int
||	O
k	pointer
>	O
nq	long
)	O
goto	O
L80	O
;	O
tp	double
=	O
tn	double
-	O
hu	double
-	O
uround	double
*	O
100.	int
*	O
(	O
tn	double
+	O
hu	double
)	O
;	O
if	O
(	O
(	O
*	O
t	pointer
-	O
tp	double
)	O
*	O
(	O
*	O
t	pointer
-	O
tn	double
)	O
>	O
0.	int
)	O
goto	O
L90	O
;	O
s	double
=	O
(	O
*	O
t	pointer
-	O
tn	double
)	O
/	O
h	double
;	O
ic	pointer
=	O
1	int
;	O
if	O
(	O
k	pointer
==	O
0	int
)	O
{	O
goto	O
L15	O
;	O
}	O
jj1	long
=	O
l	pointer
-	O
k	pointer
;	O
i__1	long
=	O
nq	long
;	O
for	O
(	O
jj	long
=	O
jj1	long
;	O
jj	long
<=	O
i__1	long
;	O
++	O
jj	long
)	O
{	O
ic	pointer
*=	O
jj	long
;	O
}	O
L15	O
:	O
c	pointer
=	O
(	O
double	O
)	O
ic	pointer
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
dky	pointer
[	O
i	long
]	O
=	O
c	pointer
*	O
yh	pointer
[	O
i	long
+	O
l	pointer
*	O
yh_dim1	long
]	O
;	O
if	O
(	O
k	pointer
==	O
nq	long
)	O
goto	O
L55	O
;	O
jb2	long
=	O
nq	long
-	O
k	pointer
;	O
for	O
(	O
jb	long
=	O
1	int
;	O
jb	long
<=	O
jb2	long
;	O
++	O
jb	long
)	O
{	O
j	long
=	O
nq	long
-	O
jb	long
;	O
jp1	long
=	O
j	long
+	O
1	int
;	O
ic	pointer
=	O
1	int
;	O
if	O
(	O
k	pointer
!=	O
0	int
)	O
{	O
jj1	long
=	O
jp1	long
-	O
k	pointer
;	O
for	O
(	O
jj	long
=	O
jj1	long
;	O
jj	long
<=	O
j	long
;	O
++	O
jj	long
)	O
ic	pointer
*=	O
jj	long
;	O
}	O
c	pointer
=	O
(	O
double	O
)	O
ic	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
dky	pointer
[	O
i	long
]	O
=	O
c	pointer
*	O
yh	pointer
[	O
i	long
+	O
jp1	long
*	O
yh_dim1	long
]	O
+	O
s	double
*	O
dky	pointer
[	O
i	long
]	O
;	O
}	O
if	O
(	O
k	pointer
==	O
0	int
)	O
return	O
0	int
;	O
L55	O
:	O
r	pointer
=	O
pow	function
(	O
h	double
,	O
(	O
double	O
)	O
-	O
k	pointer
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
dky	pointer
[	O
i	long
]	O
=	O
r	pointer
*	O
dky	pointer
[	O
i	long
]	O
;	O
return	O
0	int
;	O
L80	O
:	O
xerrwv	function
(	O
"intdy--  k (=i1) illegal    "	pointer
,	O
0	int
,	O
1	int
,	O
k	pointer
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
*	O
iflag	long
=	O
-	O
1	int
;	O
return	O
0	int
;	O
L90	O
:	O
xerrwv	function
(	O
"intdy--  t (=r1) illegal    "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
*	O
t	pointer
,	O
0.0	int
)	O
;	O
xerrwv	function
(	O
"      t not in interval tcur - hu (= r1) to tcur (=r2)      "	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tp	double
,	O
tn	double
)	O
;	O
*	O
iflag	long
=	O
-	O
2	int
;	O
return	O
0	int
;	O
}	O
int	O
xerrwv	function
(	O
char	O
*	O
msg	pointer
,	O
long	O
level	long
,	O
long	O
ni	long
,	O
long	O
i1	long
,	O
long	O
i2	long
,	O
long	O
nr	long
,	O
double	O
r1	double
,	O
double	O
r2	double
)	O
{	O
long	O
mesflg	long
=	O
1	int
;	O
if	O
(	O
mesflg	long
==	O
0	int
)	O
goto	O
L100	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
ni	long
==	O
1	int
)	O
printf	function
(	O
" in above message, i1=%10ld\n"	pointer
,	O
i1	long
)	O
;	O
if	O
(	O
ni	long
==	O
2	int
)	O
printf	function
(	O
" in above message, i1=%10ld, i2=%10ld\n"	pointer
,	O
i1	long
,	O
i2	long
)	O
;	O
if	O
(	O
nr	long
==	O
1	int
)	O
printf	function
(	O
" in above message, r1=%21.13f\n"	pointer
,	O
r1	double
)	O
;	O
if	O
(	O
nr	long
==	O
2	int
)	O
printf	function
(	O
" in above message, r1=%21.13f, r2=%21.13f\n"	pointer
,	O
r1	double
,	O
r2	double
)	O
;	O
L100	O
:	O
if	O
(	O
level	long
!=	O
2	int
)	O
return	O
0	int
;	O
abort	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
iprep_	function
(	O
long	O
*	O
neq	pointer
,	O
double	O
*	O
y	pointer
,	O
double	O
*	O
rwork	pointer
,	O
long	O
*	O
ia	pointer
,	O
long	O
*	O
ja	pointer
,	O
long	O
*	O
ipflag	long
)	O
{	O
long	O
i__1	long
;	O
long	O
imax	long
,	O
lyhd	long
,	O
lyhn	long
;	O
long	O
i	long
,	O
lewtn	long
;	O
--	O
ja	pointer
;	O
--	O
ia	pointer
;	O
--	O
rwork	pointer
;	O
--	O
y	pointer
;	O
--	O
neq	pointer
;	O
*	O
ipflag	long
=	O
0	int
;	O
prep_	function
(	O
&	O
neq	pointer
[	O
1	int
]	O
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lyh	long
]	O
,	O
&	O
rwork	pointer
[	O
lsavf	long
]	O
,	O
&	O
rwork	pointer
[	O
lewt	long
]	O
,	O
&	O
rwork	pointer
[	O
lacor	long
]	O
,	O
&	O
ia	pointer
[	O
1	int
]	O
,	O
&	O
ja	pointer
[	O
1	int
]	O
,	O
&	O
rwork	pointer
[	O
lwm	long
]	O
,	O
(	O
long	O
*	O
)	O
&	O
rwork	pointer
[	O
lwm	long
]	O
,	O
ipflag	long
)	O
;	O
lenwk	long
=	O
mymax	O
(	O
lreq	long
,	O
lwmin	long
)	O
;	O
if	O
(	O
*	O
ipflag	long
<	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
lyhn	long
=	O
lwm	long
+	O
lenwk	long
;	O
if	O
(	O
lyhn	long
>	O
lyh	long
)	O
{	O
return	O
0	int
;	O
}	O
lyhd	long
=	O
lyh	long
-	O
lyhn	long
;	O
if	O
(	O
lyhd	long
==	O
0	int
)	O
{	O
goto	O
L20	O
;	O
}	O
imax	long
=	O
lyhn	long
-	O
1	int
+	O
lenyhm	long
;	O
i__1	long
=	O
imax	long
;	O
for	O
(	O
i	long
=	O
lyhn	long
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
rwork	pointer
[	O
i	long
]	O
=	O
rwork	pointer
[	O
i	long
+	O
lyhd	long
]	O
;	O
}	O
lyh	long
=	O
lyhn	long
;	O
L20	O
:	O
lsavf	long
=	O
lyh	long
+	O
lenyh	long
;	O
lewtn	long
=	O
lsavf	long
+	O
n	pointer
;	O
lacor	long
=	O
lewtn	long
+	O
n	pointer
;	O
if	O
(	O
istatc	long
==	O
3	int
)	O
{	O
goto	O
L40	O
;	O
}	O
if	O
(	O
lewtn	long
>	O
lewt	long
)	O
{	O
return	O
0	int
;	O
}	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
rwork	pointer
[	O
i	long
+	O
lewtn	long
-	O
1	int
]	O
=	O
rwork	pointer
[	O
i	long
+	O
lewt	long
-	O
1	int
]	O
;	O
}	O
L40	O
:	O
lewt	long
=	O
lewtn	long
;	O
return	O
0	int
;	O
}	O
int	O
prep_	function
(	O
long	O
*	O
neq	pointer
,	O
double	O
*	O
y	pointer
,	O
double	O
*	O
yh	pointer
,	O
double	O
*	O
savf	pointer
,	O
double	O
*	O
ewt	pointer
,	O
double	O
*	O
ftem	pointer
,	O
long	O
*	O
ia	pointer
,	O
long	O
*	O
ja	pointer
,	O
double	O
*	O
wk	pointer
,	O
long	O
*	O
iwk	pointer
,	O
long	O
*	O
ipper	pointer
)	O
{	O
long	O
i__1	long
,	O
i__2	long
;	O
double	O
d_sign	function
(	O
double	O
*	O
,	O
double	O
*	O
)	O
;	O
long	O
ldif	pointer
,	O
ipil	long
,	O
knew	long
,	O
ipiu	long
,	O
kmax	long
,	O
kmin	long
,	O
liwk	long
,	O
maxg	pointer
;	O
double	O
erwt	double
;	O
long	O
iptt1	long
,	O
iptt2	long
,	O
i	long
,	O
j	long
,	O
k	pointer
;	O
long	O
nzsut	pointer
;	O
double	O
dq	double
,	O
yj	double
;	O
long	O
lenigp	long
,	O
jfound	long
;	O
long	O
np1	long
;	O
double	O
fac	double
;	O
long	O
ibr	long
,	O
ier	pointer
;	O
double	O
dyj	double
;	O
--	O
iwk	pointer
;	O
--	O
wk	pointer
;	O
--	O
ja	pointer
;	O
--	O
ia	pointer
;	O
--	O
ftem	pointer
;	O
--	O
ewt	pointer
;	O
--	O
savf	pointer
;	O
--	O
yh	pointer
;	O
--	O
y	pointer
;	O
--	O
neq	pointer
;	O
ibian	long
=	O
lrat	long
<<	O
1	int
;	O
ipian	long
=	O
ibian	long
+	O
1	int
;	O
np1	long
=	O
n	pointer
+	O
1	int
;	O
ipjan	long
=	O
ipian	long
+	O
np1	long
;	O
ibjan	long
=	O
ipjan	long
-	O
1	int
;	O
liwk	long
=	O
lenwk	long
*	O
lrat	long
;	O
if	O
(	O
ipjan	long
+	O
n	pointer
-	O
1	int
>	O
liwk	long
)	O
goto	O
L210	O
;	O
if	O
(	O
moss	long
==	O
0	int
)	O
goto	O
L30	O
;	O
if	O
(	O
istatc	long
==	O
3	int
)	O
goto	O
L20	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__1	long
;	O
++	O
i	long
)	O
{	O
erwt	double
=	O
1.	int
/	O
ewt	pointer
[	O
i	long
]	O
;	O
fac	double
=	O
1.	int
/	O
(	O
(	O
double	O
)	O
i	long
+	O
1.	int
)	O
+	O
1.	int
;	O
y	pointer
[	O
i	long
]	O
+=	O
fac	double
*	O
d_sign	function
(	O
&	O
erwt	double
,	O
&	O
y	pointer
[	O
i	long
]	O
)	O
;	O
}	O
switch	O
(	O
moss	long
)	O
{	O
case	O
1	int
:	O
goto	O
L70	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
}	O
L20	O
:	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
]	O
;	O
switch	O
(	O
moss	long
)	O
{	O
case	O
1	int
:	O
goto	O
L70	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
}	O
L30	O
:	O
knew	long
=	O
ipjan	long
;	O
kmin	long
=	O
ia	pointer
[	O
1	int
]	O
;	O
iwk	pointer
[	O
ipian	long
]	O
=	O
1	int
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
jfound	long
=	O
0	int
;	O
kmax	long
=	O
ia	pointer
[	O
j	long
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
kmin	long
>	O
kmax	long
)	O
goto	O
L45	O
;	O
i__2	long
=	O
kmax	long
;	O
for	O
(	O
k	pointer
=	O
kmin	long
;	O
k	pointer
<=	O
i__2	long
;	O
++	O
k	pointer
)	O
{	O
i	long
=	O
ja	pointer
[	O
k	pointer
]	O
;	O
if	O
(	O
i	long
==	O
j	long
)	O
jfound	long
=	O
1	int
;	O
if	O
(	O
knew	long
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
knew	long
]	O
=	O
i	long
;	O
++	O
knew	long
;	O
}	O
if	O
(	O
jfound	long
==	O
1	int
)	O
goto	O
L50	O
;	O
L45	O
:	O
if	O
(	O
knew	long
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
knew	long
]	O
=	O
j	long
;	O
++	O
knew	long
;	O
L50	O
:	O
iwk	pointer
[	O
ipian	long
+	O
j	long
]	O
=	O
knew	long
+	O
1	int
-	O
ipjan	long
;	O
kmin	long
=	O
kmax	long
+	O
1	int
;	O
}	O
goto	O
L140	O
;	O
L70	O
:	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
k	pointer
=	O
ipjan	long
;	O
iwk	pointer
[	O
ipian	long
]	O
=	O
1	int
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
if	O
(	O
k	pointer
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
k	pointer
]	O
=	O
j	long
;	O
++	O
k	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
savf	pointer
[	O
i	long
]	O
=	O
0.	int
;	O
CalcJacob	function
(	O
&	O
tn	double
,	O
&	O
y	pointer
[	O
1	int
]	O
,	O
j	long
,	O
&	O
savf	pointer
[	O
1	int
]	O
)	O
;	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
{	O
if	O
(	O
fabs	function
(	O
savf	pointer
[	O
i	long
]	O
)	O
<=	O
seth	double
)	O
goto	O
L80	O
;	O
if	O
(	O
i	long
==	O
j	long
)	O
goto	O
L80	O
;	O
if	O
(	O
k	pointer
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
k	pointer
]	O
=	O
i	long
;	O
++	O
k	pointer
;	O
L80	O
:	O
;	O
}	O
iwk	pointer
[	O
ipian	long
+	O
j	long
]	O
=	O
k	pointer
+	O
1	int
-	O
ipjan	long
;	O
}	O
goto	O
L140	O
;	O
L100	O
:	O
k	pointer
=	O
ipjan	long
;	O
iwk	pointer
[	O
ipian	long
]	O
=	O
1	int
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
savf	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
i__1	long
=	O
n	pointer
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i__1	long
;	O
++	O
j	long
)	O
{	O
if	O
(	O
k	pointer
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
k	pointer
]	O
=	O
j	long
;	O
++	O
k	pointer
;	O
yj	double
=	O
y	pointer
[	O
j	long
]	O
;	O
erwt	double
=	O
1.	int
/	O
ewt	pointer
[	O
j	long
]	O
;	O
dyj	double
=	O
d_sign	function
(	O
&	O
erwt	double
,	O
&	O
yj	double
)	O
;	O
y	pointer
[	O
j	long
]	O
=	O
yj	double
+	O
dyj	double
;	O
CalcDeriv	function
(	O
&	O
y	pointer
[	O
1	int
]	O
,	O
&	O
ftem	pointer
[	O
1	int
]	O
,	O
&	O
tn	double
)	O
;	O
y	pointer
[	O
j	long
]	O
=	O
yj	double
;	O
i__2	long
=	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
i__2	long
;	O
++	O
i	long
)	O
{	O
dq	double
=	O
(	O
ftem	pointer
[	O
i	long
]	O
-	O
savf	pointer
[	O
i	long
]	O
)	O
/	O
dyj	double
;	O
if	O
(	O
fabs	function
(	O
dq	double
)	O
<=	O
seth	double
)	O
goto	O
L110	O
;	O
if	O
(	O
i	long
==	O
j	long
)	O
goto	O
L110	O
;	O
if	O
(	O
k	pointer
>	O
liwk	long
)	O
goto	O
L210	O
;	O
iwk	pointer
[	O
k	pointer
]	O
=	O
i	long
;	O
++	O
k	pointer
;	O
L110	O
:	O
;	O
}	O
iwk	pointer
[	O
ipian	long
+	O
j	long
]	O
=	O
k	pointer
+	O
1	int
-	O
ipjan	long
;	O
}	O
L140	O
:	O
if	O
(	O
moss	long
==	O
0	int
||	O
istatc	long
!=	O
1	int
)	O
goto	O
L150	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
y	pointer
[	O
i	long
]	O
=	O
yh	pointer
[	O
i	long
]	O
;	O
L150	O
:	O
nnz	long
=	O
iwk	pointer
[	O
ipian	long
+	O
n	pointer
]	O
-	O
1	int
;	O
lenigp	long
=	O
0	int
;	O
ipigp	long
=	O
ipjan	long
+	O
nnz	long
;	O
if	O
(	O
miter	long
!=	O
2	int
)	O
goto	O
L160	O
;	O
maxg	pointer
=	O
np1	long
;	O
ipjgp	long
=	O
ipjan	long
+	O
nnz	long
;	O
ibjgp	long
=	O
ipjgp	long
-	O
1	int
;	O
ipigp	long
=	O
ipjgp	long
+	O
n	pointer
;	O
iptt1	long
=	O
ipigp	long
+	O
np1	long
;	O
iptt2	long
=	O
iptt1	long
+	O
n	pointer
;	O
lreq	long
=	O
iptt2	long
+	O
n	pointer
-	O
1	int
;	O
if	O
(	O
lreq	long
>	O
liwk	long
)	O
goto	O
L220	O
;	O
jgroup_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
maxg	pointer
,	O
&	O
ngp	long
,	O
&	O
iwk	pointer
[	O
ipigp	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjgp	long
]	O
,	O
&	O
iwk	pointer
[	O
iptt1	long
]	O
,	O
&	O
iwk	pointer
[	O
iptt2	long
]	O
,	O
&	O
ier	pointer
)	O
;	O
if	O
(	O
ier	pointer
!=	O
0	int
)	O
goto	O
L220	O
;	O
lenigp	long
=	O
ngp	long
+	O
1	int
;	O
L160	O
:	O
ipr	long
=	O
ipigp	long
+	O
lenigp	long
;	O
ipc	long
=	O
ipr	long
;	O
ipic	long
=	O
ipc	long
+	O
n	pointer
;	O
ipisp	long
=	O
ipic	long
+	O
n	pointer
;	O
iprsp	long
=	O
(	O
ipisp	long
-	O
2	int
)	O
/	O
lrat	long
+	O
2	int
;	O
iesp	long
=	O
lenwk	long
+	O
1	int
-	O
iprsp	long
;	O
if	O
(	O
iesp	long
<	O
0	int
)	O
goto	O
L230	O
;	O
ibr	long
=	O
ipr	long
-	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	pointer
;	O
++	O
i	long
)	O
iwk	pointer
[	O
ibr	long
+	O
i	long
]	O
=	O
i	long
;	O
nsp	pointer
=	O
liwk	long
+	O
1	int
-	O
ipisp	long
;	O
odrv_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
wk	pointer
[	O
1	int
]	O
,	O
&	O
iwk	pointer
[	O
ipr	long
]	O
,	O
&	O
iwk	pointer
[	O
ipic	long
]	O
,	O
&	O
nsp	pointer
,	O
&	O
iwk	pointer
[	O
ipisp	long
]	O
,	O
1	int
,	O
&	O
iys	long
)	O
;	O
if	O
(	O
iys	long
==	O
n	pointer
*	O
11	int
+	O
1	int
)	O
goto	O
L240	O
;	O
if	O
(	O
iys	long
!=	O
0	int
)	O
goto	O
L230	O
;	O
ipa	long
=	O
lenwk	long
+	O
1	int
-	O
nnz	long
;	O
nsp	pointer
=	O
ipa	long
-	O
iprsp	long
;	O
i__1	long
=	O
n	pointer
*	O
12	int
/	O
lrat	long
,	O
i__2	long
=	O
n	pointer
*	O
6	int
/	O
lrat	long
+	O
(	O
n	pointer
<<	O
1	int
)	O
+	O
nnz	long
;	O
lreq	long
=	O
mymax	O
(	O
i__1	long
,	O
i__2	long
)	O
+	O
3	int
;	O
lreq	long
=	O
lreq	long
+	O
iprsp	long
-	O
1	int
+	O
nnz	long
;	O
if	O
(	O
lreq	long
>	O
lenwk	long
)	O
goto	O
L250	O
;	O
iba	long
=	O
ipa	long
-	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nnz	long
;	O
++	O
i	long
)	O
wk	pointer
[	O
iba	long
+	O
i	long
]	O
=	O
0.0	int
;	O
ipisp	long
=	O
lrat	long
*	O
(	O
iprsp	long
-	O
1	int
)	O
+	O
1	int
;	O
cdrv_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipr	long
]	O
,	O
&	O
iwk	pointer
[	O
ipc	long
]	O
,	O
&	O
iwk	pointer
[	O
ipic	long
]	O
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
wk	pointer
[	O
ipa	long
]	O
,	O
&	O
wk	pointer
[	O
ipa	long
]	O
,	O
&	O
wk	pointer
[	O
ipa	long
]	O
,	O
&	O
nsp	pointer
,	O
&	O
iwk	pointer
[	O
ipisp	long
]	O
,	O
&	O
wk	pointer
[	O
iprsp	long
]	O
,	O
&	O
iesp	long
,	O
5	int
,	O
&	O
iys	long
)	O
;	O
lreq	long
=	O
lenwk	long
-	O
iesp	long
;	O
if	O
(	O
iys	long
==	O
n	pointer
*	O
10	int
+	O
1	int
)	O
goto	O
L250	O
;	O
if	O
(	O
iys	long
!=	O
0	int
)	O
goto	O
L260	O
;	O
ipil	long
=	O
ipisp	long
;	O
ipiu	long
=	O
ipil	long
+	O
(	O
n	pointer
<<	O
1	int
)	O
+	O
1	int
;	O
nzu	long
=	O
iwk	pointer
[	O
ipil	long
+	O
n	pointer
]	O
-	O
iwk	pointer
[	O
ipil	long
]	O
;	O
nzl	long
=	O
iwk	pointer
[	O
ipiu	long
+	O
n	pointer
]	O
-	O
iwk	pointer
[	O
ipiu	long
]	O
;	O
if	O
(	O
lrat	long
>	O
1	int
)	O
goto	O
L190	O
;	O
adjlr_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipisp	long
]	O
,	O
&	O
ldif	pointer
)	O
;	O
lreq	long
+=	O
ldif	pointer
;	O
L190	O
:	O
if	O
(	O
lrat	long
==	O
2	int
&&	O
nnz	long
==	O
n	pointer
)	O
++	O
lreq	long
;	O
nsp	pointer
=	O
nsp	pointer
+	O
lreq	long
-	O
lenwk	long
;	O
ipa	long
=	O
lreq	long
+	O
1	int
-	O
nnz	long
;	O
iba	long
=	O
ipa	long
-	O
1	int
;	O
*	O
ipper	pointer
=	O
0	int
;	O
return	O
0	int
;	O
L210	O
:	O
*	O
ipper	pointer
=	O
-	O
1	int
;	O
lreq	long
=	O
(	O
(	O
n	pointer
<<	O
1	int
)	O
+	O
1	int
)	O
/	O
lrat	long
+	O
2	int
;	O
i__1	long
=	O
lenwk	long
+	O
1	int
;	O
lreq	long
=	O
mymax	O
(	O
i__1	long
,	O
lreq	long
)	O
;	O
return	O
0	int
;	O
L220	O
:	O
*	O
ipper	pointer
=	O
-	O
2	int
;	O
lreq	long
=	O
(	O
lreq	long
-	O
1	int
)	O
/	O
lrat	long
+	O
1	int
;	O
return	O
0	int
;	O
L230	O
:	O
*	O
ipper	pointer
=	O
-	O
3	int
;	O
cntnzu_	function
(	O
&	O
n	pointer
,	O
&	O
iwk	pointer
[	O
ipian	long
]	O
,	O
&	O
iwk	pointer
[	O
ipjan	long
]	O
,	O
&	O
nzsut	pointer
)	O
;	O
lreq	long
=	O
lenwk	long
-	O
iesp	long
+	O
(	O
n	pointer
*	O
3	int
+	O
(	O
nzsut	pointer
<<	O
2	int
)	O
-	O
1	int
)	O
/	O
lrat	long
+	O
1	int
;	O
return	O
0	int
;	O
L240	O
:	O
*	O
ipper	pointer
=	O
-	O
4	int
;	O
return	O
0	int
;	O
L250	O
:	O
*	O
ipper	pointer
=	O
-	O
5	int
;	O
return	O
0	int
;	O
L260	O
:	O
*	O
ipper	pointer
=	O
-	O
6	int
;	O
lreq	long
=	O
lenwk	long
;	O
return	O
0	int
;	O
}	O
int	O
cntnzu_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
ia	pointer
,	O
long	O
*	O
ja	pointer
,	O
long	O
*	O
nzsut	pointer
)	O
{	O
long	O
i__1	long
,	O
i__2	long
,	O
i__3	long
;	O
long	O
jmin	long
,	O
kmin	long
,	O
jmax	long
,	O
kmax	long
,	O
j	long
,	O
k	pointer
,	O
ii	long
,	O
jj	long
,	O
num	long
;	O
--	O
ja	pointer
;	O
--	O
ia	pointer
;	O
num	long
=	O
0	int
;	O
i__1	long
=	O
*	O
n	pointer
;	O
for	O
(	O
ii	long
=	O
1	int
;	O
ii	long
<=	O
i__1	long
;	O
++	O
ii	long
)	O
{	O
jmin	long
=	O
ia	pointer
[	O
ii	long
]	O
;	O
jmax	long
=	O
ia	pointer
[	O
ii	long
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
>	O
jmax	long
)	O
goto	O
L50	O
;	O
i__2	long
=	O
jmax	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
i__2	long
;	O
++	O
j	long
)	O
{	O
if	O
(	O
(	O
i__3	long
=	O
ja	pointer
[	O
j	long
]	O
-	O
ii	long
)	O
<	O
0	int
)	O
{	O
goto	O
L10	O
;	O
}	O
else	O
{	O
if	O
(	O
i__3	long
==	O
0	int
)	O
{	O
goto	O
L40	O
;	O
}	O
else	O
{	O
goto	O
L30	O
;	O
}	O
}	O
L10	O
:	O
jj	long
=	O
ja	pointer
[	O
j	long
]	O
;	O
kmin	long
=	O
ia	pointer
[	O
jj	long
]	O
;	O
kmax	long
=	O
ia	pointer
[	O
jj	long
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
kmin	long
>	O
kmax	long
)	O
goto	O
L30	O
;	O
i__3	long
=	O
kmax	long
;	O
for	O
(	O
k	pointer
=	O
kmin	long
;	O
k	pointer
<=	O
i__3	long
;	O
++	O
k	pointer
)	O
{	O
if	O
(	O
ja	pointer
[	O
k	pointer
]	O
==	O
ii	long
)	O
goto	O
L40	O
;	O
}	O
L30	O
:	O
++	O
num	long
;	O
L40	O
:	O
;	O
}	O
L50	O
:	O
;	O
}	O
*	O
nzsut	pointer
=	O
num	long
;	O
return	O
0	int
;	O
}	O
int	O
adjlr_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
isp	pointer
,	O
long	O
*	O
ldif	pointer
)	O
{	O
long	O
lnfc	long
,	O
lsfc	long
,	O
nzlu	long
,	O
jlmax	pointer
,	O
jumax	pointer
,	O
ip	pointer
;	O
--	O
isp	pointer
;	O
ip	pointer
=	O
(	O
*	O
n	pointer
<<	O
1	int
)	O
+	O
1	int
;	O
jlmax	pointer
=	O
isp	pointer
[	O
ip	pointer
]	O
;	O
jumax	pointer
=	O
isp	pointer
[	O
ip	pointer
+	O
ip	pointer
]	O
;	O
nzlu	long
=	O
isp	pointer
[	O
*	O
n	pointer
+	O
1	int
]	O
-	O
isp	pointer
[	O
1	int
]	O
+	O
isp	pointer
[	O
ip	pointer
+	O
*	O
n	pointer
+	O
1	int
]	O
-	O
isp	pointer
[	O
ip	pointer
+	O
1	int
]	O
;	O
lsfc	long
=	O
*	O
n	pointer
*	O
12	int
+	O
3	int
+	O
(	O
mymax	O
(	O
jlmax	pointer
,	O
jumax	pointer
)	O
<<	O
1	int
)	O
;	O
lnfc	long
=	O
*	O
n	pointer
*	O
9	int
+	O
2	int
+	O
jlmax	pointer
+	O
jumax	pointer
+	O
nzlu	long
;	O
*	O
ldif	pointer
=	O
lsfc	long
-	O
lnfc	long
;	O
if	O
(	O
*	O
ldif	pointer
<	O
0	int
)	O
*	O
ldif	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
cdrv_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
r	pointer
,	O
long	O
*	O
c	pointer
,	O
long	O
*	O
ic	pointer
,	O
long	O
*	O
ia	pointer
,	O
long	O
*	O
ja	pointer
,	O
double	O
*	O
a	pointer
,	O
double	O
*	O
b	pointer
,	O
double	O
*	O
z	pointer
,	O
long	O
*	O
nsp	pointer
,	O
long	O
*	O
isp	pointer
,	O
double	O
*	O
rsp	pointer
,	O
long	O
*	O
esp	pointer
,	O
long	O
path	long
,	O
long	O
*	O
flag_	pointer
)	O
{	O
long	O
irac	pointer
;	O
long	O
lmax	pointer
,	O
umax	pointer
,	O
d	pointer
,	O
i	long
,	O
j	long
,	O
l	pointer
,	O
q	pointer
,	O
u	pointer
,	O
jlmax	pointer
,	O
jumax	pointer
,	O
jutmp	long
,	O
ar	pointer
,	O
il	pointer
,	O
jl	pointer
,	O
iu	pointer
,	O
ju	pointer
,	O
ira	pointer
,	O
jra	pointer
,	O
ijl	pointer
,	O
max_	pointer
,	O
irl	pointer
,	O
iju	pointer
,	O
jrl	pointer
,	O
iru	pointer
,	O
tmp	pointer
,	O
jru	pointer
,	O
row	pointer
;	O
long	O
lratio	long
;	O
lratio	long
=	O
sizeof	O
(	O
double	O
)	O
/	O
sizeof	O
(	O
long	O
)	O
;	O
if	O
(	O
lratio	long
<	O
1	int
)	O
lratio	long
=	O
1	int
;	O
--	O
rsp	pointer
;	O
--	O
isp	pointer
;	O
--	O
z	pointer
;	O
--	O
b	pointer
;	O
--	O
a	pointer
;	O
--	O
ja	pointer
;	O
--	O
ia	pointer
;	O
--	O
ic	pointer
;	O
--	O
c	pointer
;	O
--	O
r	pointer
;	O
if	O
(	O
path	long
<	O
1	int
||	O
5	int
<	O
path	long
)	O
{	O
*	O
flag_	pointer
=	O
*	O
n	pointer
*	O
11	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
il	pointer
=	O
1	int
;	O
ijl	pointer
=	O
il	pointer
+	O
(	O
*	O
n	pointer
+	O
1	int
)	O
;	O
iu	pointer
=	O
ijl	pointer
+	O
*	O
n	pointer
;	O
iju	pointer
=	O
iu	pointer
+	O
(	O
*	O
n	pointer
+	O
1	int
)	O
;	O
irl	pointer
=	O
iju	pointer
+	O
*	O
n	pointer
;	O
jrl	pointer
=	O
irl	pointer
+	O
*	O
n	pointer
;	O
jl	pointer
=	O
jrl	pointer
+	O
*	O
n	pointer
;	O
if	O
(	O
(	O
path	long
-	O
1	int
)	O
*	O
(	O
path	long
-	O
5	int
)	O
!=	O
0	int
)	O
goto	O
L5	O
;	O
max_	pointer
=	O
lratio	long
*	O
*	O
nsp	pointer
+	O
1	int
-	O
jl	pointer
-	O
(	O
*	O
n	pointer
+	O
1	int
)	O
-	O
*	O
n	pointer
*	O
5	int
;	O
jlmax	pointer
=	O
max_	pointer
/	O
2	int
;	O
q	pointer
=	O
jl	pointer
+	O
jlmax	pointer
;	O
ira	pointer
=	O
q	pointer
+	O
(	O
*	O
n	pointer
+	O
1	int
)	O
;	O
jra	pointer
=	O
ira	pointer
+	O
*	O
n	pointer
;	O
irac	pointer
=	O
jra	pointer
+	O
*	O
n	pointer
;	O
iru	pointer
=	O
irac	pointer
+	O
*	O
n	pointer
;	O
jru	pointer
=	O
iru	pointer
+	O
*	O
n	pointer
;	O
jutmp	long
=	O
jru	pointer
+	O
*	O
n	pointer
;	O
jumax	pointer
=	O
lratio	long
*	O
*	O
nsp	pointer
+	O
1	int
-	O
jutmp	long
;	O
*	O
esp	pointer
=	O
max_	pointer
/	O
lratio	long
;	O
if	O
(	O
jlmax	pointer
<=	O
0	int
||	O
jumax	pointer
<=	O
0	int
)	O
goto	O
L110	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
*	O
n	pointer
;	O
++	O
i	long
)	O
if	O
(	O
c	pointer
[	O
i	long
]	O
!=	O
i	long
)	O
goto	O
L2	O
;	O
goto	O
L3	O
;	O
L2	O
:	O
ar	pointer
=	O
*	O
nsp	pointer
+	O
1	int
-	O
*	O
n	pointer
;	O
nroc_	function
(	O
n	pointer
,	O
&	O
ic	pointer
[	O
1	int
]	O
,	O
&	O
ia	pointer
[	O
1	int
]	O
,	O
&	O
ja	pointer
[	O
1	int
]	O
,	O
&	O
a	pointer
[	O
1	int
]	O
,	O
&	O
isp	pointer
[	O
il	pointer
]	O
,	O
&	O
rsp	pointer
[	O
ar	pointer
]	O
,	O
&	O
isp	pointer
[	O
iu	pointer
]	O
,	O
flag_	pointer
)	O
;	O
if	O
(	O
*	O
flag_	pointer
!=	O
0	int
)	O
goto	O
L100	O
;	O
L3	O
:	O
nsfc_	function
(	O
n	pointer
,	O
&	O
r	pointer
[	O
1	int
]	O
,	O
&	O
ic	pointer
[	O
1	int
]	O
,	O
&	O
ia	pointer
[	O
1	int
]	O
,	O
&	O
ja	pointer
[	O
1	int
]	O
,	O
&	O
jlmax	pointer
,	O
&	O
isp	pointer
[	O
il	pointer
]	O
,	O
&	O
isp	pointer
[	O
jl	pointer
]	O
,	O
&	O
isp	pointer
[	O
ijl	pointer
]	O
,	O
&	O
jumax	pointer
,	O
&	O
isp	pointer
[	O
iu	pointer
]	O
,	O
&	O
isp	pointer
[	O
jutmp	long
]	O
,	O
&	O
isp	pointer
[	O
iju	pointer
]	O
,	O
&	O
isp	pointer
[	O
q	pointer
]	O
,	O
&	O
isp	pointer
[	O
ira	pointer
]	O
,	O
&	O
isp	pointer
[	O
jra	pointer
]	O
,	O
&	O
isp	pointer
[	O
irac	pointer
]	O
,	O
&	O
isp	pointer
[	O
irl	pointer
]	O
,	O
&	O
isp	pointer
[	O
jrl	pointer
]	O
,	O
&	O
isp	pointer
[	O
iru	pointer
]	O
,	O
&	O
isp	pointer
[	O
jru	pointer
]	O
,	O
flag_	pointer
)	O
;	O
if	O
(	O
*	O
flag_	pointer
!=	O
0	int
)	O
{	O
goto	O
L100	O
;	O
}	O
jlmax	pointer
=	O
isp	pointer
[	O
ijl	pointer
+	O
*	O
n	pointer
-	O
1	int
]	O
;	O
ju	pointer
=	O
jl	pointer
+	O
jlmax	pointer
;	O
jumax	pointer
=	O
isp	pointer
[	O
iju	pointer
+	O
*	O
n	pointer
-	O
1	int
]	O
;	O
if	O
(	O
jumax	pointer
<=	O
0	int
)	O
{	O
goto	O
L5	O
;	O
}	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
jumax	pointer
;	O
++	O
j	long
)	O
{	O
isp	pointer
[	O
ju	pointer
+	O
j	long
-	O
1	int
]	O
=	O
isp	pointer
[	O
jutmp	long
+	O
j	long
-	O
1	int
]	O
;	O
}	O
L5	O
:	O
jlmax	pointer
=	O
isp	pointer
[	O
ijl	pointer
+	O
*	O
n	pointer
-	O
1	int
]	O
;	O
ju	pointer
=	O
jl	pointer
+	O
jlmax	pointer
;	O
jumax	pointer
=	O
isp	pointer
[	O
iju	pointer
+	O
*	O
n	pointer
-	O
1	int
]	O
;	O
l	pointer
=	O
(	O
ju	pointer
+	O
jumax	pointer
-	O
2	int
+	O
lratio	long
)	O
/	O
lratio	long
+	O
1	int
;	O
lmax	pointer
=	O
isp	pointer
[	O
il	pointer
+	O
*	O
n	pointer
]	O
-	O
1	int
;	O
d	pointer
=	O
l	pointer
+	O
lmax	pointer
;	O
u	pointer
=	O
d	pointer
+	O
*	O
n	pointer
;	O
row	pointer
=	O
*	O
nsp	pointer
+	O
1	int
-	O
*	O
n	pointer
;	O
tmp	pointer
=	O
row	pointer
-	O
*	O
n	pointer
;	O
umax	pointer
=	O
tmp	pointer
-	O
u	pointer
;	O
*	O
esp	pointer
=	O
umax	pointer
-	O
(	O
isp	pointer
[	O
iu	pointer
+	O
*	O
n	pointer
]	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
path	long
-	O
1	int
)	O
*	O
(	O
path	long
-	O
2	int
)	O
!=	O
0	int
)	O
goto	O
L6	O
;	O
if	O
(	O
umax	pointer
<	O
0	int
)	O
goto	O
L110	O
;	O
nnfc_	function
(	O
n	pointer
,	O
&	O
r	pointer
[	O
1	int
]	O
,	O
&	O
c	pointer
[	O
1	int
]	O
,	O
&	O
ic	pointer
[	O
1	int
]	O
,	O
&	O
ia	pointer
[	O
1	int
]	O
,	O
&	O
ja	pointer
[	O
1	int
]	O
,	O
&	O
a	pointer
[	O
1	int
]	O
,	O
&	O
z	pointer
[	O
1	int
]	O
,	O
&	O
b	pointer
[	O
1	int
]	O
,	O
&	O
lmax	pointer
,	O
&	O
isp	pointer
[	O
il	pointer
]	O
,	O
&	O
isp	pointer
[	O
jl	pointer
]	O
,	O
&	O
isp	pointer
[	O
ijl	pointer
]	O
,	O
&	O
rsp	pointer
[	O
l	pointer
]	O
,	O
&	O
rsp	pointer
[	O
d	pointer
]	O
,	O
&	O
umax	pointer
,	O
&	O
isp	pointer
[	O
iu	pointer
]	O
,	O
&	O
isp	pointer
[	O
ju	pointer
]	O
,	O
&	O
isp	pointer
[	O
iju	pointer
]	O
,	O
&	O
rsp	pointer
[	O
u	pointer
]	O
,	O
&	O
rsp	pointer
[	O
row	pointer
]	O
,	O
&	O
rsp	pointer
[	O
tmp	pointer
]	O
,	O
&	O
isp	pointer
[	O
irl	pointer
]	O
,	O
&	O
isp	pointer
[	O
jrl	pointer
]	O
,	O
flag_	pointer
)	O
;	O
if	O
(	O
*	O
flag_	pointer
!=	O
0	int
)	O
goto	O
L100	O
;	O
L6	O
:	O
if	O
(	O
path	long
-	O
3	int
!=	O
0	int
)	O
goto	O
L7	O
;	O
nnsc_	function
(	O
n	pointer
,	O
&	O
r	pointer
[	O
1	int
]	O
,	O
&	O
c	pointer
[	O
1	int
]	O
,	O
&	O
isp	pointer
[	O
il	pointer
]	O
,	O
&	O
isp	pointer
[	O
jl	pointer
]	O
,	O
&	O
isp	pointer
[	O
ijl	pointer
]	O
,	O
&	O
rsp	pointer
[	O
l	pointer
]	O
,	O
&	O
rsp	pointer
[	O
d	pointer
]	O
,	O
&	O
isp	pointer
[	O
iu	pointer
]	O
,	O
&	O
isp	pointer
[	O
ju	pointer
]	O
,	O
&	O
isp	pointer
[	O
iju	pointer
]	O
,	O
&	O
rsp	pointer
[	O
u	pointer
]	O
,	O
&	O
z	pointer
[	O
1	int
]	O
,	O
&	O
b	pointer
[	O
1	int
]	O
,	O
&	O
rsp	pointer
[	O
tmp	pointer
]	O
)	O
;	O
L7	O
:	O
if	O
(	O
path	long
-	O
4	int
!=	O
0	int
)	O
goto	O
L8	O
;	O
nntc_	function
(	O
n	pointer
,	O
&	O
r	pointer
[	O
1	int
]	O
,	O
&	O
c	pointer
[	O
1	int
]	O
,	O
&	O
isp	pointer
[	O
il	pointer
]	O
,	O
&	O
isp	pointer
[	O
jl	pointer
]	O
,	O
&	O
isp	pointer
[	O
ijl	pointer
]	O
,	O
&	O
rsp	pointer
[	O
l	pointer
]	O
,	O
&	O
rsp	pointer
[	O
d	pointer
]	O
,	O
&	O
isp	pointer
[	O
iu	pointer
]	O
,	O
&	O
isp	pointer
[	O
ju	pointer
]	O
,	O
&	O
isp	pointer
[	O
iju	pointer
]	O
,	O
&	O
rsp	pointer
[	O
u	pointer
]	O
,	O
&	O
z	pointer
[	O
1	int
]	O
,	O
&	O
b	pointer
[	O
0	int
]	O
,	O
&	O
rsp	pointer
[	O
tmp	pointer
]	O
)	O
;	O
L8	O
:	O
return	O
0	int
;	O
L100	O
:	O
return	O
0	int
;	O
L110	O
:	O
*	O
flag_	pointer
=	O
*	O
n	pointer
*	O
10	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
nntc_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
r	pointer
,	O
long	O
*	O
c	pointer
,	O
long	O
*	O
il	pointer
,	O
long	O
*	O
jl	pointer
,	O
long	O
*	O
ijl	pointer
,	O
double	O
*	O
l	pointer
,	O
double	O
*	O
d	pointer
,	O
long	O
*	O
iu	pointer
,	O
long	O
*	O
ju	pointer
,	O
long	O
*	O
iju	pointer
,	O
double	O
*	O
u	pointer
,	O
double	O
*	O
z	pointer
,	O
double	O
*	O
b	pointer
,	O
double	O
*	O
tmp	pointer
)	O
{	O
long	O
jmin	long
,	O
jmax	long
;	O
double	O
tmpk	double
;	O
long	O
i	long
,	O
j	long
,	O
k	pointer
,	O
ml	long
,	O
mu	double
;	O
double	O
sum	double
;	O
for	O
(	O
k	pointer
=	O
0	int
;	O
k	pointer
<	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
tmp	pointer
[	O
k	pointer
]	O
=	O
b	pointer
[	O
c	pointer
[	O
k	pointer
]	O
]	O
;	O
for	O
(	O
k	pointer
=	O
0	int
;	O
k	pointer
<	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
{	O
jmin	long
=	O
iu	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
iu	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
tmpk	double
=	O
-	O
tmp	pointer
[	O
k	pointer
]	O
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
mu	double
=	O
iju	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
-	O
1	int
;	O
j	long
<	O
jmax	long
;	O
++	O
j	long
)	O
tmp	pointer
[	O
ju	pointer
[	O
mu	double
+	O
j	long
]	O
-	O
1	int
]	O
+=	O
tmpk	double
*	O
u	pointer
[	O
j	long
]	O
;	O
}	O
}	O
k	pointer
=	O
*	O
n	pointer
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
*	O
n	pointer
;	O
++	O
i	long
)	O
{	O
sum	double
=	O
-	O
tmp	pointer
[	O
k	pointer
]	O
;	O
jmin	long
=	O
il	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
il	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
ml	long
=	O
ijl	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
-	O
1	int
;	O
j	long
<	O
jmax	long
;	O
++	O
j	long
)	O
sum	double
+=	O
l	pointer
[	O
j	long
]	O
*	O
tmp	pointer
[	O
jl	pointer
[	O
ml	long
+	O
j	long
]	O
-	O
1	int
]	O
;	O
}	O
tmp	pointer
[	O
k	pointer
]	O
=	O
-	O
sum	double
*	O
d	pointer
[	O
k	pointer
]	O
;	O
z	pointer
[	O
r	pointer
[	O
k	pointer
]	O
-	O
1	int
]	O
=	O
tmp	pointer
[	O
k	pointer
]	O
;	O
--	O
k	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
nnsc_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
r	pointer
,	O
long	O
*	O
c	pointer
,	O
long	O
*	O
il	pointer
,	O
long	O
*	O
jl	pointer
,	O
long	O
*	O
ijl	pointer
,	O
double	O
*	O
l	pointer
,	O
double	O
*	O
d	pointer
,	O
long	O
*	O
iu	pointer
,	O
long	O
*	O
ju	pointer
,	O
long	O
*	O
iju	pointer
,	O
double	O
*	O
u	pointer
,	O
double	O
*	O
z	pointer
,	O
double	O
*	O
b	pointer
,	O
double	O
*	O
tmp	pointer
)	O
{	O
long	O
jmin	long
,	O
jmax	long
;	O
double	O
tmpk	double
;	O
long	O
i	long
,	O
j	long
,	O
k	pointer
,	O
ml	long
,	O
mu	double
;	O
double	O
sum	double
;	O
--	O
tmp	pointer
;	O
--	O
b	pointer
;	O
--	O
z	pointer
;	O
--	O
u	pointer
;	O
--	O
iju	pointer
;	O
--	O
ju	pointer
;	O
--	O
iu	pointer
;	O
--	O
d	pointer
;	O
--	O
l	pointer
;	O
--	O
ijl	pointer
;	O
--	O
jl	pointer
;	O
--	O
il	pointer
;	O
--	O
c	pointer
;	O
--	O
r	pointer
;	O
for	O
(	O
k	pointer
=	O
1	int
;	O
k	pointer
<=	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
tmp	pointer
[	O
k	pointer
]	O
=	O
b	pointer
[	O
r	pointer
[	O
k	pointer
]	O
]	O
;	O
for	O
(	O
k	pointer
=	O
1	int
;	O
k	pointer
<=	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
{	O
jmin	long
=	O
il	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
il	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
tmpk	double
=	O
-	O
d	pointer
[	O
k	pointer
]	O
*	O
tmp	pointer
[	O
k	pointer
]	O
;	O
tmp	pointer
[	O
k	pointer
]	O
=	O
-	O
tmpk	double
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
ml	long
=	O
ijl	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
tmp	pointer
[	O
jl	pointer
[	O
ml	long
+	O
j	long
]	O
]	O
+=	O
tmpk	double
*	O
l	pointer
[	O
j	long
]	O
;	O
}	O
}	O
k	pointer
=	O
*	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
*	O
n	pointer
;	O
++	O
i	long
)	O
{	O
sum	double
=	O
-	O
tmp	pointer
[	O
k	pointer
]	O
;	O
jmin	long
=	O
iu	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
iu	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
mu	double
=	O
iju	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
sum	double
+=	O
u	pointer
[	O
j	long
]	O
*	O
tmp	pointer
[	O
ju	pointer
[	O
mu	double
+	O
j	long
]	O
]	O
;	O
}	O
tmp	pointer
[	O
k	pointer
]	O
=	O
-	O
sum	double
;	O
z	pointer
[	O
c	pointer
[	O
k	pointer
]	O
]	O
=	O
-	O
sum	double
;	O
--	O
k	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
nnfc_	function
(	O
long	O
*	O
n	pointer
,	O
long	O
*	O
r	pointer
,	O
long	O
*	O
c	pointer
,	O
long	O
*	O
ic	pointer
,	O
long	O
*	O
ia	pointer
,	O
long	O
*	O
ja	pointer
,	O
double	O
*	O
a	pointer
,	O
double	O
*	O
z	pointer
,	O
double	O
*	O
b	pointer
,	O
long	O
*	O
lmax	pointer
,	O
long	O
*	O
il	pointer
,	O
long	O
*	O
jl	pointer
,	O
long	O
*	O
ijl	pointer
,	O
double	O
*	O
l	pointer
,	O
double	O
*	O
d	pointer
,	O
long	O
*	O
umax	pointer
,	O
long	O
*	O
iu	pointer
,	O
long	O
*	O
ju	pointer
,	O
long	O
*	O
iju	pointer
,	O
double	O
*	O
u	pointer
,	O
double	O
*	O
row	pointer
,	O
double	O
*	O
tmp	pointer
,	O
long	O
*	O
irl	pointer
,	O
long	O
*	O
jrl	pointer
,	O
long	O
*	O
flag_	pointer
)	O
{	O
long	O
ijlb	long
,	O
jmin	long
,	O
jmax	long
,	O
i	long
,	O
j	long
,	O
k	pointer
,	O
i1	long
,	O
i2	long
;	O
double	O
dk	double
;	O
long	O
rk	long
,	O
mu	double
;	O
double	O
lki	double
,	O
sum	double
;	O
--	O
jrl	pointer
;	O
--	O
irl	pointer
;	O
--	O
tmp	pointer
;	O
--	O
row	pointer
;	O
--	O
u	pointer
;	O
--	O
iju	pointer
;	O
--	O
ju	pointer
;	O
--	O
iu	pointer
;	O
--	O
d	pointer
;	O
--	O
l	pointer
;	O
--	O
ijl	pointer
;	O
--	O
jl	pointer
;	O
--	O
il	pointer
;	O
--	O
b	pointer
;	O
--	O
z	pointer
;	O
--	O
a	pointer
;	O
--	O
ja	pointer
;	O
--	O
ia	pointer
;	O
--	O
ic	pointer
;	O
--	O
c	pointer
;	O
--	O
r	pointer
;	O
if	O
(	O
il	pointer
[	O
*	O
n	pointer
+	O
1	int
]	O
-	O
1	int
>	O
*	O
lmax	pointer
)	O
{	O
*	O
flag_	pointer
=	O
(	O
*	O
n	pointer
<<	O
2	int
)	O
+	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
iu	pointer
[	O
*	O
n	pointer
+	O
1	int
]	O
-	O
1	int
>	O
*	O
umax	pointer
)	O
{	O
*	O
flag_	pointer
=	O
(	O
*	O
n	pointer
)	O
*	O
7	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
for	O
(	O
k	pointer
=	O
1	int
;	O
k	pointer
<=	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
{	O
irl	pointer
[	O
k	pointer
]	O
=	O
il	pointer
[	O
k	pointer
]	O
;	O
jrl	pointer
[	O
k	pointer
]	O
=	O
0	int
;	O
}	O
for	O
(	O
k	pointer
=	O
1	int
;	O
k	pointer
<=	O
*	O
n	pointer
;	O
++	O
k	pointer
)	O
{	O
row	pointer
[	O
k	pointer
]	O
=	O
0.	int
;	O
i1	long
=	O
0	int
;	O
if	O
(	O
jrl	pointer
[	O
k	pointer
]	O
==	O
0	int
)	O
goto	O
L3	O
;	O
i	long
=	O
jrl	pointer
[	O
k	pointer
]	O
;	O
L2	O
:	O
i2	long
=	O
jrl	pointer
[	O
i	long
]	O
;	O
jrl	pointer
[	O
i	long
]	O
=	O
i1	long
;	O
i1	long
=	O
i	long
;	O
row	pointer
[	O
i	long
]	O
=	O
0.	int
;	O
i	long
=	O
i2	long
;	O
if	O
(	O
i	long
!=	O
0	int
)	O
goto	O
L2	O
;	O
L3	O
:	O
jmin	long
=	O
iju	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
jmin	long
+	O
iu	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
iu	pointer
[	O
k	pointer
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
row	pointer
[	O
ju	pointer
[	O
j	long
]	O
]	O
=	O
0.	int
;	O
rk	long
=	O
r	pointer
[	O
k	pointer
]	O
;	O
jmin	long
=	O
ia	pointer
[	O
rk	long
]	O
;	O
jmax	long
=	O
ia	pointer
[	O
rk	long
+	O
1	int
]	O
-	O
1	int
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
row	pointer
[	O
ic	pointer
[	O
ja	pointer
[	O
j	long
]	O
]	O
]	O
=	O
a	pointer
[	O
j	long
]	O
;	O
sum	double
=	O
b	pointer
[	O
rk	long
]	O
;	O
i	long
=	O
i1	long
;	O
if	O
(	O
i	long
==	O
0	int
)	O
goto	O
L10	O
;	O
L7	O
:	O
lki	double
=	O
-	O
row	pointer
[	O
i	long
]	O
;	O
l	pointer
[	O
irl	pointer
[	O
i	long
]	O
]	O
=	O
-	O
lki	double
;	O
sum	double
+=	O
lki	double
*	O
tmp	pointer
[	O
i	long
]	O
;	O
jmin	long
=	O
iu	pointer
[	O
i	long
]	O
;	O
jmax	long
=	O
iu	pointer
[	O
i	long
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
mu	double
=	O
iju	pointer
[	O
i	long
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
row	pointer
[	O
ju	pointer
[	O
mu	double
+	O
j	long
]	O
]	O
+=	O
lki	double
*	O
u	pointer
[	O
j	long
]	O
;	O
}	O
i	long
=	O
jrl	pointer
[	O
i	long
]	O
;	O
if	O
(	O
i	long
!=	O
0	int
)	O
goto	O
L7	O
;	O
L10	O
:	O
if	O
(	O
row	pointer
[	O
k	pointer
]	O
==	O
0.	int
)	O
{	O
*	O
flag_	pointer
=	O
(	O
*	O
n	pointer
<<	O
3	int
)	O
+	O
k	pointer
;	O
return	O
0	int
;	O
}	O
dk	double
=	O
1.0	int
/	O
row	pointer
[	O
k	pointer
]	O
;	O
d	pointer
[	O
k	pointer
]	O
=	O
dk	double
;	O
tmp	pointer
[	O
k	pointer
]	O
=	O
sum	double
*	O
dk	double
;	O
if	O
(	O
k	pointer
==	O
*	O
n	pointer
)	O
break	O
;	O
jmin	long
=	O
iu	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
iu	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
mu	double
=	O
iju	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
u	pointer
[	O
j	long
]	O
=	O
row	pointer
[	O
ju	pointer
[	O
mu	double
+	O
j	long
]	O
]	O
*	O
dk	double
;	O
}	O
i	long
=	O
i1	long
;	O
if	O
(	O
i	long
==	O
0	int
)	O
goto	O
L18	O
;	O
L14	O
:	O
++	O
irl	pointer
[	O
i	long
]	O
;	O
i1	long
=	O
jrl	pointer
[	O
i	long
]	O
;	O
if	O
(	O
irl	pointer
[	O
i	long
]	O
>=	O
il	pointer
[	O
i	long
+	O
1	int
]	O
)	O
goto	O
L17	O
;	O
ijlb	long
=	O
irl	pointer
[	O
i	long
]	O
-	O
il	pointer
[	O
i	long
]	O
+	O
ijl	pointer
[	O
i	long
]	O
;	O
j	long
=	O
jl	pointer
[	O
ijlb	long
]	O
;	O
L15	O
:	O
if	O
(	O
i	long
>	O
jrl	pointer
[	O
j	long
]	O
)	O
goto	O
L16	O
;	O
j	long
=	O
jrl	pointer
[	O
j	long
]	O
;	O
goto	O
L15	O
;	O
L16	O
:	O
jrl	pointer
[	O
i	long
]	O
=	O
jrl	pointer
[	O
j	long
]	O
;	O
jrl	pointer
[	O
j	long
]	O
=	O
i	long
;	O
L17	O
:	O
i	long
=	O
i1	long
;	O
if	O
(	O
i	long
!=	O
0	int
)	O
goto	O
L14	O
;	O
L18	O
:	O
if	O
(	O
irl	pointer
[	O
k	pointer
]	O
<	O
il	pointer
[	O
k	pointer
+	O
1	int
]	O
)	O
{	O
j	long
=	O
jl	pointer
[	O
ijl	pointer
[	O
k	pointer
]	O
]	O
;	O
jrl	pointer
[	O
k	pointer
]	O
=	O
jrl	pointer
[	O
j	long
]	O
;	O
jrl	pointer
[	O
j	long
]	O
=	O
k	pointer
;	O
}	O
}	O
k	pointer
=	O
*	O
n	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
*	O
n	pointer
;	O
++	O
i	long
)	O
{	O
sum	double
=	O
tmp	pointer
[	O
k	pointer
]	O
;	O
jmin	long
=	O
iu	pointer
[	O
k	pointer
]	O
;	O
jmax	long
=	O
iu	pointer
[	O
k	pointer
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	long
<=	O
jmax	long
)	O
{	O
mu	double
=	O
iju	pointer
[	O
k	pointer
]	O
-	O
jmin	long
;	O
for	O
(	O
j	long
=	O
jmin	long
;	O
j	long
<=	O
jmax	long
;	O
++	O
j	long
)	O
sum	double
-=	O
u	pointer
[	O
j	long
]	O
*	O
tmp	pointer
[	O
ju	pointer
[	O
mu	double
+	O
j	long
]	O
]	O
;	O
}	O
tmp	pointer
[	O
k	pointer
]	O
=	O
sum	double
;	O
z	pointer
[	O
c	pointer
[	O
k	pointer
]	O
]	O
=	O
sum	double
;	O
--	O
k	pointer
;	O
}	O
*	O
flag_	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
