static	O
int	O
sr_construct_swverid	function
(	O
SWICAT_SR	struct
*	O
sr	pointer
,	O
SWICAT_SE	struct
*	O
se	pointer
)	O
{	O
STROB	struct
*	O
buf	pointer
;	O
SWVERID	struct
*	O
swverid	pointer
;	O
buf	pointer
=	O
strob_open	function
(	O
30	int
)	O
;	O
if	O
(	O
sr	pointer
->	O
bundleM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
"%s"	pointer
,	O
sr	pointer
->	O
bundleM	pointer
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
buf	pointer
)	O
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
"."	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
tagM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
"%s"	pointer
,	O
se	pointer
->	O
tagM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
vendor_tagM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
","	pointer
SWVERID_VERIDS_VENDOR_TAG	pointer
SWVERID_RELOP_EQ2	pointer
"%s"	pointer
,	O
se	pointer
->	O
vendor_tagM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
revisionM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
","	pointer
SWVERID_VERIDS_REVISION	pointer
SWVERID_RELOP_EQ	pointer
"%s"	pointer
,	O
se	pointer
->	O
revisionM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
locationM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
","	pointer
SWVERID_VERIDS_LOCATION	pointer
SWVERID_RELOP_EQ2	pointer
"%s"	pointer
,	O
se	pointer
->	O
locationM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
qualifierM	pointer
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
","	pointer
SWVERID_VERIDS_QUALIFIER	pointer
SWVERID_RELOP_EQ2	pointer
"%s"	pointer
,	O
se	pointer
->	O
qualifierM	pointer
)	O
;	O
E_DEBUG2	O
(	O
"fully qualified swspec=[%s]"	pointer
,	O
strob_str	function
(	O
buf	pointer
)	O
)	O
;	O
swverid	pointer
=	O
swverid_open	function
(	O
SW_A_product	pointer
,	O
strob_str	function
(	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
swverid	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: construction of version id failed for %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
buf	pointer
)	O
)	O
;	O
sr	pointer
->	O
swspecM	pointer
=	O
swverid	pointer
;	O
strob_close	function
(	O
buf	pointer
)	O
;	O
return	O
swverid	pointer
==	O
NULL	O
?	O
1	int
:	O
0	int
;	O
}	O
SWICAT_SE	struct
*	O
swicat_se_create	function
(	O
void	O
)	O
{	O
SWICAT_SE	struct
*	O
se	pointer
;	O
se	pointer
=	O
(	O
SWICAT_SE	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_SE	struct
)	O
)	O
;	O
se	pointer
->	O
entryM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
tagM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
revisionM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
vendor_tagM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
locationM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
sequenceM	pointer
=	O
NULL	O
;	O
se	pointer
->	O
qualifierM	pointer
=	O
NULL	O
;	O
return	O
se	pointer
;	O
}	O
void	O
swicat_se_delete	function
(	O
SWICAT_SE	struct
*	O
se	pointer
)	O
{	O
if	O
(	O
se	pointer
->	O
entryM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
entryM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
tagM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
tagM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
revisionM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
revisionM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
vendor_tagM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
vendor_tagM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
locationM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
locationM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
sequenceM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
sequenceM	pointer
)	O
;	O
if	O
(	O
se	pointer
->	O
qualifierM	pointer
!=	O
NULL	O
)	O
free	function
(	O
se	pointer
->	O
qualifierM	pointer
)	O
;	O
free	function
(	O
se	pointer
)	O
;	O
}	O
int	O
swicat_se_parse	function
(	O
SWICAT_SE	struct
*	O
se	pointer
,	O
char	O
*	O
entry	pointer
)	O
{	O
int	O
fn	int
;	O
char	O
*	O
s	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
E_DEBUG2	O
(	O
"Entering: [%s]"	pointer
,	O
entry	pointer
)	O
;	O
se	pointer
->	O
entryM	pointer
=	O
swlib_strdup	function
(	O
entry	pointer
)	O
;	O
fn	int
=	O
0	int
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
entry	pointer
,	O
" \t\n\r"	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
switch	O
(	O
fn	int
)	O
{	O
case	O
0	int
:	O
E_DEBUG2	O
(	O
"assigning tag: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
tagM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"r="	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"assigning revision: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
revisionM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"v="	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"assigning vendor_tag: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
vendor_tagM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"i="	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"assigning sequence: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
sequenceM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"l="	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"assigning location: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
locationM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"q="	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
s	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"assigning qualifier: [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
->	O
qualifierM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
break	O
;	O
}	O
fn	int
++	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
" \t\r\n"	pointer
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
SWICAT_SQ	struct
*	O
swicat_sq_create	function
(	O
void	O
)	O
{	O
SWICAT_SQ	struct
*	O
sq	pointer
;	O
sq	pointer
=	O
(	O
SWICAT_SQ	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_SQ	struct
)	O
)	O
;	O
sq	pointer
->	O
numberM	pointer
=	O
0	int
;	O
sq	pointer
->	O
levelM	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
sq	pointer
->	O
levelM	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
sq	pointer
->	O
lineM	pointer
=	O
NULL	O
;	O
sq	pointer
->	O
swspec_stringM	pointer
=	O
NULL	O
;	O
sq	pointer
->	O
swspecM	pointer
=	O
NULL	O
;	O
return	O
sq	pointer
;	O
}	O
void	O
swicat_sq_delete	function
(	O
SWICAT_SQ	struct
*	O
sq	pointer
)	O
{	O
if	O
(	O
sq	pointer
->	O
lineM	pointer
!=	O
NULL	O
)	O
free	function
(	O
sq	pointer
->	O
lineM	pointer
)	O
;	O
if	O
(	O
sq	pointer
->	O
swspec_stringM	pointer
!=	O
NULL	O
)	O
free	function
(	O
sq	pointer
->	O
swspec_stringM	pointer
)	O
;	O
if	O
(	O
sq	pointer
->	O
swspecM	pointer
!=	O
NULL	O
)	O
swverid_close	function
(	O
sq	pointer
->	O
swspecM	pointer
)	O
;	O
free	function
(	O
sq	pointer
)	O
;	O
}	O
int	O
swicat_sq_parse	function
(	O
SWICAT_SQ	struct
*	O
sq	pointer
,	O
char	O
*	O
line	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
s	pointer
;	O
int	O
field_no	int
;	O
int	O
status	int
;	O
field_no	int
=	O
0	int
;	O
tmp	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
sq	pointer
->	O
lineM	pointer
=	O
swlib_strdup	function
(	O
line	pointer
)	O
;	O
E_DEBUG2	O
(	O
"line=[%s]"	pointer
,	O
line	pointer
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
line	pointer
,	O
":\r\n"	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
switch	O
(	O
field_no	int
)	O
{	O
case	O
0	int
:	O
sq	pointer
->	O
numberM	pointer
=	O
swlib_atoi	function
(	O
s	pointer
+	O
1	int
,	O
&	O
status	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
1	int
:	O
sq	pointer
->	O
levelM	array
[	O
0	int
]	O
=	O
*	O
s	pointer
;	O
break	O
;	O
case	O
2	int
:	O
sq	pointer
->	O
swspec_stringM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
sq	pointer
->	O
swspecM	pointer
=	O
swverid_open	function
(	O
NULL	O
,	O
s	pointer
)	O
;	O
if	O
(	O
sq	pointer
->	O
swspecM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
break	O
;	O
}	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
":\r\n"	pointer
)	O
;	O
field_no	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
SWICAT_SR	struct
*	O
swicat_sr_create	function
(	O
void	O
)	O
{	O
SWICAT_SR	struct
*	O
sr	pointer
;	O
sr	pointer
=	O
(	O
SWICAT_SR	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_SR	struct
)	O
)	O
;	O
sr	pointer
->	O
lineM	pointer
=	O
NULL	O
;	O
sr	pointer
->	O
bundleM	pointer
=	O
NULL	O
;	O
sr	pointer
->	O
entry_lineM	pointer
=	O
NULL	O
;	O
sr	pointer
->	O
swspecM	pointer
=	O
NULL	O
;	O
sr	pointer
->	O
catalog_entry_pathM	pointer
=	O
strob_open	function
(	O
48	int
)	O
;	O
sr	pointer
->	O
seM	pointer
=	O
NULL	O
;	O
sr	pointer
->	O
foundM	int
=	O
0	int
;	O
return	O
sr	pointer
;	O
}	O
void	O
swicat_sr_delete	function
(	O
SWICAT_SR	struct
*	O
sr	pointer
)	O
{	O
if	O
(	O
sr	pointer
->	O
lineM	pointer
!=	O
NULL	O
)	O
free	function
(	O
sr	pointer
->	O
lineM	pointer
)	O
;	O
if	O
(	O
sr	pointer
->	O
bundleM	pointer
!=	O
NULL	O
)	O
free	function
(	O
sr	pointer
->	O
bundleM	pointer
)	O
;	O
if	O
(	O
sr	pointer
->	O
swspecM	pointer
!=	O
NULL	O
)	O
swverid_close	function
(	O
sr	pointer
->	O
swspecM	pointer
)	O
;	O
free	function
(	O
sr	pointer
)	O
;	O
}	O
int	O
swicat_sr_parse	function
(	O
SWICAT_SR	struct
*	O
sr	pointer
,	O
char	O
*	O
line	pointer
)	O
{	O
SWICAT_SE	struct
*	O
se	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
s	pointer
;	O
int	O
field_no	int
;	O
int	O
status	int
;	O
int	O
ret	int
;	O
int	O
retval	int
;	O
E_DEBUG2	O
(	O
"Entering: [%s]"	pointer
,	O
line	pointer
)	O
;	O
retval	int
=	O
0	int
;	O
field_no	int
=	O
0	int
;	O
tmp	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
sr	pointer
->	O
lineM	pointer
=	O
swlib_strdup	function
(	O
line	pointer
)	O
;	O
E_DEBUG2	O
(	O
"sr_parse line=[%s]"	pointer
,	O
line	pointer
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
line	pointer
,	O
":\n\r"	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
E_DEBUG2	O
(	O
"[%s]"	pointer
,	O
s	pointer
)	O
;	O
switch	O
(	O
field_no	int
)	O
{	O
case	O
0	int
:	O
E_DEBUG	O
(	O
"case 0"	pointer
)	O
;	O
sr	pointer
->	O
numberM	pointer
=	O
swlib_atoi	function
(	O
s	pointer
+	O
1	int
,	O
&	O
status	int
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
1	int
:	O
E_DEBUG	O
(	O
"case 1"	pointer
)	O
;	O
sr	pointer
->	O
levelM	array
[	O
0	int
]	O
=	O
*	O
s	pointer
;	O
break	O
;	O
case	O
2	int
:	O
E_DEBUG	O
(	O
"case 2"	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
s	pointer
)	O
!=	O
3	int
)	O
return	O
-	O
3	int
;	O
sr	pointer
->	O
matches_bundleM	int
=	O
0	int
;	O
sr	pointer
->	O
matches_productM	int
=	O
0	int
;	O
sr	pointer
->	O
matches_filesetM	int
=	O
0	int
;	O
if	O
(	O
*	O
s	pointer
==	O
'B'	O
)	O
sr	pointer
->	O
matches_bundleM	int
=	O
1	int
;	O
if	O
(	O
*	O
(	O
s	pointer
+	O
1	int
)	O
==	O
'P'	O
)	O
sr	pointer
->	O
matches_productM	int
=	O
1	int
;	O
if	O
(	O
*	O
(	O
s	pointer
+	O
2	int
)	O
==	O
'F'	O
)	O
sr	pointer
->	O
matches_filesetM	int
=	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
E_DEBUG	O
(	O
"case 4"	pointer
)	O
;	O
sr	pointer
->	O
bundleM	pointer
=	O
swlib_strdup	function
(	O
s	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
E_DEBUG	O
(	O
"case 5"	pointer
)	O
;	O
E_DEBUG2	O
(	O
"parsing (_se_parse) [%s]"	pointer
,	O
s	pointer
)	O
;	O
se	pointer
=	O
swicat_se_create	function
(	O
)	O
;	O
ret	int
=	O
swicat_se_parse	function
(	O
se	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
-	O
4	int
;	O
ret	int
=	O
sr_construct_swverid	function
(	O
sr	pointer
,	O
se	pointer
)	O
;	O
retval	int
=	O
ret	int
;	O
sr	pointer
->	O
seM	pointer
=	O
se	pointer
;	O
break	O
;	O
}	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
":\r\n"	pointer
)	O
;	O
field_no	int
++	O
;	O
E_DEBUG2	O
(	O
"field number: %d"	pointer
,	O
field_no	int
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
SWICAT_SC	struct
*	O
swicat_sc_create	function
(	O
void	O
)	O
{	O
SWICAT_SC	struct
*	O
sc	pointer
;	O
sc	pointer
=	O
(	O
SWICAT_SC	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_SC	struct
)	O
)	O
;	O
sc	pointer
->	O
srM	pointer
=	O
vplob_open	function
(	O
)	O
;	O
sc	pointer
->	O
sqM	pointer
=	O
NULL	O
;	O
sc	pointer
->	O
statusM	int
=	O
0	int
;	O
sc	pointer
->	O
swverid_uuidM	int
=	O
0	int
;	O
return	O
sc	pointer
;	O
}	O
void	O
swicat_sc_delete	function
(	O
SWICAT_SC	struct
*	O
swicat_sc	pointer
)	O
{	O
vplob_delete_store	function
(	O
swicat_sc	pointer
->	O
srM	pointer
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
(	O
swicat_sr_delete	function
)	O
)	O
;	O
free	function
(	O
swicat_sc	pointer
)	O
;	O
}	O
void	O
swicat_sc_add_sr	function
(	O
SWICAT_SC	struct
*	O
swicat_sc	pointer
,	O
SWICAT_SR	struct
*	O
swicat_sr	pointer
)	O
{	O
vplob_add	function
(	O
swicat_sc	pointer
->	O
srM	pointer
,	O
swicat_sr	pointer
)	O
;	O
}	O
void	O
swicat_sc_set_sq	function
(	O
SWICAT_SC	struct
*	O
swicat_sc	pointer
,	O
SWICAT_SQ	struct
*	O
swicat_sq	pointer
)	O
{	O
swicat_sc	pointer
->	O
sqM	pointer
=	O
swicat_sq	pointer
;	O
}	O
SWICAT_SL	struct
*	O
swicat_sl_create	function
(	O
void	O
)	O
{	O
SWICAT_SL	struct
*	O
sl	pointer
;	O
sl	pointer
=	O
(	O
SWICAT_SL	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_SL	struct
)	O
)	O
;	O
sl	pointer
->	O
scM	pointer
=	O
vplob_open	function
(	O
)	O
;	O
return	O
sl	pointer
;	O
}	O
void	O
swicat_sl_delete	function
(	O
SWICAT_SL	struct
*	O
swicat_sl	pointer
)	O
{	O
vplob_delete_store	function
(	O
swicat_sl	pointer
->	O
scM	pointer
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
(	O
swicat_sc_delete	function
)	O
)	O
;	O
free	function
(	O
swicat_sl	pointer
)	O
;	O
}	O
void	O
swicat_sl_add_sc	function
(	O
SWICAT_SL	struct
*	O
swicat_sl	pointer
,	O
SWICAT_SC	struct
*	O
swicat_sc	pointer
)	O
{	O
vplob_add	function
(	O
swicat_sl	pointer
->	O
scM	pointer
,	O
swicat_sc	pointer
)	O
;	O
}	O
char	O
*	O
swicat_sr_form_swspec	function
(	O
SWICAT_SR	struct
*	O
sr	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
48	int
)	O
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
path	pointer
=	O
swicat_sr_form_catalog_path	function
(	O
sr	pointer
,	O
""	pointer
,	O
tmp	pointer
)	O
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
path	pointer
=	O
swicat_sr_form_swspec_from_catalog_path	function
(	O
path	pointer
,	O
buf	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
path	pointer
;	O
}	O
char	O
*	O
swicat_sr_form_catalog_path	function
(	O
SWICAT_SR	struct
*	O
sr	pointer
,	O
char	O
*	O
installed_software_catalog	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
STROB	struct
*	O
sb	pointer
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
sb	pointer
=	O
sr	pointer
->	O
catalog_entry_pathM	pointer
;	O
}	O
else	O
{	O
sb	pointer
=	O
buf	pointer
;	O
}	O
strob_strcpy	function
(	O
sb	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
sr	pointer
->	O
matches_bundleM	int
==	O
0	int
&&	O
sr	pointer
->	O
matches_productM	int
==	O
0	int
)	O
{	O
return	O
strob_str	function
(	O
sb	pointer
)	O
;	O
}	O
strob_strcpy	function
(	O
sb	pointer
,	O
installed_software_catalog	pointer
)	O
;	O
s	pointer
=	O
sr	pointer
->	O
bundleM	pointer
;	O
swlib_unix_dircat	function
(	O
sb	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
sr	pointer
->	O
seM	pointer
->	O
tagM	pointer
;	O
swlib_unix_dircat	function
(	O
sb	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
sr	pointer
->	O
seM	pointer
->	O
revisionM	pointer
;	O
swlib_unix_dircat	function
(	O
sb	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
sr	pointer
->	O
seM	pointer
->	O
sequenceM	pointer
;	O
swlib_unix_dircat	function
(	O
sb	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
swlib_check_clean_path	function
(	O
strob_str	function
(	O
sb	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error: path tainted: %s\n"	pointer
,	O
strob_str	function
(	O
sb	pointer
)	O
)	O
;	O
}	O
return	O
strob_str	function
(	O
sb	pointer
)	O
;	O
}	O
char	O
*	O
swicat_sr_form_swspec_from_catalog_path	function
(	O
char	O
*	O
path	pointer
,	O
STROB	struct
*	O
swspec	pointer
)	O
{	O
int	O
n	long
;	O
char	O
*	O
s	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
STRAR	struct
*	O
dir_components	pointer
;	O
strob_strcpy	function
(	O
swspec	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
path	pointer
==	O
NULL	O
||	O
strlen	function
(	O
path	pointer
)	O
==	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
tmp	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
dir_components	pointer
=	O
strar_open	function
(	O
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
path	pointer
,	O
"/"	pointer
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
strar_add	function
(	O
dir_components	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
"/"	pointer
)	O
;	O
}	O
n	long
=	O
strar_num_elements	function
(	O
dir_components	pointer
)	O
;	O
if	O
(	O
n	long
<	O
4	int
)	O
{	O
return	O
NULL	O
;	O
}	O
n	long
--	O
;	O
strob_sprintf	function
(	O
swspec	pointer
,	O
0	int
,	O
"%s.%s,r==%s,i=%s"	pointer
,	O
strar_get	function
(	O
dir_components	pointer
,	O
n	long
-	O
3	int
)	O
,	O
strar_get	function
(	O
dir_components	pointer
,	O
n	long
-	O
2	int
)	O
,	O
strar_get	function
(	O
dir_components	pointer
,	O
n	long
-	O
1	int
)	O
,	O
strar_get	function
(	O
dir_components	pointer
,	O
n	long
-	O
0	int
)	O
)	O
;	O
return	O
strob_str	function
(	O
swspec	pointer
)	O
;	O
}	O
