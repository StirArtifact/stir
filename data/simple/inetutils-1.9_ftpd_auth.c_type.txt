int	O
auth_user	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
credentials	struct
*	O
pcred	pointer
)	O
{	O
pcred	pointer
->	O
guest	int
=	O
0	int
;	O
switch	O
(	O
pcred	pointer
->	O
auth_type	int
)	O
{	O
case	O
AUTH_TYPE_PASSWD	int
:	O
default	O
:	O
{	O
size_t	long
len	long
;	O
free	function
(	O
pcred	pointer
->	O
message	pointer
)	O
;	O
len	long
=	O
(	O
size_t	long
)	O
(	O
64	int
+	O
strlen	function
(	O
name	pointer
)	O
)	O
;	O
pcred	pointer
->	O
message	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
pcred	pointer
->	O
message	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"ftp"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
"anonymous"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
checkuser	function
(	O
PATH_FTPUSERS	O
,	O
"ftp"	pointer
)	O
||	O
checkuser	function
(	O
PATH_FTPUSERS	O
,	O
"anonymous"	pointer
)	O
)	O
{	O
snprintf	function
(	O
pcred	pointer
->	O
message	pointer
,	O
len	long
,	O
"User %s access denied."	pointer
,	O
name	pointer
)	O
;	O
err	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
sgetcred	function
(	O
"ftp"	pointer
,	O
pcred	pointer
)	O
==	O
0	int
)	O
{	O
pcred	pointer
->	O
guest	int
=	O
1	int
;	O
strcpy	function
(	O
pcred	pointer
->	O
message	pointer
,	O
"Guest login ok, type your name as password."	pointer
)	O
;	O
}	O
else	O
{	O
snprintf	function
(	O
pcred	pointer
->	O
message	pointer
,	O
len	long
,	O
"User %s unknown."	pointer
,	O
name	pointer
)	O
;	O
err	int
=	O
1	int
;	O
}	O
return	O
err	int
;	O
}	O
if	O
(	O
sgetcred	function
(	O
name	pointer
,	O
pcred	pointer
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
cp	pointer
;	O
const	O
char	O
*	O
shell	pointer
;	O
shell	pointer
=	O
pcred	pointer
->	O
shell	pointer
;	O
if	O
(	O
shell	pointer
==	O
NULL	O
||	O
*	O
shell	pointer
==	O
0	int
)	O
shell	pointer
=	O
PATH_BSHELL	O
;	O
setusershell	function
(	O
)	O
;	O
while	O
(	O
(	O
cp	pointer
=	O
getusershell	function
(	O
)	O
)	O
!=	O
NULL	O
)	O
if	O
(	O
strcmp	function
(	O
cp	pointer
,	O
shell	pointer
)	O
==	O
0	int
)	O
break	O
;	O
endusershell	function
(	O
)	O
;	O
if	O
(	O
cp	pointer
==	O
NULL	O
||	O
checkuser	function
(	O
PATH_FTPUSERS	O
,	O
name	pointer
)	O
)	O
{	O
sprintf	function
(	O
pcred	pointer
->	O
message	pointer
,	O
"User %s access denied."	pointer
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
free	function
(	O
pcred	pointer
->	O
message	pointer
)	O
;	O
pcred	pointer
->	O
message	pointer
=	O
NULL	O
;	O
return	O
1	int
;	O
}	O
pcred	pointer
->	O
dochroot	int
=	O
checkuser	function
(	O
PATH_FTPCHROOT	O
,	O
pcred	pointer
->	O
name	pointer
)	O
;	O
snprintf	function
(	O
pcred	pointer
->	O
message	pointer
,	O
len	long
,	O
"Password required for %s."	pointer
,	O
pcred	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
auth_pass	function
(	O
const	O
char	O
*	O
passwd	struct
,	O
struct	O
credentials	struct
*	O
pcred	pointer
)	O
{	O
switch	O
(	O
pcred	pointer
->	O
auth_type	int
)	O
{	O
case	O
AUTH_TYPE_PASSWD	int
:	O
default	O
:	O
{	O
char	O
*	O
xpasswd	pointer
;	O
char	O
*	O
salt	pointer
=	O
pcred	pointer
->	O
passwd	struct
;	O
if	O
(	O
pcred	pointer
->	O
passwd	struct
==	O
NULL	O
||	O
*	O
pcred	pointer
->	O
passwd	struct
==	O
'\0'	O
)	O
return	O
1	int
;	O
xpasswd	pointer
=	O
crypt	function
(	O
passwd	struct
,	O
salt	pointer
)	O
;	O
return	O
(	O
!	O
xpasswd	pointer
||	O
strcmp	function
(	O
xpasswd	pointer
,	O
pcred	pointer
->	O
passwd	struct
)	O
!=	O
0	int
)	O
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
sgetcred	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
credentials	struct
*	O
pcred	pointer
)	O
{	O
struct	O
passwd	struct
*	O
p	pointer
;	O
p	pointer
=	O
getpwnam	function
(	O
name	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
free	function
(	O
pcred	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
pcred	pointer
->	O
passwd	struct
)	O
;	O
free	function
(	O
pcred	pointer
->	O
homedir	pointer
)	O
;	O
free	function
(	O
pcred	pointer
->	O
rootdir	pointer
)	O
;	O
free	function
(	O
pcred	pointer
->	O
shell	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
pw_passwd	pointer
==	O
NULL	O
||	O
strlen	function
(	O
p	pointer
->	O
pw_passwd	pointer
)	O
==	O
1	int
)	O
{	O
struct	O
spwd	struct
*	O
spw	pointer
;	O
setspent	function
(	O
)	O
;	O
spw	pointer
=	O
getspnam	function
(	O
p	pointer
->	O
pw_name	pointer
)	O
;	O
if	O
(	O
spw	pointer
!=	O
NULL	O
)	O
{	O
time_t	long
now	long
;	O
long	O
today	long
;	O
now	long
=	O
time	struct
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
today	long
=	O
now	long
/	O
(	O
60	int
*	O
60	int
*	O
24	int
)	O
;	O
if	O
(	O
(	O
spw	pointer
->	O
sp_expire	long
>	O
0	int
&&	O
spw	pointer
->	O
sp_expire	long
<	O
today	long
)	O
||	O
(	O
spw	pointer
->	O
sp_max	long
>	O
0	int
&&	O
spw	pointer
->	O
sp_lstchg	long
>	O
0	int
&&	O
(	O
spw	pointer
->	O
sp_lstchg	long
+	O
spw	pointer
->	O
sp_max	long
<	O
today	long
)	O
)	O
)	O
{	O
p	pointer
->	O
pw_passwd	pointer
=	O
NULL	O
;	O
}	O
else	O
p	pointer
->	O
pw_passwd	pointer
=	O
spw	pointer
->	O
sp_pwdp	pointer
;	O
}	O
endspent	function
(	O
)	O
;	O
}	O
pcred	pointer
->	O
uid	int
=	O
p	pointer
->	O
pw_uid	int
;	O
pcred	pointer
->	O
gid	int
=	O
p	pointer
->	O
pw_gid	int
;	O
pcred	pointer
->	O
name	pointer
=	O
sgetsave	function
(	O
p	pointer
->	O
pw_name	pointer
)	O
;	O
pcred	pointer
->	O
passwd	struct
=	O
sgetsave	function
(	O
p	pointer
->	O
pw_passwd	pointer
)	O
;	O
pcred	pointer
->	O
rootdir	pointer
=	O
sgetsave	function
(	O
p	pointer
->	O
pw_dir	pointer
)	O
;	O
pcred	pointer
->	O
homedir	pointer
=	O
sgetsave	function
(	O
"/"	pointer
)	O
;	O
pcred	pointer
->	O
shell	pointer
=	O
sgetsave	function
(	O
p	pointer
->	O
pw_shell	pointer
)	O
;	O
return	O
0	int
;	O
}	O
