struct	O
_icvt_filter	struct
{	O
char	O
*	O
fromcode	pointer
;	O
char	O
*	O
tocode	pointer
;	O
enum	O
mu_iconv_fallback_mode	enum
fallback_mode	enum
;	O
iconv_t	pointer
cd	int
;	O
}	O
;	O
static	O
void	O
format_octal	function
(	O
char	O
*	O
op	pointer
,	O
unsigned	O
char	O
n	long
)	O
{	O
op	pointer
+=	O
4	int
;	O
*	O
--	O
op	pointer
=	O
n	long
%	O
8	int
+	O
'0'	O
;	O
n	long
>>=	O
3	int
;	O
*	O
--	O
op	pointer
=	O
n	long
%	O
8	int
+	O
'0'	O
;	O
n	long
>>=	O
3	int
;	O
*	O
--	O
op	pointer
=	O
n	long
%	O
8	int
+	O
'0'	O
;	O
n	long
>>=	O
3	int
;	O
*	O
--	O
op	pointer
=	O
'\\'	O
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_icvt_decoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
_icvt_filter	struct
*	O
_icvt	pointer
=	O
xd	pointer
;	O
char	O
*	O
ip	pointer
,	O
*	O
op	pointer
;	O
size_t	long
ilen	long
,	O
olen	long
;	O
int	O
rc	int
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
if	O
(	O
mu_c_strcasecmp	function
(	O
_icvt	pointer
->	O
fromcode	pointer
,	O
_icvt	pointer
->	O
tocode	pointer
)	O
==	O
0	int
)	O
_icvt	pointer
->	O
cd	int
=	O
(	O
iconv_t	pointer
)	O
-	O
1	int
;	O
else	O
{	O
iconv_t	pointer
cd	int
=	O
iconv_open	function
(	O
_icvt	pointer
->	O
tocode	pointer
,	O
_icvt	pointer
->	O
fromcode	pointer
)	O
;	O
if	O
(	O
cd	int
==	O
(	O
iconv_t	pointer
)	O
-	O
1	int
)	O
return	O
mu_filter_failure	int
;	O
_icvt	pointer
->	O
cd	int
=	O
cd	int
;	O
}	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
if	O
(	O
_icvt	pointer
->	O
cd	int
!=	O
(	O
iconv_t	pointer
)	O
-	O
1	int
)	O
iconv_close	function
(	O
_icvt	pointer
->	O
cd	int
)	O
;	O
free	function
(	O
_icvt	pointer
->	O
fromcode	pointer
)	O
;	O
free	function
(	O
_icvt	pointer
->	O
tocode	pointer
)	O
;	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_icvt	pointer
->	O
cd	int
==	O
(	O
iconv_t	pointer
)	O
-	O
1	int
)	O
{	O
size_t	long
len	int
=	O
iobuf	pointer
->	O
isize	long
;	O
if	O
(	O
len	int
>	O
iobuf	pointer
->	O
osize	long
)	O
len	int
=	O
iobuf	pointer
->	O
osize	long
;	O
memcpy	function
(	O
iobuf	pointer
->	O
output	pointer
,	O
iobuf	pointer
->	O
input	pointer
,	O
len	int
)	O
;	O
iobuf	pointer
->	O
isize	long
=	O
len	int
;	O
iobuf	pointer
->	O
osize	long
=	O
len	int
;	O
return	O
mu_filter_ok	int
;	O
}	O
ip	pointer
=	O
(	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
ilen	long
=	O
iobuf	pointer
->	O
isize	long
;	O
op	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
olen	long
=	O
iobuf	pointer
->	O
osize	long
;	O
again	O
:	O
rc	int
=	O
iconv	function
(	O
_icvt	pointer
->	O
cd	int
,	O
&	O
ip	pointer
,	O
&	O
ilen	long
,	O
&	O
op	pointer
,	O
&	O
olen	long
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
E2BIG	int
:	O
iobuf	pointer
->	O
osize	long
+=	O
16	int
;	O
return	O
mu_filter_moreoutput	int
;	O
case	O
EINVAL	int
:	O
if	O
(	O
ilen	long
==	O
iobuf	pointer
->	O
isize	long
)	O
{	O
iobuf	pointer
->	O
isize	long
++	O
;	O
return	O
mu_filter_moreinput	int
;	O
}	O
break	O
;	O
case	O
EILSEQ	int
:	O
switch	O
(	O
_icvt	pointer
->	O
fallback_mode	enum
)	O
{	O
case	O
mu_fallback_none	int
:	O
iobuf	pointer
->	O
errcode	int
=	O
EILSEQ	int
;	O
return	O
mu_filter_failure	int
;	O
case	O
mu_fallback_copy_pass	int
:	O
*	O
op	pointer
++	O
=	O
*	O
ip	pointer
++	O
;	O
ilen	long
--	O
;	O
olen	long
--	O
;	O
break	O
;	O
case	O
mu_fallback_copy_octal	int
:	O
if	O
(	O
mu_isprint	O
(	O
*	O
ip	pointer
)	O
)	O
{	O
*	O
op	pointer
++	O
=	O
*	O
ip	pointer
++	O
;	O
ilen	long
--	O
;	O
olen	long
--	O
;	O
}	O
else	O
{	O
if	O
(	O
olen	long
<	O
4	int
)	O
{	O
iobuf	pointer
->	O
osize	long
+=	O
4	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
format_octal	function
(	O
op	pointer
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
ip	pointer
)	O
;	O
op	pointer
+=	O
4	int
;	O
olen	long
-=	O
4	int
;	O
ip	pointer
++	O
;	O
ilen	long
--	O
;	O
}	O
}	O
if	O
(	O
ilen	long
&&	O
olen	long
)	O
goto	O
again	O
;	O
break	O
;	O
default	O
:	O
iobuf	pointer
->	O
errcode	int
=	O
errno	O
;	O
return	O
mu_filter_failure	int
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
ip	pointer
-	O
iobuf	pointer
->	O
input	pointer
;	O
iobuf	pointer
->	O
osize	long
=	O
op	pointer
-	O
iobuf	pointer
->	O
output	pointer
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
_icvt_filter	struct
*	O
flt	pointer
;	O
const	O
char	O
*	O
from	pointer
;	O
const	O
char	O
*	O
to	pointer
;	O
enum	O
mu_iconv_fallback_mode	enum
fallback_mode	enum
=	O
mu_default_fallback_mode	enum
;	O
if	O
(	O
argc	int
<	O
3	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
argc	int
>	O
4	int
)	O
return	O
EINVAL	int
;	O
from	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
to	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
if	O
(	O
argc	int
==	O
4	int
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
argv	pointer
[	O
3	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"none"	pointer
)	O
==	O
0	int
)	O
fallback_mode	enum
=	O
mu_fallback_none	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"copy-pass"	pointer
)	O
==	O
0	int
)	O
fallback_mode	enum
=	O
mu_fallback_copy_pass	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"copy-octal"	pointer
)	O
==	O
0	int
)	O
fallback_mode	enum
=	O
mu_fallback_copy_octal	int
;	O
else	O
return	O
EINVAL	int
;	O
}	O
flt	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
flt	pointer
)	O
)	O
;	O
if	O
(	O
!	O
flt	pointer
)	O
return	O
ENOMEM	int
;	O
flt	pointer
->	O
fromcode	pointer
=	O
strdup	function
(	O
from	pointer
)	O
;	O
if	O
(	O
!	O
flt	pointer
->	O
fromcode	pointer
)	O
{	O
free	function
(	O
flt	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
flt	pointer
->	O
tocode	pointer
=	O
strdup	function
(	O
to	pointer
)	O
;	O
if	O
(	O
!	O
flt	pointer
->	O
tocode	pointer
)	O
{	O
free	function
(	O
flt	pointer
->	O
fromcode	pointer
)	O
;	O
free	function
(	O
flt	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
flt	pointer
->	O
fallback_mode	enum
=	O
fallback_mode	enum
;	O
flt	pointer
->	O
cd	int
=	O
(	O
iconv_t	pointer
)	O
-	O
1	int
;	O
*	O
pret	pointer
=	O
flt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_iconv_filter	struct
=	O
{	O
"ICONV"	pointer
,	O
alloc_state	function
,	O
_icvt_decoder	function
,	O
_icvt_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_iconv_filter	pointer
=	O
&	O
_iconv_filter	struct
;	O
