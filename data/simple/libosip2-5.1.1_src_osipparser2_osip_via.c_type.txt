int	O
osip_message_set_via	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
int	O
i	int
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
||	O
hvalue	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
osip_via_init	function
(	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_parse	function
(	O
via	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	function
(	O
via	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
vias	struct
,	O
via	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_append_via	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_via_t	struct
*	O
via	pointer
;	O
int	O
i	int
;	O
i	int
=	O
osip_via_init	function
(	O
&	O
via	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_parse	function
(	O
via	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	function
(	O
via	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
vias	struct
,	O
via	pointer
,	O
0	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_via	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
int	O
pos	int
,	O
osip_via_t	struct
*	O
*	O
dest	pointer
)	O
{	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
vias	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	pointer
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
vias	struct
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_via_init	function
(	O
osip_via_t	struct
*	O
*	O
via	pointer
)	O
{	O
*	O
via	pointer
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_via_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
via	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	function
(	O
*	O
via	pointer
,	O
0	int
,	O
sizeof	O
(	O
osip_via_t	struct
)	O
)	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
via	pointer
)	O
->	O
via_params	struct
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_via_free	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
via	pointer
->	O
version	pointer
)	O
;	O
osip_free	O
(	O
via	pointer
->	O
protocol	pointer
)	O
;	O
osip_free	O
(	O
via	pointer
->	O
host	pointer
)	O
;	O
osip_free	O
(	O
via	pointer
->	O
port	pointer
)	O
;	O
osip_free	O
(	O
via	pointer
->	O
comment	pointer
)	O
;	O
osip_generic_param_freelist	O
(	O
&	O
via	pointer
->	O
via_params	struct
)	O
;	O
osip_free	O
(	O
via	pointer
)	O
;	O
}	O
int	O
osip_via_parse	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
const	O
char	O
*	O
version	pointer
;	O
const	O
char	O
*	O
protocol	pointer
;	O
const	O
char	O
*	O
host	pointer
;	O
const	O
char	O
*	O
ipv6host	pointer
;	O
const	O
char	O
*	O
port	pointer
;	O
const	O
char	O
*	O
via_params	struct
;	O
const	O
char	O
*	O
comment	pointer
;	O
int	O
i	int
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
version	pointer
=	O
strchr	function
(	O
hvalue	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
version	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
protocol	pointer
=	O
strchr	function
(	O
version	pointer
+	O
1	int
,	O
'/'	O
)	O
;	O
if	O
(	O
protocol	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
protocol	pointer
-	O
version	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
version	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
protocol	pointer
-	O
version	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
version	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
via	pointer
->	O
version	pointer
,	O
version	pointer
+	O
1	int
,	O
protocol	pointer
-	O
version	pointer
-	O
1	int
)	O
;	O
host	pointer
=	O
strchr	function
(	O
protocol	pointer
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
host	pointer
==	O
protocol	pointer
+	O
1	int
)	O
{	O
while	O
(	O
0	int
==	O
strncmp	function
(	O
host	pointer
,	O
" "	pointer
,	O
1	int
)	O
)	O
{	O
host	pointer
++	O
;	O
if	O
(	O
strlen	function
(	O
host	pointer
)	O
==	O
1	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
host	pointer
=	O
strchr	function
(	O
host	pointer
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
host	pointer
-	O
protocol	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
protocol	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
host	pointer
-	O
protocol	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
protocol	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
via	pointer
->	O
protocol	pointer
,	O
protocol	pointer
+	O
1	int
,	O
host	pointer
-	O
protocol	pointer
-	O
1	int
)	O
;	O
comment	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'('	O
)	O
;	O
if	O
(	O
comment	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
end_comment	pointer
;	O
end_comment	pointer
=	O
strchr	function
(	O
host	pointer
,	O
')'	O
)	O
;	O
if	O
(	O
end_comment	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
end_comment	pointer
-	O
comment	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
comment	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
end_comment	pointer
-	O
comment	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
comment	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
via	pointer
->	O
comment	pointer
,	O
comment	pointer
+	O
1	int
,	O
end_comment	pointer
-	O
comment	pointer
-	O
1	int
)	O
;	O
comment	pointer
--	O
;	O
}	O
else	O
comment	pointer
=	O
host	pointer
+	O
strlen	function
(	O
host	pointer
)	O
;	O
via_params	struct
=	O
strchr	function
(	O
host	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
(	O
via_params	struct
!=	O
NULL	O
)	O
&&	O
(	O
via_params	struct
<	O
comment	pointer
)	O
)	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
comment	pointer
-	O
via_params	struct
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comment	pointer
-	O
via_params	struct
+	O
1	int
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
tmp	pointer
,	O
via_params	struct
,	O
comment	pointer
-	O
via_params	struct
)	O
;	O
i	int
=	O
__osip_generic_param_parseall	function
(	O
&	O
via	pointer
->	O
via_params	struct
,	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
return	O
i	int
;	O
}	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
via_params	struct
==	O
NULL	O
)	O
via_params	struct
=	O
comment	pointer
;	O
ipv6host	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'['	O
)	O
;	O
if	O
(	O
ipv6host	pointer
!=	O
NULL	O
&&	O
ipv6host	pointer
<	O
via_params	struct
)	O
{	O
port	pointer
=	O
strchr	function
(	O
ipv6host	pointer
,	O
']'	O
)	O
;	O
if	O
(	O
port	pointer
==	O
NULL	O
||	O
port	pointer
>	O
via_params	struct
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
port	pointer
-	O
ipv6host	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
host	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	pointer
-	O
ipv6host	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
via	pointer
->	O
host	pointer
,	O
ipv6host	pointer
+	O
1	int
,	O
port	pointer
-	O
ipv6host	pointer
-	O
1	int
)	O
;	O
port	pointer
=	O
strchr	function
(	O
port	pointer
,	O
':'	O
)	O
;	O
}	O
else	O
{	O
port	pointer
=	O
strchr	function
(	O
host	pointer
,	O
':'	O
)	O
;	O
ipv6host	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
(	O
port	pointer
!=	O
NULL	O
)	O
&&	O
(	O
port	pointer
<	O
via_params	struct
)	O
)	O
{	O
if	O
(	O
via_params	struct
-	O
port	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
port	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
via_params	struct
-	O
port	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
port	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
via	pointer
->	O
port	pointer
,	O
port	pointer
+	O
1	int
,	O
via_params	struct
-	O
port	pointer
-	O
1	int
)	O
;	O
if	O
(	O
osip_atoi	function
(	O
via	pointer
->	O
port	pointer
)	O
<	O
0	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
else	O
port	pointer
=	O
via_params	struct
;	O
if	O
(	O
ipv6host	pointer
!=	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
port	pointer
-	O
host	pointer
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	pointer
->	O
host	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	pointer
-	O
host	pointer
)	O
;	O
if	O
(	O
via	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
via	pointer
->	O
host	pointer
,	O
host	pointer
+	O
1	int
,	O
port	pointer
-	O
host	pointer
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_via_to_str	function
(	O
const	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
char	O
*	O
buf	pointer
;	O
size_t	long
len	long
;	O
size_t	long
plen	long
;	O
char	O
*	O
tmp	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
via	pointer
==	O
NULL	O
)	O
||	O
(	O
via	pointer
->	O
host	pointer
==	O
NULL	O
)	O
||	O
(	O
via	pointer
->	O
version	pointer
==	O
NULL	O
)	O
||	O
(	O
via	pointer
->	O
protocol	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
len	long
=	O
strlen	function
(	O
via	pointer
->	O
version	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
via	pointer
->	O
protocol	pointer
)	O
+	O
1	int
+	O
3	int
+	O
2	int
;	O
len	long
=	O
len	long
+	O
strlen	function
(	O
via	pointer
->	O
host	pointer
)	O
+	O
3	int
+	O
1	int
;	O
if	O
(	O
via	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	function
(	O
via	pointer
->	O
port	pointer
)	O
+	O
2	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
if	O
(	O
strchr	function
(	O
via	pointer
->	O
host	pointer
,	O
':'	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
via	pointer
->	O
port	pointer
==	O
NULL	O
)	O
sprintf	function
(	O
buf	pointer
,	O
"SIP/%s/%s [%s]"	pointer
,	O
via	pointer
->	O
version	pointer
,	O
via	pointer
->	O
protocol	pointer
,	O
via	pointer
->	O
host	pointer
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"SIP/%s/%s [%s]:%s"	pointer
,	O
via	pointer
->	O
version	pointer
,	O
via	pointer
->	O
protocol	pointer
,	O
via	pointer
->	O
host	pointer
,	O
via	pointer
->	O
port	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
via	pointer
->	O
port	pointer
==	O
NULL	O
)	O
sprintf	function
(	O
buf	pointer
,	O
"SIP/%s/%s %s"	pointer
,	O
via	pointer
->	O
version	pointer
,	O
via	pointer
->	O
protocol	pointer
,	O
via	pointer
->	O
host	pointer
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"SIP/%s/%s %s:%s"	pointer
,	O
via	pointer
->	O
version	pointer
,	O
via	pointer
->	O
protocol	pointer
,	O
via	pointer
->	O
host	pointer
,	O
via	pointer
->	O
port	pointer
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_generic_param_t	struct
*	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_first	function
(	O
&	O
via	pointer
->	O
via_params	struct
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
u_param	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
plen	long
=	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
+	O
2	int
;	O
else	O
plen	long
=	O
strlen	function
(	O
u_param	pointer
->	O
gname	pointer
)	O
+	O
strlen	function
(	O
u_param	pointer
->	O
gvalue	pointer
)	O
+	O
3	int
;	O
len	long
=	O
len	long
+	O
plen	long
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	pointer
,	O
len	long
)	O
;	O
tmp	pointer
=	O
buf	pointer
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
u_param	pointer
->	O
gvalue	pointer
==	O
NULL	O
)	O
sprintf	function
(	O
tmp	pointer
,	O
";%s"	pointer
,	O
u_param	pointer
->	O
gname	pointer
)	O
;	O
else	O
sprintf	function
(	O
tmp	pointer
,	O
";%s=%s"	pointer
,	O
u_param	pointer
->	O
gname	pointer
,	O
u_param	pointer
->	O
gvalue	pointer
)	O
;	O
u_param	pointer
=	O
(	O
osip_generic_param_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
if	O
(	O
via	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
{	O
len	long
=	O
len	long
+	O
strlen	function
(	O
via	pointer
->	O
comment	pointer
)	O
+	O
4	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	pointer
,	O
len	long
)	O
;	O
tmp	pointer
=	O
buf	pointer
;	O
tmp	pointer
=	O
tmp	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
;	O
snprintf	function
(	O
tmp	pointer
,	O
len	long
-	O
(	O
tmp	pointer
-	O
buf	pointer
)	O
,	O
" (%s)"	pointer
,	O
via	pointer
->	O
comment	pointer
)	O
;	O
}	O
*	O
dest	pointer
=	O
buf	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
via_set_version	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
version	pointer
)	O
{	O
via	pointer
->	O
version	pointer
=	O
version	pointer
;	O
}	O
char	O
*	O
via_get_version	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	pointer
->	O
version	pointer
;	O
}	O
void	O
via_set_protocol	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
protocol	pointer
)	O
{	O
via	pointer
->	O
protocol	pointer
=	O
protocol	pointer
;	O
}	O
char	O
*	O
via_get_protocol	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	pointer
->	O
protocol	pointer
;	O
}	O
void	O
via_set_host	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
via	pointer
->	O
host	pointer
=	O
host	pointer
;	O
}	O
char	O
*	O
via_get_host	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	pointer
->	O
host	pointer
;	O
}	O
void	O
via_set_port	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
port	pointer
)	O
{	O
via	pointer
->	O
port	pointer
=	O
port	pointer
;	O
}	O
char	O
*	O
via_get_port	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	pointer
->	O
port	pointer
;	O
}	O
void	O
via_set_comment	function
(	O
osip_via_t	struct
*	O
via	pointer
,	O
char	O
*	O
comment	pointer
)	O
{	O
via	pointer
->	O
comment	pointer
=	O
comment	pointer
;	O
}	O
char	O
*	O
via_get_comment	function
(	O
osip_via_t	struct
*	O
via	pointer
)	O
{	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	pointer
->	O
comment	pointer
;	O
}	O
int	O
osip_via_clone	function
(	O
const	O
osip_via_t	struct
*	O
via	pointer
,	O
osip_via_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_via_t	struct
*	O
vi	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
via	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	pointer
->	O
version	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	pointer
->	O
protocol	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	pointer
->	O
host	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_via_init	function
(	O
&	O
vi	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
vi	pointer
->	O
version	pointer
=	O
osip_strdup	function
(	O
via	pointer
->	O
version	pointer
)	O
;	O
if	O
(	O
vi	pointer
->	O
version	pointer
==	O
NULL	O
&&	O
via	pointer
->	O
version	pointer
!=	O
NULL	O
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
vi	pointer
->	O
protocol	pointer
=	O
osip_strdup	function
(	O
via	pointer
->	O
protocol	pointer
)	O
;	O
if	O
(	O
vi	pointer
->	O
protocol	pointer
==	O
NULL	O
&&	O
via	pointer
->	O
protocol	pointer
!=	O
NULL	O
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
vi	pointer
->	O
host	pointer
=	O
osip_strdup	function
(	O
via	pointer
->	O
host	pointer
)	O
;	O
if	O
(	O
vi	pointer
->	O
host	pointer
==	O
NULL	O
&&	O
via	pointer
->	O
host	pointer
!=	O
NULL	O
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
if	O
(	O
via	pointer
->	O
port	pointer
!=	O
NULL	O
)	O
{	O
vi	pointer
->	O
port	pointer
=	O
osip_strdup	function
(	O
via	pointer
->	O
port	pointer
)	O
;	O
if	O
(	O
vi	pointer
->	O
port	pointer
==	O
NULL	O
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
via	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
{	O
vi	pointer
->	O
comment	pointer
=	O
osip_strdup	function
(	O
via	pointer
->	O
comment	pointer
)	O
;	O
if	O
(	O
vi	pointer
->	O
comment	pointer
==	O
NULL	O
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
i	int
=	O
osip_list_clone	function
(	O
&	O
via	pointer
->	O
via_params	struct
,	O
&	O
vi	pointer
->	O
via_params	struct
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_generic_param_clone	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	function
(	O
vi	pointer
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	pointer
=	O
vi	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_via_match	function
(	O
osip_via_t	struct
*	O
via1	pointer
,	O
osip_via_t	struct
*	O
via2	pointer
)	O
{	O
char	O
*	O
_via1	pointer
;	O
char	O
*	O
_via2	pointer
;	O
int	O
i	int
;	O
if	O
(	O
via1	pointer
==	O
NULL	O
||	O
via2	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_via_to_str	function
(	O
via1	pointer
,	O
&	O
_via1	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_to_str	function
(	O
via2	pointer
,	O
&	O
_via2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
_via1	pointer
)	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
strcmp	function
(	O
_via1	pointer
,	O
_via2	pointer
)	O
;	O
osip_free	O
(	O
_via1	pointer
)	O
;	O
osip_free	O
(	O
_via2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
