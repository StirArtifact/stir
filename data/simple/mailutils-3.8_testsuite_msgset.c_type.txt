static	O
void	O
parse_msgrange	function
(	O
char	O
*	O
arg	pointer
,	O
struct	O
mu_msgrange	struct
*	O
range	pointer
)	O
{	O
size_t	long
msgnum	long
;	O
char	O
*	O
p	pointer
;	O
errno	O
=	O
0	int
;	O
msgnum	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
range	pointer
->	O
msg_beg	long
=	O
msgnum	long
;	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
++	O
p	pointer
==	O
'*'	O
)	O
msgnum	long
=	O
0	int
;	O
else	O
{	O
msgnum	long
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
mu_error	function
(	O
"error in message range near %s"	pointer
,	O
p	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'*'	O
)	O
msgnum	long
=	O
0	int
;	O
else	O
if	O
(	O
*	O
p	pointer
)	O
{	O
mu_error	function
(	O
"error in message range near %s"	pointer
,	O
p	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
range	pointer
->	O
msg_end	long
=	O
msgnum	long
;	O
}	O
mu_msgset_t	pointer
parse_msgset	function
(	O
const	O
char	O
*	O
arg	pointer
,	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
create_mode	int
,	O
int	O
parse_mode	int
)	O
{	O
int	O
rc	int
;	O
mu_msgset_t	pointer
msgset	pointer
;	O
char	O
*	O
end	struct
;	O
MU_ASSERT	O
(	O
mu_msgset_create	function
(	O
&	O
msgset	pointer
,	O
mbox	pointer
,	O
create_mode	int
)	O
)	O
;	O
if	O
(	O
arg	pointer
)	O
{	O
rc	int
=	O
mu_msgset_parse_imap	function
(	O
msgset	pointer
,	O
parse_mode	int
,	O
arg	pointer
,	O
&	O
end	struct
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_msgset_parse_imap: %s near %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
,	O
end	struct
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
return	O
msgset	pointer
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	long
;	O
char	O
*	O
msgset_string	pointer
=	O
NULL	O
;	O
mu_msgset_t	pointer
msgset	pointer
,	O
outset	pointer
;	O
int	O
create_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
parse_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
output_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
output_flags	int
=	O
0	int
;	O
mu_msgset_format_t	pointer
format	pointer
=	O
mu_msgset_fmt_imap	O
;	O
mu_mailbox_t	pointer
mbox	pointer
=	O
NULL	O
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
mu_register_local_mbox_formats	O
(	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-h"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
arg	pointer
,	O
"-help"	pointer
)	O
==	O
0	int
)	O
{	O
mu_printf	function
(	O
"usage: %s [-msgset[uid]=SET] [-uid] [-add[uid]=X[:Y]] [-del[uid]=X[:Y]] "	pointer
"[-addset[uid]=SET] [-delset[uid]=SET] ...\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-msgset="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_mode	int
=	O
MU_MSGSET_NUM	int
;	O
msgset_string	pointer
=	O
arg	pointer
+	O
8	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-msgsetuid="	pointer
,	O
11	int
)	O
==	O
0	int
)	O
{	O
parse_mode	int
=	O
MU_MSGSET_UID	int
;	O
msgset_string	pointer
=	O
arg	pointer
+	O
11	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-uid"	pointer
)	O
==	O
0	int
)	O
create_mode	int
=	O
MU_MSGSET_UID	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-mailbox="	pointer
,	O
9	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_mailbox_create	function
(	O
&	O
mbox	pointer
,	O
arg	pointer
+	O
9	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_READ	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-mh"	pointer
)	O
==	O
0	int
)	O
format	pointer
=	O
mu_msgset_fmt_mh	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-printuid"	pointer
)	O
==	O
0	int
)	O
output_mode	int
=	O
MU_MSGSET_UID	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-printnum"	pointer
)	O
==	O
0	int
)	O
output_mode	int
=	O
MU_MSGSET_NUM	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-ignore-error"	pointer
)	O
==	O
0	int
)	O
output_flags	int
=	O
MU_MSGSET_IGNORE_TRANSERR	int
;	O
else	O
break	O
;	O
}	O
msgset	pointer
=	O
parse_msgset	function
(	O
msgset_string	pointer
,	O
mbox	pointer
,	O
create_mode	int
,	O
parse_mode	int
)	O
;	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
struct	O
mu_msgrange	struct
range	pointer
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-add="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	function
(	O
arg	pointer
+	O
5	int
,	O
&	O
range	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
range	pointer
.	O
msg_beg	long
,	O
range	pointer
.	O
msg_end	long
,	O
MU_MSGSET_NUM	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-sub="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	function
(	O
arg	pointer
+	O
5	int
,	O
&	O
range	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_sub_range	function
(	O
msgset	pointer
,	O
range	pointer
.	O
msg_beg	long
,	O
range	pointer
.	O
msg_end	long
,	O
MU_MSGSET_NUM	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-adduid="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	function
(	O
arg	pointer
+	O
8	int
,	O
&	O
range	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_add_range	function
(	O
msgset	pointer
,	O
range	pointer
.	O
msg_beg	long
,	O
range	pointer
.	O
msg_end	long
,	O
MU_MSGSET_UID	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-subuid="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	function
(	O
arg	pointer
+	O
8	int
,	O
&	O
range	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_sub_range	function
(	O
msgset	pointer
,	O
range	pointer
.	O
msg_beg	long
,	O
range	pointer
.	O
msg_end	long
,	O
MU_MSGSET_UID	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-addset"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	pointer
tset	pointer
;	O
int	O
m	int
;	O
arg	pointer
+=	O
7	int
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"uid"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
m	int
=	O
MU_MSGSET_UID	int
;	O
arg	pointer
+=	O
3	int
;	O
}	O
else	O
m	int
=	O
MU_MSGSET_NUM	int
;	O
if	O
(	O
*	O
arg	pointer
==	O
'='	O
)	O
arg	pointer
++	O
;	O
else	O
{	O
mu_error	function
(	O
"unknown option %s"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
1	int
;	O
}	O
tset	pointer
=	O
parse_msgset	function
(	O
arg	pointer
,	O
mbox	pointer
,	O
m	int
,	O
m	int
)	O
;	O
if	O
(	O
!	O
msgset	pointer
)	O
msgset	pointer
=	O
tset	pointer
;	O
else	O
{	O
MU_ASSERT	O
(	O
mu_msgset_add	function
(	O
msgset	pointer
,	O
tset	pointer
)	O
)	O
;	O
mu_msgset_free	function
(	O
tset	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-subset="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	pointer
tset	pointer
;	O
int	O
m	int
;	O
arg	pointer
+=	O
7	int
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"uid"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
m	int
=	O
MU_MSGSET_UID	int
;	O
arg	pointer
+=	O
3	int
;	O
}	O
else	O
m	int
=	O
MU_MSGSET_NUM	int
;	O
if	O
(	O
*	O
arg	pointer
==	O
'='	O
)	O
arg	pointer
++	O
;	O
else	O
{	O
mu_error	function
(	O
"unknown option %s"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
1	int
;	O
}	O
tset	pointer
=	O
parse_msgset	function
(	O
arg	pointer
,	O
mbox	pointer
,	O
m	int
,	O
m	int
)	O
;	O
if	O
(	O
!	O
msgset	pointer
)	O
{	O
mu_error	function
(	O
"no initial message set"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
{	O
MU_ASSERT	O
(	O
mu_msgset_sub	function
(	O
msgset	pointer
,	O
tset	pointer
)	O
)	O
;	O
mu_msgset_free	function
(	O
tset	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-neg"	pointer
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	pointer
negated_set	pointer
;	O
MU_ASSERT	O
(	O
mu_msgset_negate	function
(	O
msgset	pointer
,	O
&	O
negated_set	pointer
)	O
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
msgset	pointer
=	O
negated_set	pointer
;	O
}	O
else	O
{	O
mu_error	function
(	O
"unknown option %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
MU_ASSERT	O
(	O
mu_msgset_translate	function
(	O
&	O
outset	pointer
,	O
msgset	pointer
,	O
output_mode	int
|	O
output_flags	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_msgset_format	function
(	O
mu_strout	pointer
,	O
format	pointer
,	O
outset	pointer
)	O
)	O
;	O
mu_printf	function
(	O
"\n"	pointer
)	O
;	O
mu_msgset_free	function
(	O
outset	pointer
)	O
;	O
mu_msgset_free	function
(	O
msgset	pointer
)	O
;	O
return	O
0	int
;	O
}	O
