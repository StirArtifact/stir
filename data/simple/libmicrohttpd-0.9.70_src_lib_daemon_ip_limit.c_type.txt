struct	O
MHD_IPCount	struct
{	O
int	O
family	int
;	O
union	O
{	O
struct	O
in_addr	struct
ipv4	struct
;	O
struct	O
in6_addr	struct
ipv6	struct
;	O
}	O
addr	pointer
;	O
unsigned	O
int	O
count	int
;	O
}	O
;	O
static	O
struct	O
MHD_Daemon	struct
*	O
get_master	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
)	O
{	O
while	O
(	O
NULL	O
!=	O
daemon	function
->	O
master	pointer
)	O
daemon	function
=	O
daemon	function
->	O
master	pointer
;	O
return	O
daemon	function
;	O
}	O
static	O
void	O
MHD_ip_count_lock	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
)	O
{	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
per_ip_connection_mutex	union
)	O
;	O
}	O
static	O
void	O
MHD_ip_count_unlock	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
)	O
{	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
per_ip_connection_mutex	union
)	O
;	O
}	O
static	O
int	O
MHD_ip_addr_compare	function
(	O
const	O
void	O
*	O
a1	pointer
,	O
const	O
void	O
*	O
a2	pointer
)	O
{	O
return	O
memcmp	function
(	O
a1	pointer
,	O
a2	pointer
,	O
offsetof	O
(	O
struct	O
MHD_IPCount	struct
,	O
count	int
)	O
)	O
;	O
}	O
static	O
int	O
MHD_ip_addr_to_key	function
(	O
const	O
struct	O
sockaddr	struct
*	O
addr	pointer
,	O
socklen_t	int
addrlen	int
,	O
struct	O
MHD_IPCount	struct
*	O
key	pointer
)	O
{	O
memset	function
(	O
key	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
key	pointer
)	O
)	O
;	O
if	O
(	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
==	O
addrlen	int
)	O
{	O
const	O
struct	O
sockaddr_in	struct
*	O
addr4	pointer
=	O
(	O
const	O
struct	O
sockaddr_in	struct
*	O
)	O
addr	pointer
;	O
key	pointer
->	O
family	int
=	O
AF_INET	O
;	O
memcpy	function
(	O
&	O
key	pointer
->	O
addr	pointer
.	O
ipv4	struct
,	O
&	O
addr4	pointer
->	O
sin_addr	struct
,	O
sizeof	O
(	O
addr4	pointer
->	O
sin_addr	struct
)	O
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
sizeof	O
(	O
struct	O
sockaddr_in6	struct
)	O
==	O
addrlen	int
)	O
{	O
const	O
struct	O
sockaddr_in6	struct
*	O
addr6	pointer
=	O
(	O
const	O
struct	O
sockaddr_in6	struct
*	O
)	O
addr	pointer
;	O
key	pointer
->	O
family	int
=	O
AF_INET6	O
;	O
memcpy	function
(	O
&	O
key	pointer
->	O
addr	pointer
.	O
ipv6	struct
,	O
&	O
addr6	pointer
->	O
sin6_addr	struct
,	O
sizeof	O
(	O
addr6	pointer
->	O
sin6_addr	struct
)	O
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
return	O
MHD_NO	int
;	O
}	O
int	O
MHD_ip_limit_add	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	pointer
,	O
socklen_t	int
addrlen	int
)	O
{	O
struct	O
MHD_IPCount	struct
*	O
key	pointer
;	O
void	O
*	O
*	O
nodep	pointer
;	O
void	O
*	O
node	pointer
;	O
int	O
result	int
;	O
daemon	function
=	O
get_master	function
(	O
daemon	function
)	O
;	O
if	O
(	O
0	int
==	O
daemon	function
->	O
ip_connection_limit	int
)	O
return	O
MHD_YES	int
;	O
if	O
(	O
NULL	O
==	O
(	O
key	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
key	pointer
)	O
)	O
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_ip_addr_to_key	function
(	O
addr	pointer
,	O
addrlen	int
,	O
key	pointer
)	O
)	O
{	O
free	function
(	O
key	pointer
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
MHD_ip_count_lock	function
(	O
daemon	function
)	O
;	O
if	O
(	O
NULL	O
==	O
(	O
nodep	pointer
=	O
tsearch	function
(	O
key	pointer
,	O
&	O
daemon	function
->	O
per_ip_connection_count	pointer
,	O
&	O
MHD_ip_addr_compare	function
)	O
)	O
)	O
{	O
MHD_DLOG	function
(	O
daemon	function
,	O
MHD_SC_IP_COUNTER_FAILURE	int
,	O
_	O
(	O
"Failed to add IP connection count node\n"	pointer
)	O
)	O
;	O
MHD_ip_count_unlock	function
(	O
daemon	function
)	O
;	O
free	function
(	O
key	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
node	pointer
=	O
*	O
nodep	pointer
;	O
if	O
(	O
node	pointer
!=	O
key	pointer
)	O
free	function
(	O
key	pointer
)	O
;	O
key	pointer
=	O
(	O
struct	O
MHD_IPCount	struct
*	O
)	O
node	pointer
;	O
result	int
=	O
(	O
key	pointer
->	O
count	int
<	O
daemon	function
->	O
ip_connection_limit	int
)	O
?	O
MHD_YES	int
:	O
MHD_NO	int
;	O
if	O
(	O
MHD_YES	int
==	O
result	int
)	O
++	O
key	pointer
->	O
count	int
;	O
MHD_ip_count_unlock	function
(	O
daemon	function
)	O
;	O
return	O
result	int
;	O
}	O
void	O
MHD_ip_limit_del	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	pointer
,	O
socklen_t	int
addrlen	int
)	O
{	O
struct	O
MHD_IPCount	struct
search_key	struct
;	O
struct	O
MHD_IPCount	struct
*	O
found_key	pointer
;	O
void	O
*	O
*	O
nodep	pointer
;	O
daemon	function
=	O
get_master	function
(	O
daemon	function
)	O
;	O
if	O
(	O
0	int
==	O
daemon	function
->	O
ip_connection_limit	int
)	O
return	O
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_ip_addr_to_key	function
(	O
addr	pointer
,	O
addrlen	int
,	O
&	O
search_key	struct
)	O
)	O
return	O
;	O
MHD_ip_count_lock	function
(	O
daemon	function
)	O
;	O
if	O
(	O
NULL	O
==	O
(	O
nodep	pointer
=	O
tfind	function
(	O
&	O
search_key	struct
,	O
&	O
daemon	function
->	O
per_ip_connection_count	pointer
,	O
&	O
MHD_ip_addr_compare	function
)	O
)	O
)	O
{	O
MHD_PANIC	O
(	O
_	O
(	O
"Failed to find previously-added IP address\n"	pointer
)	O
)	O
;	O
}	O
found_key	pointer
=	O
(	O
struct	O
MHD_IPCount	struct
*	O
)	O
*	O
nodep	pointer
;	O
if	O
(	O
0	int
==	O
found_key	pointer
->	O
count	int
)	O
{	O
MHD_PANIC	O
(	O
_	O
(	O
"Previously-added IP address had counter of zero\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
0	int
==	O
--	O
found_key	pointer
->	O
count	int
)	O
{	O
tdelete	function
(	O
found_key	pointer
,	O
&	O
daemon	function
->	O
per_ip_connection_count	pointer
,	O
&	O
MHD_ip_addr_compare	function
)	O
;	O
free	function
(	O
found_key	pointer
)	O
;	O
}	O
MHD_ip_count_unlock	function
(	O
daemon	function
)	O
;	O
}	O
