int	O
snmp_errno	O
;	O
struct	O
snmp_def	struct
snmp_def	struct
=	O
{	O
0	int
,	O
3	int
,	O
3	int
,	O
}	O
;	O
static	O
int	O
__snmp_errno	int
;	O
int	O
*	O
__snmp_errno_location	function
(	O
)	O
{	O
return	O
&	O
__snmp_errno	int
;	O
}	O
int	O
snmp_req_id	function
(	O
)	O
{	O
if	O
(	O
snmp_def	struct
.	O
req_id	int
==	O
0	int
)	O
{	O
srand	function
(	O
time	struct
(	O
NULL	O
)	O
)	O
;	O
snmp_def	struct
.	O
req_id	int
=	O
random	function
(	O
)	O
;	O
}	O
return	O
snmp_def	struct
.	O
req_id	int
++	O
;	O
}	O
int	O
snmp_fdset	function
(	O
struct	O
snmp_session	struct
*	O
sp	pointer
,	O
fd_set	struct
*	O
fdset	pointer
)	O
{	O
int	O
fdmax	int
;	O
fdmax	int
=	O
-	O
1	int
;	O
FD_ZERO	O
(	O
fdset	pointer
)	O
;	O
for	O
(	O
;	O
sp	pointer
;	O
sp	pointer
=	O
sp	pointer
->	O
next	pointer
)	O
if	O
(	O
sp	pointer
->	O
sd	int
!=	O
-	O
1	int
&&	O
sp	pointer
->	O
request_list	pointer
)	O
{	O
FD_SET	O
(	O
sp	pointer
->	O
sd	int
,	O
fdset	pointer
)	O
;	O
if	O
(	O
sp	pointer
->	O
sd	int
>	O
fdmax	int
)	O
fdmax	int
=	O
sp	pointer
->	O
sd	int
;	O
}	O
return	O
fdmax	int
+	O
1	int
;	O
}	O
void	O
snmp_init	function
(	O
int	O
retries	int
,	O
int	O
timeout	int
,	O
snmp_alloc_t	pointer
memalloc	pointer
,	O
snmp_free_t	pointer
memfree	pointer
)	O
{	O
if	O
(	O
retries	int
)	O
snmp_def	struct
.	O
retries	int
=	O
retries	int
;	O
if	O
(	O
timeout	int
)	O
snmp_def	struct
.	O
timeout	int
=	O
timeout	int
;	O
if	O
(	O
memalloc	pointer
)	O
__snmp_alloc_fp	pointer
=	O
memalloc	pointer
;	O
if	O
(	O
memfree	pointer
)	O
__snmp_free_fp	pointer
=	O
memfree	pointer
;	O
}	O
struct	O
snmp_session	struct
*	O
snmp_session_create	function
(	O
char	O
*	O
community	struct
,	O
char	O
*	O
host	pointer
,	O
int	O
port	int
,	O
snmp_cfn	pointer
cfn	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
struct	O
snmp_session	struct
*	O
sp	pointer
;	O
int	O
len	int
;	O
sp	pointer
=	O
snmp_alloc	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
sp	pointer
->	O
version	int
=	O
SNMP_VERSION_1	int
;	O
len	int
=	O
strlen	pointer
(	O
community	struct
)	O
;	O
sp	pointer
->	O
community	struct
.	O
str	pointer
=	O
snmp_alloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
->	O
community	struct
.	O
str	pointer
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
snmp_free	function
(	O
sp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
sp	pointer
->	O
community	struct
.	O
str	pointer
,	O
community	struct
)	O
;	O
sp	pointer
->	O
community	struct
.	O
len	int
=	O
len	int
;	O
sp	pointer
->	O
retries	int
=	O
snmp_def	struct
.	O
retries	int
;	O
sp	pointer
->	O
timeout	int
=	O
snmp_def	struct
.	O
timeout	int
;	O
len	int
=	O
strlen	pointer
(	O
host	pointer
)	O
+	O
1	int
;	O
sp	pointer
->	O
remote_host	pointer
=	O
snmp_alloc	function
(	O
len	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
->	O
remote_host	pointer
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
snmp_free	function
(	O
sp	pointer
->	O
community	struct
.	O
str	pointer
)	O
;	O
snmp_free	function
(	O
sp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
sp	pointer
->	O
remote_host	pointer
,	O
host	pointer
)	O
;	O
sp	pointer
->	O
remote_port	short
=	O
port	int
;	O
sp	pointer
->	O
local_port	short
=	O
0	int
;	O
sp	pointer
->	O
converse	pointer
=	O
cfn	pointer
;	O
sp	pointer
->	O
app_closure	pointer
=	O
closure	pointer
;	O
sp	pointer
->	O
pdu	pointer
=	O
NULL	O
;	O
sp	pointer
->	O
sd	int
=	O
-	O
1	int
;	O
sp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
sp	pointer
->	O
request_list	pointer
=	O
NULL	O
;	O
return	O
sp	pointer
;	O
}	O
int	O
snmp_session_open	function
(	O
struct	O
snmp_session	struct
*	O
sp	pointer
,	O
ip_addr_t	int
local_ip	int
,	O
int	O
local_port	short
,	O
int	O
timeout	int
,	O
int	O
retries	int
)	O
{	O
ip_addr_t	int
addr	int
;	O
u_short	short
port	int
;	O
struct	O
sockaddr_in	struct
local_sin	struct
;	O
if	O
(	O
!	O
timeout	int
)	O
sp	pointer
->	O
timeout	int
=	O
snmp_def	struct
.	O
timeout	int
;	O
if	O
(	O
!	O
retries	int
)	O
sp	pointer
->	O
retries	int
=	O
snmp_def	struct
.	O
retries	int
;	O
if	O
(	O
local_ip	int
==	O
0	int
)	O
local_ip	int
=	O
INADDR_ANY	O
;	O
sp	pointer
->	O
sd	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sp	pointer
->	O
sd	int
<	O
0	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_SOCKET	int
)	O
;	O
snmp_session_free	function
(	O
sp	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
{	O
int	O
one	int
=	O
1	int
;	O
setsockopt	function
(	O
sp	pointer
->	O
sd	int
,	O
SOL_SOCKET	int
,	O
SO_BSDCOMPAT	int
,	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
}	O
addr	int
=	O
inet_addr	function
(	O
sp	pointer
->	O
remote_host	pointer
)	O
;	O
if	O
(	O
addr	int
=	O
(	O
ip_addr_t	int
)	O
-	O
1	int
)	O
{	O
struct	O
hostent	struct
*	O
hp	pointer
=	O
gethostbyname	function
(	O
sp	pointer
->	O
remote_host	pointer
)	O
;	O
if	O
(	O
!	O
hp	pointer
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_BAD_ADDRESS	int
)	O
;	O
snmp_session_close	function
(	O
sp	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
addr	int
=	O
*	O
(	O
ip_addr_t	int
*	O
)	O
hp	pointer
->	O
h_addr	O
;	O
}	O
sp	pointer
->	O
remote_sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
addr	int
;	O
sp	pointer
->	O
remote_sin	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
sp	pointer
->	O
remote_port	short
==	O
0	int
)	O
{	O
struct	O
servent	struct
*	O
servp	pointer
=	O
getservbyname	function
(	O
"snmp"	pointer
,	O
"udp"	pointer
)	O
;	O
if	O
(	O
!	O
servp	pointer
)	O
port	int
=	O
htons	function
(	O
SNMP_PORT	int
)	O
;	O
else	O
port	int
=	O
servp	pointer
->	O
s_port	int
;	O
}	O
else	O
port	int
=	O
htons	function
(	O
sp	pointer
->	O
remote_port	short
)	O
;	O
sp	pointer
->	O
remote_sin	struct
.	O
sin_port	short
=	O
port	int
;	O
memset	function
(	O
&	O
local_sin	struct
,	O
'\0'	O
,	O
sizeof	O
(	O
local_sin	struct
)	O
)	O
;	O
local_sin	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
local_sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
local_ip	int
?	O
INADDR_ANY	O
:	O
htonl	function
(	O
local_ip	int
)	O
;	O
local_sin	struct
.	O
sin_port	short
=	O
htons	function
(	O
sp	pointer
->	O
local_port	short
)	O
;	O
if	O
(	O
bind	function
(	O
sp	pointer
->	O
sd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
local_sin	struct
,	O
sizeof	O
(	O
local_sin	struct
)	O
)	O
<	O
0	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_BIND	int
)	O
;	O
snmp_session_close	function
(	O
sp	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
snmp_session_close	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
)	O
{	O
if	O
(	O
sess	pointer
->	O
sd	int
!=	O
-	O
1	int
)	O
close	function
(	O
sess	pointer
->	O
sd	int
)	O
;	O
snmp_session_free	function
(	O
sess	pointer
)	O
;	O
}	O
void	O
snmp_session_free	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
)	O
{	O
if	O
(	O
!	O
sess	pointer
)	O
return	O
;	O
snmp_pdu_free	function
(	O
sess	pointer
->	O
pdu	pointer
)	O
;	O
snmp_request_free_list	function
(	O
sess	pointer
->	O
request_list	pointer
)	O
;	O
snmp_free	function
(	O
sess	pointer
->	O
remote_host	pointer
)	O
;	O
snmp_free	function
(	O
sess	pointer
->	O
community	struct
.	O
str	pointer
)	O
;	O
snmp_free	function
(	O
sess	pointer
)	O
;	O
}	O
void	O
snmp_request_free	function
(	O
struct	O
snmp_request	struct
*	O
req	pointer
)	O
{	O
if	O
(	O
req	pointer
)	O
{	O
snmp_pdu_free	function
(	O
req	pointer
->	O
pdu	pointer
)	O
;	O
snmp_free	function
(	O
req	pointer
)	O
;	O
}	O
}	O
void	O
snmp_request_free_list	function
(	O
struct	O
snmp_request	struct
*	O
req	pointer
)	O
{	O
struct	O
snmp_request	struct
*	O
next	pointer
;	O
while	O
(	O
req	pointer
)	O
{	O
next	pointer
=	O
req	pointer
->	O
next	pointer
;	O
snmp_free	function
(	O
req	pointer
)	O
;	O
req	pointer
=	O
next	pointer
;	O
}	O
}	O
