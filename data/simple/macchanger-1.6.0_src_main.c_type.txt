static	O
void	O
print_help	function
(	O
void	O
)	O
{	O
printf	function
(	O
"GNU MAC Changer\n"	pointer
"Usage: macchanger [options] device\n\n"	pointer
"  -h,  --help                   Print this help\n"	pointer
"  -V,  --version                Print version and exit\n"	pointer
"  -s,  --show                   Print the MAC address and exit\n"	pointer
"  -e,  --endding                Don't change the vendor bytes\n"	pointer
"  -a,  --another                Set random vendor MAC of the same kind\n"	pointer
"  -A                            Set random vendor MAC of any kind\n"	pointer
"  -p,  --permanent              Reset to original, permanent hardware MAC\n"	pointer
"  -r,  --random                 Set fully random MAC\n"	pointer
"  -l,  --list[=keyword]         Print known vendors\n"	pointer
"  -b,  --bia                    Pretend to be a burned-in-address\n"	pointer
"  -m,  --mac=XX:XX:XX:XX:XX:XX  Set the MAC XX:XX:XX:XX:XX:XX\n\n"	pointer
"Report bugs to https://github.com/alobbs/macchanger/issues\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_usage	function
(	O
void	O
)	O
{	O
printf	function
(	O
"GNU MAC Changer\n"	pointer
"Usage: macchanger [options] device\n\n"	pointer
"Try `macchanger --help' for more options.\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_mac	function
(	O
const	O
char	O
*	O
s	pointer
,	O
const	O
mac_t	struct
*	O
mac	pointer
)	O
{	O
char	O
string	array
[	O
18	int
]	O
;	O
int	O
is_wireless	int
;	O
is_wireless	int
=	O
mc_maclist_is_wireless	function
(	O
mac	pointer
)	O
;	O
mc_mac_into_string	function
(	O
mac	pointer
,	O
string	array
)	O
;	O
printf	function
(	O
"%s%s%s (%s)\n"	pointer
,	O
s	pointer
,	O
string	array
,	O
is_wireless	int
?	O
" [wireless]"	pointer
:	O
""	pointer
,	O
CARD_NAME	O
(	O
mac	pointer
)	O
)	O
;	O
}	O
static	O
void	O
random_seed	function
(	O
void	O
)	O
{	O
int	O
fd	int
;	O
struct	O
timeval	struct
tv	struct
;	O
unsigned	O
int	O
seed	int
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
"/dev/urandom"	pointer
,	O
O_RDONLY	int
)	O
)	O
>=	O
0	int
||	O
(	O
fd	int
=	O
open	function
(	O
"/dev/random"	pointer
,	O
O_RDONLY	int
)	O
)	O
>=	O
0	int
)	O
{	O
read	function
(	O
fd	int
,	O
&	O
seed	int
,	O
sizeof	O
(	O
seed	int
)	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
}	O
else	O
{	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
seed	int
=	O
(	O
getpid	function
(	O
)	O
<<	O
16	int
)	O
^	O
tv	struct
.	O
tv_sec	long
^	O
tv	struct
.	O
tv_usec	long
;	O
}	O
srandom	function
(	O
seed	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
char	O
random	function
=	O
0	int
;	O
char	O
endding	char
=	O
0	int
;	O
char	O
another_any	char
=	O
0	int
;	O
char	O
another_same	char
=	O
0	int
;	O
char	O
permanent	char
=	O
0	int
;	O
char	O
print_list	char
=	O
0	int
;	O
char	O
show	char
=	O
0	int
;	O
char	O
set_bia	char
=	O
0	int
;	O
char	O
*	O
set_mac	pointer
=	O
NULL	O
;	O
char	O
*	O
search_word	pointer
=	O
NULL	O
;	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"random"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"endding"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"another"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"permanent"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"show"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"another_any"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'A'	O
}	O
,	O
{	O
"bia"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'b'	O
}	O
,	O
{	O
"list"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"mac"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'm'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
net_info_t	struct
*	O
net	pointer
;	O
mac_t	struct
*	O
mac	pointer
;	O
mac_t	struct
*	O
mac_permanent	pointer
;	O
mac_t	struct
*	O
mac_faked	pointer
;	O
char	O
*	O
device_name	pointer
;	O
int	O
val	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
val	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"VasAbrephlm:"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
val	int
)	O
{	O
case	O
'V'	O
:	O
printf	function
(	O
"GNU MAC changer %s\n"	pointer
"Written by Alvaro Lopez Ortega <alvaro@gnu.org>\n\n"	pointer
"Copyright (C) 2003,2013 Alvaro Lopez Ortega <alvaro@gnu.org>.\n"	pointer
"This is free software; see the source for copying conditions.  There is NO\n"	pointer
"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"	pointer
,	O
VERSION	pointer
)	O
;	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
print_list	char
=	O
1	int
;	O
search_word	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'r'	O
:	O
random	function
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
endding	char
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
set_bia	char
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
another_same	char
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
show	char
=	O
1	int
;	O
break	O
;	O
case	O
'A'	O
:	O
another_any	char
=	O
1	int
;	O
break	O
;	O
case	O
'p'	O
:	O
permanent	char
=	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
set_mac	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
'?'	O
:	O
default	O
:	O
print_help	function
(	O
)	O
;	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
mc_maclist_init	function
(	O
)	O
<	O
0	int
)	O
{	O
exit	function
(	O
EXIT_ERROR	int
)	O
;	O
}	O
if	O
(	O
print_list	char
)	O
{	O
mc_maclist_print	function
(	O
search_word	pointer
)	O
;	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
}	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
{	O
print_usage	function
(	O
)	O
;	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
}	O
device_name	pointer
=	O
argv	array
[	O
optind	int
]	O
;	O
random_seed	function
(	O
)	O
;	O
if	O
(	O
(	O
net	pointer
=	O
mc_net_info_new	function
(	O
device_name	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
exit	function
(	O
EXIT_ERROR	int
)	O
;	O
}	O
mac	pointer
=	O
mc_net_info_get_mac	function
(	O
net	pointer
)	O
;	O
mac_permanent	pointer
=	O
mc_net_info_get_permanent_mac	function
(	O
net	pointer
)	O
;	O
print_mac	function
(	O
"Current MAC:   "	pointer
,	O
mac	pointer
)	O
;	O
print_mac	function
(	O
"Permanent MAC: "	pointer
,	O
mac_permanent	pointer
)	O
;	O
mac_faked	pointer
=	O
mc_mac_dup	function
(	O
mac	pointer
)	O
;	O
if	O
(	O
show	char
)	O
{	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
}	O
else	O
if	O
(	O
set_mac	pointer
)	O
{	O
if	O
(	O
mc_mac_read_string	function
(	O
mac_faked	pointer
,	O
set_mac	pointer
)	O
<	O
0	int
)	O
{	O
exit	function
(	O
EXIT_ERROR	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
random	function
)	O
{	O
mc_mac_random	function
(	O
mac_faked	pointer
,	O
6	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
endding	char
)	O
{	O
mc_mac_random	function
(	O
mac_faked	pointer
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
another_same	char
)	O
{	O
val	int
=	O
mc_maclist_is_wireless	function
(	O
mac	pointer
)	O
;	O
mc_maclist_set_random_vendor	function
(	O
mac_faked	pointer
,	O
val	int
)	O
;	O
mc_mac_random	function
(	O
mac_faked	pointer
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
another_any	char
)	O
{	O
mc_maclist_set_random_vendor	function
(	O
mac_faked	pointer
,	O
mac_is_anykind	int
)	O
;	O
mc_mac_random	function
(	O
mac_faked	pointer
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
permanent	char
)	O
{	O
mac_faked	pointer
=	O
mc_mac_dup	function
(	O
mac_permanent	pointer
)	O
;	O
}	O
else	O
{	O
mc_mac_next	function
(	O
mac_faked	pointer
)	O
;	O
}	O
ret	int
=	O
mc_net_info_set_mac	function
(	O
net	pointer
,	O
mac_faked	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mc_mac_free	function
(	O
mac_faked	pointer
)	O
;	O
mac_faked	pointer
=	O
mc_net_info_get_mac	function
(	O
net	pointer
)	O
;	O
print_mac	function
(	O
"New MAC:       "	pointer
,	O
mac_faked	pointer
)	O
;	O
if	O
(	O
mc_mac_equal	function
(	O
mac	pointer
,	O
mac_faked	pointer
)	O
)	O
{	O
printf	function
(	O
"It's the same MAC!!\n"	pointer
)	O
;	O
}	O
}	O
mc_mac_free	function
(	O
mac	pointer
)	O
;	O
mc_mac_free	function
(	O
mac_faked	pointer
)	O
;	O
mc_mac_free	function
(	O
mac_permanent	pointer
)	O
;	O
mc_net_info_free	function
(	O
net	pointer
)	O
;	O
mc_maclist_free	function
(	O
)	O
;	O
return	O
(	O
ret	int
==	O
0	int
)	O
?	O
EXIT_OK	int
:	O
EXIT_ERROR	int
;	O
}	O
