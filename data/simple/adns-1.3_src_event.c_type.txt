static	O
void	O
tcp_close	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
int	O
serv	int
;	O
serv	int
=	O
ads	pointer
->	O
tcpserver	int
;	O
close	function
(	O
ads	pointer
->	O
tcpsocket	int
)	O
;	O
ads	pointer
->	O
tcpsocket	int
=	O
-	O
1	int
;	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
=	O
ads	pointer
->	O
tcprecv_skip	int
=	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
=	O
0	int
;	O
}	O
void	O
adns__tcp_broken	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
char	O
*	O
what	pointer
,	O
const	O
char	O
*	O
why	pointer
)	O
{	O
int	O
serv	int
;	O
adns_query	pointer
qu	pointer
;	O
assert	O
(	O
ads	pointer
->	O
tcpstate	enum
==	O
server_connecting	int
||	O
ads	pointer
->	O
tcpstate	enum
==	O
server_ok	int
)	O
;	O
serv	int
=	O
ads	pointer
->	O
tcpserver	int
;	O
if	O
(	O
what	pointer
)	O
adns__warn	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"TCP connection failed: %s: %s"	pointer
,	O
what	pointer
,	O
why	pointer
)	O
;	O
if	O
(	O
ads	pointer
->	O
tcpstate	enum
==	O
server_connecting	int
)	O
{	O
for	O
(	O
qu	pointer
=	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
;	O
qu	pointer
;	O
qu	pointer
=	O
qu	pointer
->	O
next	pointer
)	O
qu	pointer
->	O
retries	int
++	O
;	O
}	O
tcp_close	function
(	O
ads	pointer
)	O
;	O
ads	pointer
->	O
tcpstate	enum
=	O
server_broken	int
;	O
ads	pointer
->	O
tcpserver	int
=	O
(	O
serv	int
+	O
1	int
)	O
%	O
ads	pointer
->	O
nservers	int
;	O
}	O
static	O
void	O
tcp_connected	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
adns_query	pointer
qu	pointer
,	O
nqu	pointer
;	O
adns__debug	function
(	O
ads	pointer
,	O
ads	pointer
->	O
tcpserver	int
,	O
0	int
,	O
"TCP connected"	pointer
)	O
;	O
ads	pointer
->	O
tcpstate	enum
=	O
server_ok	int
;	O
for	O
(	O
qu	pointer
=	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
;	O
qu	pointer
&&	O
ads	pointer
->	O
tcpstate	enum
==	O
server_ok	int
;	O
qu	pointer
=	O
nqu	pointer
)	O
{	O
nqu	pointer
=	O
qu	pointer
->	O
next	pointer
;	O
assert	O
(	O
qu	pointer
->	O
state	pointer
==	O
query_tcpw	int
)	O
;	O
adns__querysend_tcp	function
(	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
}	O
static	O
void	O
tcp_broken_events	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
adns_query	pointer
qu	pointer
,	O
nqu	pointer
;	O
assert	O
(	O
ads	pointer
->	O
tcpstate	enum
==	O
server_broken	int
)	O
;	O
for	O
(	O
qu	pointer
=	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
;	O
qu	pointer
;	O
qu	pointer
=	O
nqu	pointer
)	O
{	O
nqu	pointer
=	O
qu	pointer
->	O
next	pointer
;	O
assert	O
(	O
qu	pointer
->	O
state	pointer
==	O
query_tcpw	int
)	O
;	O
if	O
(	O
qu	pointer
->	O
retries	int
>	O
ads	pointer
->	O
nservers	int
)	O
{	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
tcpw	struct
,	O
qu	pointer
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_allservfail	int
)	O
;	O
}	O
}	O
ads	pointer
->	O
tcpstate	enum
=	O
server_disconnected	int
;	O
}	O
void	O
adns__tcp_tryconnect	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
int	O
r	int
,	O
fd	int
,	O
tries	int
;	O
struct	O
sockaddr_in	struct
addr	union
;	O
struct	O
protoent	struct
*	O
proto	pointer
;	O
for	O
(	O
tries	int
=	O
0	int
;	O
tries	int
<	O
ads	pointer
->	O
nservers	int
;	O
tries	int
++	O
)	O
{	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_connecting	int
:	O
case	O
server_ok	int
:	O
case	O
server_broken	int
:	O
return	O
;	O
case	O
server_disconnected	int
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
assert	O
(	O
!	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
)	O
;	O
assert	O
(	O
!	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
)	O
;	O
assert	O
(	O
!	O
ads	pointer
->	O
tcprecv_skip	int
)	O
;	O
proto	pointer
=	O
getprotobyname	function
(	O
"tcp"	pointer
)	O
;	O
if	O
(	O
!	O
proto	pointer
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"unable to find protocol no. for TCP !"	pointer
)	O
;	O
return	O
;	O
}	O
fd	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
proto	pointer
->	O
p_proto	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"cannot create TCP socket: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
r	int
=	O
adns__setnonblock	function
(	O
ads	pointer
,	O
fd	int
)	O
;	O
if	O
(	O
r	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"cannot make TCP socket nonblocking:"	pointer
" %s"	pointer
,	O
strerror	function
(	O
r	int
)	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
;	O
}	O
memset	function
(	O
&	O
addr	union
,	O
0	int
,	O
sizeof	O
(	O
addr	union
)	O
)	O
;	O
addr	union
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	union
.	O
sin_port	short
=	O
htons	function
(	O
DNS_PORT	int
)	O
;	O
addr	union
.	O
sin_addr	struct
=	O
ads	pointer
->	O
servers	array
[	O
ads	pointer
->	O
tcpserver	int
]	O
.	O
addr	union
;	O
r	int
=	O
connect	function
(	O
fd	int
,	O
(	O
const	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	union
,	O
sizeof	O
(	O
addr	union
)	O
)	O
;	O
ads	pointer
->	O
tcpsocket	int
=	O
fd	int
;	O
ads	pointer
->	O
tcpstate	enum
=	O
server_connecting	int
;	O
if	O
(	O
r	int
==	O
0	int
)	O
{	O
tcp_connected	function
(	O
ads	pointer
,	O
now	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
errno	O
==	O
EWOULDBLOCK	O
||	O
errno	O
==	O
EINPROGRESS	int
)	O
{	O
ads	pointer
->	O
tcptimeout	struct
=	O
now	pointer
;	O
timevaladd	function
(	O
&	O
ads	pointer
->	O
tcptimeout	struct
,	O
TCPCONNMS	int
)	O
;	O
return	O
;	O
}	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"connect"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
tcp_broken_events	function
(	O
ads	pointer
)	O
;	O
}	O
}	O
void	O
adns__must_gettimeofday	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
timeval	struct
*	O
*	O
now_io	pointer
,	O
struct	O
timeval	struct
*	O
tv_buf	pointer
)	O
{	O
const	O
struct	O
timeval	struct
*	O
now	pointer
;	O
int	O
r	int
;	O
now	pointer
=	O
*	O
now_io	pointer
;	O
if	O
(	O
now	pointer
)	O
return	O
;	O
r	int
=	O
gettimeofday	function
(	O
tv_buf	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
*	O
now_io	pointer
=	O
tv_buf	pointer
;	O
return	O
;	O
}	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"gettimeofday failed: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
adns_globalsystemfailure	function
(	O
ads	pointer
)	O
;	O
return	O
;	O
}	O
static	O
void	O
inter_immed	function
(	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
)	O
{	O
struct	O
timeval	struct
*	O
rbuf	pointer
;	O
if	O
(	O
!	O
tv_io	pointer
)	O
return	O
;	O
rbuf	pointer
=	O
*	O
tv_io	pointer
;	O
if	O
(	O
!	O
rbuf	pointer
)	O
{	O
*	O
tv_io	pointer
=	O
rbuf	pointer
=	O
tvbuf	pointer
;	O
}	O
timerclear	O
(	O
rbuf	pointer
)	O
;	O
}	O
static	O
void	O
inter_maxto	function
(	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
maxto	struct
)	O
{	O
struct	O
timeval	struct
*	O
rbuf	pointer
;	O
if	O
(	O
!	O
tv_io	pointer
)	O
return	O
;	O
rbuf	pointer
=	O
*	O
tv_io	pointer
;	O
if	O
(	O
!	O
rbuf	pointer
)	O
{	O
*	O
tvbuf	pointer
=	O
maxto	struct
;	O
*	O
tv_io	pointer
=	O
tvbuf	pointer
;	O
}	O
else	O
{	O
if	O
(	O
timercmp	O
(	O
rbuf	pointer
,	O
&	O
maxto	struct
,	O
>	O
)	O
)	O
*	O
rbuf	pointer
=	O
maxto	struct
;	O
}	O
}	O
static	O
void	O
inter_maxtoabs	function
(	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
now	pointer
,	O
struct	O
timeval	struct
maxtime	struct
)	O
{	O
ldiv_t	struct
dr	struct
;	O
if	O
(	O
!	O
tv_io	pointer
)	O
return	O
;	O
maxtime	struct
.	O
tv_sec	long
-=	O
(	O
now	pointer
.	O
tv_sec	long
+	O
2	int
)	O
;	O
maxtime	struct
.	O
tv_usec	long
-=	O
(	O
now	pointer
.	O
tv_usec	long
-	O
2000000	int
)	O
;	O
dr	struct
=	O
ldiv	function
(	O
maxtime	struct
.	O
tv_usec	long
,	O
1000000	int
)	O
;	O
maxtime	struct
.	O
tv_sec	long
+=	O
dr	struct
.	O
quot	int
;	O
maxtime	struct
.	O
tv_usec	long
-=	O
dr	struct
.	O
quot	int
*	O
1000000	int
;	O
if	O
(	O
maxtime	struct
.	O
tv_sec	long
<	O
0	int
)	O
timerclear	O
(	O
&	O
maxtime	struct
)	O
;	O
inter_maxto	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
maxtime	struct
)	O
;	O
}	O
static	O
void	O
timeouts_queue	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
act	int
,	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
now	pointer
,	O
struct	O
query_queue	struct
*	O
queue	pointer
)	O
{	O
adns_query	pointer
qu	pointer
,	O
nqu	pointer
;	O
for	O
(	O
qu	pointer
=	O
queue	pointer
->	O
head	pointer
;	O
qu	pointer
;	O
qu	pointer
=	O
nqu	pointer
)	O
{	O
nqu	pointer
=	O
qu	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
timercmp	O
(	O
&	O
now	pointer
,	O
&	O
qu	pointer
->	O
timeout	struct
,	O
>	O
)	O
)	O
{	O
inter_maxtoabs	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
,	O
qu	pointer
->	O
timeout	struct
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
act	int
)	O
{	O
inter_immed	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
)	O
;	O
return	O
;	O
}	O
LIST_UNLINK	O
(	O
*	O
queue	pointer
,	O
qu	pointer
)	O
;	O
if	O
(	O
qu	pointer
->	O
state	pointer
!=	O
query_tosend	int
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_timeout	int
)	O
;	O
}	O
else	O
{	O
adns__query_send	function
(	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
nqu	pointer
=	O
queue	pointer
->	O
head	pointer
;	O
}	O
}	O
}	O
static	O
void	O
tcp_events	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
act	int
,	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_broken	int
:	O
if	O
(	O
!	O
act	int
)	O
{	O
inter_immed	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
)	O
;	O
return	O
;	O
}	O
tcp_broken_events	function
(	O
ads	pointer
)	O
;	O
case	O
server_disconnected	int
:	O
if	O
(	O
!	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
return	O
;	O
if	O
(	O
!	O
act	int
)	O
{	O
inter_immed	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
)	O
;	O
return	O
;	O
}	O
adns__tcp_tryconnect	function
(	O
ads	pointer
,	O
now	pointer
)	O
;	O
break	O
;	O
case	O
server_ok	int
:	O
if	O
(	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
return	O
;	O
if	O
(	O
!	O
ads	pointer
->	O
tcptimeout	struct
.	O
tv_sec	long
)	O
{	O
assert	O
(	O
!	O
ads	pointer
->	O
tcptimeout	struct
.	O
tv_usec	long
)	O
;	O
ads	pointer
->	O
tcptimeout	struct
=	O
now	pointer
;	O
timevaladd	function
(	O
&	O
ads	pointer
->	O
tcptimeout	struct
,	O
TCPIDLEMS	int
)	O
;	O
}	O
case	O
server_connecting	int
:	O
if	O
(	O
!	O
act	int
||	O
!	O
timercmp	O
(	O
&	O
now	pointer
,	O
&	O
ads	pointer
->	O
tcptimeout	struct
,	O
>	O
)	O
)	O
{	O
inter_maxtoabs	function
(	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
,	O
ads	pointer
->	O
tcptimeout	struct
)	O
;	O
return	O
;	O
}	O
{	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_connecting	int
:	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"unable to make connection"	pointer
,	O
"timed out"	pointer
)	O
;	O
break	O
;	O
case	O
server_ok	int
:	O
tcp_close	function
(	O
ads	pointer
)	O
;	O
ads	pointer
->	O
tcpstate	enum
=	O
server_disconnected	int
;	O
return	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
return	O
;	O
}	O
void	O
adns__timeouts	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
act	int
,	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
timeouts_queue	function
(	O
ads	pointer
,	O
act	int
,	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
,	O
&	O
ads	pointer
->	O
udpw	struct
)	O
;	O
timeouts_queue	function
(	O
ads	pointer
,	O
act	int
,	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
,	O
&	O
ads	pointer
->	O
tcpw	struct
)	O
;	O
tcp_events	function
(	O
ads	pointer
,	O
act	int
,	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
)	O
;	O
}	O
void	O
adns_firsttimeout	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
timeval	struct
*	O
*	O
tv_io	pointer
,	O
struct	O
timeval	struct
*	O
tvbuf	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
adns__timeouts	function
(	O
ads	pointer
,	O
0	int
,	O
tv_io	pointer
,	O
tvbuf	pointer
,	O
now	pointer
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
void	O
adns_processtimeouts	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
struct	O
timeval	struct
tv_buf	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
adns__must_gettimeofday	function
(	O
ads	pointer
,	O
&	O
now	pointer
,	O
&	O
tv_buf	pointer
)	O
;	O
if	O
(	O
now	pointer
)	O
adns__timeouts	function
(	O
ads	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
*	O
now	pointer
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
int	O
adns__pollfds	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
pollfd	struct
pollfds_buf	array
[	O
MAX_POLLFDS	O
]	O
)	O
{	O
assert	O
(	O
MAX_POLLFDS	O
==	O
2	int
)	O
;	O
pollfds_buf	array
[	O
0	int
]	O
.	O
fd	int
=	O
ads	pointer
->	O
udpsocket	int
;	O
pollfds_buf	array
[	O
0	int
]	O
.	O
events	short
=	O
POLLIN	int
;	O
pollfds_buf	array
[	O
0	int
]	O
.	O
revents	short
=	O
0	int
;	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_disconnected	int
:	O
case	O
server_broken	int
:	O
return	O
1	int
;	O
case	O
server_connecting	int
:	O
pollfds_buf	array
[	O
1	int
]	O
.	O
events	short
=	O
POLLOUT	int
;	O
break	O
;	O
case	O
server_ok	int
:	O
pollfds_buf	array
[	O
1	int
]	O
.	O
events	short
=	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
?	O
POLLIN	int
|	O
POLLOUT	int
|	O
POLLPRI	int
:	O
POLLIN	int
|	O
POLLPRI	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
pollfds_buf	array
[	O
1	int
]	O
.	O
fd	int
=	O
ads	pointer
->	O
tcpsocket	int
;	O
return	O
2	int
;	O
}	O
int	O
adns_processreadable	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
fd	int
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
int	O
want	int
,	O
dgramlen	int
,	O
r	int
,	O
udpaddrlen	int
,	O
serv	int
,	O
old_skip	int
;	O
byte	char
udpbuf	array
[	O
DNS_MAXUDP	int
]	O
;	O
struct	O
sockaddr_in	struct
udpaddr	struct
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_disconnected	int
:	O
case	O
server_broken	int
:	O
case	O
server_connecting	int
:	O
break	O
;	O
case	O
server_ok	int
:	O
if	O
(	O
fd	int
!=	O
ads	pointer
->	O
tcpsocket	int
)	O
break	O
;	O
assert	O
(	O
!	O
ads	pointer
->	O
tcprecv_skip	int
)	O
;	O
do	O
{	O
if	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
>=	O
ads	pointer
->	O
tcprecv_skip	int
+	O
2	int
)	O
{	O
dgramlen	int
=	O
(	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
[	O
ads	pointer
->	O
tcprecv_skip	int
]	O
<<	O
8	int
)	O
|	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
[	O
ads	pointer
->	O
tcprecv_skip	int
+	O
1	int
]	O
)	O
;	O
if	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
>=	O
ads	pointer
->	O
tcprecv_skip	int
+	O
2	int
+	O
dgramlen	int
)	O
{	O
old_skip	int
=	O
ads	pointer
->	O
tcprecv_skip	int
;	O
ads	pointer
->	O
tcprecv_skip	int
+=	O
2	int
+	O
dgramlen	int
;	O
adns__procdgram	function
(	O
ads	pointer
,	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
+	O
old_skip	int
+	O
2	int
,	O
dgramlen	int
,	O
ads	pointer
->	O
tcpserver	int
,	O
1	int
,	O
*	O
now	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
want	int
=	O
2	int
+	O
dgramlen	int
;	O
}	O
}	O
else	O
{	O
want	int
=	O
2	int
;	O
}	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
-=	O
ads	pointer
->	O
tcprecv_skip	int
;	O
memmove	function
(	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
,	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
+	O
ads	pointer
->	O
tcprecv_skip	int
,	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
)	O
;	O
ads	pointer
->	O
tcprecv_skip	int
=	O
0	int
;	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
ads	pointer
->	O
tcprecv	struct
,	O
want	int
)	O
)	O
{	O
r	int
=	O
ENOMEM	int
;	O
goto	O
xit	O
;	O
}	O
assert	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
<=	O
ads	pointer
->	O
tcprecv	struct
.	O
avail	int
)	O
;	O
if	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
==	O
ads	pointer
->	O
tcprecv	struct
.	O
avail	int
)	O
continue	O
;	O
r	int
=	O
read	function
(	O
ads	pointer
->	O
tcpsocket	int
,	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
+	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
,	O
ads	pointer
->	O
tcprecv	struct
.	O
avail	int
-	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
)	O
;	O
if	O
(	O
r	int
>	O
0	int
)	O
{	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
+=	O
r	int
;	O
}	O
else	O
{	O
if	O
(	O
r	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
)	O
{	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno_resources	function
(	O
errno	O
)	O
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
xit	O
;	O
}	O
}	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"read"	pointer
,	O
r	int
?	O
strerror	function
(	O
errno	O
)	O
:	O
"closed"	pointer
)	O
;	O
}	O
}	O
while	O
(	O
ads	pointer
->	O
tcpstate	enum
==	O
server_ok	int
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
fd	int
==	O
ads	pointer
->	O
udpsocket	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
udpaddrlen	int
=	O
sizeof	O
(	O
udpaddr	struct
)	O
;	O
r	int
=	O
recvfrom	function
(	O
ads	pointer
->	O
udpsocket	int
,	O
udpbuf	array
,	O
sizeof	O
(	O
udpbuf	array
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
udpaddr	struct
,	O
&	O
udpaddrlen	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
)	O
{	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno_resources	function
(	O
errno	O
)	O
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
xit	O
;	O
}	O
adns__warn	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"datagram receive error: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
udpaddrlen	int
!=	O
sizeof	O
(	O
udpaddr	struct
)	O
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"datagram received with wrong address length %d"	pointer
" (expected %lu)"	pointer
,	O
udpaddrlen	int
,	O
(	O
unsigned	O
long	O
)	O
sizeof	O
(	O
udpaddr	struct
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
udpaddr	struct
.	O
sin_family	short
!=	O
AF_INET	O
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"datagram received with wrong protocol family"	pointer
" %u (expected %u)"	pointer
,	O
udpaddr	struct
.	O
sin_family	short
,	O
AF_INET	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
ntohs	function
(	O
udpaddr	struct
.	O
sin_port	short
)	O
!=	O
DNS_PORT	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"datagram received from wrong port"	pointer
" %u (expected %u)"	pointer
,	O
ntohs	function
(	O
udpaddr	struct
.	O
sin_port	short
)	O
,	O
DNS_PORT	int
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
serv	int
=	O
0	int
;	O
serv	int
<	O
ads	pointer
->	O
nservers	int
&&	O
ads	pointer
->	O
servers	array
[	O
serv	int
]	O
.	O
addr	union
.	O
s_addr	int
!=	O
udpaddr	struct
.	O
sin_addr	struct
.	O
s_addr	int
;	O
serv	int
++	O
)	O
;	O
if	O
(	O
serv	int
>=	O
ads	pointer
->	O
nservers	int
)	O
{	O
adns__warn	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"datagram received from unknown nameserver %s"	pointer
,	O
inet_ntoa	function
(	O
udpaddr	struct
.	O
sin_addr	struct
)	O
)	O
;	O
continue	O
;	O
}	O
adns__procdgram	function
(	O
ads	pointer
,	O
udpbuf	array
,	O
r	int
,	O
serv	int
,	O
0	int
,	O
*	O
now	pointer
)	O
;	O
}	O
}	O
r	int
=	O
0	int
;	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
int	O
adns_processwriteable	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
fd	int
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
int	O
r	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_disconnected	int
:	O
case	O
server_broken	int
:	O
break	O
;	O
case	O
server_connecting	int
:	O
if	O
(	O
fd	int
!=	O
ads	pointer
->	O
tcpsocket	int
)	O
break	O
;	O
assert	O
(	O
ads	pointer
->	O
tcprecv	struct
.	O
used	int
==	O
0	int
)	O
;	O
assert	O
(	O
ads	pointer
->	O
tcprecv_skip	int
==	O
0	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
adns__vbuf_ensure	function
(	O
&	O
ads	pointer
->	O
tcprecv	struct
,	O
1	int
)	O
)	O
{	O
r	int
=	O
ENOMEM	int
;	O
goto	O
xit	O
;	O
}	O
r	int
=	O
read	function
(	O
ads	pointer
->	O
tcpsocket	int
,	O
&	O
ads	pointer
->	O
tcprecv	struct
.	O
buf	pointer
,	O
1	int
)	O
;	O
if	O
(	O
r	int
==	O
0	int
||	O
(	O
r	int
<	O
0	int
&&	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
)	O
)	O
)	O
{	O
tcp_connected	function
(	O
ads	pointer
,	O
*	O
now	pointer
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
r	int
>	O
0	int
)	O
{	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"connect/read"	pointer
,	O
"sent data before first request"	pointer
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno_resources	function
(	O
errno	O
)	O
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
xit	O
;	O
}	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"connect/read"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
case	O
server_ok	int
:	O
if	O
(	O
fd	int
!=	O
ads	pointer
->	O
tcpsocket	int
)	O
break	O
;	O
while	O
(	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
)	O
{	O
adns__sigpipe_protect	function
(	O
ads	pointer
)	O
;	O
r	int
=	O
write	function
(	O
ads	pointer
->	O
tcpsocket	int
,	O
ads	pointer
->	O
tcpsend	struct
.	O
buf	pointer
,	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
)	O
;	O
adns__sigpipe_unprotect	function
(	O
ads	pointer
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno	O
==	O
EAGAIN	int
||	O
errno	O
==	O
EWOULDBLOCK	O
)	O
{	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
if	O
(	O
errno_resources	function
(	O
errno	O
)	O
)	O
{	O
r	int
=	O
errno	O
;	O
goto	O
xit	O
;	O
}	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"write"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
}	O
else	O
if	O
(	O
r	int
>	O
0	int
)	O
{	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
-=	O
r	int
;	O
memmove	function
(	O
ads	pointer
->	O
tcpsend	struct
.	O
buf	pointer
,	O
ads	pointer
->	O
tcpsend	struct
.	O
buf	pointer
+	O
r	int
,	O
ads	pointer
->	O
tcpsend	struct
.	O
used	int
)	O
;	O
}	O
}	O
r	int
=	O
0	int
;	O
goto	O
xit	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
r	int
=	O
0	int
;	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
int	O
adns_processexceptional	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
fd	int
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_disconnected	int
:	O
case	O
server_broken	int
:	O
break	O
;	O
case	O
server_connecting	int
:	O
case	O
server_ok	int
:	O
if	O
(	O
fd	int
!=	O
ads	pointer
->	O
tcpsocket	int
)	O
break	O
;	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
"poll/select"	pointer
,	O
"exceptional condition detected"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
fd_event	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
fd	int
,	O
int	O
revent	int
,	O
int	O
pollflag	int
,	O
int	O
maxfd	pointer
,	O
const	O
fd_set	struct
*	O
fds	pointer
,	O
int	O
(	O
*	O
func	pointer
)	O
(	O
adns_state	pointer
,	O
int	O
fd	int
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
,	O
struct	O
timeval	struct
now	pointer
,	O
int	O
*	O
r_r	pointer
)	O
{	O
int	O
r	int
;	O
if	O
(	O
!	O
(	O
revent	int
&	O
pollflag	int
)	O
)	O
return	O
;	O
if	O
(	O
fds	pointer
&&	O
!	O
(	O
fd	int
<	O
maxfd	pointer
&&	O
FD_ISSET	O
(	O
fd	int
,	O
fds	pointer
)	O
)	O
)	O
return	O
;	O
r	int
=	O
func	pointer
(	O
ads	pointer
,	O
fd	int
,	O
&	O
now	pointer
)	O
;	O
if	O
(	O
r	int
)	O
{	O
if	O
(	O
r_r	pointer
)	O
{	O
*	O
r_r	pointer
=	O
r	int
;	O
}	O
else	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"process fd failed after select:"	pointer
" %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
adns_globalsystemfailure	function
(	O
ads	pointer
)	O
;	O
}	O
}	O
}	O
void	O
adns__fdevents	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
struct	O
pollfd	struct
*	O
pollfds	pointer
,	O
int	O
npollfds	int
,	O
int	O
maxfd	pointer
,	O
const	O
fd_set	struct
*	O
readfds	pointer
,	O
const	O
fd_set	struct
*	O
writefds	pointer
,	O
const	O
fd_set	struct
*	O
exceptfds	pointer
,	O
struct	O
timeval	struct
now	pointer
,	O
int	O
*	O
r_r	pointer
)	O
{	O
int	O
i	int
,	O
fd	int
,	O
revents	short
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npollfds	int
;	O
i	int
++	O
)	O
{	O
fd	int
=	O
pollfds	pointer
[	O
i	int
]	O
.	O
fd	int
;	O
if	O
(	O
fd	int
>=	O
maxfd	pointer
)	O
maxfd	pointer
=	O
fd	int
+	O
1	int
;	O
revents	short
=	O
pollfds	pointer
[	O
i	int
]	O
.	O
revents	short
;	O
EV	O
(	O
POLLIN	int
,	O
readfds	pointer
,	O
readable	O
)	O
;	O
EV	O
(	O
POLLOUT	int
,	O
writefds	pointer
,	O
writeable	O
)	O
;	O
EV	O
(	O
POLLPRI	int
,	O
exceptfds	pointer
,	O
exceptional	O
)	O
;	O
}	O
}	O
void	O
adns_beforeselect	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
*	O
maxfd_io	pointer
,	O
fd_set	struct
*	O
readfds_io	pointer
,	O
fd_set	struct
*	O
writefds_io	pointer
,	O
fd_set	struct
*	O
exceptfds_io	pointer
,	O
struct	O
timeval	struct
*	O
*	O
tv_mod	pointer
,	O
struct	O
timeval	struct
*	O
tv_tobuf	pointer
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
struct	O
timeval	struct
tv_nowbuf	struct
;	O
struct	O
pollfd	struct
pollfds	pointer
[	O
MAX_POLLFDS	O
]	O
;	O
int	O
i	int
,	O
fd	int
,	O
maxfd	pointer
,	O
npollfds	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
if	O
(	O
tv_mod	pointer
&&	O
(	O
!	O
*	O
tv_mod	pointer
||	O
(	O
*	O
tv_mod	pointer
)	O
->	O
tv_sec	long
||	O
(	O
*	O
tv_mod	pointer
)	O
->	O
tv_usec	long
)	O
)	O
{	O
adns__must_gettimeofday	function
(	O
ads	pointer
,	O
&	O
now	pointer
,	O
&	O
tv_nowbuf	struct
)	O
;	O
if	O
(	O
!	O
now	pointer
)	O
{	O
inter_immed	function
(	O
tv_mod	pointer
,	O
tv_tobuf	pointer
)	O
;	O
goto	O
xit	O
;	O
}	O
adns__timeouts	function
(	O
ads	pointer
,	O
0	int
,	O
tv_mod	pointer
,	O
tv_tobuf	pointer
,	O
*	O
now	pointer
)	O
;	O
}	O
npollfds	int
=	O
adns__pollfds	function
(	O
ads	pointer
,	O
pollfds	pointer
)	O
;	O
maxfd	pointer
=	O
*	O
maxfd_io	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npollfds	int
;	O
i	int
++	O
)	O
{	O
fd	int
=	O
pollfds	pointer
[	O
i	int
]	O
.	O
fd	int
;	O
if	O
(	O
fd	int
>=	O
maxfd	pointer
)	O
maxfd	pointer
=	O
fd	int
+	O
1	int
;	O
if	O
(	O
pollfds	pointer
[	O
i	int
]	O
.	O
events	short
&	O
POLLIN	int
)	O
FD_SET	O
(	O
fd	int
,	O
readfds_io	pointer
)	O
;	O
if	O
(	O
pollfds	pointer
[	O
i	int
]	O
.	O
events	short
&	O
POLLOUT	int
)	O
FD_SET	O
(	O
fd	int
,	O
writefds_io	pointer
)	O
;	O
if	O
(	O
pollfds	pointer
[	O
i	int
]	O
.	O
events	short
&	O
POLLPRI	int
)	O
FD_SET	O
(	O
fd	int
,	O
exceptfds_io	pointer
)	O
;	O
}	O
*	O
maxfd_io	pointer
=	O
maxfd	pointer
;	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
void	O
adns_afterselect	function
(	O
adns_state	pointer
ads	pointer
,	O
int	O
maxfd	pointer
,	O
const	O
fd_set	struct
*	O
readfds	pointer
,	O
const	O
fd_set	struct
*	O
writefds	pointer
,	O
const	O
fd_set	struct
*	O
exceptfds	pointer
,	O
const	O
struct	O
timeval	struct
*	O
now	pointer
)	O
{	O
struct	O
timeval	struct
tv_buf	pointer
;	O
struct	O
pollfd	struct
pollfds	pointer
[	O
MAX_POLLFDS	O
]	O
;	O
int	O
npollfds	int
,	O
i	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
adns__must_gettimeofday	function
(	O
ads	pointer
,	O
&	O
now	pointer
,	O
&	O
tv_buf	pointer
)	O
;	O
if	O
(	O
!	O
now	pointer
)	O
goto	O
xit	O
;	O
adns_processtimeouts	function
(	O
ads	pointer
,	O
now	pointer
)	O
;	O
npollfds	int
=	O
adns__pollfds	function
(	O
ads	pointer
,	O
pollfds	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npollfds	int
;	O
i	int
++	O
)	O
pollfds	pointer
[	O
i	int
]	O
.	O
revents	short
=	O
POLLIN	int
|	O
POLLOUT	int
|	O
POLLPRI	int
;	O
adns__fdevents	function
(	O
ads	pointer
,	O
pollfds	pointer
,	O
npollfds	int
,	O
maxfd	pointer
,	O
readfds	pointer
,	O
writefds	pointer
,	O
exceptfds	pointer
,	O
*	O
now	pointer
,	O
0	int
)	O
;	O
xit	O
:	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
void	O
adns_globalsystemfailure	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
while	O
(	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
)	O
adns__query_fail	function
(	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
,	O
adns_s_systemfail	int
)	O
;	O
while	O
(	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
adns__query_fail	function
(	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
,	O
adns_s_systemfail	int
)	O
;	O
switch	O
(	O
ads	pointer
->	O
tcpstate	enum
)	O
{	O
case	O
server_connecting	int
:	O
case	O
server_ok	int
:	O
adns__tcp_broken	function
(	O
ads	pointer
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
server_disconnected	int
:	O
case	O
server_broken	int
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
}	O
int	O
adns_processany	function
(	O
adns_state	pointer
ads	pointer
)	O
{	O
int	O
r	int
,	O
i	int
;	O
struct	O
timeval	struct
now	pointer
;	O
struct	O
pollfd	struct
pollfds	pointer
[	O
MAX_POLLFDS	O
]	O
;	O
int	O
npollfds	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
r	int
=	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
r	int
)	O
adns_processtimeouts	function
(	O
ads	pointer
,	O
&	O
now	pointer
)	O
;	O
npollfds	int
=	O
adns__pollfds	function
(	O
ads	pointer
,	O
pollfds	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
npollfds	int
;	O
i	int
++	O
)	O
pollfds	pointer
[	O
i	int
]	O
.	O
revents	short
=	O
pollfds	pointer
[	O
i	int
]	O
.	O
events	short
&	O
~	O
POLLPRI	int
;	O
adns__fdevents	function
(	O
ads	pointer
,	O
pollfds	pointer
,	O
npollfds	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
now	pointer
,	O
&	O
r	int
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
adns__autosys	function
(	O
adns_state	pointer
ads	pointer
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_noautosys	int
)	O
return	O
;	O
adns_processany	function
(	O
ads	pointer
)	O
;	O
}	O
int	O
adns__internal_check	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
*	O
query_io	pointer
,	O
adns_answer	struct
*	O
*	O
answer	pointer
,	O
void	O
*	O
*	O
context_r	pointer
)	O
{	O
adns_query	pointer
qu	pointer
;	O
qu	pointer
=	O
*	O
query_io	pointer
;	O
if	O
(	O
!	O
qu	pointer
)	O
{	O
if	O
(	O
ads	pointer
->	O
output	struct
.	O
head	pointer
)	O
{	O
qu	pointer
=	O
ads	pointer
->	O
output	struct
.	O
head	pointer
;	O
}	O
else	O
if	O
(	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
||	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
)	O
{	O
return	O
EAGAIN	int
;	O
}	O
else	O
{	O
return	O
ESRCH	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
qu	pointer
->	O
id	int
>=	O
0	int
)	O
return	O
EAGAIN	int
;	O
}	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
output	struct
,	O
qu	pointer
)	O
;	O
*	O
answer	pointer
=	O
qu	pointer
->	O
answer	pointer
;	O
if	O
(	O
context_r	pointer
)	O
*	O
context_r	pointer
=	O
qu	pointer
->	O
ctx	struct
.	O
ext	pointer
;	O
*	O
query_io	pointer
=	O
qu	pointer
;	O
free	function
(	O
qu	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
adns_wait	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
*	O
query_io	pointer
,	O
adns_answer	struct
*	O
*	O
answer_r	pointer
,	O
void	O
*	O
*	O
context_r	pointer
)	O
{	O
int	O
r	int
,	O
maxfd	pointer
,	O
rsel	int
;	O
fd_set	struct
readfds	pointer
,	O
writefds	pointer
,	O
exceptfds	pointer
;	O
struct	O
timeval	struct
tvbuf	pointer
,	O
*	O
tvp	pointer
;	O
adns__consistency	function
(	O
ads	pointer
,	O
*	O
query_io	pointer
,	O
cc_entex	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
r	int
=	O
adns__internal_check	function
(	O
ads	pointer
,	O
query_io	pointer
,	O
answer_r	pointer
,	O
context_r	pointer
)	O
;	O
if	O
(	O
r	int
!=	O
EAGAIN	int
)	O
break	O
;	O
maxfd	pointer
=	O
0	int
;	O
tvp	pointer
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
readfds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
writefds	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	pointer
)	O
;	O
adns_beforeselect	function
(	O
ads	pointer
,	O
&	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
&	O
tvp	pointer
,	O
&	O
tvbuf	pointer
,	O
0	int
)	O
;	O
assert	O
(	O
tvp	pointer
)	O
;	O
rsel	int
=	O
select	function
(	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
tvp	pointer
)	O
;	O
if	O
(	O
rsel	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_eintr	int
)	O
{	O
r	int
=	O
EINTR	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
-	O
1	int
,	O
0	int
,	O
"select failed in wait: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
adns_globalsystemfailure	function
(	O
ads	pointer
)	O
;	O
}	O
}	O
else	O
{	O
assert	O
(	O
rsel	int
>=	O
0	int
)	O
;	O
adns_afterselect	function
(	O
ads	pointer
,	O
maxfd	pointer
,	O
&	O
readfds	pointer
,	O
&	O
writefds	pointer
,	O
&	O
exceptfds	pointer
,	O
0	int
)	O
;	O
}	O
}	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
int	O
adns_check	function
(	O
adns_state	pointer
ads	pointer
,	O
adns_query	pointer
*	O
query_io	pointer
,	O
adns_answer	struct
*	O
*	O
answer_r	pointer
,	O
void	O
*	O
*	O
context_r	pointer
)	O
{	O
struct	O
timeval	struct
now	pointer
;	O
int	O
r	int
;	O
adns__consistency	function
(	O
ads	pointer
,	O
*	O
query_io	pointer
,	O
cc_entex	int
)	O
;	O
r	int
=	O
gettimeofday	function
(	O
&	O
now	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
r	int
)	O
adns__autosys	function
(	O
ads	pointer
,	O
now	pointer
)	O
;	O
r	int
=	O
adns__internal_check	function
(	O
ads	pointer
,	O
query_io	pointer
,	O
answer_r	pointer
,	O
context_r	pointer
)	O
;	O
adns__consistency	function
(	O
ads	pointer
,	O
0	int
,	O
cc_entex	int
)	O
;	O
return	O
r	int
;	O
}	O
