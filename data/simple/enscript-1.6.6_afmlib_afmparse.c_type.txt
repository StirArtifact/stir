struct	O
parse_ctx_st	struct
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
token	array
[	O
1024	int
]	O
;	O
unsigned	O
int	O
tokenlen	int
;	O
}	O
;	O
typedef	O
struct	O
parse_ctx_st	struct
ParseCtx	struct
;	O
static	O
struct	O
keyname_st	struct
{	O
char	O
*	O
name	pointer
;	O
AFMKey	enum
key	pointer
;	O
}	O
keynames	array
[	O
]	O
=	O
{	O
{	O
"Ascender"	pointer
,	O
kAscender	int
}	O
,	O
{	O
"Axes"	pointer
,	O
kAxes	int
}	O
,	O
{	O
"AxisLabel"	pointer
,	O
kAxisLabel	int
}	O
,	O
{	O
"AxisType"	pointer
,	O
kAxisType	int
}	O
,	O
{	O
"B"	pointer
,	O
kB	int
}	O
,	O
{	O
"BlendAxisTypes"	pointer
,	O
kBlendAxisTypes	int
}	O
,	O
{	O
"BlendDesignMap"	pointer
,	O
kBlendDesignMap	int
}	O
,	O
{	O
"BlendDesignPositions"	pointer
,	O
kBlendDesignPositions	int
}	O
,	O
{	O
"C"	pointer
,	O
kC	int
}	O
,	O
{	O
"CC"	pointer
,	O
kCC	int
}	O
,	O
{	O
"CH"	pointer
,	O
kCH	int
}	O
,	O
{	O
"CapHeight"	pointer
,	O
kCapHeight	int
}	O
,	O
{	O
"CharWidth"	pointer
,	O
kCharWidth	int
}	O
,	O
{	O
"CharacterSet"	pointer
,	O
kCharacterSet	int
}	O
,	O
{	O
"Characters"	pointer
,	O
kCharacters	int
}	O
,	O
{	O
"Comment"	pointer
,	O
kComment	int
}	O
,	O
{	O
"Descendents"	pointer
,	O
kDescendents	int
}	O
,	O
{	O
"Descender"	pointer
,	O
kDescender	int
}	O
,	O
{	O
"EncodingScheme"	pointer
,	O
kEncodingScheme	int
}	O
,	O
{	O
"EndAxis"	pointer
,	O
kEndAxis	int
}	O
,	O
{	O
"EndCharMetrics"	pointer
,	O
kEndCharMetrics	int
}	O
,	O
{	O
"EndCompFontMetrics"	pointer
,	O
kEndCompFontMetrics	int
}	O
,	O
{	O
"EndComposites"	pointer
,	O
kEndComposites	int
}	O
,	O
{	O
"EndDescendent"	pointer
,	O
kEndDescendent	int
}	O
,	O
{	O
"EndDirection"	pointer
,	O
kEndDirection	int
}	O
,	O
{	O
"EndFontMetrics"	pointer
,	O
kEndFontMetrics	int
}	O
,	O
{	O
"EndKernData"	pointer
,	O
kEndKernData	int
}	O
,	O
{	O
"EndKernPairs"	pointer
,	O
kEndKernPairs	int
}	O
,	O
{	O
"EndMaster"	pointer
,	O
kEndMaster	int
}	O
,	O
{	O
"EndMasterFontMetrics"	pointer
,	O
kEndMasterFontMetrics	int
}	O
,	O
{	O
"EndTrackKern"	pointer
,	O
kEndTrackKern	int
}	O
,	O
{	O
"EscChar"	pointer
,	O
kEscChar	int
}	O
,	O
{	O
"FamilyName"	pointer
,	O
kFamilyName	int
}	O
,	O
{	O
"FontBBox"	pointer
,	O
kFontBBox	int
}	O
,	O
{	O
"FontName"	pointer
,	O
kFontName	int
}	O
,	O
{	O
"FullName"	pointer
,	O
kFullName	int
}	O
,	O
{	O
"IsBaseFont"	pointer
,	O
kIsBaseFont	int
}	O
,	O
{	O
"IsFixedPitch"	pointer
,	O
kIsFixedPitch	int
}	O
,	O
{	O
"IsFixedV"	pointer
,	O
kIsFixedV	int
}	O
,	O
{	O
"ItalicAngle"	pointer
,	O
kItalicAngle	int
}	O
,	O
{	O
"KP"	pointer
,	O
kKP	int
}	O
,	O
{	O
"KPH"	pointer
,	O
kKPH	int
}	O
,	O
{	O
"KPX"	pointer
,	O
kKPX	int
}	O
,	O
{	O
"KPY"	pointer
,	O
kKPY	int
}	O
,	O
{	O
"L"	pointer
,	O
kL	int
}	O
,	O
{	O
"MappingScheme"	pointer
,	O
kMappingScheme	int
}	O
,	O
{	O
"Masters"	pointer
,	O
kMasters	int
}	O
,	O
{	O
"MetricsSets"	pointer
,	O
kMetricsSets	int
}	O
,	O
{	O
"N"	pointer
,	O
kN	int
}	O
,	O
{	O
"Notice"	pointer
,	O
kNotice	int
}	O
,	O
{	O
"PCC"	pointer
,	O
kPCC	int
}	O
,	O
{	O
"StartAxis"	pointer
,	O
kStartAxis	int
}	O
,	O
{	O
"StartCharMetrics"	pointer
,	O
kStartCharMetrics	int
}	O
,	O
{	O
"StartCompFontMetrics"	pointer
,	O
kStartCompFontMetrics	int
}	O
,	O
{	O
"StartComposites"	pointer
,	O
kStartComposites	int
}	O
,	O
{	O
"StartDescendent"	pointer
,	O
kStartDescendent	int
}	O
,	O
{	O
"StartDirection"	pointer
,	O
kStartDirection	int
}	O
,	O
{	O
"StartFontMetrics"	pointer
,	O
kStartFontMetrics	int
}	O
,	O
{	O
"StartKernData"	pointer
,	O
kStartKernData	int
}	O
,	O
{	O
"StartKernPairs"	pointer
,	O
kStartKernPairs	int
}	O
,	O
{	O
"StartMaster"	pointer
,	O
kStartMaster	int
}	O
,	O
{	O
"StartMasterFontMetrics"	pointer
,	O
kStartMasterFontMetrics	int
}	O
,	O
{	O
"StartTrackKern"	pointer
,	O
kStartTrackKern	int
}	O
,	O
{	O
"TrackKern"	pointer
,	O
kTrackKern	int
}	O
,	O
{	O
"UnderlinePosition"	pointer
,	O
kUnderlinePosition	int
}	O
,	O
{	O
"UnderlineThickness"	pointer
,	O
kUnderlineThickness	int
}	O
,	O
{	O
"VV"	pointer
,	O
kVV	int
}	O
,	O
{	O
"VVector"	pointer
,	O
kVVector	int
}	O
,	O
{	O
"Version"	pointer
,	O
kVersion	int
}	O
,	O
{	O
"W"	pointer
,	O
kW	int
}	O
,	O
{	O
"W0"	pointer
,	O
kW0	int
}	O
,	O
{	O
"W0X"	pointer
,	O
kW0X	int
}	O
,	O
{	O
"W0Y"	pointer
,	O
kW0Y	int
}	O
,	O
{	O
"W1"	pointer
,	O
kW1	int
}	O
,	O
{	O
"W1X"	pointer
,	O
kW1X	int
}	O
,	O
{	O
"W1Y"	pointer
,	O
kW1Y	int
}	O
,	O
{	O
"WX"	pointer
,	O
kWX	int
}	O
,	O
{	O
"WY"	pointer
,	O
kWY	int
}	O
,	O
{	O
"Weight"	pointer
,	O
kWeight	int
}	O
,	O
{	O
"WeightVector"	pointer
,	O
kWeightVector	int
}	O
,	O
{	O
"XHeight"	pointer
,	O
kXHeight	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
void	O
parse_error	int
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
AFMError	int
error	int
)	O
)	O
;	O
static	O
int	O
get_token	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
)	O
)	O
;	O
static	O
int	O
get_line_token	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
)	O
)	O
;	O
static	O
void	O
get_key	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMKey	enum
*	O
key_return	pointer
)	O
)	O
;	O
static	O
void	O
get_type	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
int	O
type	int
,	O
AFMNode	struct
*	O
type_return	pointer
)	O
)	O
;	O
static	O
void	O
read_character_metrics	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
)	O
;	O
static	O
void	O
read_kern_pairs	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
)	O
;	O
static	O
void	O
read_track_kerns	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
)	O
;	O
static	O
void	O
read_composites	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
)	O
;	O
void	O
afm_parse_file	function
(	O
AFMHandle	pointer
handle	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
AFMKey	enum
key	pointer
;	O
AFMNode	struct
node	struct
;	O
ParseCtx	struct
context	struct
;	O
ParseCtx	struct
*	O
ctx	pointer
=	O
&	O
context	struct
;	O
int	O
wd	int
=	O
0	int
;	O
int	O
done	int
=	O
0	int
;	O
ctx	pointer
->	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
ctx	pointer
->	O
fp	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
SYSERROR	O
(	O
AFM_ERROR_FILE_IO	int
)	O
)	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kStartFontMetrics	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_NOT_AFM_FILE	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
version	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
while	O
(	O
!	O
done	int
)	O
{	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
switch	O
(	O
key	pointer
)	O
{	O
case	O
kComment	int
:	O
(	O
void	O
)	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
continue	O
;	O
break	O
;	O
case	O
kStartFontMetrics	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
version	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kEndFontMetrics	int
:	O
done	int
=	O
1	int
;	O
break	O
;	O
case	O
kStartCompFontMetrics	int
:	O
case	O
kEndCompFontMetrics	int
:	O
case	O
kStartMasterFontMetrics	int
:	O
case	O
kEndMasterFontMetrics	int
:	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_UNSUPPORTED_FORMAT	int
)	O
;	O
break	O
;	O
case	O
kFontName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kFullName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FullName	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kFamilyName	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FamilyName	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kWeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Weight	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kFontBBox	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_llx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_lly	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_urx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_ury	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kVersion	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Version	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kNotice	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Notice	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kEncodingScheme	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
EncodingScheme	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kMappingScheme	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
MappingScheme	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
break	O
;	O
case	O
kEscChar	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
EscChar	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
break	O
;	O
case	O
kCharacterSet	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_STRING	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
CharacterSet	pointer
=	O
node	struct
.	O
u	union
.	O
string	pointer
;	O
break	O
;	O
case	O
kCharacters	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Characters	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
break	O
;	O
case	O
kIsBaseFont	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
IsBaseFont	enum
=	O
node	struct
.	O
u	union
.	O
boolean	enum
;	O
break	O
;	O
case	O
kVVector	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
VVector_0	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
VVector_1	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kIsFixedV	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
IsFixedV	enum
=	O
node	struct
.	O
u	union
.	O
boolean	enum
;	O
break	O
;	O
case	O
kCapHeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
CapHeight	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kXHeight	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
XHeight	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kAscender	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Ascender	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kDescender	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
global_info	struct
.	O
Descender	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kStartDirection	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
wd	int
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
is_valid	enum
=	O
AFMTrue	int
;	O
break	O
;	O
case	O
kUnderlinePosition	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
UnderlinePosition	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kUnderlineThickness	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
UnderlineThickness	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kItalicAngle	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
ItalicAngle	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kCharWidth	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
CharWidth_x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
CharWidth_y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kIsFixedPitch	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_BOOLEAN	int
)	O
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
wd	int
]	O
.	O
IsFixedPitch	enum
=	O
node	struct
.	O
u	union
.	O
boolean	enum
;	O
break	O
;	O
case	O
kEndDirection	int
:	O
break	O
;	O
case	O
kStartCharMetrics	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
num_character_metrics	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
font	pointer
->	O
character_metrics	pointer
=	O
(	O
(	O
AFMIndividualCharacterMetrics	struct
*	O
)	O
calloc	function
(	O
font	pointer
->	O
num_character_metrics	long
+	O
1	int
,	O
sizeof	O
(	O
AFMIndividualCharacterMetrics	struct
)	O
)	O
)	O
;	O
if	O
(	O
font	pointer
->	O
character_metrics	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_character_metrics	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
font	pointer
)	O
;	O
break	O
;	O
case	O
kStartKernData	int
:	O
break	O
;	O
case	O
kStartKernPairs	int
:	O
if	O
(	O
font	pointer
->	O
info_level	int
&	O
AFM_I_KERN_PAIRS	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
num_kern_pairs	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
font	pointer
->	O
kern_pairs	pointer
=	O
(	O
AFMPairWiseKerning	struct
*	O
)	O
calloc	function
(	O
font	pointer
->	O
num_kern_pairs	long
+	O
1	int
,	O
sizeof	O
(	O
AFMPairWiseKerning	struct
)	O
)	O
;	O
if	O
(	O
font	pointer
->	O
kern_pairs	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_kern_pairs	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
font	pointer
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
}	O
while	O
(	O
key	pointer
!=	O
kEndKernPairs	int
)	O
;	O
}	O
break	O
;	O
case	O
kStartTrackKern	int
:	O
if	O
(	O
font	pointer
->	O
info_level	int
&	O
AFM_I_TRACK_KERNS	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
num_track_kerns	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
font	pointer
->	O
track_kerns	pointer
=	O
(	O
AFMTrackKern	struct
*	O
)	O
calloc	function
(	O
font	pointer
->	O
num_track_kerns	long
+	O
1	int
,	O
sizeof	O
(	O
AFMTrackKern	struct
)	O
)	O
;	O
if	O
(	O
font	pointer
->	O
track_kerns	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_track_kerns	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
font	pointer
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
}	O
while	O
(	O
key	pointer
!=	O
kEndTrackKern	int
)	O
;	O
}	O
break	O
;	O
case	O
kEndKernData	int
:	O
break	O
;	O
case	O
kStartComposites	int
:	O
if	O
(	O
font	pointer
->	O
info_level	int
&	O
AFM_I_COMPOSITES	int
)	O
{	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
font	pointer
->	O
num_composites	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
font	pointer
->	O
composites	pointer
=	O
(	O
AFMComposite	struct
*	O
)	O
calloc	function
(	O
font	pointer
->	O
num_composites	long
+	O
1	int
,	O
sizeof	O
(	O
AFMComposite	struct
)	O
)	O
;	O
if	O
(	O
font	pointer
->	O
composites	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
read_composites	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
font	pointer
)	O
;	O
}	O
else	O
{	O
do	O
{	O
(	O
void	O
)	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
}	O
while	O
(	O
key	pointer
!=	O
kEndComposites	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
fclose	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
;	O
if	O
(	O
!	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
is_valid	enum
&&	O
!	O
font	pointer
->	O
writing_direction_metrics	array
[	O
1	int
]	O
.	O
is_valid	enum
)	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
is_valid	enum
=	O
AFMTrue	int
;	O
if	O
(	O
!	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
"space"	pointer
,	O
5	int
,	O
(	O
void	O
*	O
)	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
)	O
)	O
{	O
assert	O
(	O
font	pointer
->	O
num_character_metrics	long
>	O
0	int
)	O
;	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
=	O
&	O
font	pointer
->	O
character_metrics	pointer
[	O
0	int
]	O
;	O
}	O
if	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
is_valid	enum
&&	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
IsFixedPitch	enum
)	O
{	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_x	double
=	O
font	pointer
->	O
character_metrics	pointer
[	O
0	int
]	O
.	O
w0x	double
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_y	double
=	O
font	pointer
->	O
character_metrics	pointer
[	O
0	int
]	O
.	O
w0y	double
;	O
}	O
if	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
1	int
]	O
.	O
is_valid	enum
&&	O
font	pointer
->	O
writing_direction_metrics	array
[	O
1	int
]	O
.	O
IsFixedPitch	enum
)	O
{	O
font	pointer
->	O
writing_direction_metrics	array
[	O
1	int
]	O
.	O
CharWidth_x	double
=	O
font	pointer
->	O
character_metrics	pointer
[	O
1	int
]	O
.	O
w1x	double
;	O
font	pointer
->	O
writing_direction_metrics	array
[	O
1	int
]	O
.	O
CharWidth_y	double
=	O
font	pointer
->	O
character_metrics	pointer
[	O
1	int
]	O
.	O
w1y	double
;	O
}	O
}	O
static	O
void	O
parse_error	int
(	O
AFMHandle	pointer
handle	pointer
,	O
AFMError	int
error	int
)	O
{	O
handle	pointer
->	O
parse_error	int
=	O
error	int
;	O
longjmp	function
(	O
handle	pointer
->	O
jmpbuf	array
,	O
1	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"AFM: fatal internal longjmp() error.\n"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
int	O
get_token	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
)	O
{	O
int	O
ch	char
;	O
int	O
i	int
;	O
while	O
(	O
(	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
!	O
ISSPACE	O
(	O
ch	char
)	O
)	O
break	O
;	O
if	O
(	O
ch	char
==	O
EOF	O
)	O
return	O
0	int
;	O
ungetc	function
(	O
ch	char
,	O
ctx	pointer
->	O
fp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
;	O
i	int
<	O
sizeof	O
(	O
ctx	pointer
->	O
token	array
)	O
&&	O
ch	char
!=	O
EOF	O
&&	O
!	O
ISSPACE	O
(	O
ch	char
)	O
;	O
i	int
++	O
,	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
)	O
ctx	pointer
->	O
token	array
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
ctx	pointer
->	O
token	array
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
ctx	pointer
->	O
token	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
ctx	pointer
->	O
tokenlen	int
=	O
i	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
get_line_token	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
)	O
{	O
int	O
i	int
,	O
ch	char
;	O
while	O
(	O
(	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
!	O
ISSPACE	O
(	O
ch	char
)	O
)	O
break	O
;	O
if	O
(	O
ch	char
==	O
EOF	O
)	O
return	O
0	int
;	O
ungetc	function
(	O
ch	char
,	O
ctx	pointer
->	O
fp	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
;	O
i	int
<	O
sizeof	O
(	O
ctx	pointer
->	O
token	array
)	O
&&	O
ch	char
!=	O
EOF	O
&&	O
ch	char
!=	O
'\n'	O
;	O
i	int
++	O
,	O
ch	char
=	O
getc	function
(	O
ctx	pointer
->	O
fp	pointer
)	O
)	O
ctx	pointer
->	O
token	array
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
>=	O
sizeof	O
(	O
ctx	pointer
->	O
token	array
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
for	O
(	O
i	int
--	O
;	O
i	int
>=	O
0	int
&&	O
ISSPACE	O
(	O
ctx	pointer
->	O
token	array
[	O
i	int
]	O
)	O
;	O
i	int
--	O
)	O
;	O
i	int
++	O
;	O
ctx	pointer
->	O
token	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
ctx	pointer
->	O
tokenlen	int
=	O
i	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
match_key	function
(	O
char	O
*	O
key	pointer
)	O
{	O
int	O
lower	int
=	O
0	int
;	O
int	O
upper	int
=	O
NUM_KEYS	O
;	O
int	O
midpoint	int
,	O
cmpvalue	int
;	O
AFMBoolean	enum
found	enum
=	O
AFMFalse	int
;	O
while	O
(	O
(	O
upper	int
>=	O
lower	int
)	O
&&	O
!	O
found	enum
)	O
{	O
midpoint	int
=	O
(	O
lower	int
+	O
upper	int
)	O
/	O
2	int
;	O
if	O
(	O
keynames	array
[	O
midpoint	int
]	O
.	O
name	pointer
==	O
NULL	O
)	O
break	O
;	O
cmpvalue	int
=	O
strcmp	function
(	O
key	pointer
,	O
keynames	array
[	O
midpoint	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
cmpvalue	int
==	O
0	int
)	O
found	enum
=	O
AFMTrue	int
;	O
else	O
if	O
(	O
cmpvalue	int
<	O
0	int
)	O
upper	int
=	O
midpoint	int
-	O
1	int
;	O
else	O
lower	int
=	O
midpoint	int
+	O
1	int
;	O
}	O
if	O
(	O
found	enum
)	O
return	O
keynames	array
[	O
midpoint	int
]	O
.	O
key	pointer
;	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
get_key	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMKey	enum
*	O
key_return	pointer
)	O
{	O
int	O
key	pointer
;	O
char	O
msg	array
[	O
256	int
]	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
get_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
key	pointer
=	O
match_key	function
(	O
ctx	pointer
->	O
token	array
)	O
;	O
if	O
(	O
key	pointer
>=	O
0	int
)	O
{	O
*	O
key_return	pointer
=	O
key	pointer
;	O
return	O
;	O
}	O
sprintf	function
(	O
msg	array
,	O
"skipping key \"%s\""	pointer
,	O
ctx	pointer
->	O
token	array
)	O
;	O
afm_error	function
(	O
handle	pointer
,	O
msg	array
)	O
;	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
}	O
}	O
static	O
void	O
get_type	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
int	O
type	int
,	O
AFMNode	struct
*	O
type_return	pointer
)	O
{	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
AFM_TYPE_STRING	int
:	O
if	O
(	O
!	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
type_return	pointer
->	O
u	union
.	O
string	pointer
=	O
(	O
AFMString	pointer
)	O
calloc	function
(	O
1	int
,	O
ctx	pointer
->	O
tokenlen	int
+	O
1	int
)	O
;	O
if	O
(	O
type_return	pointer
->	O
u	union
.	O
string	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
memcpy	function
(	O
type_return	pointer
->	O
u	union
.	O
string	pointer
,	O
ctx	pointer
->	O
token	array
,	O
ctx	pointer
->	O
tokenlen	int
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_NAME	int
:	O
if	O
(	O
!	O
get_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
type_return	pointer
->	O
u	union
.	O
name	pointer
=	O
(	O
AFMName	pointer
)	O
calloc	function
(	O
1	int
,	O
ctx	pointer
->	O
tokenlen	int
+	O
1	int
)	O
;	O
if	O
(	O
type_return	pointer
->	O
u	union
.	O
string	pointer
==	O
NULL	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
memcpy	function
(	O
type_return	pointer
->	O
u	union
.	O
name	pointer
,	O
ctx	pointer
->	O
token	array
,	O
ctx	pointer
->	O
tokenlen	int
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_NUMBER	int
:	O
if	O
(	O
!	O
get_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	function
(	O
buf	pointer
,	O
ctx	pointer
->	O
token	array
,	O
ctx	pointer
->	O
tokenlen	int
)	O
;	O
buf	pointer
[	O
ctx	pointer
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
type_return	pointer
->	O
u	union
.	O
number	double
=	O
atof	function
(	O
buf	pointer
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_INTEGER	int
:	O
if	O
(	O
!	O
get_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	function
(	O
buf	pointer
,	O
ctx	pointer
->	O
token	array
,	O
ctx	pointer
->	O
tokenlen	int
)	O
;	O
buf	pointer
[	O
ctx	pointer
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
type_return	pointer
->	O
u	union
.	O
integer	long
=	O
atoi	function
(	O
buf	pointer
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_ARRAY	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Array types not implemented yet.\n"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
break	O
;	O
case	O
AFM_TYPE_BOOLEAN	int
:	O
if	O
(	O
!	O
get_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
memcpy	function
(	O
buf	pointer
,	O
ctx	pointer
->	O
token	array
,	O
ctx	pointer
->	O
tokenlen	int
)	O
;	O
buf	pointer
[	O
ctx	pointer
->	O
tokenlen	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strcmp	function
(	O
buf	pointer
,	O
"true"	pointer
)	O
==	O
0	int
)	O
type_return	pointer
->	O
u	union
.	O
boolean	enum
=	O
AFMTrue	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
buf	pointer
,	O
"false"	pointer
)	O
==	O
0	int
)	O
type_return	pointer
->	O
u	union
.	O
boolean	enum
=	O
AFMFalse	int
;	O
else	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"get_type(): illegal type %d\n"	pointer
,	O
type_return	pointer
->	O
type	int
)	O
;	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
read_character_metrics	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
AFMNode	struct
node	struct
;	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
=	O
NULL	O
;	O
AFMKey	enum
key	pointer
;	O
int	O
done	int
=	O
0	int
;	O
int	O
first	int
=	O
1	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
switch	O
(	O
key	pointer
)	O
{	O
case	O
kC	int
:	O
if	O
(	O
first	int
)	O
first	int
=	O
0	int
;	O
else	O
i	int
++	O
;	O
if	O
(	O
i	int
>=	O
font	pointer
->	O
num_character_metrics	long
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
cm	pointer
=	O
&	O
font	pointer
->	O
character_metrics	pointer
[	O
i	int
]	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
cm	pointer
->	O
character_code	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
if	O
(	O
cm	pointer
->	O
character_code	long
>=	O
0	int
&&	O
cm	pointer
->	O
character_code	long
<=	O
255	int
)	O
font	pointer
->	O
encoding	array
[	O
cm	pointer
->	O
character_code	long
]	O
=	O
cm	pointer
;	O
break	O
;	O
case	O
kCH	int
:	O
printf	function
(	O
"* CH\n"	pointer
)	O
;	O
break	O
;	O
case	O
kWX	int
:	O
case	O
kW0X	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w0x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
cm	pointer
->	O
w0y	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW1X	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w1x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
cm	pointer
->	O
w1y	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kWY	int
:	O
case	O
kW0Y	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w0y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
cm	pointer
->	O
w0x	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW1Y	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w1y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
cm	pointer
->	O
w1x	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kW	int
:	O
case	O
kW0	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w0x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w0y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kW1	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w1x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
w1y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kVV	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
vv_x	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
vv_y	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kN	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	pointer
->	O
name	pointer
=	O
node	struct
.	O
u	union
.	O
name	pointer
;	O
if	O
(	O
!	O
strhash_put	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
cm	pointer
->	O
name	pointer
,	O
strlen	function
(	O
cm	pointer
->	O
name	pointer
)	O
,	O
cm	pointer
,	O
NULL	O
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
break	O
;	O
case	O
kB	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
llx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
lly	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
urx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
ury	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kL	int
:	O
get_line_token	function
(	O
handle	pointer
,	O
ctx	pointer
)	O
;	O
break	O
;	O
case	O
kEndCharMetrics	int
:	O
if	O
(	O
i	int
!=	O
font	pointer
->	O
num_character_metrics	long
-	O
1	int
)	O
{	O
font	pointer
->	O
num_character_metrics	long
=	O
i	int
+	O
1	int
;	O
}	O
done	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
read_kern_pairs	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
;	O
AFMNode	struct
node	struct
;	O
AFMPairWiseKerning	struct
*	O
kp	pointer
;	O
AFMKey	enum
key	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
kp	pointer
=	O
&	O
font	pointer
->	O
kern_pairs	pointer
[	O
i	int
]	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
switch	O
(	O
key	pointer
)	O
{	O
case	O
kKP	int
:	O
case	O
kKPX	int
:	O
case	O
kKPY	int
:	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
kp	pointer
->	O
name1	pointer
=	O
node	struct
.	O
u	union
.	O
name	pointer
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
kp	pointer
->	O
name2	pointer
=	O
node	struct
.	O
u	union
.	O
name	pointer
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
switch	O
(	O
key	pointer
)	O
{	O
case	O
kKP	int
:	O
kp	pointer
->	O
kx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
kp	pointer
->	O
ky	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
break	O
;	O
case	O
kKPX	int
:	O
kp	pointer
->	O
kx	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
kp	pointer
->	O
ky	double
=	O
0.0	int
;	O
break	O
;	O
case	O
kKPY	int
:	O
kp	pointer
->	O
ky	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
kp	pointer
->	O
kx	double
=	O
0.0	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"AFM: fatal corruption\n"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
kKPH	int
:	O
break	O
;	O
default	O
:	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
break	O
;	O
}	O
}	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kEndKernPairs	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
static	O
void	O
read_track_kerns	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
;	O
AFMNode	struct
node	struct
;	O
AFMTrackKern	struct
*	O
tk	pointer
;	O
AFMKey	enum
key	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
tk	pointer
=	O
&	O
font	pointer
->	O
track_kerns	pointer
[	O
i	int
]	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kTrackKern	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
tk	pointer
->	O
degree	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	pointer
->	O
min_ptsize	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	pointer
->	O
min_kern	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	pointer
->	O
max_ptsize	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
tk	pointer
->	O
max_kern	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
}	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kEndTrackKern	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
static	O
void	O
read_composites	function
(	O
AFMHandle	pointer
handle	pointer
,	O
ParseCtx	struct
*	O
ctx	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
,	O
j	int
;	O
AFMNode	struct
node	struct
;	O
AFMComposite	struct
*	O
cm	pointer
;	O
AFMKey	enum
key	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_composites	long
;	O
i	int
++	O
)	O
{	O
cm	pointer
=	O
&	O
font	pointer
->	O
composites	pointer
[	O
i	int
]	O
;	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kCC	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	pointer
->	O
name	pointer
=	O
node	struct
.	O
u	union
.	O
name	pointer
;	O
if	O
(	O
!	O
strhash_put	function
(	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
,	O
cm	pointer
->	O
name	pointer
,	O
strlen	function
(	O
cm	pointer
->	O
name	pointer
)	O
,	O
cm	pointer
,	O
NULL	O
)	O
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_MEMORY	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_INTEGER	int
)	O
;	O
cm	pointer
->	O
num_components	long
=	O
node	struct
.	O
u	union
.	O
integer	long
;	O
cm	pointer
->	O
components	pointer
=	O
(	O
AFMCompositeComponent	struct
*	O
)	O
calloc	function
(	O
cm	pointer
->	O
num_components	long
+	O
1	int
,	O
sizeof	O
(	O
AFMCompositeComponent	struct
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
cm	pointer
->	O
num_components	long
;	O
j	int
++	O
)	O
{	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kPCC	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
GET_VALUE	O
(	O
AFM_TYPE_NAME	int
)	O
;	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
name	pointer
=	O
node	struct
.	O
u	union
.	O
name	pointer
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
deltax	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
GET_VALUE	O
(	O
AFM_TYPE_NUMBER	int
)	O
;	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
deltay	double
=	O
node	struct
.	O
u	union
.	O
number	double
;	O
}	O
}	O
get_key	function
(	O
handle	pointer
,	O
ctx	pointer
,	O
&	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
!=	O
kEndComposites	int
)	O
parse_error	int
(	O
handle	pointer
,	O
AFM_ERROR_SYNTAX	int
)	O
;	O
}	O
