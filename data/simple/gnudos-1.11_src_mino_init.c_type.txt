int	O
NEW_GNU_DOS_LEVEL	int
;	O
struct	O
passwd	struct
*	O
pass	pointer
;	O
char	O
*	O
STARTUP_FILE_NAME	pointer
;	O
char	O
*	O
mino_ver	pointer
=	O
"2.0"	pointer
;	O
char	O
*	O
copyrightNotice	pointer
=	O
"Mino for GNU/Linux is developed by Mohammed Isam\n"	pointer
"Copyright (C) Mohammed Isam 2014, 2015, 2016, 2017, 2018\n"	pointer
"This is a GNU software, part of the GnuDOS package\n"	pointer
;	O
int	O
SHOW_README	int
;	O
void	O
outOfMemory	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Fatal error: Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
exit_gracefully	function
(	O
int	O
exit_code	int
,	O
char	O
*	O
open_file_name	pointer
)	O
{	O
if	O
(	O
FILE_STATE	enum
==	O
MODIFIED	int
)	O
{	O
int	O
i	int
=	O
msgBox	function
(	O
"File has been changed. Save changes?"	pointer
,	O
YES	int
|	O
NO	int
,	O
INFO	int
)	O
;	O
if	O
(	O
i	int
==	O
YES	int
)	O
{	O
if	O
(	O
NEW_FILE	int
)	O
{	O
if	O
(	O
!	O
openSaveFile	function
(	O
SAVE	int
,	O
YES	int
,	O
open_file_name	pointer
)	O
)	O
{	O
msgBox	function
(	O
"Failed to save file."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
else	O
{	O
FILE_STATE	enum
=	O
SAVED	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
openSaveFile	function
(	O
SAVE	int
,	O
NO	int
,	O
open_file_name	pointer
)	O
)	O
{	O
msgBox	function
(	O
"Failed to save file."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
else	O
{	O
FILE_STATE	enum
=	O
SAVED	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
i	int
==	O
CANCEL	int
)	O
{	O
FILE_STATE	enum
=	O
MODIFIED	int
;	O
}	O
else	O
{	O
FILE_STATE	enum
=	O
IDLE	int
;	O
}	O
if	O
(	O
FILE_STATE	enum
==	O
SAVED	int
||	O
FILE_STATE	enum
==	O
IDLE	int
)	O
goto	O
good_to_go	O
;	O
}	O
else	O
goto	O
good_to_go	O
;	O
refreshView	function
(	O
)	O
;	O
return	O
;	O
good_to_go	O
:	O
fcloseall	function
(	O
)	O
;	O
setScreenColors	function
(	O
WHITE	int
,	O
BGBLACK	int
)	O
;	O
clearScreen	function
(	O
)	O
;	O
restoreTerminal	function
(	O
)	O
;	O
setScreenColors	function
(	O
WHITE	int
,	O
BGBLACK	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\x1b[24m"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
exit	function
(	O
exit_code	int
)	O
;	O
}	O
void	O
parseLineArgs	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
GNU_DOS_LEVEL	int
=	O
1	int
;	O
NEW_FILE	int
=	O
1	int
;	O
FILE_STATE	enum
=	O
NEW	int
;	O
open_file_at_startup	int
=	O
0	int
;	O
AUTO_HIGHLIGHTING	int
=	O
0	int
;	O
NEW_GNU_DOS_LEVEL	int
=	O
0	int
;	O
int	O
c	char
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"reset-config"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'r'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"level"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
c	char
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"rhl:v"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	char
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	char
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
printf	function
(	O
"Error: couldn't open home directory to write "	pointer
"configuration file.\n"	pointer
)	O
;	O
printf	function
(	O
"Aborting.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
12	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".mino.conf"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
printf	function
(	O
"Error: couldn't write to configuration file in "	pointer
"your home directory.\n"	pointer
)	O
;	O
printf	function
(	O
"Aborting.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
printf	function
(	O
"Resetting program configuration..\n"	pointer
)	O
;	O
_write_config_file	function
(	O
config_file	pointer
,	O
1	int
)	O
;	O
fclose	function
(	O
config_file	pointer
)	O
;	O
printf	function
(	O
"Finished writing default values to ~/.mino.conf\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
printf	function
(	O
"\nCommand line help for mino\n"	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
copyrightNotice	pointer
)	O
;	O
printf	function
(	O
"Usage: %s [filename][options]\n\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
printf	function
(	O
"Options:\n"	pointer
)	O
;	O
printf	function
(	O
"\tfilename: File to be opened by mino (optional)\n"	pointer
)	O
;	O
printf	function
(	O
"\t--reset-config, -r\tReset program configuration. "	pointer
"Writes default\n"	pointer
)	O
;	O
printf	function
(	O
"\t                  \tvalues to .mino.conf file\n"	pointer
)	O
;	O
printf	function
(	O
"\t--help, -h        \tShow this command line help\n"	pointer
)	O
;	O
printf	function
(	O
"\t--version, -v     \tShow program version\n"	pointer
)	O
;	O
printf	function
(	O
"\t--levelX, -lX     \tSet the experience level, where X is 1-6\n"	pointer
)	O
;	O
printf	function
(	O
"For more information, see 'info mino' or the README"	pointer
" file in mino help menu\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"%s\n"	pointer
,	O
mino_ver	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
;	O
int	O
i	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
i	int
<	O
1	int
||	O
i	int
>	O
6	int
)	O
{	O
printf	function
(	O
"Unrecognised level. See 'man mino' or "	pointer
"'info mino' for information about possible"	pointer
" levels.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
break	O
;	O
}	O
NEW_GNU_DOS_LEVEL	int
=	O
i	int
;	O
break	O
;	O
case	O
'?'	O
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
STARTUP_FILE_NAME	pointer
=	O
NULL	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
NEW_FILE	int
=	O
0	int
;	O
FILE_STATE	enum
=	O
OPENED	int
;	O
open_file_at_startup	int
=	O
1	int
;	O
STARTUP_FILE_NAME	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
}	O
}	O
void	O
init_error	function
(	O
)	O
{	O
printf	function
(	O
"Error: couldn't open home directory and read configuration file.\n"	pointer
)	O
;	O
printf	function
(	O
"Will use built-in defaults. This means if you have set any\n"	pointer
)	O
;	O
printf	function
(	O
"preferences (for example, display colors), they will be of\n"	pointer
)	O
;	O
printf	function
(	O
"no effect.\n"	pointer
)	O
;	O
printf	function
(	O
"You can reset your config file to program defaults by invoking:\n"	pointer
)	O
;	O
printf	function
(	O
"mino --reset-config\n\nPress any key to continue..\n"	pointer
)	O
;	O
getchar	function
(	O
)	O
;	O
}	O
int	O
__initNewDocument	function
(	O
)	O
{	O
if	O
(	O
totalLines	int
)	O
{	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
totalLines	int
;	O
i	int
++	O
)	O
freeLineStruct	function
(	O
lines	array
[	O
i	int
]	O
)	O
;	O
totalLines	int
=	O
0	int
;	O
}	O
lines	array
[	O
0	int
]	O
=	O
allocLineStructB	function
(	O
maxLen	int
)	O
;	O
if	O
(	O
!	O
lines	array
[	O
0	int
]	O
)	O
return	O
0	int
;	O
totalLines	int
=	O
1	int
;	O
initEdit	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
int	O
initNewDocument	function
(	O
)	O
{	O
if	O
(	O
documentTitle	pointer
)	O
free	function
(	O
documentTitle	pointer
)	O
;	O
documentTitle	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
DEFAULT_TITLE	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
documentTitle	pointer
)	O
return	O
0	int
;	O
strcpy	function
(	O
documentTitle	pointer
,	O
DEFAULT_TITLE	pointer
)	O
;	O
return	O
__initNewDocument	function
(	O
)	O
;	O
}	O
void	O
resetLineCounters	function
(	O
)	O
{	O
selectedLine	int
=	O
0	int
;	O
selectedChar	int
=	O
0	int
;	O
selectedCharCarry	int
=	O
0	int
;	O
totalVisLines	int
=	O
SCREEN_H	int
-	O
4	int
;	O
firstVisLine	int
=	O
0	int
;	O
}	O
void	O
__init	short
(	O
)	O
{	O
getScreenSize	function
(	O
)	O
;	O
menu	array
[	O
0	int
]	O
=	O
"&File"	pointer
;	O
menu	array
[	O
1	int
]	O
=	O
"&Edit"	pointer
;	O
menu	array
[	O
2	int
]	O
=	O
"&Options"	pointer
;	O
menu	array
[	O
3	int
]	O
=	O
"&Help"	pointer
;	O
fileMenu	array
[	O
0	int
]	O
=	O
"New..         ^N"	pointer
;	O
fileMenu	array
[	O
1	int
]	O
=	O
"Open file     ^O"	pointer
;	O
fileMenu	array
[	O
2	int
]	O
=	O
"Save file     ^S"	pointer
;	O
fileMenu	array
[	O
3	int
]	O
=	O
"Save as..       "	pointer
;	O
fileMenu	array
[	O
4	int
]	O
=	O
"Print         ^P"	pointer
;	O
fileMenu	array
[	O
5	int
]	O
=	O
"Exit          ^Q"	pointer
;	O
editMenu	array
[	O
0	int
]	O
=	O
"Cut                ^X"	pointer
;	O
editMenu	array
[	O
1	int
]	O
=	O
"Copy               ^C"	pointer
;	O
editMenu	array
[	O
2	int
]	O
=	O
"Paste              ^V"	pointer
;	O
editMenu	array
[	O
3	int
]	O
=	O
"Select all         ^A"	pointer
;	O
editMenu	array
[	O
4	int
]	O
=	O
"Undo               ^Z"	pointer
;	O
editMenu	array
[	O
5	int
]	O
=	O
"Redo               ^Y"	pointer
;	O
editMenu	array
[	O
6	int
]	O
=	O
"Delete Line        ^D"	pointer
;	O
editMenu	array
[	O
7	int
]	O
=	O
"Find..             ^F"	pointer
;	O
editMenu	array
[	O
8	int
]	O
=	O
"Replace..          ^R"	pointer
;	O
editMenu	array
[	O
9	int
]	O
=	O
"Toggle select mode ^E"	pointer
;	O
optionsMenu	array
[	O
0	int
]	O
=	O
"Change colors  "	pointer
;	O
optionsMenu	array
[	O
1	int
]	O
=	O
"Tab spaces     "	pointer
;	O
optionsMenu	array
[	O
2	int
]	O
=	O
"Autoindent     "	pointer
;	O
optionsMenu	array
[	O
3	int
]	O
=	O
"Reset config   "	pointer
;	O
helpMenu	array
[	O
0	int
]	O
=	O
"View README    "	pointer
;	O
helpMenu	array
[	O
1	int
]	O
=	O
"GNU Keybindings"	pointer
;	O
helpMenu	array
[	O
2	int
]	O
=	O
"Quick reference"	pointer
;	O
helpMenu	array
[	O
3	int
]	O
=	O
"About Mino..   "	pointer
;	O
FG_COLOR_ARRAY	array
[	O
0	int
]	O
=	O
30	int
;	O
FG_COLOR_ARRAY	array
[	O
1	int
]	O
=	O
31	int
;	O
FG_COLOR_ARRAY	array
[	O
2	int
]	O
=	O
32	int
;	O
FG_COLOR_ARRAY	array
[	O
3	int
]	O
=	O
33	int
;	O
FG_COLOR_ARRAY	array
[	O
4	int
]	O
=	O
34	int
;	O
FG_COLOR_ARRAY	array
[	O
5	int
]	O
=	O
35	int
;	O
FG_COLOR_ARRAY	array
[	O
6	int
]	O
=	O
36	int
;	O
FG_COLOR_ARRAY	array
[	O
7	int
]	O
=	O
37	int
;	O
BG_COLOR_ARRAY	array
[	O
0	int
]	O
=	O
40	int
;	O
BG_COLOR_ARRAY	array
[	O
1	int
]	O
=	O
41	int
;	O
BG_COLOR_ARRAY	array
[	O
2	int
]	O
=	O
42	int
;	O
BG_COLOR_ARRAY	array
[	O
3	int
]	O
=	O
43	int
;	O
BG_COLOR_ARRAY	array
[	O
4	int
]	O
=	O
44	int
;	O
BG_COLOR_ARRAY	array
[	O
5	int
]	O
=	O
45	int
;	O
BG_COLOR_ARRAY	array
[	O
6	int
]	O
=	O
46	int
;	O
BG_COLOR_ARRAY	array
[	O
7	int
]	O
=	O
47	int
;	O
AUTO_INDENT	int
=	O
1	int
;	O
autoIndentStr	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
512	int
)	O
;	O
if	O
(	O
!	O
autoIndentStr	pointer
)	O
outOfMemory	function
(	O
)	O
;	O
MAX_MSG_BOX_W	int
=	O
SCREEN_W	int
-	O
4	int
;	O
MAX_MSG_BOX_H	int
=	O
SCREEN_H	int
-	O
4	int
;	O
MAX_CHARS_PER_LINE	int
=	O
SCREEN_W	int
-	O
2	int
;	O
maxLen	int
=	O
MAX_CHARS_PER_LINE	int
*	O
4	int
;	O
CAPS	int
=	O
0	int
;	O
INSERT	int
=	O
0	int
;	O
SELECTING	int
=	O
0	int
;	O
CLIPBOARD_IS_EMPTY	int
=	O
1	int
;	O
resetLineCounters	function
(	O
)	O
;	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
37	int
;	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
37	int
;	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
32	int
;	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
44	int
;	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
41	int
;	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
41	int
;	O
old_window_color	int
=	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
;	O
GNU_DOS_LEVEL	int
=	O
1	int
;	O
WRAP_LINES	int
=	O
1	int
;	O
TAB_CHARS	int
=	O
8	int
;	O
SHOW_README	int
=	O
0	int
;	O
}	O
void	O
init	function
(	O
char	O
*	O
open_file_name	pointer
)	O
{	O
DEFAULT_TITLE	pointer
=	O
__DEFAULT_TITLE	pointer
;	O
COLOR_STR	array
[	O
0	int
]	O
=	O
"BLACK"	pointer
;	O
COLOR_STR	array
[	O
1	int
]	O
=	O
"RED"	pointer
;	O
COLOR_STR	array
[	O
2	int
]	O
=	O
"GREEN"	pointer
;	O
COLOR_STR	array
[	O
3	int
]	O
=	O
"BROWN"	pointer
;	O
COLOR_STR	array
[	O
4	int
]	O
=	O
"BLUE"	pointer
;	O
COLOR_STR	array
[	O
5	int
]	O
=	O
"MAGENTA"	pointer
;	O
COLOR_STR	array
[	O
6	int
]	O
=	O
"CYAN"	pointer
;	O
COLOR_STR	array
[	O
7	int
]	O
=	O
"WHITE"	pointer
;	O
__init	short
(	O
)	O
;	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
init_error	function
(	O
)	O
;	O
goto	O
post_config_file	O
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
11	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
outOfMemory	function
(	O
)	O
;	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".mino.conf"	pointer
)	O
;	O
if	O
(	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
char	O
buf	array
[	O
100	int
]	O
;	O
while	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
config_file	pointer
)	O
)	O
{	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
'#'	O
||	O
buf	array
[	O
0	int
]	O
==	O
'\n'	O
)	O
continue	O
;	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"GNU_DOS_LEVEL"	pointer
)	O
)	O
GNU_DOS_LEVEL	int
=	O
atoi	function
(	O
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"TAB_CHARS"	pointer
)	O
)	O
{	O
TAB_CHARS	int
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
if	O
(	O
TAB_CHARS	int
<	O
1	int
||	O
TAB_CHARS	int
>	O
SCREEN_W	int
-	O
3	int
)	O
TAB_CHARS	int
=	O
8	int
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"DEFAULT_TITLE"	pointer
)	O
)	O
{	O
char	O
*	O
title	pointer
=	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
;	O
int	O
titlelen	int
=	O
strlen	function
(	O
title	pointer
)	O
;	O
DEFAULT_TITLE	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
titlelen	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
DEFAULT_TITLE	pointer
)	O
goto	O
memerr	O
;	O
strcpy	function
(	O
DEFAULT_TITLE	pointer
,	O
title	pointer
)	O
;	O
DEFAULT_TITLE	pointer
[	O
titlelen	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"WRAP_LINES"	pointer
)	O
)	O
{	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"TRUE"	pointer
)	O
)	O
WRAP_LINES	int
=	O
1	int
;	O
else	O
WRAP_LINES	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"CAPS"	pointer
)	O
)	O
{	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"OFF"	pointer
)	O
)	O
CAPS	int
=	O
0	int
;	O
else	O
CAPS	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"INSERT"	pointer
)	O
)	O
{	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"OFF"	pointer
)	O
)	O
INSERT	int
=	O
0	int
;	O
else	O
INSERT	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_WIN"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_HLT"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_MBAR"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_SBAR"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_HBUT"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_BUT"	pointer
)	O
)	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_WIN"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
old_window_color	int
=	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_HLT"	pointer
)	O
)	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_MBAR"	pointer
)	O
)	O
BG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_SBAR"	pointer
)	O
)	O
BG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_HBUT"	pointer
)	O
)	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_BUT"	pointer
)	O
)	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"SHOW_README"	pointer
)	O
)	O
SHOW_README	int
=	O
1	int
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"AUTO_INDENT"	pointer
)	O
)	O
AUTO_INDENT	int
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
fclose	function
(	O
config_file	pointer
)	O
;	O
free	function
(	O
config_file_name	pointer
)	O
;	O
}	O
else	O
write_config_file	function
(	O
)	O
;	O
post_config_file	O
:	O
if	O
(	O
AUTO_INDENT	int
)	O
optionsMenu	array
[	O
2	int
]	O
=	O
strdup	function
(	O
"Autoindent    *"	pointer
)	O
;	O
else	O
optionsMenu	array
[	O
2	int
]	O
=	O
strdup	function
(	O
"Autoindent     "	pointer
)	O
;	O
if	O
(	O
NEW_GNU_DOS_LEVEL	int
)	O
GNU_DOS_LEVEL	int
=	O
NEW_GNU_DOS_LEVEL	int
;	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
5	int
||	O
GNU_DOS_LEVEL	int
<	O
1	int
)	O
GNU_DOS_LEVEL	int
=	O
1	int
;	O
initDirView	function
(	O
)	O
;	O
totalLines	int
=	O
0	int
;	O
if	O
(	O
NEW_FILE	int
)	O
{	O
if	O
(	O
!	O
initNewDocument	function
(	O
)	O
)	O
goto	O
memerr	O
;	O
}	O
else	O
{	O
int	O
len	int
;	O
char	O
*	O
slash	pointer
=	O
strrchr	function
(	O
open_file_name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	pointer
)	O
len	int
=	O
strlen	function
(	O
slash	pointer
)	O
;	O
else	O
len	int
=	O
strlen	function
(	O
open_file_name	pointer
)	O
;	O
documentTitle	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
documentTitle	pointer
)	O
goto	O
memerr	O
;	O
if	O
(	O
slash	pointer
)	O
strcpy	function
(	O
documentTitle	pointer
,	O
slash	pointer
+	O
1	int
)	O
;	O
else	O
strcpy	function
(	O
documentTitle	pointer
,	O
open_file_name	pointer
)	O
;	O
}	O
if	O
(	O
!	O
initTerminal	function
(	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Fatal error: Failed to initialize the terminal.\r\nAborting.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
catchSignals	function
(	O
)	O
;	O
return	O
;	O
memerr	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Fatal error: Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
void	O
showREADMEOnStartup	function
(	O
)	O
{	O
int	O
x	int
=	O
SCREEN_H	int
/	O
2	int
-	O
3	int
;	O
int	O
y	int
=	O
SCREEN_W	int
/	O
2	int
-	O
20	int
;	O
int	O
w	int
=	O
y	int
+	O
40	int
;	O
int	O
h	int
=	O
x	int
+	O
6	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
h	int
,	O
w	int
,	O
" Welcome to mino "	pointer
,	O
YES	int
,	O
0	int
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
1	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"Welcome to mino!"	pointer
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
2	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"README file will be shown to help you"	pointer
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"start using mino."	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HBUTTONS	int
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"  OK  "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_BUTTONS	int
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
12	int
)	O
;	O
printf	function
(	O
" Don't show README again "	pointer
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
int	O
sel	int
=	O
0	int
;	O
char	O
*	O
c	char
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
5	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getKey	function
(	O
)	O
)	O
)	O
{	O
switch	O
(	O
c	char
[	O
0	int
]	O
)	O
{	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
case	O
(	O
TAB_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"  OK  "	pointer
)	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
12	int
)	O
;	O
printf	function
(	O
" Don't show README again "	pointer
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
12	int
)	O
;	O
sel	int
=	O
1	int
;	O
}	O
else	O
{	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
printf	function
(	O
"  OK  "	pointer
)	O
;	O
setScreenColors	function
(	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
,	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
12	int
)	O
;	O
printf	function
(	O
" Don't show README again "	pointer
)	O
;	O
printf	function
(	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
sel	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
SHOW_README	int
=	O
1	int
;	O
else	O
SHOW_README	int
=	O
0	int
;	O
showReadMe	function
(	O
)	O
;	O
write_config_file	function
(	O
)	O
;	O
refreshView	function
(	O
)	O
;	O
return	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
}	O
