static	O
int	O
sdp_message_parse_v	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_o	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_s	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_i	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_u	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_e	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_p	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_c	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_b	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_t	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_r	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_z	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_k	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_a	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_message_parse_m	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
;	O
static	O
int	O
sdp_append_media	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_media_t	struct
*	O
media	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
int	O
sdp_append_attribute	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_attribute_t	struct
*	O
attribute	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
int	O
sdp_append_key	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_key_t	struct
*	O
key	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
int	O
sdp_append_time_descr	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_time_descr_t	struct
*	O
time_descr	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
int	O
sdp_append_bandwidth	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_bandwidth_t	struct
*	O
bandwidth	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
int	O
sdp_append_connection	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_connection_t	struct
*	O
conn	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
;	O
static	O
char	O
*	O
__osip_sdp_append_string	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
cur	pointer
,	O
char	O
*	O
string_osip_to_append	pointer
)	O
;	O
int	O
sdp_bandwidth_init	function
(	O
sdp_bandwidth_t	struct
*	O
*	O
b	pointer
)	O
{	O
*	O
b	pointer
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_bandwidth_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
b	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
b	pointer
)	O
->	O
b_bwtype	pointer
=	O
NULL	O
;	O
(	O
*	O
b	pointer
)	O
->	O
b_bandwidth	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_bandwidth_free	function
(	O
sdp_bandwidth_t	struct
*	O
b	pointer
)	O
{	O
if	O
(	O
b	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
b	pointer
->	O
b_bwtype	pointer
)	O
;	O
osip_free	O
(	O
b	pointer
->	O
b_bandwidth	pointer
)	O
;	O
osip_free	O
(	O
b	pointer
)	O
;	O
}	O
int	O
sdp_time_descr_init	function
(	O
sdp_time_descr_t	struct
*	O
*	O
td	pointer
)	O
{	O
*	O
td	pointer
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_time_descr_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
td	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
td	pointer
)	O
->	O
t_start_time	pointer
=	O
NULL	O
;	O
(	O
*	O
td	pointer
)	O
->	O
t_stop_time	pointer
=	O
NULL	O
;	O
osip_list_init	function
(	O
&	O
(	O
*	O
td	pointer
)	O
->	O
r_repeats	struct
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_time_descr_free	function
(	O
sdp_time_descr_t	struct
*	O
td	pointer
)	O
{	O
if	O
(	O
td	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
td	pointer
->	O
t_start_time	pointer
)	O
;	O
osip_free	O
(	O
td	pointer
->	O
t_stop_time	pointer
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
td	pointer
->	O
r_repeats	struct
)	O
;	O
osip_free	O
(	O
td	pointer
)	O
;	O
}	O
int	O
sdp_key_init	function
(	O
sdp_key_t	struct
*	O
*	O
key	pointer
)	O
{	O
*	O
key	pointer
=	O
(	O
sdp_key_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_key_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
key	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
key	pointer
)	O
->	O
k_keytype	pointer
=	O
NULL	O
;	O
(	O
*	O
key	pointer
)	O
->	O
k_keydata	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_key_free	function
(	O
sdp_key_t	struct
*	O
key	pointer
)	O
{	O
if	O
(	O
key	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
key	pointer
->	O
k_keytype	pointer
)	O
;	O
osip_free	O
(	O
key	pointer
->	O
k_keydata	pointer
)	O
;	O
osip_free	O
(	O
key	pointer
)	O
;	O
}	O
int	O
sdp_attribute_init	function
(	O
sdp_attribute_t	struct
*	O
*	O
attribute	pointer
)	O
{	O
*	O
attribute	pointer
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_attribute_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
attribute	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
attribute	pointer
)	O
->	O
a_att_field	pointer
=	O
NULL	O
;	O
(	O
*	O
attribute	pointer
)	O
->	O
a_att_value	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_attribute_free	function
(	O
sdp_attribute_t	struct
*	O
attribute	pointer
)	O
{	O
if	O
(	O
attribute	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
attribute	pointer
->	O
a_att_field	pointer
)	O
;	O
osip_free	O
(	O
attribute	pointer
->	O
a_att_value	pointer
)	O
;	O
osip_free	O
(	O
attribute	pointer
)	O
;	O
}	O
int	O
sdp_connection_init	function
(	O
sdp_connection_t	struct
*	O
*	O
connection	pointer
)	O
{	O
*	O
connection	pointer
=	O
(	O
sdp_connection_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_connection_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
connection	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
connection	pointer
)	O
->	O
c_nettype	pointer
=	O
NULL	O
;	O
(	O
*	O
connection	pointer
)	O
->	O
c_addrtype	pointer
=	O
NULL	O
;	O
(	O
*	O
connection	pointer
)	O
->	O
c_addr	pointer
=	O
NULL	O
;	O
(	O
*	O
connection	pointer
)	O
->	O
c_addr_multicast_ttl	pointer
=	O
NULL	O
;	O
(	O
*	O
connection	pointer
)	O
->	O
c_addr_multicast_int	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_connection_free	function
(	O
sdp_connection_t	struct
*	O
connection	pointer
)	O
{	O
if	O
(	O
connection	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
connection	pointer
->	O
c_nettype	pointer
)	O
;	O
osip_free	O
(	O
connection	pointer
->	O
c_addrtype	pointer
)	O
;	O
osip_free	O
(	O
connection	pointer
->	O
c_addr	pointer
)	O
;	O
osip_free	O
(	O
connection	pointer
->	O
c_addr_multicast_ttl	pointer
)	O
;	O
osip_free	O
(	O
connection	pointer
->	O
c_addr_multicast_int	pointer
)	O
;	O
osip_free	O
(	O
connection	pointer
)	O
;	O
}	O
int	O
sdp_media_init	function
(	O
sdp_media_t	struct
*	O
*	O
media	pointer
)	O
{	O
int	O
i	int
;	O
*	O
media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_media_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
media	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
media	pointer
)	O
->	O
m_media	pointer
=	O
NULL	O
;	O
(	O
*	O
media	pointer
)	O
->	O
m_port	pointer
=	O
NULL	O
;	O
(	O
*	O
media	pointer
)	O
->	O
m_number_of_port	pointer
=	O
NULL	O
;	O
(	O
*	O
media	pointer
)	O
->	O
m_proto	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
m_payloads	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
*	O
media	pointer
)	O
;	O
*	O
media	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
media	pointer
)	O
->	O
i_info	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
c_connections	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
m_payloads	struct
)	O
;	O
osip_free	O
(	O
*	O
media	pointer
)	O
;	O
*	O
media	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
b_bandwidths	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
m_payloads	struct
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
c_connections	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	function
)	O
;	O
osip_free	O
(	O
*	O
media	pointer
)	O
;	O
*	O
media	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
a_attributes	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
m_payloads	struct
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
c_connections	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
media	pointer
)	O
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_free	O
(	O
*	O
media	pointer
)	O
;	O
*	O
media	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
media	pointer
)	O
->	O
k_key	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_media_free	function
(	O
sdp_media_t	struct
*	O
media	pointer
)	O
{	O
if	O
(	O
media	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
media	pointer
->	O
m_media	pointer
)	O
;	O
osip_free	O
(	O
media	pointer
->	O
m_port	pointer
)	O
;	O
osip_free	O
(	O
media	pointer
->	O
m_number_of_port	pointer
)	O
;	O
osip_free	O
(	O
media	pointer
->	O
m_proto	pointer
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
media	pointer
->	O
m_payloads	struct
)	O
;	O
osip_free	O
(	O
media	pointer
->	O
i_info	pointer
)	O
;	O
osip_list_special_free	function
(	O
&	O
media	pointer
->	O
c_connections	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_connection_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
media	pointer
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
media	pointer
->	O
a_attributes	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	function
)	O
;	O
sdp_key_free	function
(	O
media	pointer
->	O
k_key	pointer
)	O
;	O
osip_free	O
(	O
media	pointer
)	O
;	O
}	O
int	O
sdp_message_init	function
(	O
sdp_message_t	struct
*	O
*	O
sdp	pointer
)	O
{	O
int	O
i	int
;	O
(	O
*	O
sdp	pointer
)	O
=	O
(	O
sdp_message_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
sdp_message_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
sdp	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
v_version	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_username	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_sess_id	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_sess_version	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_nettype	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_addrtype	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
o_addr	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
s_name	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
i_info	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
u_uri	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
p_phones	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
sdp	pointer
)	O
->	O
c_connection	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
b_bandwidths	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
p_phones	struct
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
t_descrs	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
p_phones	struct
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
(	O
*	O
sdp	pointer
)	O
->	O
z_adjustments	pointer
=	O
NULL	O
;	O
(	O
*	O
sdp	pointer
)	O
->	O
k_key	pointer
=	O
NULL	O
;	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
a_attributes	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
p_phones	struct
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
t_descrs	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	function
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
i	int
=	O
osip_list_init	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
e_emails	struct
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
p_phones	struct
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
t_descrs	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
(	O
*	O
sdp	pointer
)	O
->	O
a_attributes	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	function
)	O
;	O
osip_free	O
(	O
*	O
sdp	pointer
)	O
;	O
*	O
sdp	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
char	O
*	O
__osip_sdp_append_string	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
cur	pointer
,	O
char	O
*	O
string_osip_to_append	pointer
)	O
{	O
int	O
length	long
=	O
(	O
int	O
)	O
strlen	function
(	O
string_osip_to_append	pointer
)	O
;	O
if	O
(	O
cur	pointer
-	O
(	O
*	O
string	pointer
)	O
+	O
length	long
+	O
1	int
>	O
*	O
size	long
)	O
{	O
int	O
length2	int
;	O
length2	int
=	O
(	O
int	O
)	O
(	O
cur	pointer
-	O
*	O
string	pointer
)	O
;	O
(	O
*	O
string	pointer
)	O
=	O
osip_realloc	O
(	O
(	O
*	O
string	pointer
)	O
,	O
*	O
size	long
+	O
length	long
+	O
500	int
)	O
;	O
*	O
size	long
=	O
*	O
size	long
+	O
length	long
+	O
500	int
;	O
cur	pointer
=	O
(	O
*	O
string	pointer
)	O
+	O
length2	int
;	O
}	O
osip_strncpy	function
(	O
cur	pointer
,	O
string_osip_to_append	pointer
,	O
length	long
)	O
;	O
return	O
cur	pointer
+	O
strlen	function
(	O
cur	pointer
)	O
;	O
}	O
static	O
int	O
sdp_message_parse_v	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
==	O
buf	pointer
)	O
return	O
ERR_DISCARD	int
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'v'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	pointer
->	O
v_version	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	pointer
->	O
v_version	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
sdp	pointer
->	O
v_version	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_o	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
int	O
i	int
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'o'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_username	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_sess_id	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_sess_version	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_nettype	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_addrtype	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_addr	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
sdp	pointer
->	O
o_addr	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_s	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
's'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	pointer
->	O
s_name	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	pointer
->	O
s_name	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
sdp	pointer
->	O
s_name	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_i	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
int	O
i	int
;	O
char	O
*	O
i_info	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'i'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
i_info	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
i_info	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
i_info	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
i	int
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	pointer
->	O
i_info	pointer
=	O
i_info	pointer
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
i	int
-	O
1	int
)	O
;	O
last_sdp_media	pointer
->	O
i_info	pointer
=	O
i_info	pointer
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_u	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'u'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
sdp	pointer
->	O
u_uri	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
sdp	pointer
->	O
u_uri	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
sdp	pointer
->	O
u_uri	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_e	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
e_email	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'e'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
e_email	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
e_email	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
e_email	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
e_emails	struct
,	O
e_email	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_p	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
p_phone	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'p'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
p_phone	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
p_phone	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
p_phone	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
p_phones	struct
,	O
p_phone	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_c	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
sdp_connection_t	struct
*	O
c_header	pointer
;	O
int	O
i	int
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'c'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_connection_init	function
(	O
&	O
c_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_nettype	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addrtype	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
{	O
char	O
*	O
slash	pointer
=	O
strchr	function
(	O
tmp	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	pointer
!=	O
NULL	O
&&	O
slash	pointer
<	O
crlf	pointer
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr	pointer
)	O
,	O
tmp	pointer
,	O
'/'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
slash	pointer
=	O
strchr	function
(	O
slash	pointer
+	O
1	int
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	pointer
!=	O
NULL	O
&&	O
slash	pointer
<	O
crlf	pointer
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr_multicast_ttl	pointer
)	O
,	O
tmp	pointer
,	O
'/'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr_multicast_int	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr_multicast_int	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr_multicast_ttl	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr_multicast_ttl	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
c_header	pointer
->	O
c_addr	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_connection_free	function
(	O
c_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	pointer
->	O
c_connection	pointer
=	O
c_header	pointer
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	function
(	O
&	O
last_sdp_media	pointer
->	O
c_connections	struct
,	O
c_header	pointer
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_b	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
int	O
i	int
;	O
sdp_bandwidth_t	struct
*	O
b_header	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'b'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_bandwidth_init	function
(	O
&	O
b_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
b_header	pointer
->	O
b_bwtype	pointer
)	O
,	O
tmp	pointer
,	O
':'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_bandwidth_free	function
(	O
b_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
b_header	pointer
->	O
b_bandwidth	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
b_header	pointer
->	O
b_bandwidth	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_bandwidth_free	function
(	O
b_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
i	int
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
b_bandwidths	struct
,	O
b_header	pointer
,	O
-	O
1	int
)	O
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	function
(	O
&	O
last_sdp_media	pointer
->	O
b_bandwidths	struct
,	O
b_header	pointer
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_t	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
int	O
i	int
;	O
sdp_time_descr_t	struct
*	O
t_header	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
't'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_time_descr_init	function
(	O
&	O
t_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
t_header	pointer
->	O
t_start_time	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_time_descr_free	function
(	O
t_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
t_header	pointer
->	O
t_stop_time	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
t_header	pointer
->	O
t_stop_time	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_time_descr_free	function
(	O
t_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
,	O
t_header	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_r	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
int	O
index	function
;	O
char	O
*	O
r_header	pointer
;	O
sdp_time_descr_t	struct
*	O
t_descr	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'r'	O
)	O
return	O
ERR_DISCARD	int
;	O
index	function
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
)	O
;	O
if	O
(	O
index	function
==	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
r_header	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
r_header	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
r_header	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
t_descr	pointer
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
,	O
index	function
-	O
1	int
)	O
;	O
osip_list_add	function
(	O
&	O
t_descr	pointer
->	O
r_repeats	struct
,	O
r_header	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_z	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
z_header	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'z'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
z_header	pointer
=	O
osip_malloc	O
(	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
z_header	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	function
(	O
z_header	pointer
,	O
equal	pointer
+	O
1	int
,	O
crlf	pointer
-	O
(	O
equal	pointer
+	O
1	int
)	O
)	O
;	O
sdp	pointer
->	O
z_adjustments	pointer
=	O
z_header	pointer
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_k	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
int	O
i	int
;	O
char	O
*	O
colon	pointer
;	O
sdp_key_t	struct
*	O
k_header	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'k'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_key_init	function
(	O
&	O
k_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
colon	pointer
=	O
strchr	function
(	O
equal	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
(	O
colon	pointer
!=	O
NULL	O
)	O
&&	O
(	O
colon	pointer
<	O
crlf	pointer
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
k_header	pointer
->	O
k_keytype	pointer
)	O
,	O
tmp	pointer
,	O
':'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	function
(	O
k_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
k_header	pointer
->	O
k_keydata	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
k_header	pointer
->	O
k_keydata	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	function
(	O
k_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
k_header	pointer
->	O
k_keytype	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
k_header	pointer
->	O
k_keytype	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_key_free	function
(	O
k_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
sdp	pointer
->	O
k_key	pointer
=	O
k_header	pointer
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
i	int
-	O
1	int
)	O
;	O
if	O
(	O
last_sdp_media	pointer
!=	O
NULL	O
)	O
{	O
sdp_key_free	function
(	O
k_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
last_sdp_media	pointer
->	O
k_key	pointer
=	O
k_header	pointer
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_a	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
int	O
i	int
;	O
sdp_attribute_t	struct
*	O
a_attribute	pointer
;	O
char	O
*	O
colon	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'a'	O
)	O
return	O
ERR_DISCARD	int
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_attribute_init	function
(	O
&	O
a_attribute	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
colon	pointer
=	O
strchr	function
(	O
equal	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
(	O
colon	pointer
!=	O
NULL	O
)	O
&&	O
(	O
colon	pointer
<	O
crlf	pointer
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
a_attribute	pointer
->	O
a_att_field	pointer
)	O
,	O
tmp	pointer
,	O
':'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	function
(	O
a_attribute	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
a_attribute	pointer
->	O
a_att_value	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
a_attribute	pointer
->	O
a_att_value	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	function
(	O
a_attribute	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
a_attribute	pointer
->	O
a_att_field	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
a_attribute	pointer
->	O
a_att_field	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_attribute_free	function
(	O
a_attribute	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
i	int
=	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
)	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
a_attributes	struct
,	O
a_attribute	pointer
,	O
-	O
1	int
)	O
;	O
else	O
{	O
sdp_media_t	struct
*	O
last_sdp_media	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
i	int
-	O
1	int
)	O
;	O
osip_list_add	function
(	O
&	O
last_sdp_media	pointer
->	O
a_attributes	struct
,	O
a_attribute	pointer
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
static	O
int	O
sdp_message_parse_m	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
buf	pointer
,	O
char	O
*	O
*	O
next	pointer
)	O
{	O
char	O
*	O
equal	pointer
;	O
char	O
*	O
crlf	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
tmp_next	pointer
;	O
int	O
i	int
;	O
sdp_media_t	struct
*	O
m_header	pointer
;	O
char	O
*	O
slash	pointer
;	O
char	O
*	O
space	pointer
;	O
*	O
next	pointer
=	O
buf	pointer
;	O
equal	pointer
=	O
buf	pointer
;	O
while	O
(	O
(	O
*	O
equal	pointer
!=	O
'='	O
)	O
&&	O
(	O
*	O
equal	pointer
!=	O
'\0'	O
)	O
)	O
equal	pointer
++	O
;	O
if	O
(	O
*	O
equal	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
equal	pointer
[	O
-	O
1	int
]	O
!=	O
'm'	O
)	O
return	O
ERR_ERROR	O
;	O
crlf	pointer
=	O
equal	pointer
+	O
1	int
;	O
while	O
(	O
(	O
*	O
crlf	pointer
!=	O
'\r'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\n'	O
)	O
&&	O
(	O
*	O
crlf	pointer
!=	O
'\0'	O
)	O
)	O
crlf	pointer
++	O
;	O
if	O
(	O
*	O
crlf	pointer
==	O
'\0'	O
)	O
return	O
ERR_ERROR	O
;	O
if	O
(	O
crlf	pointer
==	O
equal	pointer
+	O
1	int
)	O
return	O
ERR_ERROR	O
;	O
tmp	pointer
=	O
equal	pointer
+	O
1	int
;	O
i	int
=	O
sdp_media_init	function
(	O
&	O
m_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
ERR_ERROR	O
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_media	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
slash	pointer
=	O
strchr	function
(	O
tmp	pointer
,	O
'/'	O
)	O
;	O
space	pointer
=	O
strchr	function
(	O
tmp	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
ERR_ERROR	O
;	O
}	O
if	O
(	O
(	O
slash	pointer
!=	O
NULL	O
)	O
&&	O
(	O
slash	pointer
<	O
space	pointer
)	O
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_port	pointer
)	O
,	O
tmp	pointer
,	O
'/'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_number_of_port	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
}	O
else	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_port	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
}	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_proto	pointer
)	O
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_proto	pointer
)	O
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
(	O
m_header	pointer
->	O
m_proto	pointer
)	O
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
{	O
char	O
*	O
str	pointer
;	O
int	O
more_space_before_crlf	int
;	O
space	pointer
=	O
strchr	function
(	O
tmp	pointer
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
space	pointer
!=	O
NULL	O
)	O
&&	O
(	O
space	pointer
>	O
crlf	pointer
)	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
more_space_before_crlf	int
=	O
0	int
;	O
while	O
(	O
more_space_before_crlf	int
==	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
str	pointer
,	O
tmp	pointer
,	O
' '	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
tmp_next	pointer
;	O
osip_list_add	function
(	O
&	O
m_header	pointer
->	O
m_payloads	struct
,	O
str	pointer
,	O
-	O
1	int
)	O
;	O
space	pointer
=	O
strchr	function
(	O
tmp	pointer
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
space	pointer
!=	O
NULL	O
)	O
&&	O
(	O
space	pointer
>	O
crlf	pointer
)	O
)	O
more_space_before_crlf	int
=	O
1	int
;	O
else	O
more_space_before_crlf	int
=	O
0	int
;	O
}	O
if	O
(	O
tmp_next	pointer
<	O
crlf	pointer
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
str	pointer
,	O
tmp	pointer
,	O
'\r'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
i	int
=	O
__osip_set_next_token	function
(	O
&	O
str	pointer
,	O
tmp	pointer
,	O
'\n'	O
,	O
&	O
tmp_next	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
sdp_media_free	function
(	O
m_header	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
osip_list_add	function
(	O
&	O
m_header	pointer
->	O
m_payloads	struct
,	O
str	pointer
,	O
-	O
1	int
)	O
;	O
}	O
}	O
osip_list_add	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
m_header	pointer
,	O
-	O
1	int
)	O
;	O
if	O
(	O
crlf	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
*	O
next	pointer
=	O
crlf	pointer
+	O
2	int
;	O
else	O
*	O
next	pointer
=	O
crlf	pointer
+	O
1	int
;	O
return	O
OSIP_WF	int
;	O
}	O
int	O
sdp_message_parse	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
next_buf	pointer
;	O
char	O
*	O
ptr	pointer
;	O
int	O
i	int
;	O
ptr	pointer
=	O
(	O
char	O
*	O
)	O
buf	pointer
;	O
i	int
=	O
sdp_message_parse_v	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
i	int
=	O
sdp_message_parse_s	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
i	int
=	O
sdp_message_parse_o	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
sdp	pointer
->	O
s_name	pointer
==	O
NULL	O
)	O
{	O
i	int
=	O
sdp_message_parse_s	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
0	int
==	O
i	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"The \"s\" parameter is mandatory, but this packet does not contain any! - anyway, we don't mind about it.\n"	pointer
)	O
)	O
;	O
}	O
ptr	pointer
=	O
next_buf	pointer
;	O
}	O
i	int
=	O
sdp_message_parse_i	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
i	int
=	O
sdp_message_parse_u	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_e	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
}	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_p	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
}	O
if	O
(	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
e_emails	struct
)	O
==	O
0	int
&&	O
osip_list_size	function
(	O
&	O
sdp	pointer
->	O
p_phones	struct
)	O
==	O
0	int
)	O
{	O
OSIP_TRACE	O
(	O
osip_trace	function
(	O
__FILE__	O
,	O
__LINE__	O
,	O
OSIP_INFO4	O
,	O
NULL	O
,	O
"The rfc2327 says there should be at least an email or a phone header!- anyway, we don't mind about it.\n"	pointer
)	O
)	O
;	O
}	O
i	int
=	O
sdp_message_parse_c	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_b	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
}	O
i	int
=	O
sdp_message_parse_t	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
i	int
==	O
ERR_DISCARD	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_r	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
{	O
int	O
more_t_header	int
=	O
1	int
;	O
i	int
=	O
sdp_message_parse_t	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
while	O
(	O
more_t_header	int
==	O
1	int
)	O
{	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_r	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
sdp_message_parse_t	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
i	int
==	O
ERR_DISCARD	int
)	O
more_t_header	int
=	O
0	int
;	O
else	O
more_t_header	int
=	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
i	int
=	O
sdp_message_parse_z	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
sdp_message_parse_k	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_a	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
{	O
int	O
more_m_header	int
=	O
1	int
;	O
while	O
(	O
more_m_header	int
==	O
1	int
)	O
{	O
more_m_header	int
=	O
sdp_message_parse_m	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
more_m_header	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
sdp_message_parse_i	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_c	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_b	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
i	int
=	O
sdp_message_parse_k	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
==	O
1	int
)	O
{	O
i	int
=	O
sdp_message_parse_a	function
(	O
sdp	pointer
,	O
ptr	pointer
,	O
&	O
next_buf	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
ptr	pointer
=	O
next_buf	pointer
;	O
if	O
(	O
*	O
ptr	pointer
==	O
'\0'	O
||	O
(	O
*	O
ptr	pointer
==	O
'\r'	O
)	O
||	O
(	O
*	O
ptr	pointer
==	O
'\n'	O
)	O
)	O
return	O
OSIP_SUCCESS	int
;	O
}	O
}	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_connection	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_connection_t	struct
*	O
conn	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
if	O
(	O
conn	pointer
->	O
c_nettype	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
conn	pointer
->	O
c_addrtype	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
conn	pointer
->	O
c_addr	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"c="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
->	O
c_nettype	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
->	O
c_addrtype	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
->	O
c_addr	pointer
)	O
;	O
if	O
(	O
conn	pointer
->	O
c_addr_multicast_ttl	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
->	O
c_addr_multicast_ttl	pointer
)	O
;	O
}	O
if	O
(	O
conn	pointer
->	O
c_addr_multicast_int	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
->	O
c_addr_multicast_int	pointer
)	O
;	O
}	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_bandwidth	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_bandwidth_t	struct
*	O
bandwidth	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
if	O
(	O
bandwidth	pointer
->	O
b_bwtype	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
bandwidth	pointer
->	O
b_bandwidth	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"b="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
bandwidth	pointer
->	O
b_bwtype	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
":"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
bandwidth	pointer
->	O
b_bandwidth	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_time_descr	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_time_descr_t	struct
*	O
time_descr	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
int	O
pos	int
;	O
if	O
(	O
time_descr	pointer
->	O
t_start_time	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
time_descr	pointer
->	O
t_stop_time	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"t="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
time_descr	pointer
->	O
t_start_time	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
time_descr	pointer
->	O
t_stop_time	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
time_descr	pointer
->	O
r_repeats	struct
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
str	pointer
=	O
(	O
char	O
*	O
)	O
osip_list_get	function
(	O
&	O
time_descr	pointer
->	O
r_repeats	struct
,	O
pos	int
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"r="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
str	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
pos	int
++	O
;	O
}	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_key	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_key_t	struct
*	O
key	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
if	O
(	O
key	pointer
->	O
k_keytype	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"k="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
key	pointer
->	O
k_keytype	pointer
)	O
;	O
if	O
(	O
key	pointer
->	O
k_keydata	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
":"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
key	pointer
->	O
k_keydata	pointer
)	O
;	O
}	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_attribute	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_attribute_t	struct
*	O
attribute	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
if	O
(	O
attribute	pointer
->	O
a_att_field	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"a="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
attribute	pointer
->	O
a_att_field	pointer
)	O
;	O
if	O
(	O
attribute	pointer
->	O
a_att_value	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
":"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
attribute	pointer
->	O
a_att_value	pointer
)	O
;	O
}	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
sdp_append_media	function
(	O
char	O
*	O
*	O
string	pointer
,	O
int	O
*	O
size	long
,	O
char	O
*	O
tmp	pointer
,	O
sdp_media_t	struct
*	O
media	pointer
,	O
char	O
*	O
*	O
next_tmp	pointer
)	O
{	O
int	O
pos	int
;	O
if	O
(	O
media	pointer
->	O
m_media	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
media	pointer
->	O
m_port	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
media	pointer
->	O
m_proto	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"m="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
m_media	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
m_port	pointer
)	O
;	O
if	O
(	O
media	pointer
->	O
m_number_of_port	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
m_number_of_port	pointer
)	O
;	O
}	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
m_proto	pointer
)	O
;	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
media	pointer
->	O
m_payloads	struct
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
str	pointer
=	O
(	O
char	O
*	O
)	O
osip_list_get	function
(	O
&	O
media	pointer
->	O
m_payloads	struct
,	O
pos	int
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
str	pointer
)	O
;	O
pos	int
++	O
;	O
}	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
if	O
(	O
media	pointer
->	O
i_info	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
"i="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
i_info	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
media	pointer
->	O
c_connections	struct
,	O
pos	int
)	O
)	O
{	O
sdp_connection_t	struct
*	O
conn	pointer
=	O
(	O
sdp_connection_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
media	pointer
->	O
c_connections	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_connection	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
conn	pointer
,	O
&	O
next_tmp2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
next_tmp2	pointer
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
media	pointer
->	O
b_bandwidths	struct
,	O
pos	int
)	O
)	O
{	O
sdp_bandwidth_t	struct
*	O
band	pointer
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
media	pointer
->	O
b_bandwidths	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_bandwidth	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
band	pointer
,	O
&	O
next_tmp2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
next_tmp2	pointer
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
media	pointer
->	O
k_key	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp2	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_key	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
media	pointer
->	O
k_key	pointer
,	O
&	O
next_tmp2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
next_tmp2	pointer
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
media	pointer
->	O
a_attributes	struct
,	O
pos	int
)	O
)	O
{	O
sdp_attribute_t	struct
*	O
attr	pointer
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
media	pointer
->	O
a_attributes	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp2	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_attribute	function
(	O
string	pointer
,	O
size	long
,	O
tmp	pointer
,	O
attr	pointer
,	O
&	O
next_tmp2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
tmp	pointer
=	O
next_tmp2	pointer
;	O
pos	int
++	O
;	O
}	O
*	O
next_tmp	pointer
=	O
tmp	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
sdp_message_to_str	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
int	O
size	long
;	O
int	O
pos	int
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
string	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
sdp	pointer
||	O
sdp	pointer
->	O
v_version	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
sdp	pointer
->	O
o_username	pointer
==	O
NULL	O
||	O
sdp	pointer
->	O
o_sess_id	pointer
==	O
NULL	O
||	O
sdp	pointer
->	O
o_sess_version	pointer
==	O
NULL	O
||	O
sdp	pointer
->	O
o_nettype	pointer
==	O
NULL	O
||	O
sdp	pointer
->	O
o_addrtype	pointer
==	O
NULL	O
||	O
sdp	pointer
->	O
o_addr	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
size	long
=	O
BODY_MESSAGE_MAX_SIZE	int
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
size	long
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
string	pointer
=	O
tmp	pointer
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"v="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
v_version	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"o="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_username	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_sess_id	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_sess_version	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_nettype	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_addrtype	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
" "	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
o_addr	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
if	O
(	O
sdp	pointer
->	O
s_name	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"s="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
s_name	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
}	O
if	O
(	O
sdp	pointer
->	O
i_info	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"i="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
i_info	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
}	O
if	O
(	O
sdp	pointer
->	O
u_uri	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"u="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
u_uri	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
e_emails	struct
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
email	pointer
=	O
(	O
char	O
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
e_emails	struct
,	O
pos	int
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"e="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
email	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
p_phones	struct
,	O
pos	int
)	O
)	O
{	O
char	O
*	O
phone	pointer
=	O
(	O
char	O
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
p_phones	struct
,	O
pos	int
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"p="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
phone	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
sdp	pointer
->	O
c_connection	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_connection	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
c_connection	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
b_bandwidths	struct
,	O
pos	int
)	O
)	O
{	O
sdp_bandwidth_t	struct
*	O
header	pointer
=	O
(	O
sdp_bandwidth_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
b_bandwidths	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_bandwidth	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
header	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
,	O
pos	int
)	O
)	O
{	O
sdp_time_descr_t	struct
*	O
header	pointer
=	O
(	O
sdp_time_descr_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_time_descr	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
header	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
pos	int
++	O
;	O
}	O
if	O
(	O
sdp	pointer
->	O
z_adjustments	pointer
!=	O
NULL	O
)	O
{	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
"z="	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
z_adjustments	pointer
)	O
;	O
tmp	pointer
=	O
__osip_sdp_append_string	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
OSIP_CRLF	pointer
)	O
;	O
}	O
if	O
(	O
sdp	pointer
->	O
k_key	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_key	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
sdp	pointer
->	O
k_key	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
a_attributes	struct
,	O
pos	int
)	O
)	O
{	O
sdp_attribute_t	struct
*	O
header	pointer
=	O
(	O
sdp_attribute_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
a_attributes	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_attribute	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
header	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
pos	int
++	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
!	O
osip_list_eol	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
pos	int
)	O
)	O
{	O
sdp_media_t	struct
*	O
header	pointer
=	O
(	O
sdp_media_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
pos	int
)	O
;	O
char	O
*	O
next_tmp	pointer
;	O
int	O
i	int
;	O
i	int
=	O
sdp_append_media	function
(	O
&	O
string	pointer
,	O
&	O
size	long
,	O
tmp	pointer
,	O
header	pointer
,	O
&	O
next_tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
string	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tmp	pointer
=	O
next_tmp	pointer
;	O
pos	int
++	O
;	O
}	O
*	O
dest	pointer
=	O
string	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
sdp_message_free	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
)	O
{	O
if	O
(	O
sdp	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
v_version	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_username	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_sess_id	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_sess_version	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_nettype	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_addrtype	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
o_addr	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
s_name	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
i_info	pointer
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
u_uri	pointer
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
sdp	pointer
->	O
e_emails	struct
)	O
;	O
osip_list_ofchar_free	function
(	O
&	O
sdp	pointer
->	O
p_phones	struct
)	O
;	O
sdp_connection_free	function
(	O
sdp	pointer
->	O
c_connection	pointer
)	O
;	O
osip_list_special_free	function
(	O
&	O
sdp	pointer
->	O
b_bandwidths	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_bandwidth_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
sdp	pointer
->	O
t_descrs	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_time_descr_free	function
)	O
;	O
osip_free	O
(	O
sdp	pointer
->	O
z_adjustments	pointer
)	O
;	O
sdp_key_free	function
(	O
sdp	pointer
->	O
k_key	pointer
)	O
;	O
osip_list_special_free	function
(	O
&	O
sdp	pointer
->	O
a_attributes	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_attribute_free	function
)	O
;	O
osip_list_special_free	function
(	O
&	O
sdp	pointer
->	O
m_medias	struct
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
sdp_media_free	function
)	O
;	O
osip_free	O
(	O
sdp	pointer
)	O
;	O
}	O
int	O
sdp_message_clone	function
(	O
sdp_message_t	struct
*	O
sdp	pointer
,	O
sdp_message_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
body	pointer
;	O
i	int
=	O
sdp_message_init	function
(	O
dest	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
sdp_message_to_str	function
(	O
sdp	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
goto	O
error_sc1	O
;	O
i	int
=	O
sdp_message_parse	function
(	O
*	O
dest	pointer
,	O
body	pointer
)	O
;	O
osip_free	O
(	O
body	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
goto	O
error_sc1	O
;	O
return	O
OSIP_SUCCESS	int
;	O
error_sc1	O
:	O
sdp_message_free	function
(	O
*	O
dest	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
