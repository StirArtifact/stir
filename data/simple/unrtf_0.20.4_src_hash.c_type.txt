typedef	O
struct	O
_hi	struct
{	O
struct	O
_hi	struct
*	O
next	pointer
;	O
char	O
*	O
str	pointer
;	O
unsigned	O
long	O
value	long
;	O
}	O
HashItem	struct
;	O
static	O
HashItem	struct
*	O
hash	array
[	O
256	int
]	O
;	O
static	O
unsigned	O
long	O
hash_length	array
[	O
256	int
]	O
;	O
static	O
unsigned	O
long	O
hash_value	long
=	O
0	int
;	O
void	O
hash_init	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
{	O
hash	array
[	O
i	int
]	O
=	O
NULL	O
;	O
hash_length	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
}	O
unsigned	O
long	O
hash_stats	function
(	O
)	O
{	O
int	O
i	int
;	O
unsigned	O
long	O
total	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
{	O
total	long
+=	O
hash_length	array
[	O
i	int
]	O
;	O
}	O
return	O
(	O
total	long
)	O
;	O
}	O
static	O
HashItem	struct
*	O
hashitem_new	function
(	O
char	O
*	O
str	pointer
)	O
{	O
HashItem	struct
*	O
hi	pointer
;	O
unsigned	O
long	O
i	int
;	O
hi	pointer
=	O
(	O
HashItem	struct
*	O
)	O
my_malloc	function
(	O
sizeof	O
(	O
HashItem	struct
)	O
)	O
;	O
if	O
(	O
!	O
hi	pointer
)	O
error_handler	function
(	O
"Out of memory"	pointer
)	O
;	O
memset	function
(	O
(	O
void	O
*	O
)	O
hi	pointer
,	O
0	int
,	O
sizeof	O
(	O
HashItem	struct
)	O
)	O
;	O
hi	pointer
->	O
str	pointer
=	O
my_strdup	function
(	O
str	pointer
)	O
;	O
i	int
=	O
*	O
str	pointer
;	O
if	O
(	O
i	int
==	O
'\\'	O
)	O
i	int
=	O
str	pointer
[	O
1	int
]	O
;	O
i	int
<<=	O
24	int
;	O
hi	pointer
->	O
value	long
=	O
i	int
|	O
(	O
hash_value	long
++	O
&	O
0xffffff	int
)	O
;	O
hi	pointer
->	O
next	pointer
=	O
NULL	O
;	O
return	O
hi	pointer
;	O
}	O
unsigned	O
long	O
hash_get_index	function
(	O
char	O
*	O
str	pointer
)	O
{	O
unsigned	O
short	O
index	function
;	O
unsigned	O
char	O
ch	char
;	O
HashItem	struct
*	O
hi	pointer
;	O
ch	char
=	O
(	O
unsigned	O
char	O
)	O
*	O
str	pointer
;	O
if	O
(	O
ch	char
==	O
'\\'	O
&&	O
*	O
(	O
str	pointer
+	O
1	int
)	O
)	O
ch	char
=	O
*	O
(	O
str	pointer
+	O
1	int
)	O
;	O
index	function
=	O
ch	char
;	O
hi	pointer
=	O
hash	array
[	O
index	function
]	O
;	O
while	O
(	O
hi	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
hi	pointer
->	O
str	pointer
,	O
str	pointer
)	O
)	O
return	O
hi	pointer
->	O
value	long
;	O
hi	pointer
=	O
hi	pointer
->	O
next	pointer
;	O
}	O
hi	pointer
=	O
hashitem_new	function
(	O
str	pointer
)	O
;	O
hi	pointer
->	O
next	pointer
=	O
hash	array
[	O
index	function
]	O
;	O
hash	array
[	O
index	function
]	O
=	O
hi	pointer
;	O
++	O
hash_length	array
[	O
index	function
]	O
;	O
return	O
hi	pointer
->	O
value	long
;	O
}	O
char	O
*	O
hash_get_string	function
(	O
unsigned	O
long	O
value	long
)	O
{	O
int	O
index	function
;	O
HashItem	struct
*	O
hi	pointer
;	O
index	function
=	O
value	long
>>	O
24	int
;	O
hi	pointer
=	O
hash	array
[	O
index	function
]	O
;	O
while	O
(	O
hi	pointer
)	O
{	O
if	O
(	O
hi	pointer
->	O
value	long
==	O
value	long
)	O
return	O
hi	pointer
->	O
str	pointer
;	O
hi	pointer
=	O
hi	pointer
->	O
next	pointer
;	O
}	O
warning_handler	function
(	O
"Word not in hash"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
