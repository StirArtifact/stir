int	O
gsl_sf_bessel_In_scaled_e	function
(	O
int	O
n	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
n	int
=	O
abs	function
(	O
n	int
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_bessel_I0_scaled_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_bessel_I1_scaled_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
n	int
+	O
1.0	int
)	O
/	O
M_E	int
)	O
{	O
gsl_sf_result	struct
t	struct
;	O
double	O
ex	double
=	O
exp	function
(	O
-	O
ax	double
)	O
;	O
int	O
stat_In	int
=	O
gsl_sf_bessel_IJ_taylor_e	function
(	O
(	O
double	O
)	O
n	int
,	O
ax	double
,	O
1	int
,	O
50	int
,	O
GSL_DBL_EPSILON	int
,	O
&	O
t	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
t	struct
.	O
val	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
=	O
t	struct
.	O
err	double
*	O
ex	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
stat_In	int
;	O
}	O
else	O
if	O
(	O
n	int
<	O
150	int
&&	O
ax	double
<	O
1e7	int
)	O
{	O
gsl_sf_result	struct
I0_scaled	struct
;	O
int	O
stat_I0	int
=	O
gsl_sf_bessel_I0_scaled_e	function
(	O
ax	double
,	O
&	O
I0_scaled	struct
)	O
;	O
double	O
rat	double
;	O
int	O
stat_CF1	int
=	O
gsl_sf_bessel_I_CF1_ser	function
(	O
(	O
double	O
)	O
n	int
,	O
ax	double
,	O
&	O
rat	double
)	O
;	O
double	O
Ikp1	double
=	O
rat	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Ik	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Ikm1	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
n	int
;	O
k	int
>=	O
1	int
;	O
k	int
--	O
)	O
{	O
Ikm1	double
=	O
Ikp1	double
+	O
2.0	int
*	O
k	int
/	O
ax	double
*	O
Ik	double
;	O
Ikp1	double
=	O
Ik	double
;	O
Ik	double
=	O
Ikm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
I0_scaled	struct
.	O
val	double
*	O
(	O
GSL_SQRT_DBL_MIN	int
/	O
Ik	double
)	O
;	O
result	pointer
->	O
err	double
=	O
I0_scaled	struct
.	O
err	double
*	O
(	O
GSL_SQRT_DBL_MIN	int
/	O
Ik	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_I0	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
if	O
(	O
GSL_MIN	O
(	O
0.29	int
/	O
(	O
n	int
*	O
n	int
)	O
,	O
0.5	int
/	O
(	O
n	int
*	O
n	int
+	O
x	double
*	O
x	double
)	O
)	O
<	O
0.5	int
*	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
int	O
stat_as	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
(	O
double	O
)	O
n	int
,	O
ax	double
,	O
result	pointer
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
stat_as	int
;	O
}	O
else	O
{	O
const	O
int	O
nhi	int
=	O
2	int
+	O
(	O
int	O
)	O
(	O
1.2	int
/	O
GSL_ROOT6_DBL_EPSILON	int
)	O
;	O
gsl_sf_result	struct
r_Ikp1	struct
;	O
gsl_sf_result	struct
r_Ik	struct
;	O
int	O
stat_a1	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
nhi	int
+	O
1.0	int
,	O
ax	double
,	O
&	O
r_Ikp1	struct
)	O
;	O
int	O
stat_a2	int
=	O
gsl_sf_bessel_Inu_scaled_asymp_unif_e	function
(	O
(	O
double	O
)	O
nhi	int
,	O
ax	double
,	O
&	O
r_Ik	struct
)	O
;	O
double	O
Ikp1	double
=	O
r_Ikp1	struct
.	O
val	double
;	O
double	O
Ik	double
=	O
r_Ik	struct
.	O
val	double
;	O
double	O
Ikm1	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
nhi	int
;	O
k	int
>	O
n	int
;	O
k	int
--	O
)	O
{	O
Ikm1	double
=	O
Ikp1	double
+	O
2.0	int
*	O
k	int
/	O
ax	double
*	O
Ik	double
;	O
Ikp1	double
=	O
Ik	double
;	O
Ik	double
=	O
Ikm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Ik	double
;	O
result	pointer
->	O
err	double
=	O
Ik	double
*	O
(	O
r_Ikp1	struct
.	O
err	double
/	O
r_Ikp1	struct
.	O
val	double
+	O
r_Ik	struct
.	O
err	double
/	O
r_Ik	struct
.	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_a1	int
,	O
stat_a2	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_In_scaled_array	function
(	O
const	O
int	O
nmin	int
,	O
const	O
int	O
nmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
nmax	int
<	O
nmin	int
||	O
nmin	int
<	O
0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
nmax	int
-	O
nmin	int
;	O
j	int
++	O
)	O
result_array	pointer
[	O
j	int
]	O
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"domain error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
nmax	int
-	O
nmin	int
;	O
j	int
++	O
)	O
result_array	pointer
[	O
j	int
]	O
=	O
0.0	int
;	O
if	O
(	O
nmin	int
==	O
0	int
)	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
nmax	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
I0_scaled	struct
;	O
int	O
stat	int
=	O
gsl_sf_bessel_I0_scaled_e	function
(	O
x	double
,	O
&	O
I0_scaled	struct
)	O
;	O
result_array	pointer
[	O
0	int
]	O
=	O
I0_scaled	struct
.	O
val	double
;	O
return	O
stat	int
;	O
}	O
else	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
double	O
two_over_x	double
=	O
2.0	int
/	O
ax	double
;	O
gsl_sf_result	struct
r_Inp1	struct
;	O
gsl_sf_result	struct
r_In	struct
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_In_scaled_e	function
(	O
nmax	int
+	O
1	int
,	O
ax	double
,	O
&	O
r_Inp1	struct
)	O
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_In_scaled_e	function
(	O
nmax	int
,	O
ax	double
,	O
&	O
r_In	struct
)	O
;	O
double	O
Inp1	double
=	O
r_Inp1	struct
.	O
val	double
;	O
double	O
In	double
=	O
r_In	struct
.	O
val	double
;	O
double	O
Inm1	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
nmax	int
;	O
n	int
>=	O
nmin	int
;	O
n	int
--	O
)	O
{	O
result_array	pointer
[	O
n	int
-	O
nmin	int
]	O
=	O
In	double
;	O
Inm1	double
=	O
Inp1	double
+	O
n	int
*	O
two_over_x	double
*	O
In	double
;	O
Inp1	double
=	O
In	double
;	O
In	double
=	O
Inm1	double
;	O
}	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
for	O
(	O
n	int
=	O
nmin	int
;	O
n	int
<=	O
nmax	int
;	O
n	int
++	O
)	O
{	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result_array	pointer
[	O
n	int
-	O
nmin	int
]	O
=	O
-	O
result_array	pointer
[	O
n	int
-	O
nmin	int
]	O
;	O
}	O
}	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_In_e	function
(	O
const	O
int	O
n_in	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
int	O
n	int
=	O
abs	function
(	O
n_in	int
)	O
;	O
gsl_sf_result	struct
In_scaled	struct
;	O
const	O
int	O
stat_In_scaled	int
=	O
gsl_sf_bessel_In_scaled_e	function
(	O
n	int
,	O
ax	double
,	O
&	O
In_scaled	struct
)	O
;	O
if	O
(	O
ax	double
>	O
GSL_LOG_DBL_MAX	int
-	O
1.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
double	O
ex	double
=	O
exp	function
(	O
ax	double
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
*	O
In_scaled	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
ex	double
*	O
In_scaled	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
ax	double
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
result	pointer
->	O
val	double
=	O
-	O
result	pointer
->	O
val	double
;	O
return	O
stat_In_scaled	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_In_array	function
(	O
const	O
int	O
nmin	int
,	O
const	O
int	O
nmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
ax	double
>	O
GSL_LOG_DBL_MAX	int
-	O
1.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
nmax	int
-	O
nmin	int
;	O
j	int
++	O
)	O
result_array	pointer
[	O
j	int
]	O
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
{	O
int	O
j	int
;	O
double	O
eax	double
=	O
exp	function
(	O
ax	double
)	O
;	O
int	O
status	int
=	O
gsl_sf_bessel_In_scaled_array	function
(	O
nmin	int
,	O
nmax	int
,	O
x	double
,	O
result_array	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
nmax	int
-	O
nmin	int
;	O
j	int
++	O
)	O
result_array	pointer
[	O
j	int
]	O
*=	O
eax	double
;	O
return	O
status	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_In_scaled	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_In_scaled_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_In	function
(	O
const	O
int	O
n	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_In_e	function
(	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
