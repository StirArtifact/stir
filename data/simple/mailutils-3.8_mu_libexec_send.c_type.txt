static	O
int	O
read_recipients	int
;	O
static	O
mu_address_t	pointer
rcpt_addr	pointer
;	O
static	O
mu_address_t	pointer
from_addr	pointer
;	O
static	O
void	O
send_address_add	function
(	O
mu_address_t	pointer
*	O
paddr	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
mu_address_t	pointer
addr	int
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	int
,	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s: %s"	pointer
)	O
,	O
value	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_address_union	function
(	O
paddr	pointer
,	O
addr	int
)	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	int
)	O
;	O
}	O
char	O
send_docstring	array
[	O
]	O
=	O
N_	O
(	O
"send a message"	pointer
)	O
;	O
static	O
char	O
send_args_doc	array
[	O
]	O
=	O
"URL-or-HOST [FILE]"	pointer
;	O
static	O
void	O
set_from_address	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_address_create_null	function
(	O
&	O
from_addr	pointer
)	O
)	O
;	O
send_address_add	function
(	O
&	O
from_addr	pointer
,	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
set_rcpt_address	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
send_address_add	function
(	O
&	O
rcpt_addr	pointer
,	O
arg	pointer
)	O
;	O
}	O
static	O
struct	O
mu_option	struct
send_options	array
[	O
]	O
=	O
{	O
{	O
"from"	pointer
,	O
'F'	O
,	O
N_	O
(	O
"ADDRESS"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"send mail from this ADDRESS"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_from_address	function
}	O
,	O
{	O
"rcpt"	pointer
,	O
'T'	O
,	O
N_	O
(	O
"ADDRESS"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"send mail to this ADDRESS"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_rcpt_address	function
}	O
,	O
{	O
"read-recipients"	pointer
,	O
't'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"read recipients from the message"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
read_recipients	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
infile	pointer
;	O
mu_stream_t	pointer
instr	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
count	long
;	O
mu_url_t	pointer
urlhint	pointer
,	O
url	pointer
;	O
mu_mailer_t	pointer
mailer	pointer
;	O
MU_AUTH_REGISTER_ALL_MODULES	O
(	O
)	O
;	O
MU_ASSERT	O
(	O
mu_address_create_null	function
(	O
&	O
rcpt_addr	pointer
)	O
)	O
;	O
mu_register_all_mailer_formats	O
(	O
)	O
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
send_options	array
,	O
send_docstring	array
,	O
send_args_doc	array
)	O
;	O
if	O
(	O
argc	long
<	O
1	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"not enough arguments"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
infile	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
infile	pointer
)	O
MU_ASSERT	O
(	O
mu_file_stream_create	function
(	O
&	O
instr	pointer
,	O
infile	pointer
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
)	O
;	O
else	O
MU_ASSERT	O
(	O
mu_stdio_stream_create	function
(	O
&	O
instr	pointer
,	O
MU_STDIN_FD	int
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_to_message	function
(	O
instr	pointer
,	O
&	O
msg	pointer
)	O
)	O
;	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
mu_address_get_count	function
(	O
rcpt_addr	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
read_recipients	int
=	O
1	int
;	O
if	O
(	O
read_recipients	int
)	O
{	O
int	O
rc	int
;	O
mu_header_t	pointer
header	pointer
;	O
const	O
char	O
*	O
value	pointer
;	O
MU_ASSERT	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
)	O
;	O
rc	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
send_address_add	function
(	O
&	O
rcpt_addr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_header_sget_value"	pointer
,	O
MU_HEADER_TO	pointer
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
rc	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_CC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
send_address_add	function
(	O
&	O
rcpt_addr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_header_sget_value"	pointer
,	O
MU_HEADER_CC	pointer
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
rc	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_BCC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
send_address_add	function
(	O
&	O
rcpt_addr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_header_sget_value"	pointer
,	O
MU_HEADER_BCC	pointer
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
mu_address_get_count	function
(	O
rcpt_addr	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"no recipients"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_url_create	function
(	O
&	O
urlhint	pointer
,	O
"smtp://"	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_url_create_hint	function
(	O
&	O
url	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
MU_URL_PARSE_DEFAULT	O
,	O
urlhint	pointer
)	O
)	O
;	O
mu_url_invalidate	function
(	O
url	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_mailer_create_from_url	function
(	O
&	O
mailer	pointer
,	O
url	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailer_open	function
(	O
mailer	pointer
,	O
MU_STREAM_RDWR	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
msg	pointer
,	O
from_addr	pointer
,	O
rcpt_addr	pointer
)	O
)	O
;	O
mu_mailer_close	function
(	O
mailer	pointer
)	O
;	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
return	O
0	int
;	O
}	O
