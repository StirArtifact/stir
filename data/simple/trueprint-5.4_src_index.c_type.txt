typedef	O
struct	O
{	O
char	O
name	pointer
[	O
SYMBOL_LEN	int
]	O
;	O
long	O
name_start_char	long
;	O
long	O
name_end_char	long
;	O
long	O
page_number	long
;	O
long	O
end_page	long
;	O
boolean	enum
changed	enum
;	O
char	O
*	O
filename	pointer
;	O
}	O
function_entry	struct
;	O
typedef	O
struct	O
{	O
long	O
starting_page	long
;	O
long	O
ending_page	long
;	O
char	O
*	O
name	pointer
;	O
time_t	long
modified	long
;	O
}	O
file_entry	struct
;	O
typedef	O
struct	O
{	O
boolean	enum
changed	enum
;	O
}	O
page_entry	struct
;	O
static	O
void	O
dot_fill	function
(	O
char	O
string	array
[	O
]	O
)	O
;	O
static	O
int	O
compare	function
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
static	O
short	O
print_index_line	function
(	O
int	O
print_bold	int
)	O
;	O
static	O
size_t	long
max_function_name_length	long
=	O
0	int
;	O
static	O
size_t	long
max_file_name_length	long
=	O
0	int
;	O
static	O
unsigned	O
short	O
no_of_functions	short
=	O
0	int
;	O
static	O
unsigned	O
int	O
function_list_size	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
file_list_size	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
page_list_size	int
=	O
0	int
;	O
static	O
function_entry	struct
*	O
functions	pointer
=	O
NULL	O
;	O
static	O
function_entry	struct
*	O
sorted_functions	pointer
=	O
NULL	O
;	O
static	O
file_entry	struct
*	O
files	pointer
=	O
NULL	O
;	O
static	O
page_entry	struct
*	O
pages	pointer
=	O
NULL	O
;	O
static	O
boolean	enum
current_function_changed	enum
=	O
FALSE	int
;	O
static	O
void	O
grow_array	function
(	O
void	O
*	O
list_ptr_ptr	pointer
,	O
unsigned	O
int	O
*	O
,	O
size_t	long
)	O
;	O
void	O
setup_index	function
(	O
void	O
)	O
{	O
max_function_name_length	long
=	O
0	int
;	O
max_file_name_length	long
=	O
0	int
;	O
no_of_functions	short
=	O
0	int
;	O
function_list_size	int
=	O
0	int
;	O
file_list_size	int
=	O
0	int
;	O
page_list_size	int
=	O
0	int
;	O
functions	pointer
=	O
NULL	O
;	O
sorted_functions	pointer
=	O
NULL	O
;	O
files	pointer
=	O
NULL	O
;	O
pages	pointer
=	O
NULL	O
;	O
current_function_changed	enum
=	O
FALSE	int
;	O
}	O
static	O
void	O
grow_array	function
(	O
void	O
*	O
list_ptr_ptr	pointer
,	O
unsigned	O
int	O
*	O
list_size_ptr	pointer
,	O
size_t	long
list_entry_size	long
)	O
{	O
size_t	long
size_needed	long
;	O
*	O
list_size_ptr	pointer
+=	O
BLOCK_SIZE	int
;	O
size_needed	long
=	O
*	O
list_size_ptr	pointer
*	O
list_entry_size	long
;	O
dm	function
(	O
'i'	O
,	O
3	int
,	O
"index.c:grow_array() Growing array by %d bytes\n"	pointer
,	O
size_needed	long
)	O
;	O
if	O
(	O
*	O
(	O
void	O
*	O
*	O
)	O
list_ptr_ptr	pointer
==	O
NULL	O
)	O
*	O
(	O
void	O
*	O
*	O
)	O
list_ptr_ptr	pointer
=	O
xmalloc	function
(	O
size_needed	long
)	O
;	O
else	O
*	O
(	O
void	O
*	O
*	O
)	O
list_ptr_ptr	pointer
=	O
xrealloc	function
(	O
*	O
(	O
void	O
*	O
*	O
)	O
list_ptr_ptr	pointer
,	O
size_needed	long
)	O
;	O
}	O
void	O
page_has_changed	function
(	O
long	O
this_page_number	long
)	O
{	O
if	O
(	O
pass	short
==	O
1	int
)	O
return	O
;	O
while	O
(	O
this_page_number	long
>=	O
page_list_size	int
)	O
grow_array	function
(	O
&	O
pages	pointer
,	O
&	O
page_list_size	int
,	O
sizeof	O
(	O
page_entry	struct
)	O
)	O
;	O
current_function_changed	enum
=	O
TRUE	int
;	O
pages	pointer
[	O
this_page_number	long
]	O
.	O
changed	enum
=	O
TRUE	int
;	O
}	O
void	O
add_file	function
(	O
char	O
*	O
filename	pointer
,	O
unsigned	O
int	O
this_file_number	int
,	O
long	O
this_file_page_number	long
)	O
{	O
size_t	long
length	long
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
struct	O
stat	struct
stat_buffer	struct
;	O
if	O
(	O
this_file_number	int
>=	O
file_list_size	int
)	O
grow_array	function
(	O
&	O
files	pointer
,	O
&	O
file_list_size	int
,	O
sizeof	O
(	O
file_entry	struct
)	O
)	O
;	O
files	pointer
[	O
this_file_number	int
]	O
.	O
starting_page	long
=	O
this_file_page_number	long
;	O
files	pointer
[	O
this_file_number	int
]	O
.	O
name	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
stat	struct
(	O
filename	pointer
,	O
&	O
stat_buffer	struct
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
CMD_NAME	pointer
": cannot stat file"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
files	pointer
[	O
this_file_number	int
]	O
.	O
modified	long
=	O
stat_buffer	struct
.	O
st_mtime	O
;	O
}	O
else	O
{	O
files	pointer
[	O
this_file_number	int
]	O
.	O
modified	long
=	O
0	int
;	O
}	O
if	O
(	O
length	long
>	O
max_file_name_length	long
)	O
max_file_name_length	long
=	O
length	long
;	O
}	O
void	O
end_file	function
(	O
unsigned	O
int	O
this_file_number	int
,	O
long	O
this_file_page_number	long
)	O
{	O
if	O
(	O
this_file_number	int
>=	O
file_list_size	int
)	O
grow_array	function
(	O
&	O
files	pointer
,	O
&	O
file_list_size	int
,	O
sizeof	O
(	O
file_entry	struct
)	O
)	O
;	O
files	pointer
[	O
this_file_number	int
]	O
.	O
ending_page	long
=	O
this_file_page_number	long
;	O
}	O
long	O
get_file_last_page	function
(	O
unsigned	O
int	O
this_file_number	int
)	O
{	O
return	O
files	pointer
[	O
this_file_number	int
]	O
.	O
ending_page	long
;	O
}	O
long	O
get_file_first_page	function
(	O
unsigned	O
int	O
this_file_number	int
)	O
{	O
return	O
files	pointer
[	O
this_file_number	int
]	O
.	O
starting_page	long
;	O
}	O
struct	O
tm	struct
*	O
get_file_modified_time	function
(	O
unsigned	O
int	O
this_file_number	int
)	O
{	O
if	O
(	O
files	pointer
[	O
this_file_number	int
]	O
.	O
modified	long
==	O
0	int
)	O
return	O
NULL	O
;	O
return	O
localtime	function
(	O
&	O
files	pointer
[	O
this_file_number	int
]	O
.	O
modified	long
)	O
;	O
}	O
void	O
add_function	function
(	O
char	O
*	O
name	pointer
,	O
long	O
start	long
,	O
long	O
end	long
,	O
long	O
page	long
,	O
char	O
*	O
filename	pointer
)	O
{	O
size_t	long
length	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
pass	short
==	O
1	int
)	O
return	O
;	O
dm	function
(	O
'i'	O
,	O
2	int
,	O
"index.c:add_function() Adding %s, page %ld filename %s\n"	pointer
,	O
name	pointer
,	O
page	long
,	O
filename	pointer
)	O
;	O
if	O
(	O
no_of_functions	short
==	O
function_list_size	int
)	O
grow_array	function
(	O
&	O
functions	pointer
,	O
&	O
function_list_size	int
,	O
sizeof	O
(	O
function_entry	struct
)	O
)	O
;	O
strcpy	function
(	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
name	pointer
,	O
name	pointer
)	O
;	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
name_start_char	long
=	O
start	long
;	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
name_end_char	long
=	O
end	long
;	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
page_number	long
=	O
page	long
;	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
filename	pointer
=	O
filename	pointer
;	O
if	O
(	O
length	long
>	O
max_function_name_length	long
)	O
max_function_name_length	long
=	O
length	long
;	O
current_function_changed	enum
=	O
FALSE	int
;	O
}	O
void	O
end_function	function
(	O
long	O
page	long
)	O
{	O
if	O
(	O
pass	short
==	O
1	int
)	O
return	O
;	O
dm	function
(	O
'i'	O
,	O
2	int
,	O
"index.c:end_function() Ending function on page %ld\n"	pointer
,	O
page	long
)	O
;	O
functions	pointer
[	O
no_of_functions	short
]	O
.	O
changed	enum
=	O
current_function_changed	enum
;	O
functions	pointer
[	O
no_of_functions	short
++	O
]	O
.	O
end_page	long
=	O
page	long
;	O
}	O
char_status	enum
get_function_name_posn	function
(	O
long	O
current_char	long
,	O
char_status	enum
current_status	enum
)	O
{	O
static	O
unsigned	O
short	O
current_function	short
=	O
0	int
;	O
if	O
(	O
pass	short
==	O
0	int
)	O
return	O
(	O
current_status	enum
)	O
;	O
if	O
(	O
no_of_functions	short
==	O
0	int
)	O
return	O
(	O
current_status	enum
)	O
;	O
if	O
(	O
(	O
current_char	long
>=	O
functions	pointer
[	O
current_function	short
]	O
.	O
name_start_char	long
)	O
&&	O
(	O
current_char	long
<=	O
functions	pointer
[	O
current_function	short
]	O
.	O
name_end_char	long
)	O
)	O
{	O
if	O
(	O
current_char	long
==	O
functions	pointer
[	O
current_function	short
]	O
.	O
name_end_char	long
)	O
current_function	short
+=	O
1	int
;	O
dm	function
(	O
'i'	O
,	O
5	int
,	O
"index.c:get_function_name_posn() Returning TRUE for char posn %ld\n"	pointer
,	O
current_char	long
)	O
;	O
return	O
(	O
CHAR_BOLD	int
)	O
;	O
}	O
return	O
(	O
current_status	enum
)	O
;	O
}	O
char	O
*	O
get_function_name	function
(	O
long	O
page	long
)	O
{	O
unsigned	O
short	O
current_function	short
=	O
0	int
;	O
static	O
char	O
dummy_return	array
[	O
]	O
=	O
""	pointer
;	O
dm	function
(	O
'i'	O
,	O
4	int
,	O
"Index: Searching for function name for page %ld\n"	pointer
,	O
page	long
)	O
;	O
if	O
(	O
(	O
pass	short
==	O
0	int
)	O
||	O
(	O
no_of_functions	short
==	O
0	int
)	O
)	O
return	O
(	O
dummy_return	array
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
page	long
<	O
functions	pointer
[	O
current_function	short
]	O
.	O
page_number	long
)	O
return	O
(	O
dummy_return	array
)	O
;	O
if	O
(	O
page	long
<=	O
functions	pointer
[	O
current_function	short
]	O
.	O
end_page	long
)	O
{	O
dm	function
(	O
'i'	O
,	O
4	int
,	O
"Index: Function name for page %ld = %s\n"	pointer
,	O
page	long
,	O
functions	pointer
[	O
current_function	short
]	O
.	O
name	pointer
)	O
;	O
return	O
(	O
functions	pointer
[	O
current_function	short
]	O
.	O
name	pointer
)	O
;	O
}	O
if	O
(	O
current_function	short
>=	O
no_of_functions	short
-	O
1	int
)	O
return	O
(	O
dummy_return	array
)	O
;	O
current_function	short
+=	O
1	int
;	O
}	O
}	O
char	O
*	O
file_name	function
(	O
int	O
file_number	int
)	O
{	O
return	O
files	pointer
[	O
file_number	int
]	O
.	O
name	pointer
;	O
}	O
boolean	enum
function_changed	function
(	O
long	O
page	long
)	O
{	O
static	O
unsigned	O
short	O
current_function	short
=	O
0	int
;	O
if	O
(	O
pass	short
==	O
0	int
)	O
return	O
(	O
FALSE	int
)	O
;	O
if	O
(	O
no_of_functions	short
==	O
0	int
)	O
return	O
(	O
FALSE	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
page	long
<	O
functions	pointer
[	O
current_function	short
]	O
.	O
page_number	long
)	O
return	O
(	O
FALSE	int
)	O
;	O
if	O
(	O
page	long
<=	O
functions	pointer
[	O
current_function	short
]	O
.	O
end_page	long
)	O
return	O
(	O
functions	pointer
[	O
current_function	short
]	O
.	O
changed	enum
)	O
;	O
if	O
(	O
current_function	short
>=	O
no_of_functions	short
-	O
1	int
)	O
return	O
(	O
FALSE	int
)	O
;	O
current_function	short
+=	O
1	int
;	O
}	O
}	O
boolean	enum
page_changed	function
(	O
long	O
page	long
)	O
{	O
if	O
(	O
pass	short
==	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
page	long
>	O
page_list_size	int
)	O
return	O
FALSE	int
;	O
return	O
pages	pointer
[	O
page	long
]	O
.	O
changed	enum
;	O
}	O
void	O
dot_fill	function
(	O
char	O
string	array
[	O
]	O
)	O
{	O
short	O
string_index	short
=	O
0	int
;	O
while	O
(	O
string	array
[	O
string_index	short
]	O
==	O
' '	O
)	O
string_index	short
+=	O
1	int
;	O
while	O
(	O
string	array
[	O
string_index	short
]	O
!=	O
' '	O
)	O
string_index	short
+=	O
1	int
;	O
while	O
(	O
string	array
[	O
string_index	short
]	O
==	O
' '	O
)	O
string	array
[	O
string_index	short
++	O
]	O
=	O
'.'	O
;	O
}	O
int	O
compare	function
(	O
const	O
void	O
*	O
p1	pointer
,	O
const	O
void	O
*	O
p2	pointer
)	O
{	O
int	O
r	int
;	O
r	int
=	O
strcmp	function
(	O
(	O
(	O
function_entry	struct
*	O
)	O
p1	pointer
)	O
->	O
name	pointer
,	O
(	O
(	O
function_entry	struct
*	O
)	O
p2	pointer
)	O
->	O
name	pointer
)	O
;	O
if	O
(	O
r	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
(	O
function_entry	struct
*	O
)	O
p1	pointer
)	O
->	O
name_start_char	long
>	O
(	O
(	O
function_entry	struct
*	O
)	O
p2	pointer
)	O
->	O
name_start_char	long
)	O
r	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
(	O
function_entry	struct
*	O
)	O
p1	pointer
)	O
->	O
name_start_char	long
<	O
(	O
(	O
function_entry	struct
*	O
)	O
p2	pointer
)	O
->	O
name_start_char	long
)	O
r	int
=	O
-	O
1	int
;	O
else	O
r	int
=	O
0	int
;	O
}	O
return	O
r	int
;	O
}	O
void	O
sort_function_names	function
(	O
void	O
)	O
{	O
unsigned	O
short	O
every_function	short
;	O
size_t	long
size_needed	long
=	O
function_list_size	int
*	O
sizeof	O
(	O
function_entry	struct
)	O
;	O
if	O
(	O
function_list_size	int
==	O
0	int
)	O
return	O
;	O
sorted_functions	pointer
=	O
xmalloc	function
(	O
size_needed	long
)	O
;	O
for	O
(	O
every_function	short
=	O
0	int
;	O
every_function	short
<	O
no_of_functions	short
;	O
every_function	short
++	O
)	O
sorted_functions	pointer
[	O
every_function	short
]	O
=	O
functions	pointer
[	O
every_function	short
]	O
;	O
qsort	function
(	O
(	O
char	O
*	O
)	O
sorted_functions	pointer
,	O
(	O
int	O
)	O
no_of_functions	short
,	O
sizeof	O
(	O
function_entry	struct
)	O
,	O
compare	function
)	O
;	O
}	O
void	O
print_index	function
(	O
void	O
)	O
{	O
unsigned	O
short	O
function_idx	short
=	O
0	int
;	O
long	O
index_page_number	long
=	O
0	int
;	O
short	O
output_line_number	short
;	O
boolean	enum
reached_end_of_sheet	enum
;	O
if	O
(	O
no_of_functions	short
==	O
0	int
)	O
return	O
;	O
do	O
{	O
index_page_number	long
+=	O
1	int
;	O
print_index_header	function
(	O
index_page_number	long
)	O
;	O
output_line_number	short
=	O
0	int
;	O
while	O
(	O
(	O
output_line_number	short
<	O
page_length	int
)	O
&&	O
(	O
function_idx	short
<	O
no_of_functions	short
)	O
)	O
{	O
char	O
output_line	array
[	O
INPUT_LINE_LEN	int
]	O
;	O
if	O
(	O
(	O
function_idx	short
&	O
1	int
)	O
==	O
1	int
)	O
{	O
sprintf	function
(	O
output_line	array
,	O
"          %-24s %4ld  (%s)"	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
name	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
page_number	long
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
filename	pointer
)	O
;	O
dot_fill	function
(	O
output_line	array
)	O
;	O
printf	function
(	O
"Lpt(%s) show Nl\n"	pointer
,	O
output_line	array
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
output_line	array
,	O
"          %-24s %4ld  (%s)\n"	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
name	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
page_number	long
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
filename	pointer
)	O
;	O
printf	function
(	O
"Lpt(%s) show Nl\n"	pointer
,	O
output_line	array
)	O
;	O
}	O
output_line_number	short
+=	O
1	int
;	O
function_idx	short
+=	O
1	int
;	O
}	O
reached_end_of_sheet	enum
=	O
PS_endpage	function
(	O
TRUE	int
)	O
;	O
}	O
while	O
(	O
function_idx	short
<	O
no_of_functions	short
)	O
;	O
while	O
(	O
!	O
reached_end_of_sheet	enum
)	O
{	O
index_page_number	long
+=	O
1	int
;	O
print_index_header	function
(	O
index_page_number	long
)	O
;	O
reached_end_of_sheet	enum
=	O
PS_endpage	function
(	O
TRUE	int
)	O
;	O
}	O
}	O
short	O
print_index_line	function
(	O
int	O
print_bold	int
)	O
{	O
static	O
unsigned	O
int	O
current_file	int
=	O
0	int
;	O
static	O
unsigned	O
short	O
function_idx	short
=	O
0	int
;	O
static	O
boolean	enum
first_call	enum
=	O
TRUE	int
;	O
if	O
(	O
first_call	enum
)	O
{	O
printf	function
(	O
"Lpt(    %-24s %5ld) BF setfont show CF setfont Nl\n"	pointer
,	O
files	pointer
[	O
current_file	int
]	O
.	O
name	pointer
,	O
files	pointer
[	O
current_file	int
]	O
.	O
starting_page	long
)	O
;	O
first_call	enum
=	O
FALSE	int
;	O
return	O
(	O
LINE	int
)	O
;	O
}	O
while	O
(	O
function_idx	short
!=	O
no_of_functions	short
)	O
{	O
if	O
(	O
strcmp	function
(	O
files	pointer
[	O
current_file	int
]	O
.	O
name	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
filename	pointer
)	O
!=	O
0	int
)	O
{	O
function_idx	short
+=	O
1	int
;	O
continue	O
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
function_idx	short
==	O
no_of_functions	short
)	O
{	O
if	O
(	O
++	O
current_file	int
>=	O
no_of_files	int
)	O
return	O
(	O
INPUT_END	int
)	O
;	O
printf	function
(	O
"Lpt(    %-24s %5ld) BF setfont show CF setfont Nl\n"	pointer
,	O
files	pointer
[	O
current_file	int
]	O
.	O
name	pointer
,	O
files	pointer
[	O
current_file	int
]	O
.	O
starting_page	long
)	O
;	O
function_idx	short
=	O
0	int
;	O
return	O
(	O
LINE	int
)	O
;	O
}	O
if	O
(	O
print_bold	int
)	O
{	O
char	O
string	array
[	O
INPUT_LINE_LEN	int
]	O
;	O
sprintf	function
(	O
string	array
,	O
"          %-24s %4ld"	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
name	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
page_number	long
)	O
;	O
dot_fill	function
(	O
string	array
)	O
;	O
printf	function
(	O
"Lpt(%s) show Nl\n"	pointer
,	O
string	array
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"Lpt(          %-24s %4ld) show Nl\n"	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
name	pointer
,	O
sorted_functions	pointer
[	O
function_idx	short
]	O
.	O
page_number	long
)	O
;	O
}	O
function_idx	short
+=	O
1	int
;	O
return	O
(	O
LINE	int
)	O
;	O
}	O
void	O
print_out_file_index	function
(	O
void	O
)	O
{	O
long	O
index_page_number	long
=	O
0	int
;	O
short	O
output_line_number	short
;	O
short	O
retval	short
=	O
LINE	int
;	O
boolean	enum
reached_end_of_sheet	enum
;	O
do	O
{	O
index_page_number	long
+=	O
1	int
;	O
print_file_header	function
(	O
index_page_number	long
)	O
;	O
output_line_number	short
=	O
0	int
;	O
while	O
(	O
output_line_number	short
<	O
page_length	int
)	O
{	O
PUTS	O
(	O
"          "	pointer
)	O
;	O
if	O
(	O
(	O
retval	short
=	O
print_index_line	function
(	O
output_line_number	short
&	O
1	int
)	O
)	O
==	O
INPUT_END	int
)	O
break	O
;	O
output_line_number	short
+=	O
1	int
;	O
}	O
reached_end_of_sheet	enum
=	O
PS_endpage	function
(	O
TRUE	int
)	O
;	O
}	O
while	O
(	O
retval	short
==	O
LINE	int
)	O
;	O
while	O
(	O
!	O
reached_end_of_sheet	enum
)	O
{	O
index_page_number	long
+=	O
1	int
;	O
print_file_header	function
(	O
index_page_number	long
)	O
;	O
reached_end_of_sheet	enum
=	O
PS_endpage	function
(	O
TRUE	int
)	O
;	O
}	O
}	O
