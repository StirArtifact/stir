struct	O
grecs_list	struct
*	O
identity_provider_list	pointer
;	O
static	O
struct	O
grecs_symtab	O
*	O
idmech_symtab	pointer
;	O
static	O
int	O
idmech_copy	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
)	O
{	O
pies_identity_mechanism_t	pointer
ma	pointer
=	O
a	pointer
;	O
pies_identity_mechanism_t	pointer
mb	pointer
=	O
b	pointer
;	O
*	O
ma	pointer
=	O
*	O
mb	pointer
;	O
ma	pointer
->	O
name	pointer
=	O
grecs_strdup	function
(	O
mb	pointer
->	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
pies_identity_mechanism_register	function
(	O
pies_identity_mechanism_t	pointer
mech	pointer
)	O
{	O
int	O
install	pointer
;	O
if	O
(	O
!	O
idmech_symtab	pointer
)	O
{	O
idmech_symtab	pointer
=	O
grecs_symtab_create	function
(	O
sizeof	O
(	O
*	O
mech	pointer
)	O
,	O
NULL	O
,	O
NULL	O
,	O
idmech_copy	function
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
idmech_symtab	pointer
)	O
grecs_alloc_die	function
(	O
)	O
;	O
}	O
install	pointer
=	O
1	int
;	O
if	O
(	O
!	O
grecs_symtab_lookup_or_install	function
(	O
idmech_symtab	pointer
,	O
mech	pointer
,	O
&	O
install	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
return	O
!	O
install	pointer
;	O
}	O
pies_identity_mechanism_t	pointer
pies_identity_mechanism_lookup	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
struct	O
pies_identity_mechanism	struct
key	pointer
;	O
if	O
(	O
!	O
idmech_symtab	pointer
)	O
return	O
NULL	O
;	O
key	pointer
.	O
name	pointer
=	O
name	pointer
;	O
return	O
grecs_symtab_lookup_or_install	function
(	O
idmech_symtab	pointer
,	O
&	O
key	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
idmech_help	function
(	O
void	O
*	O
data	pointer
,	O
void	O
*	O
unused	pointer
)	O
{	O
pies_identity_mechanism_t	pointer
p	pointer
=	O
data	pointer
;	O
if	O
(	O
p	pointer
->	O
confhelp	pointer
)	O
p	pointer
->	O
confhelp	pointer
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
pies_config_identity_mechanisms_help	function
(	O
)	O
{	O
grecs_symtab_foreach	function
(	O
idmech_symtab	pointer
,	O
idmech_help	function
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
get_string_node	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
grecs_node	struct
*	O
*	O
pret	pointer
)	O
{	O
struct	O
grecs_node	struct
*	O
p	pointer
=	O
grecs_find_node	function
(	O
node	pointer
->	O
down	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
grecs_error	function
(	O
&	O
node	pointer
->	O
locus	struct
,	O
0	int
,	O
"no \"%s\" statement found"	pointer
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
p	pointer
->	O
type	int
!=	O
grecs_node_stmt	int
)	O
{	O
grecs_error	function
(	O
&	O
p	pointer
->	O
locus	struct
,	O
0	int
,	O
"must be simple statement"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
p	pointer
->	O
v	pointer
.	O
value	pointer
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	function
(	O
&	O
p	pointer
->	O
locus	struct
,	O
0	int
,	O
"must be scalar"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
*	O
pret	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
pies_config_provider	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
)	O
{	O
char	O
const	O
*	O
name	pointer
;	O
pies_identity_mechanism_t	pointer
mp	pointer
;	O
struct	O
pies_identity_provider	struct
*	O
prov	pointer
;	O
struct	O
grecs_node	struct
*	O
p	pointer
;	O
if	O
(	O
node	pointer
->	O
v	pointer
.	O
value	pointer
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	function
(	O
&	O
node	pointer
->	O
locus	struct
,	O
0	int
,	O
"value must be scalar"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
name	pointer
=	O
node	pointer
->	O
v	pointer
.	O
value	pointer
->	O
v	pointer
.	O
string	pointer
;	O
if	O
(	O
get_string_node	function
(	O
node	pointer
,	O
"type"	pointer
,	O
&	O
p	pointer
)	O
)	O
return	O
1	int
;	O
mp	pointer
=	O
pies_identity_mechanism_lookup	function
(	O
p	pointer
->	O
v	pointer
.	O
value	pointer
->	O
v	pointer
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
mp	pointer
)	O
{	O
grecs_error	function
(	O
&	O
p	pointer
->	O
locus	struct
,	O
0	int
,	O
"no such mechanism"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
prov	pointer
=	O
grecs_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
prov	pointer
)	O
)	O
;	O
prov	pointer
->	O
name	pointer
=	O
grecs_strdup	function
(	O
name	pointer
)	O
;	O
prov	pointer
->	O
mech	pointer
=	O
mp	pointer
;	O
prov	pointer
->	O
locus	struct
=	O
node	pointer
->	O
locus	struct
;	O
if	O
(	O
mp	pointer
->	O
configure	pointer
&&	O
mp	pointer
->	O
configure	pointer
(	O
node	pointer
,	O
prov	pointer
)	O
)	O
{	O
grecs_error	function
(	O
&	O
node	pointer
->	O
locus	struct
,	O
0	int
,	O
"provider configuration failed"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
identity_provider_list	pointer
)	O
identity_provider_list	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_list_append	function
(	O
identity_provider_list	pointer
,	O
prov	pointer
)	O
;	O
return	O
0	int
;	O
}	O
char	O
const	O
*	O
pies_identity_provider_name	function
(	O
pies_identity_provider_t	pointer
p	pointer
)	O
{	O
return	O
p	pointer
->	O
name	pointer
;	O
}	O
