struct	O
gmp_doscan_params_t	struct
{	O
int	O
base	int
;	O
int	O
ignore	int
;	O
char	O
type	char
;	O
int	O
width	int
;	O
}	O
;	O
static	O
int	O
gmpscan	function
(	O
const	O
struct	O
gmp_doscan_funs_t	struct
*	O
funs	pointer
,	O
void	O
*	O
data	pointer
,	O
const	O
struct	O
gmp_doscan_params_t	struct
*	O
p	pointer
,	O
void	O
*	O
dst	pointer
)	O
{	O
int	O
chars	int
,	O
c	int
,	O
base	int
,	O
first	int
,	O
width	int
,	O
seen_point	int
,	O
seen_digit	int
,	O
hexfloat	int
;	O
size_t	long
s_upto	long
,	O
s_alloc	long
,	O
hexexp	long
;	O
char	O
*	O
s	array
;	O
int	O
invalid	int
=	O
0	int
;	O
TRACE	O
(	O
printf	function
(	O
"gmpscan\n"	pointer
)	O
)	O
;	O
ASSERT	O
(	O
p	pointer
->	O
type	char
==	O
'F'	O
||	O
p	pointer
->	O
type	char
==	O
'Q'	O
||	O
p	pointer
->	O
type	char
==	O
'Z'	O
)	O
;	O
c	int
=	O
(	O
*	O
funs	pointer
->	O
get	pointer
)	O
(	O
data	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
-	O
2	int
;	O
chars	int
=	O
1	int
;	O
first	int
=	O
1	int
;	O
seen_point	int
=	O
0	int
;	O
width	int
=	O
(	O
p	pointer
->	O
width	int
==	O
0	int
?	O
INT_MAX	O
-	O
1	int
:	O
p	pointer
->	O
width	int
)	O
;	O
base	int
=	O
p	pointer
->	O
base	int
;	O
s_alloc	long
=	O
S_ALLOC_STEP	int
;	O
s	array
=	O
__GMP_ALLOCATE_FUNC_TYPE	O
(	O
s_alloc	long
,	O
char	O
)	O
;	O
s_upto	long
=	O
0	int
;	O
hexfloat	int
=	O
0	int
;	O
hexexp	long
=	O
0	int
;	O
another	O
:	O
seen_digit	int
=	O
0	int
;	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
STORE	O
(	O
c	int
)	O
;	O
goto	O
get_for_sign	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'+'	O
)	O
{	O
get_for_sign	O
:	O
GET	O
(	O
c	int
)	O
;	O
}	O
if	O
(	O
base	int
==	O
0	int
)	O
{	O
base	int
=	O
10	int
;	O
if	O
(	O
c	int
==	O
'0'	O
)	O
{	O
seen_digit	int
=	O
1	int
;	O
if	O
(	O
p	pointer
->	O
type	char
!=	O
'F'	O
)	O
base	int
=	O
8	int
;	O
STORE	O
(	O
c	int
)	O
;	O
GET	O
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'x'	O
||	O
c	int
==	O
'X'	O
)	O
{	O
base	int
=	O
16	int
;	O
seen_digit	int
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
type	char
==	O
'F'	O
)	O
hexfloat	int
=	O
1	int
;	O
else	O
STORE	O
(	O
c	int
)	O
;	O
GET	O
(	O
c	int
)	O
;	O
}	O
}	O
}	O
digits	O
:	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
base	int
==	O
16	int
)	O
{	O
if	O
(	O
!	O
isxdigit	function
(	O
c	int
)	O
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
isdigit	function
(	O
c	int
)	O
)	O
break	O
;	O
if	O
(	O
base	int
==	O
8	int
&&	O
(	O
c	int
==	O
'8'	O
||	O
c	int
==	O
'9'	O
)	O
)	O
break	O
;	O
}	O
seen_digit	int
=	O
1	int
;	O
STORE	O
(	O
c	int
)	O
;	O
GET	O
(	O
c	int
)	O
;	O
}	O
if	O
(	O
first	int
)	O
{	O
if	O
(	O
p	pointer
->	O
type	char
==	O
'F'	O
&&	O
!	O
seen_point	int
)	O
{	O
const	O
char	O
*	O
point	pointer
=	O
GMP_DECIMAL_POINT	O
;	O
int	O
pc	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
point	pointer
++	O
;	O
if	O
(	O
c	int
==	O
pc	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
STORE	O
(	O
c	int
)	O
;	O
GET	O
(	O
c	int
)	O
;	O
pc	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
point	pointer
++	O
;	O
if	O
(	O
pc	int
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
pc	int
)	O
goto	O
set_invalid	O
;	O
}	O
seen_point	int
=	O
1	int
;	O
goto	O
digits	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
type	char
==	O
'F'	O
)	O
{	O
if	O
(	O
hexfloat	int
&&	O
(	O
c	int
==	O
'p'	O
||	O
c	int
==	O
'P'	O
)	O
)	O
{	O
hexexp	long
=	O
s_upto	long
;	O
base	int
=	O
10	int
;	O
goto	O
exponent	O
;	O
}	O
else	O
if	O
(	O
!	O
hexfloat	int
&&	O
(	O
c	int
==	O
'e'	O
||	O
c	int
==	O
'E'	O
)	O
)	O
{	O
exponent	O
:	O
if	O
(	O
!	O
seen_digit	int
)	O
goto	O
set_invalid	O
;	O
do_second	O
:	O
first	int
=	O
0	int
;	O
STORE	O
(	O
c	int
)	O
;	O
GET	O
(	O
c	int
)	O
;	O
goto	O
another	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
type	char
==	O
'Q'	O
&&	O
c	int
==	O
'/'	O
)	O
{	O
if	O
(	O
!	O
seen_digit	int
)	O
goto	O
set_invalid	O
;	O
seen_digit	int
=	O
0	int
;	O
base	int
=	O
p	pointer
->	O
base	int
;	O
goto	O
do_second	O
;	O
}	O
}	O
convert	O
:	O
if	O
(	O
!	O
seen_digit	int
)	O
{	O
set_invalid	O
:	O
invalid	int
=	O
1	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
!	O
p	pointer
->	O
ignore	int
)	O
{	O
STORE	O
(	O
'\0'	O
)	O
;	O
TRACE	O
(	O
printf	function
(	O
"	convert \"%s\"\n"	pointer
,	O
s	array
)	O
)	O
;	O
switch	O
(	O
p	pointer
->	O
type	char
)	O
{	O
case	O
'F'	O
:	O
{	O
mpf_ptr	pointer
f	pointer
=	O
(	O
mpf_ptr	pointer
)	O
dst	pointer
;	O
if	O
(	O
hexexp	long
!=	O
0	int
)	O
s	array
[	O
hexexp	long
]	O
=	O
'\0'	O
;	O
ASSERT_NOCARRY	O
(	O
mpf_set_str	O
(	O
f	pointer
,	O
s	array
,	O
hexfloat	int
?	O
16	int
:	O
10	int
)	O
)	O
;	O
if	O
(	O
hexexp	long
!=	O
0	int
)	O
{	O
char	O
*	O
dummy	pointer
;	O
long	O
exp	int
;	O
exp	int
=	O
strtol	function
(	O
s	array
+	O
hexexp	long
+	O
1	int
,	O
&	O
dummy	pointer
,	O
10	int
)	O
;	O
if	O
(	O
exp	int
>=	O
0	int
)	O
mpf_mul_2exp	O
(	O
f	pointer
,	O
f	pointer
,	O
(	O
unsigned	O
long	O
)	O
exp	int
)	O
;	O
else	O
mpf_div_2exp	O
(	O
f	pointer
,	O
f	pointer
,	O
-	O
(	O
unsigned	O
long	O
)	O
exp	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'Q'	O
:	O
ASSERT_NOCARRY	O
(	O
mpq_set_str	O
(	O
(	O
mpq_ptr	pointer
)	O
dst	pointer
,	O
s	array
,	O
p	pointer
->	O
base	int
)	O
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
ASSERT_NOCARRY	O
(	O
mpz_set_str	O
(	O
(	O
mpz_ptr	pointer
)	O
dst	pointer
,	O
s	array
,	O
p	pointer
->	O
base	int
)	O
)	O
;	O
break	O
;	O
default	O
:	O
ASSERT	O
(	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
done	O
:	O
ASSERT	O
(	O
chars	int
<=	O
width	int
+	O
1	int
)	O
;	O
if	O
(	O
chars	int
!=	O
width	int
+	O
1	int
)	O
{	O
(	O
*	O
funs	pointer
->	O
unget	pointer
)	O
(	O
c	int
,	O
data	pointer
)	O
;	O
TRACE	O
(	O
printf	function
(	O
"	ungetc %d, to give %d chars\n"	pointer
,	O
c	int
,	O
chars	int
-	O
1	int
)	O
)	O
;	O
}	O
chars	int
--	O
;	O
(	O
*	O
__gmp_free_func	pointer
)	O
(	O
s	array
,	O
s_alloc	long
)	O
;	O
if	O
(	O
invalid	int
)	O
{	O
TRACE	O
(	O
printf	function
(	O
"	invalid\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
TRACE	O
(	O
printf	function
(	O
"  return %d chars (cf width %d)\n"	pointer
,	O
chars	int
,	O
width	int
)	O
)	O
;	O
return	O
chars	int
;	O
}	O
static	O
int	O
skip_white	function
(	O
const	O
struct	O
gmp_doscan_funs_t	struct
*	O
funs	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
c	int
;	O
int	O
ret	int
=	O
0	int
;	O
do	O
{	O
c	int
=	O
(	O
funs	pointer
->	O
get	pointer
)	O
(	O
data	pointer
)	O
;	O
ret	int
++	O
;	O
}	O
while	O
(	O
isspace	function
(	O
c	int
)	O
)	O
;	O
(	O
funs	pointer
->	O
unget	pointer
)	O
(	O
c	int
,	O
data	pointer
)	O
;	O
ret	int
--	O
;	O
TRACE	O
(	O
printf	function
(	O
"  skip white %d\n"	pointer
,	O
ret	int
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
__gmp_doscan	function
(	O
const	O
struct	O
gmp_doscan_funs_t	struct
*	O
funs	pointer
,	O
void	O
*	O
data	pointer
,	O
const	O
char	O
*	O
orig_fmt	pointer
,	O
va_list	array
orig_ap	array
)	O
{	O
struct	O
gmp_doscan_params_t	struct
param	struct
;	O
va_list	array
ap	pointer
;	O
char	O
*	O
alloc_fmt	pointer
;	O
const	O
char	O
*	O
fmt	pointer
,	O
*	O
this_fmt	pointer
,	O
*	O
end_fmt	pointer
;	O
size_t	long
orig_fmt_len	long
,	O
alloc_fmt_size	long
,	O
len	long
;	O
int	O
new_fields	int
,	O
new_chars	int
;	O
char	O
fchar	char
;	O
int	O
fields	int
=	O
0	int
;	O
int	O
chars	int
=	O
0	int
;	O
TRACE	O
(	O
printf	function
(	O
"__gmp_doscan \"%s\"\n"	pointer
,	O
orig_fmt	pointer
)	O
;	O
if	O
(	O
funs	pointer
->	O
scan	pointer
==	O
(	O
gmp_doscan_scan_t	pointer
)	O
sscanf	function
)	O
printf	function
(	O
"  s=\"%s\"\n"	pointer
,	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
data	pointer
)	O
)	O
;	O
va_copy	O
(	O
ap	pointer
,	O
orig_ap	array
)	O
;	O
orig_fmt_len	long
=	O
strlen	function
(	O
orig_fmt	pointer
)	O
;	O
alloc_fmt_size	long
=	O
orig_fmt_len	long
+	O
4	int
;	O
alloc_fmt	pointer
=	O
__GMP_ALLOCATE_FUNC_TYPE	O
(	O
alloc_fmt_size	long
,	O
char	O
)	O
;	O
fmt	pointer
=	O
orig_fmt	pointer
;	O
end_fmt	pointer
=	O
orig_fmt	pointer
+	O
orig_fmt_len	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
next	pointer
:	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
if	O
(	O
fchar	char
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
isspace	function
(	O
fchar	char
)	O
)	O
{	O
chars	int
+=	O
skip_white	function
(	O
funs	pointer
,	O
data	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
fchar	char
!=	O
'%'	O
)	O
{	O
int	O
c	int
;	O
literal	O
:	O
c	int
=	O
(	O
funs	pointer
->	O
get	pointer
)	O
(	O
data	pointer
)	O
;	O
if	O
(	O
c	int
!=	O
fchar	char
)	O
{	O
(	O
funs	pointer
->	O
unget	pointer
)	O
(	O
c	int
,	O
data	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
eof_no_match	O
:	O
if	O
(	O
fields	int
==	O
0	int
)	O
fields	int
=	O
EOF	O
;	O
}	O
goto	O
done	O
;	O
}	O
chars	int
++	O
;	O
continue	O
;	O
}	O
param	struct
.	O
type	char
=	O
'\0'	O
;	O
param	struct
.	O
base	int
=	O
0	int
;	O
param	struct
.	O
ignore	int
=	O
0	int
;	O
param	struct
.	O
width	int
=	O
0	int
;	O
this_fmt	pointer
=	O
fmt	pointer
-	O
1	int
;	O
TRACE	O
(	O
printf	function
(	O
"	this_fmt \"%s\"\n"	pointer
,	O
this_fmt	pointer
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
fmt	pointer
<=	O
end_fmt	pointer
)	O
;	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
switch	O
(	O
fchar	char
)	O
{	O
case	O
'\0'	O
:	O
ASSERT	O
(	O
0	int
)	O
;	O
goto	O
done	O
;	O
case	O
'%'	O
:	O
goto	O
literal	O
;	O
case	O
'['	O
:	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
if	O
(	O
fchar	char
==	O
'^'	O
)	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
if	O
(	O
fchar	char
==	O
']'	O
)	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
fmt	pointer
<=	O
end_fmt	pointer
)	O
;	O
if	O
(	O
fchar	char
==	O
'\0'	O
)	O
{	O
ASSERT	O
(	O
0	int
)	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
fchar	char
==	O
']'	O
)	O
break	O
;	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
}	O
case	O
'c'	O
:	O
case	O
's'	O
:	O
case	O
'p'	O
:	O
libc_type	O
:	O
len	long
=	O
fmt	pointer
-	O
this_fmt	pointer
;	O
memcpy	function
(	O
alloc_fmt	pointer
,	O
this_fmt	pointer
,	O
len	long
)	O
;	O
alloc_fmt	pointer
[	O
len	long
++	O
]	O
=	O
'%'	O
;	O
alloc_fmt	pointer
[	O
len	long
++	O
]	O
=	O
'n'	O
;	O
alloc_fmt	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
TRACE	O
(	O
printf	function
(	O
"  scan \"%s\"\n"	pointer
,	O
alloc_fmt	pointer
)	O
;	O
if	O
(	O
funs	pointer
->	O
scan	pointer
==	O
(	O
gmp_doscan_scan_t	pointer
)	O
sscanf	function
)	O
printf	function
(	O
"	s=\"%s\"\n"	pointer
,	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
data	pointer
)	O
)	O
;	O
new_chars	int
=	O
-	O
1	int
;	O
if	O
(	O
param	struct
.	O
ignore	int
)	O
{	O
new_fields	int
=	O
(	O
*	O
funs	pointer
->	O
scan	pointer
)	O
(	O
data	pointer
,	O
alloc_fmt	pointer
,	O
&	O
new_chars	int
,	O
NULL	O
)	O
;	O
ASSERT	O
(	O
new_fields	int
==	O
0	int
||	O
new_fields	int
==	O
EOF	O
)	O
;	O
}	O
else	O
{	O
void	O
*	O
arg	pointer
=	O
va_arg	O
(	O
ap	pointer
,	O
void	O
*	O
)	O
;	O
new_fields	int
=	O
(	O
*	O
funs	pointer
->	O
scan	pointer
)	O
(	O
data	pointer
,	O
alloc_fmt	pointer
,	O
arg	pointer
,	O
&	O
new_chars	int
)	O
;	O
ASSERT	O
(	O
new_fields	int
==	O
0	int
||	O
new_fields	int
==	O
1	int
||	O
new_fields	int
==	O
EOF	O
)	O
;	O
if	O
(	O
new_fields	int
==	O
0	int
)	O
goto	O
done	O
;	O
if	O
(	O
new_fields	int
==	O
1	int
)	O
ASSERT	O
(	O
new_chars	int
!=	O
-	O
1	int
)	O
;	O
}	O
TRACE	O
(	O
printf	function
(	O
"  new_fields %d   new_chars %d\n"	pointer
,	O
new_fields	int
,	O
new_chars	int
)	O
)	O
;	O
if	O
(	O
new_fields	int
==	O
-	O
1	int
)	O
goto	O
eof_no_match	O
;	O
if	O
(	O
new_chars	int
==	O
-	O
1	int
)	O
goto	O
done	O
;	O
chars	int
+=	O
new_chars	int
;	O
(	O
*	O
funs	pointer
->	O
step	pointer
)	O
(	O
data	pointer
,	O
new_chars	int
)	O
;	O
increment_fields	O
:	O
if	O
(	O
!	O
param	struct
.	O
ignore	int
)	O
fields	int
++	O
;	O
goto	O
next	pointer
;	O
case	O
'd'	O
:	O
case	O
'u'	O
:	O
param	struct
.	O
base	int
=	O
10	int
;	O
goto	O
numeric	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
case	O
'i'	O
:	O
numeric	O
:	O
if	O
(	O
param	struct
.	O
type	char
!=	O
'F'	O
&&	O
param	struct
.	O
type	char
!=	O
'Q'	O
&&	O
param	struct
.	O
type	char
!=	O
'Z'	O
)	O
goto	O
libc_type	O
;	O
chars	int
+=	O
skip_white	function
(	O
funs	pointer
,	O
data	pointer
)	O
;	O
new_chars	int
=	O
gmpscan	function
(	O
funs	pointer
,	O
data	pointer
,	O
&	O
param	struct
,	O
param	struct
.	O
ignore	int
?	O
NULL	O
:	O
va_arg	O
(	O
ap	pointer
,	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
new_chars	int
==	O
-	O
2	int
)	O
goto	O
eof_no_match	O
;	O
if	O
(	O
new_chars	int
==	O
-	O
1	int
)	O
goto	O
done	O
;	O
ASSERT	O
(	O
new_chars	int
>=	O
0	int
)	O
;	O
chars	int
+=	O
new_chars	int
;	O
goto	O
increment_fields	O
;	O
case	O
'a'	O
:	O
case	O
'\''	O
:	O
break	O
;	O
case	O
'F'	O
:	O
case	O
'j'	O
:	O
case	O
'L'	O
:	O
case	O
'q'	O
:	O
case	O
'Q'	O
:	O
case	O
't'	O
:	O
case	O
'z'	O
:	O
case	O
'Z'	O
:	O
set_type	O
:	O
param	struct
.	O
type	char
=	O
fchar	char
;	O
break	O
;	O
case	O
'h'	O
:	O
if	O
(	O
param	struct
.	O
type	char
!=	O
'h'	O
)	O
goto	O
set_type	O
;	O
param	struct
.	O
type	char
=	O
'H'	O
;	O
break	O
;	O
goto	O
numeric	O
;	O
case	O
'l'	O
:	O
if	O
(	O
param	struct
.	O
type	char
!=	O
'l'	O
)	O
goto	O
set_type	O
;	O
param	struct
.	O
type	char
=	O
'L'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
!	O
param	struct
.	O
ignore	int
)	O
{	O
void	O
*	O
p	pointer
;	O
p	pointer
=	O
va_arg	O
(	O
ap	pointer
,	O
void	O
*	O
)	O
;	O
TRACE	O
(	O
printf	function
(	O
"  store %%n to %p\n"	pointer
,	O
p	pointer
)	O
)	O
;	O
switch	O
(	O
param	struct
.	O
type	char
)	O
{	O
case	O
'\0'	O
:	O
*	O
(	O
int	O
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'F'	O
:	O
mpf_set_si	O
(	O
(	O
mpf_ptr	pointer
)	O
p	pointer
,	O
(	O
long	O
)	O
chars	int
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
*	O
(	O
char	O
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'h'	O
:	O
*	O
(	O
short	O
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'j'	O
:	O
*	O
(	O
intmax_t	long
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'l'	O
:	O
*	O
(	O
long	O
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'q'	O
:	O
ASSERT_ALWAYS	O
(	O
sizeof	O
(	O
quad_t	long
)	O
==	O
sizeof	O
(	O
long	O
long	O
)	O
)	O
;	O
case	O
'L'	O
:	O
*	O
(	O
long	O
long	O
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'Q'	O
:	O
mpq_set_si	O
(	O
(	O
mpq_ptr	pointer
)	O
p	pointer
,	O
(	O
long	O
)	O
chars	int
,	O
1L	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
*	O
(	O
ptrdiff_t	long
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'z'	O
:	O
*	O
(	O
size_t	long
*	O
)	O
p	pointer
=	O
chars	int
;	O
break	O
;	O
case	O
'Z'	O
:	O
mpz_set_si	O
(	O
(	O
mpz_ptr	pointer
)	O
p	pointer
,	O
(	O
long	O
)	O
chars	int
)	O
;	O
break	O
;	O
default	O
:	O
ASSERT	O
(	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
goto	O
next	pointer
;	O
case	O
'o'	O
:	O
param	struct
.	O
base	int
=	O
8	int
;	O
goto	O
numeric	O
;	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
param	struct
.	O
base	int
=	O
16	int
;	O
goto	O
numeric	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
param	struct
.	O
width	int
=	O
0	int
;	O
do	O
{	O
param	struct
.	O
width	int
=	O
param	struct
.	O
width	int
*	O
10	int
+	O
(	O
fchar	char
-	O
'0'	O
)	O
;	O
fchar	char
=	O
*	O
fmt	pointer
++	O
;	O
}	O
while	O
(	O
isdigit	function
(	O
fchar	char
)	O
)	O
;	O
fmt	pointer
--	O
;	O
break	O
;	O
case	O
'*'	O
:	O
param	struct
.	O
ignore	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
ASSERT	O
(	O
0	int
)	O
;	O
goto	O
next	pointer
;	O
}	O
}	O
}	O
done	O
:	O
(	O
*	O
__gmp_free_func	pointer
)	O
(	O
alloc_fmt	pointer
,	O
alloc_fmt_size	long
)	O
;	O
return	O
fields	int
;	O
}	O
