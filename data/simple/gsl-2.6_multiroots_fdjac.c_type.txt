int	O
gsl_multiroot_fdjacobian	function
(	O
gsl_multiroot_function	struct
*	O
F	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
double	O
epsrel	double
,	O
gsl_matrix	struct
*	O
jacobian	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
const	O
size_t	long
m	pointer
=	O
f	pointer
->	O
size	long
;	O
const	O
size_t	long
n1	long
=	O
jacobian	pointer
->	O
size1	long
;	O
const	O
size_t	long
n2	long
=	O
jacobian	pointer
->	O
size2	long
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
m	pointer
!=	O
n1	long
||	O
n	int
!=	O
n2	long
)	O
{	O
GSL_ERROR	O
(	O
"function and jacobian are not conformant"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
gsl_vector	struct
*	O
x1	double
,	O
*	O
f1	pointer
;	O
x1	double
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
x1	double
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1 workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
f1	pointer
=	O
gsl_vector_alloc	function
(	O
m	pointer
)	O
;	O
if	O
(	O
f1	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f1 workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
x1	double
,	O
x	double
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
double	O
xj	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
j	long
)	O
;	O
double	O
dx	pointer
=	O
epsrel	double
*	O
fabs	function
(	O
xj	double
)	O
;	O
if	O
(	O
dx	pointer
==	O
0	int
)	O
{	O
dx	pointer
=	O
epsrel	double
;	O
}	O
gsl_vector_set	function
(	O
x1	double
,	O
j	long
,	O
xj	double
+	O
dx	pointer
)	O
;	O
{	O
int	O
f_stat	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
F	pointer
,	O
x1	double
,	O
f1	pointer
)	O
;	O
if	O
(	O
f_stat	int
!=	O
GSL_SUCCESS	int
)	O
{	O
status	int
=	O
GSL_EBADFUNC	int
;	O
break	O
;	O
}	O
}	O
gsl_vector_set	function
(	O
x1	double
,	O
j	long
,	O
xj	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
m	pointer
;	O
i	long
++	O
)	O
{	O
double	O
g1	double
=	O
gsl_vector_get	function
(	O
f1	pointer
,	O
i	long
)	O
;	O
double	O
g0	double
=	O
gsl_vector_get	function
(	O
f	pointer
,	O
i	long
)	O
;	O
gsl_matrix_set	function
(	O
jacobian	pointer
,	O
i	long
,	O
j	long
,	O
(	O
g1	double
-	O
g0	double
)	O
/	O
dx	pointer
)	O
;	O
}	O
{	O
gsl_vector_view	struct
col	struct
=	O
gsl_matrix_column	function
(	O
jacobian	pointer
,	O
j	long
)	O
;	O
int	O
null_col	int
=	O
gsl_vector_isnull	function
(	O
&	O
col	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
null_col	int
)	O
{	O
status	int
=	O
GSL_ESING	int
;	O
}	O
}	O
}	O
gsl_vector_free	function
(	O
x1	double
)	O
;	O
gsl_vector_free	function
(	O
f1	pointer
)	O
;	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
