STROB	struct
*	O
run_gpg_list_packets_command	function
(	O
unsigned	O
char	O
*	O
xbuffer	pointer
,	O
int	O
buffer_length	int
)	O
{	O
SHCMD	struct
*	O
detect_gpg	array
[	O
2	int
]	O
;	O
STROB	struct
*	O
detect_text	pointer
;	O
SHCMD	struct
*	O
detect_command	pointer
;	O
SHCMD	struct
*	O
recompress_command	pointer
;	O
int	O
fd	int
;	O
int	O
ret	int
;	O
detect_text	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
detect_command	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
detect_command	pointer
,	O
"gpg"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
detect_command	pointer
,	O
"--list-only"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
detect_command	pointer
,	O
"--list-packets"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
detect_command	pointer
,	O
"--status-fd"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
detect_command	pointer
,	O
"1"	pointer
)	O
;	O
shcmd_set_errfile	function
(	O
detect_command	pointer
,	O
"/dev/null"	pointer
)	O
;	O
detect_gpg	array
[	O
0	int
]	O
=	O
detect_command	pointer
;	O
detect_gpg	array
[	O
1	int
]	O
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
NULL	O
;	O
ret	int
=	O
uxfio_write	function
(	O
fd	int
,	O
(	O
void	O
*	O
)	O
xbuffer	pointer
,	O
(	O
size_t	long
)	O
buffer_length	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
return	O
NULL	O
;	O
swlib_exec_filter	function
(	O
detect_gpg	array
,	O
fd	int
,	O
detect_text	pointer
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
detect_text	pointer
)	O
<	O
2	int
)	O
return	O
NULL	O
;	O
uxfio_close	function
(	O
fd	int
)	O
;	O
shcmd_close	function
(	O
detect_command	pointer
)	O
;	O
return	O
detect_text	pointer
;	O
}	O
static	O
int	O
is_gpg_data	function
(	O
void	O
*	O
gp	pointer
)	O
{	O
if	O
(	O
memcmp	function
(	O
gp	pointer
,	O
(	O
void	O
*	O
)	O
(	O
UINFILE_MAGIC_gpg_sym	pointer
)	O
,	O
strlen	function
(	O
UINFILE_MAGIC_gpg_sym	pointer
)	O
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
memcmp	function
(	O
gp	pointer
,	O
(	O
void	O
*	O
)	O
(	O
UINFILE_MAGIC_gpg_enc1	pointer
)	O
,	O
strlen	function
(	O
UINFILE_MAGIC_gpg_enc1	pointer
)	O
)	O
==	O
0	int
)	O
return	O
2	int
;	O
if	O
(	O
memcmp	function
(	O
gp	pointer
,	O
(	O
void	O
*	O
)	O
(	O
UINFILE_MAGIC_gpg_enc2	pointer
)	O
,	O
strlen	function
(	O
UINFILE_MAGIC_gpg_enc2	pointer
)	O
)	O
==	O
0	int
)	O
return	O
3	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
is_gpg_packet	function
(	O
unsigned	O
char	O
*	O
gp	pointer
)	O
{	O
unsigned	O
char	O
b1	char
;	O
unsigned	O
char	O
b2	char
;	O
unsigned	O
char	O
packet_tag	char
;	O
b1	char
=	O
*	O
(	O
gp	pointer
+	O
0	int
)	O
;	O
b2	char
=	O
*	O
(	O
gp	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
b1	char
&	O
(	O
1	int
<<	O
7	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
b1	char
&	O
(	O
1	int
<<	O
6	int
)	O
)	O
{	O
packet_tag	char
=	O
(	O
b1	char
&	O
(	O
1	int
<<	O
5	int
)	O
)	O
*	O
32	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
4	int
)	O
)	O
*	O
16	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
3	int
)	O
)	O
*	O
8	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
2	int
)	O
)	O
*	O
4	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
1	int
)	O
)	O
*	O
2	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
0	int
)	O
)	O
*	O
1	int
;	O
}	O
else	O
{	O
packet_tag	char
=	O
(	O
b1	char
&	O
(	O
1	int
<<	O
5	int
)	O
)	O
*	O
8	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
4	int
)	O
)	O
*	O
4	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
3	int
)	O
)	O
*	O
2	int
+	O
(	O
b1	char
&	O
(	O
1	int
<<	O
2	int
)	O
)	O
*	O
1	int
;	O
}	O
if	O
(	O
packet_tag	char
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
packet_tag	char
==	O
1	int
||	O
packet_tag	char
==	O
3	int
||	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
does_have_name_version	function
(	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
UINFILE_E_DEBUG2	O
(	O
"buf=[%s]"	pointer
,	O
buf	pointer
)	O
;	O
s	pointer
=	O
strchr	function
(	O
buf	pointer
,	O
'-'	O
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
s	pointer
++	O
;	O
if	O
(	O
isdigit	function
(	O
(	O
int	O
)	O
(	O
*	O
s	pointer
)	O
)	O
&&	O
!	O
isdigit	function
(	O
(	O
int	O
)	O
(	O
*	O
buf	pointer
)	O
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"return 1"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"return 0"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
ar_get_size	function
(	O
unsigned	O
char	O
*	O
buf	pointer
,	O
int	O
*	O
value	pointer
)	O
{	O
int	O
result	pointer
;	O
struct	O
ar_hdr	struct
a	pointer
;	O
memcpy	function
(	O
&	O
a	pointer
,	O
buf	pointer
,	O
sizeof	O
(	O
a	pointer
)	O
)	O
;	O
if	O
(	O
memcmp	function
(	O
a	pointer
.	O
ar_fmag	array
,	O
ARFMAG	pointer
,	O
2	int
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
a	pointer
.	O
ar_fmag	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
*	O
value	pointer
=	O
swlib_atoi	function
(	O
(	O
char	O
*	O
)	O
(	O
a	pointer
.	O
ar_size	array
)	O
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
result	pointer
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
determine_if_has_leading_slash	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
char	O
*	O
buffer	array
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
if	O
(	O
uinformat	pointer
->	O
typeM	int
==	O
USTAR_FILEFORMAT	int
)	O
{	O
int	O
eoa	pointer
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
taru_make_header	function
(	O
)	O
;	O
taru_read_in_tar_header2	function
(	O
uinformat	pointer
->	O
taruM	pointer
,	O
file_hdr	pointer
,	O
-	O
1	int
,	O
buffer	array
,	O
&	O
eoa	pointer
,	O
0	int
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
*	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
==	O
'/'	O
)	O
ret	int
=	O
1	int
;	O
taru_free_header	function
(	O
file_hdr	pointer
)	O
;	O
}	O
else	O
if	O
(	O
uinformat	pointer
->	O
typeM	int
==	O
CPIO_POSIX_FILEFORMAT	int
)	O
{	O
if	O
(	O
*	O
(	O
buffer	array
+	O
70	int
)	O
==	O
'/'	O
)	O
ret	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
(	O
buffer	array
+	O
104	int
)	O
==	O
'/'	O
)	O
ret	int
=	O
1	int
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
uinfile_del_pid	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
pid	int
)	O
{	O
int	O
i	int
=	O
0	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
/	O
sizeof	O
(	O
int	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
==	O
pid	int
)	O
{	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
i	int
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
uinfile_add_pid	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
pid	int
)	O
{	O
int	O
i	int
=	O
0	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
/	O
sizeof	O
(	O
int	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
==	O
0	int
)	O
{	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
=	O
pid	int
;	O
return	O
0	int
;	O
}	O
i	int
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
char	O
*	O
uinfile_i_get_name	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
fd	int
,	O
int	O
format	pointer
,	O
int	O
*	O
retval	pointer
)	O
{	O
*	O
retval	pointer
=	O
taru_read_header	function
(	O
uinformat	pointer
->	O
taruM	pointer
,	O
file_hdr	pointer
,	O
fd	int
,	O
format	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
*	O
retval	pointer
<	O
0	int
)	O
return	O
NULL	O
;	O
return	O
swlib_strdup	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
}	O
static	O
int	O
uinfile_check_ieee_fd	function
(	O
int	O
fd	int
)	O
{	O
int	O
current_buftype	int
;	O
current_buftype	int
=	O
uxfio_fcntl	function
(	O
fd	int
,	O
UXFIO_F_GET_BUFTYPE	O
,	O
0	int
)	O
;	O
if	O
(	O
current_buftype	int
!=	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
&&	O
current_buftype	int
!=	O
UXFIO_BUFTYPE_MEM	int
&&	O
current_buftype	int
!=	O
UXFIO_BUFTYPE_FILE	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error, incorrect usage of uinfile_check_ieee\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
current_buftype	int
==	O
UXFIO_BUFTYPE_MEM	int
)	O
{	O
if	O
(	O
uxfio_fcntl	function
(	O
fd	int
,	O
UXFIO_F_SET_BUFFER_LENGTH	O
,	O
3072	int
)	O
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
return	O
fd	int
;	O
}	O
static	O
int	O
uinfile_detect_ieee	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
oflags	int
)	O
{	O
int	O
ret	int
;	O
int	O
nameretval	int
;	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
int	O
mm	int
=	O
0	int
;	O
int	O
lead_bytes	int
=	O
0	int
;	O
int	O
allow_generic_tar	int
=	O
oflags	int
&	O
UINFILE_DETECT_OTARALLOW	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
uinformat	pointer
->	O
file_hdrM	pointer
;	O
if	O
(	O
uinformat	pointer
->	O
swpathM	pointer
)	O
swpath_close	function
(	O
uinformat	pointer
->	O
swpathM	pointer
)	O
;	O
uinformat	pointer
->	O
swpathM	pointer
=	O
swpath_open	function
(	O
""	pointer
)	O
;	O
if	O
(	O
uinfile_check_ieee_fd	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uinfile: Incorrect uxfio fd settings.\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
while	O
(	O
mm	int
<	O
UINFILE_IEEE_MAX_LEADING_DIR	int
&&	O
(	O
(	O
name	pointer
=	O
uinfile_i_get_name	function
(	O
uinformat	pointer
,	O
file_hdr	pointer
,	O
uinformat	pointer
->	O
fdM	int
,	O
uinformat	pointer
->	O
typeM	int
,	O
&	O
nameretval	int
)	O
)	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
nameretval	int
<=	O
0	int
)	O
{	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_UNKNOWN	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: package format read error.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
uxfio_close	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
lead_bytes	int
+=	O
nameretval	int
;	O
UINFILE_E_DEBUG2	O
(	O
"parsing path [%s]"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
swpath_parse_path	function
(	O
uinformat	pointer
->	O
swpathM	pointer
,	O
name	pointer
)	O
<	O
0	int
)	O
{	O
if	O
(	O
allow_generic_tar	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uinfile: swpath_parse_path: error parsing: %s\n"	pointer
,	O
name	pointer
)	O
;	O
uxfio_close	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_UNKNOWN	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
fnmatch	function
(	O
"*/catalog/INDEX"	pointer
,	O
name	pointer
,	O
0	int
)	O
||	O
!	O
fnmatch	function
(	O
"catalog/INDEX"	pointer
,	O
name	pointer
,	O
0	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_IEEE	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
!=	O
CP_IFDIR	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
if	O
(	O
allow_generic_tar	int
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_UNKNOWN	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Package layout_version 1.0 not found\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
uxfio_close	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_UNKNOWN	int
;	O
break	O
;	O
}	O
}	O
mm	int
++	O
;	O
swbis_free	O
(	O
name	pointer
)	O
;	O
}	O
if	O
(	O
(	O
mm	int
>=	O
UINFILE_IEEE_MAX_LEADING_DIR	int
&&	O
(	O
allow_generic_tar	int
==	O
0	int
)	O
)	O
||	O
name	pointer
==	O
NULL	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
uinformat	pointer
->	O
layout_typeM	int
=	O
UINFILE_FILELAYOUT_UNKNOWN	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Package layout_version 1.0 not found.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
uxfio_close	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
uxfio_lseek	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
-	O
lead_bytes	int
,	O
UXFIO_SEEK_VCUR	int
)	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uxfio_lseek error in uinfile_handle_return 0015. off=%d ret=%d\n"	pointer
,	O
lead_bytes	int
,	O
ret	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
taruib_unread	function
(	O
lead_bytes	int
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
return	O
uinformat	pointer
->	O
fdM	int
;	O
}	O
static	O
int	O
uinfile_handle_return	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
oflags	int
,	O
int	O
uxfio_buffer_type	int
)	O
{	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
uinformat	pointer
->	O
file_hdrM	pointer
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"flags = %d"	pointer
,	O
oflags	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"uxfio_buffer_type = %d"	pointer
,	O
uxfio_buffer_type	int
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"HERE current_pos_=%d"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"uxfio_lseek error in uinfile_handle_return 0001. fd=%d\n"	pointer
,	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
taruib_set_datalen	function
(	O
0	int
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
if	O
(	O
oflags	int
&	O
UINFILE_DETECT_FORCEUNIXFD	O
&&	O
uinformat	pointer
->	O
fdM	int
>=	O
UXFIO_FD_MIN	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE: forking to make unix fd"	pointer
)	O
;	O
uxfio_fcntl	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
1	int
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
swlib_fork_to_make_unixfd	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
&	O
(	O
uinformat	pointer
->	O
blockmask_	struct
)	O
,	O
&	O
(	O
uinformat	pointer
->	O
defaultmask_	struct
)	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_DETECT_FORCEUXFIOFD	O
&&	O
uinformat	pointer
->	O
fdM	int
<	O
UXFIO_FD_MIN	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE: opendup with buffer type"	pointer
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
uxfio_opendup	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
uxfio_buffer_type	int
)	O
;	O
uxfio_fcntl	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
UXFIO_F_SET_CANSEEK	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_DETECT_FORCE_SEEK	O
&&	O
uxfio_espipe	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
&&	O
uinformat	pointer
->	O
fdM	int
<	O
UXFIO_FD_MIN	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE: 2:opendup with buffer type"	pointer
)	O
;	O
uinformat	pointer
->	O
fdM	int
=	O
uxfio_opendup	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
uxfio_buffer_type	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_DETECT_FORCE_SEEK	O
&&	O
uxfio_espipe	function
(	O
uinformat	pointer
->	O
fdM	int
)	O
&&	O
uinformat	pointer
->	O
fdM	int
>=	O
UXFIO_FD_MIN	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE: setting to buf type mem"	pointer
)	O
;	O
uxfio_fcntl	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
UXFIO_F_SET_BUFTYPE	O
,	O
UXFIO_BUFTYPE_MEM	int
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE: non of the above"	pointer
)	O
;	O
;	O
}	O
if	O
(	O
uinformat	pointer
->	O
fdM	int
>=	O
UXFIO_FD_MIN	int
)	O
{	O
UINFILE_E_DEBUG2	O
(	O
"setting uxfio_buffer_type %d"	pointer
,	O
uxfio_buffer_type	int
)	O
;	O
uxfio_fcntl	function
(	O
uinformat	pointer
->	O
fdM	int
,	O
UXFIO_F_SET_BUFTYPE	O
,	O
uxfio_buffer_type	int
)	O
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"returning fd=%d"	pointer
,	O
uinformat	pointer
->	O
fdM	int
)	O
;	O
return	O
uinformat	pointer
->	O
fdM	int
;	O
}	O
static	O
int	O
uinfile_i_open	function
(	O
char	O
*	O
filename	pointer
,	O
int	O
oflag	int
,	O
mode_t	int
mode	int
,	O
UINFORMAT	struct
*	O
*	O
uinformat	pointer
,	O
int	O
oflags	int
,	O
int	O
xdupfd	int
,	O
int	O
uxfio_buffer_type	int
,	O
char	O
*	O
slack_name	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
i	int
;	O
int	O
fd	int
,	O
pipe_fd	array
[	O
2	int
]	O
,	O
dupfd	int
;	O
int	O
refd	int
;	O
int	O
zpipe	array
[	O
2	int
]	O
;	O
unsigned	O
long	O
tar_hdr_sum	long
;	O
pid_t	int
pid	int
;	O
char	O
xbuffer	pointer
[	O
1025	int
]	O
;	O
char	O
gzmagic	array
[	O
]	O
=	O
UINFILE_MAGIC_gz	pointer
;	O
char	O
Zmagic	array
[	O
]	O
=	O
UINFILE_MAGIC_Z	pointer
;	O
char	O
rpmmagic	array
[	O
]	O
=	O
UINFILE_MAGIC_rpm	pointer
;	O
char	O
bz2magic	array
[	O
]	O
=	O
UINFILE_MAGIC_bz2	pointer
;	O
char	O
lzmamagic	array
[	O
]	O
=	O
UINFILE_MAGIC_lzma	pointer
;	O
char	O
xzmamagic	array
[	O
]	O
=	O
UINFILE_MAGIC_xz	pointer
;	O
char	O
debmagic	array
[	O
]	O
=	O
UINFILE_MAGIC_deb	O
;	O
char	O
*	O
zcat_command	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
pid_t	int
a_pid	int
;	O
intmax_t	long
pump_amount	long
=	O
-	O
1	int
;	O
int	O
zret	int
=	O
0	int
;	O
int	O
forcetar	int
;	O
int	O
doieee	int
;	O
int	O
dodebcontrol	int
;	O
int	O
dodebcontext	int
;	O
int	O
dodebdata	int
;	O
int	O
doarb	int
;	O
int	O
dounrpminstall	int
;	O
int	O
douncpio	int
;	O
int	O
donative	int
;	O
int	O
peeklen	int
;	O
int	O
deb_gz_size	int
=	O
0	int
;	O
int	O
deb_gz_offset	int
=	O
0	int
;	O
int	O
val1	int
;	O
int	O
val2	int
;	O
int	O
do_recompress	int
;	O
SHCMD	struct
*	O
rezip	pointer
;	O
UINFILE_E_DEBUG	O
(	O
"BEGIN ****************************** "	pointer
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"xdupfd = %d"	pointer
,	O
xdupfd	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"slack_name = %s"	pointer
,	O
slack_name	pointer
)	O
;	O
dodebcontrol	int
=	O
oflags	int
&	O
UINFILE_DETECT_DEB_CONTROL	O
;	O
dodebcontext	int
=	O
oflags	int
&	O
UINFILE_DETECT_DEB_CONTEXT	O
;	O
dodebdata	int
=	O
oflags	int
&	O
UINFILE_DETECT_DEB_DATA	O
;	O
do_recompress	int
=	O
oflags	int
&	O
UINFILE_DETECT_RECOMPRESS	O
;	O
UINFILE_E_DEBUG2	O
(	O
"dodebdata=%d"	pointer
,	O
dodebdata	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"dodebcontext=%d"	pointer
,	O
dodebcontext	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"dodebcontrol=%d"	pointer
,	O
dodebcontrol	int
)	O
;	O
forcetar	int
=	O
oflags	int
&	O
UINFILE_DETECT_OTARFORCE	O
;	O
doieee	int
=	O
oflags	int
&	O
UINFILE_DETECT_IEEE	O
;	O
doarb	int
=	O
oflags	int
&	O
UINFILE_DETECT_ARBITRARY_DATA	O
;	O
dounrpminstall	int
=	O
oflags	int
&	O
UINFILE_DETECT_UNRPM	O
;	O
douncpio	int
=	O
oflags	int
&	O
UINFILE_DETECT_UNCPIO	O
;	O
donative	int
=	O
oflags	int
&	O
UINFILE_DETECT_NATIVE	O
;	O
UINFILE_E_DEBUG2	O
(	O
"forcetar=%d"	pointer
,	O
forcetar	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"donative=%d"	pointer
,	O
donative	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"dounrpminstall=%d"	pointer
,	O
dounrpminstall	int
)	O
;	O
if	O
(	O
dodebdata	int
)	O
{	O
;	O
}	O
else	O
{	O
*	O
uinformat	pointer
=	O
(	O
UINFORMAT	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
UINFORMAT	struct
)	O
)	O
;	O
if	O
(	O
!	O
(	O
*	O
uinformat	pointer
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
(	O
*	O
uinformat	pointer
)	O
->	O
underlying_fdM	int
=	O
-	O
1	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
=	O
0	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
file_hdrM	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
verboseM	int
=	O
0	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
has_leading_slashM	int
=	O
0	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_NA	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
UNKNOWN_FILEFORMAT	int
;	O
memset	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
type_revisionM	array
,	O
'\0'	O
,	O
sizeof	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
type_revisionM	array
)	O
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
swpathM	pointer
=	O
swpath_open	function
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
taruM	pointer
=	O
taru_create	function
(	O
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
slackheaderM	pointer
=	O
NULL	O
;	O
UINFILE_E_DEBUG	O
(	O
"seting deb_file_fd = -1"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
deb_file_fd_	int
=	O
-	O
1	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
=	O
0	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
pathname_prefixM	pointer
=	O
NULL	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
=	O
vplob_open	function
(	O
)	O
;	O
if	O
(	O
slack_name	pointer
)	O
(	O
*	O
uinformat	pointer
)	O
->	O
slack_nameM	pointer
=	O
strdup	function
(	O
slack_name	pointer
)	O
;	O
else	O
(	O
*	O
uinformat	pointer
)	O
->	O
slack_nameM	pointer
=	O
NULL	O
;	O
sigemptyset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
blockmask_	struct
)	O
)	O
;	O
sigemptyset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
)	O
;	O
sigaddset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
blockmask_	struct
)	O
,	O
SIGALRM	int
)	O
;	O
sigaddset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
,	O
SIGTERM	int
)	O
;	O
sigaddset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
,	O
SIGINT	int
)	O
;	O
sigaddset	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
,	O
SIGPIPE	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
pidlistM	array
)	O
/	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
i	int
++	O
)	O
(	O
*	O
uinformat	pointer
)	O
->	O
pidlistM	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
filename	pointer
==	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
||	O
(	O
!	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE PIPE"	pointer
)	O
;	O
if	O
(	O
filename	pointer
==	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
dupfd	int
=	O
xdupfd	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
dupfd	int
=	O
STDIN_FILENO	int
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"HERE dupfd = %d"	pointer
,	O
dupfd	int
)	O
;	O
val1	int
=	O
dupfd	int
<	O
UXFIO_FD_MIN	int
;	O
if	O
(	O
dupfd	int
<	O
UXFIO_FD_MIN	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE:  lseek\'ing on dupfd"	pointer
)	O
;	O
val2	int
=	O
lseek	function
(	O
dupfd	int
,	O
0L	int
,	O
SEEK_CUR	int
)	O
;	O
}	O
else	O
{	O
val2	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
val1	int
&&	O
val2	int
==	O
-	O
1	int
)	O
{	O
UINFILE_E_DEBUG3	O
(	O
"HERE %d %s"	pointer
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
errno	O
==	O
ESPIPE	int
)	O
{	O
fd	int
=	O
uxfio_opendup	function
(	O
dupfd	int
,	O
uxfio_buffer_type	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uinfile.c: uxfio_opendup failed\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
perror	function
(	O
"uinfile: fatal error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
ret	int
=	O
val2	int
;	O
if	O
(	O
ret	int
>=	O
0	int
)	O
{	O
UINFILE_E_DEBUG2	O
(	O
"HERE current_pos_=%d"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
=	O
ret	int
;	O
}	O
else	O
{	O
}	O
fd	int
=	O
dupfd	int
;	O
}	O
(	O
*	O
uinformat	pointer
)	O
->	O
did_dupeM	int
=	O
1	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE REG FILE"	pointer
)	O
;	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE error.\n"	pointer
)	O
;	O
return	O
fd	int
;	O
}	O
dupfd	int
=	O
fd	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
did_dupeM	int
=	O
0	int
;	O
}	O
refd	int
=	O
fd	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
underlying_fdM	int
=	O
refd	int
;	O
LABEL_REREAD	O
:	O
(	O
*	O
uinformat	pointer
)	O
->	O
fdM	int
=	O
refd	int
;	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
==	O
DEB_FILEFORMAT	int
&&	O
dodebdata	int
==	O
0	int
)	O
{	O
return	O
refd	int
;	O
}	O
if	O
(	O
dodebdata	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
peeklen	int
=	O
SARHDR	int
+	O
1	int
+	O
strlen	function
(	O
UINFILE_MAGIC_gz	pointer
)	O
;	O
}	O
else	O
if	O
(	O
doarb	int
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
peeklen	int
=	O
UINFILE_I_INIT_READ_SIZE	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
peeklen	int
=	O
MIN_PEEK_LEN	int
;	O
}	O
memset	function
(	O
xbuffer	pointer
,	O
'\0'	O
,	O
sizeof	O
(	O
xbuffer	pointer
)	O
)	O
;	O
UINFILE_E_DEBUG3	O
(	O
"HERE refd=%d  peeklen=%d"	pointer
,	O
refd	int
,	O
peeklen	int
)	O
;	O
if	O
(	O
doarb	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
uxfio_read	function
(	O
refd	int
,	O
xbuffer	pointer
,	O
peeklen	int
)	O
)	O
<	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"ERROR HERE"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error in read of arbitrary data: request=%d return=%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
peeklen	int
,	O
ret	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
ret	int
=	O
taru_tape_buffered_read	function
(	O
refd	int
,	O
xbuffer	pointer
,	O
peeklen	int
)	O
)	O
!=	O
peeklen	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"ERROR HERE"	pointer
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error in initial read. request=%d return=%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
peeklen	int
,	O
ret	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
if	O
(	O
doarb	int
==	O
0	int
)	O
{	O
if	O
(	O
0	int
)	O
{	O
;	O
}	O
else	O
if	O
(	O
dodebdata	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in dodebdata"	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"type: DEB (data)"	pointer
)	O
;	O
ret	int
=	O
ar_get_size	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
,	O
&	O
val1	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
ret	int
=	O
ar_get_size	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
+	O
1	int
,	O
&	O
val1	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ar archive error %s: at line %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"in dodebdata with 1 byte of padding"	pointer
)	O
;	O
deb_gz_offset	int
=	O
SARHDR	int
+	O
1	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
=	O
strlen	function
(	O
UINFILE_MAGIC_gz	pointer
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"in dodebdata with no padding"	pointer
)	O
;	O
deb_gz_offset	int
=	O
SARHDR	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
=	O
strlen	function
(	O
UINFILE_MAGIC_gz	pointer
)	O
+	O
1	int
;	O
;	O
}	O
memcpy	function
(	O
(	O
void	O
*	O
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
deb_peeked_bytesM	array
)	O
,	O
xbuffer	pointer
+	O
SARHDR	int
,	O
peeklen	int
-	O
SARHDR	int
)	O
;	O
deb_gz_size	int
=	O
val1	int
;	O
UINFILE_E_DEBUG2	O
(	O
"deb_gz_size is %d"	pointer
,	O
val1	int
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
refd	int
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ar archive error %s: at line %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
=	O
ret	int
;	O
UINFILE_E_DEBUG2	O
(	O
"current_pos_ is %d"	pointer
,	O
ret	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
rpmmagic	array
,	O
4	int
)	O
&&	O
!	O
forcetar	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: RPM"	pointer
)	O
;	O
if	O
(	O
dounrpminstall	int
==	O
0	int
&&	O
doieee	int
==	O
0	int
)	O
{	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
RPMRHS_FILEFORMAT	int
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
,	O
uxfio_buffer_type	int
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
if	O
(	O
dounrpminstall	int
)	O
{	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_RPM	int
;	O
}	O
else	O
if	O
(	O
doieee	int
&&	O
dounrpminstall	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: try using the --allow-rpm or --any-format options\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
SWLIB_EXCEPTION	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
douncpio	int
&&	O
(	O
(	O
strncmp	function
(	O
xbuffer	pointer
,	O
"0707"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
&&	O
(	O
1	int
)	O
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: 0707"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_CPIO	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
xbuffer	pointer
,	O
"0707"	pointer
,	O
4	int
)	O
&&	O
(	O
1	int
)	O
&&	O
!	O
forcetar	int
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
xbuffer	pointer
,	O
"070702"	pointer
,	O
6	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: 070702"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
CPIO_CRC_FILEFORMAT	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
xbuffer	pointer
,	O
"070701"	pointer
,	O
6	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: 070701"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
CPIO_NEWC_FILEFORMAT	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
xbuffer	pointer
,	O
"070707"	pointer
,	O
6	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: 070707"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
CPIO_POSIX_FILEFORMAT	int
;	O
}	O
else	O
{	O
SWLIB_EXCEPTION	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
(	O
*	O
uinformat	pointer
)	O
->	O
has_leading_slashM	int
=	O
determine_if_has_leading_slash	function
(	O
*	O
uinformat	pointer
,	O
xbuffer	pointer
)	O
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
,	O
uxfio_buffer_type	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
&&	O
doieee	int
)	O
{	O
ret	int
=	O
uinfile_detect_ieee	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
gzmagic	array
,	O
2	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: COMPRESSED_GZ"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GZ	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
bz2magic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: COMPRESSED_BZ2"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_BZ2	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
lzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: COMPRESSED_LZMA"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_LZMA	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
xzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: COMPRESSED_XZ"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_XZ	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
Zmagic	array
,	O
2	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: COMPRESSED_Z"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_Z	int
;	O
}	O
else	O
if	O
(	O
is_gpg_data	function
(	O
(	O
void	O
*	O
)	O
xbuffer	pointer
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: GPG Encrypted"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GPG	int
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
UINFILE_MAGIC_gpg_armor	pointer
,	O
strlen	function
(	O
UINFILE_MAGIC_gpg_armor	pointer
)	O
)	O
==	O
0	int
||	O
is_gpg_packet	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
)	O
||	O
0	int
)	O
{	O
STROB	struct
*	O
detect_text	pointer
;	O
detect_text	pointer
=	O
run_gpg_list_packets_command	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
,	O
peeklen	int
)	O
;	O
if	O
(	O
detect_text	pointer
)	O
strob_close	function
(	O
detect_text	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"type: GPG Encrypted"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GPG	int
;	O
}	O
else	O
if	O
(	O
donative	int
==	O
0	int
&&	O
dounrpminstall	int
==	O
0	int
&&	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
debmagic	array
,	O
strlen	function
(	O
UINFILE_MAGIC_deb	O
)	O
)	O
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: DEB"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_DEB	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
DEB_FILEFORMAT	int
;	O
UINFILE_E_DEBUG2	O
(	O
"seting deb_file_fd = %d"	pointer
,	O
dupfd	int
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
deb_file_fd_	int
=	O
dupfd	int
;	O
strncpy	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
type_revisionM	array
,	O
(	O
(	O
char	O
*	O
)	O
xbuffer	pointer
)	O
+	O
68	int
,	O
4	int
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
type_revisionM	array
[	O
4	int
]	O
=	O
'\0'	O
;	O
ret	int
=	O
ar_get_size	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
+	O
8	int
,	O
&	O
val1	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
||	O
val1	int
!=	O
4	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: deb format bad size value\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
deb_gz_offset	int
=	O
SARMAG	int
+	O
SARHDR	int
+	O
val1	int
+	O
SARHDR	int
;	O
if	O
(	O
peeklen	int
<	O
deb_gz_offset	int
+	O
LENGTH_OF_MAGIC	int
)	O
{	O
ret	int
=	O
taru_tape_buffered_read	function
(	O
refd	int
,	O
xbuffer	pointer
+	O
peeklen	int
,	O
deb_gz_offset	int
+	O
LENGTH_OF_MAGIC	int
-	O
peeklen	int
)	O
;	O
if	O
(	O
ret	int
!=	O
deb_gz_offset	int
+	O
LENGTH_OF_MAGIC	int
-	O
peeklen	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error in second initial read. request=%d return=%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
peeklen	int
,	O
ret	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
peeklen	int
+=	O
(	O
(	O
deb_gz_offset	int
+	O
LENGTH_OF_MAGIC	int
)	O
-	O
peeklen	int
)	O
;	O
}	O
if	O
(	O
memcmp	function
(	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
)	O
+	O
deb_gz_offset	int
,	O
(	O
void	O
*	O
)	O
gzmagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: gz magic not found for control.tar.gz\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
ar_get_size	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
+	O
SARMAG	int
+	O
SARHDR	int
+	O
val1	int
,	O
&	O
val2	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: bad size conversion\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
uxfio_lseek	function
(	O
refd	int
,	O
(	O
off_t	long
)	O
deb_gz_offset	int
,	O
SEEK_SET	int
)	O
!=	O
deb_gz_offset	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: uxfio_lseek error. 001.3 pos=%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
deb_gz_size	int
=	O
val2	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
=	O
deb_gz_offset	int
;	O
;	O
}	O
else	O
if	O
(	O
doieee	int
==	O
0	int
&&	O
donative	int
==	O
0	int
&&	O
dodebcontext	int
==	O
0	int
&&	O
dodebcontrol	int
==	O
0	int
&&	O
dounrpminstall	int
==	O
0	int
&&	O
dodebdata	int
==	O
0	int
&&	O
does_have_name_version	function
(	O
xbuffer	pointer
)	O
)	O
{	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
path_prefix	pointer
;	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
name	pointer
;	O
int	O
found	int
;	O
int	O
xeoa	int
;	O
UINFILE_E_DEBUG	O
(	O
"type: plain source tarball"	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
taru_tape_buffered_read	function
(	O
refd	int
,	O
xbuffer	pointer
+	O
peeklen	int
,	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
peeklen	int
)	O
;	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
(	O
int	O
)	O
peeklen	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
peeklen	int
+=	O
(	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
peeklen	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
ret	int
=	O
taru_read_in_tar_header2	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
taruM	pointer
,	O
(	O
*	O
uinformat	pointer
)	O
->	O
file_hdrM	pointer
,	O
-	O
1	int
,	O
xbuffer	pointer
,	O
&	O
xeoa	int
,	O
0	int
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
TARRECORDSIZE	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
taru_print_tar_ls_list	function
(	O
tmp	pointer
,	O
(	O
*	O
uinformat	pointer
)	O
->	O
file_hdrM	pointer
,	O
LS_LIST_VERBOSE_L2	O
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
slackheaderM	pointer
=	O
malloc	function
(	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
slackheaderM	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
memcpy	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
slackheaderM	pointer
,	O
xbuffer	pointer
,	O
TARRECORDSIZE	int
)	O
;	O
path_prefix	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
uxfio_read	function
(	O
refd	int
,	O
xbuffer	pointer
,	O
TARRECORDSIZE	int
)	O
)	O
>	O
0	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
"read error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
refd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swvarfs	pointer
=	O
swvarfs_opendup	function
(	O
refd	int
,	O
UINFILE_DETECT_NATIVE	O
,	O
(	O
mode_t	int
)	O
0	int
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
swvarfs	pointer
==	O
NULL	O
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
found	int
=	O
0	int
;	O
while	O
(	O
(	O
name	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
&&	O
strlen	function
(	O
name	pointer
)	O
)	O
{	O
if	O
(	O
path_prefix	pointer
&&	O
strob_strlen	function
(	O
path_prefix	pointer
)	O
<	O
4	int
)	O
{	O
strob_strcpy	function
(	O
path_prefix	pointer
,	O
name	pointer
)	O
;	O
swlib_unix_dirtrunc	function
(	O
path_prefix	pointer
)	O
;	O
}	O
if	O
(	O
path_prefix	pointer
&&	O
strob_strlen	function
(	O
path_prefix	pointer
)	O
>=	O
4	int
&&	O
strstr	function
(	O
name	pointer
,	O
strob_str	function
(	O
path_prefix	pointer
)	O
)	O
!=	O
name	pointer
)	O
{	O
strob_close	function
(	O
path_prefix	pointer
)	O
;	O
path_prefix	pointer
=	O
NULL	O
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"||||||| [%s]"	pointer
,	O
name	pointer
)	O
;	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swvarfs_close	function
(	O
swvarfs	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
refd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_NOT	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
UINFILE_DETECT_FORCEUXFIOFD	O
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"returning fd=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
path_prefix	pointer
&&	O
strob_strlen	function
(	O
path_prefix	pointer
)	O
<	O
4	int
)	O
{	O
strob_close	function
(	O
path_prefix	pointer
)	O
;	O
path_prefix	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
path_prefix	pointer
)	O
{	O
(	O
*	O
uinformat	pointer
)	O
->	O
pathname_prefixM	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
path_prefix	pointer
)	O
)	O
;	O
strob_close	function
(	O
path_prefix	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no constant leading pathname prefix in tarball\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"returning ret=%d"	pointer
,	O
ret	int
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
if	O
(	O
slack_name	pointer
&&	O
doieee	int
==	O
0	int
&&	O
donative	int
==	O
0	int
&&	O
dodebcontext	int
==	O
0	int
&&	O
dodebcontrol	int
==	O
0	int
&&	O
dodebdata	int
==	O
0	int
&&	O
dounrpminstall	int
==	O
0	int
&&	O
memcmp	function
(	O
xbuffer	pointer
,	O
UINFILE_MAGIC_binary_tarball	pointer
,	O
strlen	function
(	O
UINFILE_MAGIC_binary_tarball	pointer
)	O
)	O
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG2	O
(	O
"type: binary_tarball, probably slackware: slack_name=%s"	pointer
,	O
slack_name	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_SLACK_WITH_NAME	int
;	O
}	O
else	O
if	O
(	O
doieee	int
==	O
0	int
&&	O
donative	int
==	O
0	int
&&	O
dodebcontext	int
==	O
0	int
&&	O
dodebcontrol	int
==	O
0	int
&&	O
dodebdata	int
==	O
0	int
&&	O
dounrpminstall	int
==	O
0	int
&&	O
memcmp	function
(	O
xbuffer	pointer
,	O
UINFILE_MAGIC_binary_tarball	pointer
,	O
strlen	function
(	O
UINFILE_MAGIC_binary_tarball	pointer
)	O
)	O
==	O
0	int
)	O
{	O
int	O
xeoa	int
;	O
UINFILE_E_DEBUG	O
(	O
"type: binary_tarball"	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
taru_tape_buffered_read	function
(	O
refd	int
,	O
xbuffer	pointer
+	O
peeklen	int
,	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
peeklen	int
)	O
;	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
(	O
int	O
)	O
peeklen	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
peeklen	int
+=	O
(	O
sizeof	O
(	O
xbuffer	pointer
)	O
-	O
peeklen	int
)	O
;	O
ret	int
=	O
taru_read_in_tar_header2	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
taruM	pointer
,	O
(	O
*	O
uinformat	pointer
)	O
->	O
file_hdrM	pointer
,	O
-	O
1	int
,	O
xbuffer	pointer
,	O
&	O
xeoa	int
,	O
0	int
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
ret	int
!=	O
TARRECORDSIZE	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
memcmp	function
(	O
xbuffer	pointer
+	O
TARRECORDSIZE	int
,	O
UINFILE_MAGIC_slack	pointer
"/"	pointer
,	O
strlen	function
(	O
UINFILE_MAGIC_slack	pointer
"/"	pointer
)	O
)	O
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_NOT	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
SLACK_FILEFORMAT	int
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
UINFILE_DETECT_FORCEUXFIOFD	O
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
{	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
name	pointer
;	O
int	O
found	int
;	O
UINFILE_E_DEBUG	O
(	O
"Looking for install directory"	pointer
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
uxfio_read	function
(	O
refd	int
,	O
xbuffer	pointer
,	O
TARRECORDSIZE	int
)	O
)	O
>	O
0	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
"read error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
uxfio_lseek	function
(	O
refd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
swvarfs	pointer
=	O
swvarfs_opendup	function
(	O
refd	int
,	O
UINFILE_DETECT_NATIVE	O
,	O
(	O
mode_t	int
)	O
0	int
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
swvarfs	pointer
==	O
NULL	O
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
found	int
=	O
0	int
;	O
while	O
(	O
(	O
name	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
&&	O
strlen	function
(	O
name	pointer
)	O
)	O
{	O
UINFILE_E_DEBUG2	O
(	O
"||||||| [%s]"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
UINFILE_MAGIC_slack	pointer
"/"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
"./"	pointer
UINFILE_MAGIC_slack	pointer
"/"	pointer
)	O
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"found install directory"	pointer
)	O
;	O
found	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
refd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
swvarfs_close	function
(	O
swvarfs	pointer
)	O
;	O
if	O
(	O
found	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"FOUND SLACK"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_NOT	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
SLACK_FILEFORMAT	int
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
UINFILE_DETECT_FORCEUXFIOFD	O
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"returning fd=%d"	pointer
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
else	O
{	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
;	O
UINFILE_E_DEBUG	O
(	O
"type: arbitrary tar"	pointer
)	O
;	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_NA	O
)	O
{	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_NOT	int
;	O
}	O
if	O
(	O
taru_tape_buffered_read	function
(	O
refd	int
,	O
xbuffer	pointer
+	O
peeklen	int
,	O
512	int
-	O
peeklen	int
)	O
!=	O
(	O
512	int
-	O
peeklen	int
)	O
)	O
return	O
-	O
1	int
;	O
peeklen	int
+=	O
(	O
512	int
-	O
peeklen	int
)	O
;	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
xbuffer	pointer
;	O
taru_otoul	function
(	O
tar_hdr	pointer
->	O
chksum	array
,	O
&	O
tar_hdr_sum	long
)	O
;	O
if	O
(	O
strncmp	function
(	O
xbuffer	pointer
+	O
257	int
,	O
"ustar"	pointer
,	O
5	int
)	O
==	O
0	int
||	O
tar_hdr_sum	long
==	O
taru_tar_checksum	function
(	O
xbuffer	pointer
)	O
)	O
{	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_DEB	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"Found Compressed DEB"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
DEB_FILEFORMAT	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
has_leading_slashM	int
=	O
0	int
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
,	O
uxfio_buffer_type	int
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"Found USTAR_FILEFORMAT"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
typeM	int
=	O
USTAR_FILEFORMAT	int
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
has_leading_slashM	int
=	O
determine_if_has_leading_slash	function
(	O
*	O
uinformat	pointer
,	O
xbuffer	pointer
)	O
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
,	O
uxfio_buffer_type	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
&&	O
doieee	int
)	O
{	O
int	O
ret2	int
;	O
ret2	int
=	O
uinfile_detect_ieee	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
)	O
;	O
if	O
(	O
ret2	int
<	O
0	int
&&	O
dounrpminstall	int
)	O
{	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_RPM	int
;	O
}	O
else	O
if	O
(	O
ret2	int
<	O
0	int
)	O
{	O
ret	int
=	O
ret2	int
;	O
}	O
else	O
{	O
ret	int
=	O
ret2	int
;	O
}	O
}	O
}	O
return	O
ret	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"TAR"	pointer
)	O
;	O
if	O
(	O
dounrpminstall	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"Setting ztypeM to UINFILE_COMPRESSED_RPM"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_RPM	int
;	O
}	O
else	O
{	O
uxfio_close	function
(	O
refd	int
)	O
;	O
swbis_free	O
(	O
*	O
uinformat	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"Unrecognized tar layout"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: uinfile: unrecognized tar variant format\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
gzmagic	array
,	O
2	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GZ	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
bz2magic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_BZ2	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
lzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_LZMA	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
xzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_XZ	int
;	O
}	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
Zmagic	array
,	O
2	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_Z	int
;	O
}	O
else	O
if	O
(	O
is_gpg_data	function
(	O
(	O
void	O
*	O
)	O
xbuffer	pointer
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: GPG Encrypted"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GPG	int
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
xbuffer	pointer
,	O
(	O
void	O
*	O
)	O
UINFILE_MAGIC_gpg_armor	pointer
,	O
strlen	function
(	O
UINFILE_MAGIC_gpg_armor	pointer
)	O
)	O
==	O
0	int
||	O
is_gpg_packet	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
)	O
||	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"type: GPG Encrypted"	pointer
)	O
;	O
STROB	struct
*	O
detect_text	pointer
;	O
detect_text	pointer
=	O
run_gpg_list_packets_command	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
xbuffer	pointer
,	O
peeklen	int
)	O
;	O
if	O
(	O
detect_text	pointer
)	O
strob_close	function
(	O
detect_text	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"type: GPG Encrypted"	pointer
)	O
;	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
=	O
UINFILE_COMPRESSED_GPG	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uinfile_handle_return	function
(	O
*	O
uinformat	pointer
,	O
oflags	int
,	O
uxfio_buffer_type	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
UINFILE_E_DEBUG	O
(	O
"HERE its compressed !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"	pointer
)	O
;	O
{	O
SHCMD	struct
*	O
unzip	array
[	O
2	int
]	O
;	O
unzip	array
[	O
0	int
]	O
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
unzip	array
[	O
1	int
]	O
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
UINFILE_E_DEBUG2	O
(	O
"HERE current_pos_=%d"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
if	O
(	O
!	O
dodebdata	int
)	O
{	O
if	O
(	O
uxfio_lseek	function
(	O
refd	int
,	O
(	O
off_t	long
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
,	O
SEEK_SET	int
)	O
!=	O
(	O
off_t	long
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: uxfio_lseek error. 001.1 pos=%d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_Z	int
)	O
{	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"compress"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-cd"	pointer
)	O
;	O
if	O
(	O
do_recompress	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"recompress: compress"	pointer
)	O
;	O
rezip	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"recompress: xz"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"compress"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-c"	pointer
)	O
;	O
vplob_add	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
,	O
rezip	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_DEB	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in deb code"	pointer
)	O
;	O
if	O
(	O
memcmp	function
(	O
(	O
(	O
char	O
*	O
)	O
(	O
xbuffer	pointer
)	O
)	O
+	O
deb_gz_offset	int
,	O
gzmagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
==	O
0	int
)	O
{	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"gzip"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
(	O
(	O
char	O
*	O
)	O
(	O
xbuffer	pointer
)	O
)	O
+	O
deb_gz_offset	int
,	O
bz2magic	array
,	O
LENGTH_OF_MAGIC	int
)	O
==	O
0	int
)	O
{	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"bzip2"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
(	O
(	O
char	O
*	O
)	O
(	O
xbuffer	pointer
)	O
)	O
+	O
deb_gz_offset	int
,	O
lzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
==	O
0	int
)	O
{	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"lzma"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
(	O
(	O
char	O
*	O
)	O
(	O
xbuffer	pointer
)	O
)	O
+	O
deb_gz_offset	int
,	O
xzmamagic	array
,	O
LENGTH_OF_MAGIC	int
)	O
==	O
0	int
)	O
{	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"xz"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unsupported compression in a .deb file %s: at line %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"leaving deb code"	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_GZ	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in gzip code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"gzip"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
if	O
(	O
do_recompress	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"recompress: gzip"	pointer
)	O
;	O
rezip	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_set_exec_function	function
(	O
rezip	pointer
,	O
"execvp"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"gzip"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-c"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-9"	pointer
)	O
;	O
vplob_add	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
,	O
rezip	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_BZ2	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in bzip code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"bzip2"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
if	O
(	O
do_recompress	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"recompress: bzip2"	pointer
)	O
;	O
rezip	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_set_exec_function	function
(	O
rezip	pointer
,	O
"execvp"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"bzip2"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-c"	pointer
)	O
;	O
vplob_add	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
,	O
rezip	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_LZMA	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in lzma code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"lzma"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
if	O
(	O
do_recompress	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"recompress: lzma"	pointer
)	O
;	O
rezip	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_set_exec_function	function
(	O
rezip	pointer
,	O
"execvp"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"lzma"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-z"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-c"	pointer
)	O
;	O
vplob_add	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
,	O
rezip	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_XZ	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in xz code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"xz"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
if	O
(	O
do_recompress	int
)	O
{	O
rezip	pointer
=	O
shcmd_open	function
(	O
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"recompress: xz"	pointer
)	O
;	O
shcmd_set_exec_function	function
(	O
rezip	pointer
,	O
"execvp"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"xz"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-z"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
rezip	pointer
,	O
"-c"	pointer
)	O
;	O
vplob_add	function
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
recompress_commandsM	pointer
,	O
rezip	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_GPG	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in gpg code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
SWGPG_GPG_BIN	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--decrypt"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--use-agent"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--no-verbose"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-o"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_CPIO	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in unrpm code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
SWBISLIBEXECDIR	O
"/swbis/arf2arf"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-H"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"ustar"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_SLACK_WITH_NAME	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in UINFILE_COMPRESSED_SLACK_WITH_NAME"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
SWBISBINDIR	O
"/swpackage"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--to-swbis"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-s"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"-"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--slackware-pkg-name"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
slack_name	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--catalog-owner=0"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--catalog-group=0"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"@-"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_RPM	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"in unrpm code"	pointer
)	O
;	O
unzip	array
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
SWBISBINDIR	O
"/swpackage"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--to-swbis"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--catalog-owner=0"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"--catalog-group=0"	pointer
)	O
;	O
shcmd_add_arg	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"@-"	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"commpression format not supported by uinfile_open.\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
pipe	function
(	O
pipe_fd	array
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
uxfio_close	function
(	O
refd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
pid	int
=	O
swndfork	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
blockmask_	struct
)	O
,	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"fork failed.\n"	pointer
)	O
;	O
uxfio_close	function
(	O
refd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
uinfile_add_pid	function
(	O
*	O
uinformat	pointer
,	O
(	O
int	O
)	O
pid	int
)	O
;	O
close	pointer
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
refd	int
=	O
uxfio_opendup	function
(	O
pipe_fd	array
[	O
0	int
]	O
,	O
uxfio_buffer_type	int
)	O
;	O
if	O
(	O
dodebdata	int
)	O
return	O
refd	int
;	O
dounrpminstall	int
=	O
0	int
;	O
UINFILE_E_DEBUG	O
(	O
"GOTO'ING !!!!!!!!!!!!!!!!!!!!!!!!!! "	pointer
)	O
;	O
goto	O
LABEL_REREAD	O
;	O
}	O
else	O
{	O
int	O
jlxx	int
;	O
int	O
b_closefd	int
=	O
-	O
1	int
;	O
char	O
*	O
*	O
argvector	pointer
;	O
close	pointer
(	O
pipe_fd	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
pidlistM	array
)	O
/	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
i	int
++	O
)	O
(	O
*	O
uinformat	pointer
)	O
->	O
pidlistM	array
[	O
i	int
]	O
=	O
0	int
;	O
if	O
(	O
unzip	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
shcmd_set_dstfd	function
(	O
unzip	array
[	O
0	int
]	O
,	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
zpipe	array
[	O
0	int
]	O
=	O
-	O
1	int
;	O
zpipe	array
[	O
1	int
]	O
=	O
-	O
1	int
;	O
if	O
(	O
1	int
&&	O
(	O
refd	int
>=	O
UXFIO_FD_MIN	int
||	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_DEB	int
)	O
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
if	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
==	O
UINFILE_COMPRESSED_DEB	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
pump_amount	long
=	O
(	O
intmax_t	long
)	O
deb_gz_size	int
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE"	pointer
)	O
;	O
pump_amount	long
=	O
-	O
1	int
;	O
}	O
pipe	function
(	O
zpipe	array
)	O
;	O
a_pid	int
=	O
swndfork	function
(	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
blockmask_	struct
)	O
,	O
&	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
defaultmask_	struct
)	O
)	O
;	O
if	O
(	O
a_pid	int
>	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
uxfio_close	function
(	O
refd	int
)	O
;	O
close	pointer
(	O
zpipe	array
[	O
1	int
]	O
)	O
;	O
uinfile_add_pid	function
(	O
*	O
uinformat	pointer
,	O
(	O
int	O
)	O
a_pid	int
)	O
;	O
}	O
else	O
if	O
(	O
a_pid	int
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
close	pointer
(	O
zpipe	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
(	O
1	int
||	O
(	O
*	O
uinformat	pointer
)	O
->	O
ztypeM	int
!=	O
UINFILE_COMPRESSED_DEB	int
)	O
&&	O
dodebdata	int
==	O
0	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE at UXFIO_F_ARM_AUTO_DISABLE"	pointer
)	O
;	O
uxfio_fcntl	function
(	O
refd	int
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
1	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"HERE current_pos_=%d"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
refd	int
,	O
(	O
off_t	long
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
current_pos_	int
)	O
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uxfio_lseek error in child 002.\n"	pointer
)	O
;	O
}	O
if	O
(	O
dodebdata	int
&&	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
>	O
0	int
)	O
{	O
if	O
(	O
uxfio_write	function
(	O
zpipe	array
[	O
1	int
]	O
,	O
(	O
void	O
*	O
)	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
deb_peeked_bytesM	array
)	O
+	O
deb_gz_offset	int
-	O
SARHDR	int
)	O
,	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
)	O
!=	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: ar archive error %s: at line %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
_exit	function
(	O
1	int
)	O
;	O
}	O
}	O
taru_pump_amount2	function
(	O
zpipe	array
[	O
1	int
]	O
,	O
refd	int
,	O
pump_amount	long
-	O
(	O
(	O
*	O
uinformat	pointer
)	O
->	O
n_deb_peeked_bytesM	int
)	O
,	O
-	O
1	int
)	O
;	O
close	pointer
(	O
zpipe	array
[	O
1	int
]	O
)	O
;	O
uxfio_close	function
(	O
refd	int
)	O
;	O
_exit	function
(	O
0	int
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
29	int
)	O
;	O
}	O
shcmd_set_srcfd	function
(	O
unzip	array
[	O
0	int
]	O
,	O
zpipe	array
[	O
0	int
]	O
)	O
;	O
b_closefd	int
=	O
zpipe	array
[	O
0	int
]	O
;	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
}	O
else	O
{	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
shcmd_set_srcfd	function
(	O
unzip	array
[	O
0	int
]	O
,	O
refd	int
)	O
;	O
b_closefd	int
=	O
refd	int
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
shcmd_set_exec_function	function
(	O
unzip	array
[	O
0	int
]	O
,	O
"execvp"	pointer
)	O
;	O
swgp_signal	function
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
shcmd_cmdvec_exec	function
(	O
unzip	array
)	O
;	O
jlxx	int
=	O
shcmd_cmdvec_wait	function
(	O
unzip	array
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
zret	int
=	O
shcmd_get_exitval	function
(	O
unzip	array
[	O
0	int
]	O
)	O
;	O
UINFILE_E_DEBUG	O
(	O
"HERE "	pointer
)	O
;	O
argvector	pointer
=	O
shcmd_get_argvector	function
(	O
unzip	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
argvector	pointer
&&	O
argvector	pointer
[	O
0	int
]	O
&&	O
strcmp	function
(	O
argvector	pointer
[	O
0	int
]	O
,	O
"gzip"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
zret	int
==	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Warning: gzip exited with a warning.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
zret	int
=	O
63	int
;	O
}	O
else	O
if	O
(	O
zret	int
==	O
SHCMD_UNSET_EXITVAL	int
)	O
{	O
zret	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
zret	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Error: gzip exited with an error: pid=%d exit value=%d.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
(	O
int	O
)	O
(	O
unzip	array
[	O
0	int
]	O
->	O
pid_	int
)	O
,	O
(	O
int	O
)	O
zret	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
zret	int
&&	O
zret	int
!=	O
SHCMD_UNSET_EXITVAL	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: decompression process exiting with value %d.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
zret	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
" uinfile: internal error 84.001\n"	pointer
)	O
;	O
}	O
if	O
(	O
b_closefd	int
>=	O
0	int
)	O
{	O
uxfio_close	function
(	O
b_closefd	int
)	O
;	O
}	O
close	pointer
(	O
pipe_fd	array
[	O
1	int
]	O
)	O
;	O
while	O
(	O
uinfile_wait_on_all_pid	function
(	O
*	O
uinformat	pointer
,	O
WNOHANG	int
)	O
<	O
0	int
)	O
{	O
sleep	function
(	O
1	int
)	O
;	O
}	O
_exit	function
(	O
zret	int
)	O
;	O
}	O
if	O
(	O
unzip	array
[	O
0	int
]	O
)	O
{	O
shcmd_close	function
(	O
unzip	array
[	O
0	int
]	O
)	O
;	O
}	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
" uinfile: internal error 85.002\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
uinfile_open	function
(	O
char	O
*	O
filename	pointer
,	O
mode_t	int
mode	int
,	O
UINFORMAT	struct
*	O
*	O
uinformat	pointer
,	O
int	O
oflags	int
)	O
{	O
int	O
ret	int
;	O
int	O
buftype	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
buftype	int
=	O
uinfile_decode_buftype	function
(	O
oflags	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
ret	int
=	O
uinfile_i_open	function
(	O
filename	pointer
,	O
-	O
1	int
,	O
mode	int
,	O
uinformat	pointer
,	O
oflags	int
,	O
-	O
1	int
,	O
buftype	int
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
uinfile_open_with_name	function
(	O
char	O
*	O
filename	pointer
,	O
mode_t	int
mode	int
,	O
UINFORMAT	struct
*	O
*	O
uinformat	pointer
,	O
int	O
oflags	int
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
buftype	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
buftype	int
=	O
uinfile_decode_buftype	function
(	O
oflags	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
ret	int
=	O
uinfile_i_open	function
(	O
filename	pointer
,	O
-	O
1	int
,	O
mode	int
,	O
uinformat	pointer
,	O
oflags	int
,	O
-	O
1	int
,	O
buftype	int
,	O
name	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
uinfile_opendup_with_name	function
(	O
int	O
xdupfd	int
,	O
mode_t	int
mode	int
,	O
UINFORMAT	struct
*	O
*	O
uinformat	pointer
,	O
int	O
oflags	int
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
buftype	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
uinfile_opendup	function
(	O
xdupfd	int
,	O
mode	int
,	O
uinformat	pointer
,	O
oflags	int
)	O
;	O
buftype	int
=	O
uinfile_decode_buftype	function
(	O
oflags	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
ret	int
=	O
uinfile_i_open	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
-	O
1	int
,	O
mode	int
,	O
uinformat	pointer
,	O
oflags	int
,	O
xdupfd	int
,	O
buftype	int
,	O
name	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
uinfile_opendup	function
(	O
int	O
xdupfd	int
,	O
mode_t	int
mode	int
,	O
UINFORMAT	struct
*	O
*	O
uinformat	pointer
,	O
int	O
oflags	int
)	O
{	O
int	O
ret	int
;	O
int	O
buftype	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
buftype	int
=	O
uinfile_decode_buftype	function
(	O
oflags	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
ret	int
=	O
uinfile_i_open	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
-	O
1	int
,	O
mode	int
,	O
uinformat	pointer
,	O
oflags	int
,	O
xdupfd	int
,	O
buftype	int
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
uinfile_wait_on_pid	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
pid	int
,	O
int	O
flag	int
,	O
int	O
*	O
status	int
)	O
{	O
int	O
ret	int
;	O
UINFILE_E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Entering uinfile_wait_on_pid: pid=%d options=%d.\n"	pointer
,	O
pid	int
,	O
flag	int
)	O
;	O
UINFILE_E_DEBUG2	O
(	O
"waiting on pid %d"	pointer
,	O
pid	int
)	O
;	O
ret	int
=	O
waitpid	function
(	O
(	O
pid_t	int
)	O
pid	int
,	O
status	int
,	O
flag	int
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uinformat: waitpid(pid=%d, options=%d) returned %d, status=%d\n"	pointer
,	O
pid	int
,	O
flag	int
,	O
ret	int
,	O
*	O
status	int
)	O
;	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uinformat: clearing pid %d\n"	pointer
,	O
pid	int
)	O
;	O
uinfile_del_pid	function
(	O
uinformat	pointer
,	O
pid	int
)	O
;	O
}	O
UINFILE_E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
uinfile_wait_on_all_pid	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
flag	int
)	O
{	O
int	O
retval	pointer
=	O
0	int
;	O
int	O
ret	int
;	O
int	O
i	int
=	O
0	int
;	O
int	O
m	int
;	O
int	O
status	int
;	O
int	O
gotgzwarn	int
=	O
0	int
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Entering uinfile_wait_on_all_pid\n"	pointer
)	O
;	O
while	O
(	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
/	O
sizeof	O
(	O
int	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
>	O
0	int
)	O
{	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Processing pid %d.\n"	pointer
,	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
)	O
;	O
m	int
=	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
;	O
ret	int
=	O
uinfile_wait_on_pid	function
(	O
uinformat	pointer
,	O
(	O
uinformat	pointer
->	O
pidlistM	array
)	O
[	O
i	int
]	O
,	O
flag	int
,	O
&	O
status	int
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uinformat: uinfile_wait_on_pid [%d] returned %d\n"	pointer
,	O
m	int
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
&&	O
flag	int
==	O
WNOHANG	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
if	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
{	O
if	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
63	int
)	O
{	O
gotgzwarn	int
=	O
63	int
;	O
}	O
else	O
{	O
retval	pointer
++	O
;	O
}	O
}	O
}	O
else	O
{	O
retval	pointer
++	O
;	O
}	O
}	O
}	O
i	int
++	O
;	O
}	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uinformat: uinfile_wait_on_all_pid returning 0.\n"	pointer
)	O
;	O
return	O
gotgzwarn	int
+	O
retval	pointer
;	O
}	O
int	O
uinfile_decode_buftype	function
(	O
int	O
oflags	int
,	O
int	O
v	int
)	O
{	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_UXFIO_BUFTYPE_DYNAMIC_MEM	O
)	O
)	O
{	O
v	int
=	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
;	O
}	O
else	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_UXFIO_BUFTYPE_FILE	O
)	O
)	O
{	O
v	int
=	O
UXFIO_BUFTYPE_FILE	int
;	O
}	O
else	O
if	O
(	O
(	O
oflags	int
&	O
UINFILE_UXFIO_BUFTYPE_MEM	O
)	O
)	O
{	O
v	int
=	O
UXFIO_BUFTYPE_MEM	int
;	O
}	O
UINFILE_E_DEBUG2	O
(	O
"buffer type is %d"	pointer
,	O
v	int
)	O
;	O
return	O
v	int
;	O
}	O
int	O
uinfile_get_layout_type	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
return	O
uinformat	pointer
->	O
layout_typeM	int
;	O
}	O
int	O
uinfile_get_has_leading_slash	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
return	O
uinformat	pointer
->	O
has_leading_slashM	int
;	O
}	O
int	O
uinfile_get_ztype	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
return	O
uinformat	pointer
->	O
ztypeM	int
;	O
}	O
int	O
uinfile_get_type	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
return	O
uinformat	pointer
->	O
typeM	int
;	O
}	O
SWPATH	struct
*	O
uinfile_get_swpath	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
return	O
uinformat	pointer
->	O
swpathM	pointer
;	O
}	O
void	O
uinfile_set_type	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
,	O
int	O
type	enum
)	O
{	O
uinformat	pointer
->	O
typeM	int
=	O
type	enum
;	O
}	O
int	O
uinfile_close	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
int	O
ret	int
;	O
UINFILE_E_DEBUG	O
(	O
"entering"	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
uinformat	pointer
->	O
file_hdrM	pointer
)	O
;	O
ret	int
=	O
uinfile_wait_on_all_pid	function
(	O
uinformat	pointer
,	O
0	int
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
verboseM	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Leaving uinfile_close with status %d\n"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
taruM	pointer
)	O
taru_delete	function
(	O
uinformat	pointer
->	O
taruM	pointer
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
swpathM	pointer
)	O
swpath_close	function
(	O
uinformat	pointer
->	O
swpathM	pointer
)	O
;	O
if	O
(	O
uinformat	pointer
->	O
slack_nameM	pointer
)	O
free	function
(	O
uinformat	pointer
->	O
slack_nameM	pointer
)	O
;	O
swbis_free	O
(	O
uinformat	pointer
)	O
;	O
UINFILE_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
SHCMD	struct
*	O
*	O
uinfile_get_recompress_vector	function
(	O
UINFORMAT	struct
*	O
uinformat	pointer
)	O
{	O
VPLOB	union
*	O
vplob	pointer
=	O
uinformat	pointer
->	O
recompress_commandsM	pointer
;	O
if	O
(	O
vplob_get_nstore	function
(	O
vplob	pointer
)	O
==	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
SHCMD	struct
*	O
*	O
ret	int
;	O
ret	int
=	O
(	O
SHCMD	struct
*	O
*	O
)	O
vplob_get_list	function
(	O
vplob	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
return	O
NULL	O
;	O
}	O
