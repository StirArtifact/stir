struct	O
_maildir_message	struct
{	O
struct	O
_amd_message	struct
amd_message	struct
;	O
char	O
*	O
dir	pointer
;	O
char	O
*	O
file_name	pointer
;	O
unsigned	O
long	O
uid	int
;	O
}	O
;	O
static	O
struct	O
info_map	struct
{	O
char	O
letter	char
;	O
int	O
flag	int
;	O
}	O
info_map	struct
[	O
]	O
=	O
{	O
{	O
'D'	O
,	O
MU_ATTRIBUTE_DRAFT	int
}	O
,	O
{	O
'F'	O
,	O
MU_ATTRIBUTE_FLAGGED	int
}	O
,	O
{	O
'P'	O
,	O
0	int
}	O
,	O
{	O
'R'	O
,	O
MU_ATTRIBUTE_READ	int
}	O
,	O
{	O
'S'	O
,	O
MU_ATTRIBUTE_SEEN	int
}	O
,	O
{	O
'T'	O
,	O
MU_ATTRIBUTE_DELETED	int
}	O
,	O
{	O
'a'	O
,	O
MU_ATTRIBUTE_ANSWERED	int
}	O
,	O
}	O
;	O
static	O
int	O
flags_to_info	function
(	O
int	O
flags	int
,	O
char	O
*	O
buf	pointer
)	O
{	O
struct	O
info_map	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
info_map	struct
;	O
p	pointer
<	O
info_map	struct
+	O
info_map_size	O
;	O
p	pointer
++	O
)	O
if	O
(	O
p	pointer
->	O
flag	int
&	O
flags	int
)	O
*	O
buf	pointer
++	O
=	O
p	pointer
->	O
letter	char
;	O
*	O
buf	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
info_to_flags	function
(	O
char	O
*	O
buf	pointer
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
struct	O
info_map	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
info_map	struct
;	O
p	pointer
<	O
info_map	struct
+	O
info_map_size	O
;	O
p	pointer
++	O
)	O
if	O
(	O
strchr	function
(	O
buf	pointer
,	O
p	pointer
->	O
letter	char
)	O
)	O
flags	int
|=	O
p	pointer
->	O
flag	int
;	O
return	O
flags	int
;	O
}	O
static	O
char	O
*	O
maildir_name_info_ptr	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
&&	O
memcmp	function
(	O
p	pointer
+	O
1	int
,	O
"2,"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
return	O
p	pointer
+	O
3	int
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
maildir_message_cmp	function
(	O
struct	O
_amd_message	struct
*	O
a	pointer
,	O
struct	O
_amd_message	struct
*	O
b	pointer
)	O
{	O
char	O
*	O
name_a	pointer
,	O
*	O
name_b	pointer
;	O
unsigned	O
long	O
na	long
=	O
strtoul	function
(	O
(	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
a	pointer
)	O
->	O
file_name	pointer
,	O
&	O
name_a	pointer
,	O
10	int
)	O
;	O
unsigned	O
long	O
nb	long
=	O
strtoul	function
(	O
(	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
b	pointer
)	O
->	O
file_name	pointer
,	O
&	O
name_b	pointer
,	O
10	int
)	O
;	O
int	O
rc	int
;	O
if	O
(	O
na	long
>	O
nb	long
)	O
return	O
1	int
;	O
if	O
(	O
na	long
<	O
nb	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
name_a	pointer
&&	O
!	O
name_b	pointer
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
name_a	pointer
)	O
{	O
if	O
(	O
name_b	pointer
)	O
return	O
-	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
for	O
(	O
;	O
*	O
name_a	pointer
&&	O
*	O
name_a	pointer
!=	O
':'	O
&&	O
*	O
name_b	pointer
&&	O
*	O
name_b	pointer
!=	O
':'	O
;	O
name_a	pointer
++	O
,	O
name_b	pointer
++	O
)	O
if	O
(	O
(	O
rc	int
=	O
(	O
*	O
name_a	pointer
-	O
*	O
name_b	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
(	O
*	O
name_a	pointer
==	O
':'	O
||	O
*	O
name_a	pointer
==	O
0	int
)	O
&&	O
(	O
*	O
name_b	pointer
==	O
':'	O
||	O
*	O
name_b	pointer
==	O
0	int
)	O
)	O
return	O
0	int
;	O
return	O
*	O
name_a	pointer
-	O
*	O
name_b	pointer
;	O
}	O
void	O
msg_free	pointer
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
mp	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amsg	pointer
;	O
free	function
(	O
mp	pointer
->	O
file_name	pointer
)	O
;	O
}	O
char	O
*	O
maildir_gethostname	function
(	O
)	O
{	O
char	O
hostname	array
[	O
256	int
]	O
;	O
char	O
*	O
hp	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
s	pointer
;	O
if	O
(	O
gethostname	function
(	O
hostname	array
,	O
sizeof	O
hostname	array
)	O
<	O
0	int
)	O
strcpy	function
(	O
hostname	array
,	O
"localhost"	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
0	int
,	O
p	pointer
=	O
hostname	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
||	O
*	O
p	pointer
==	O
':'	O
)	O
s	pointer
+=	O
4	int
;	O
if	O
(	O
s	pointer
)	O
{	O
char	O
*	O
q	pointer
;	O
hp	pointer
=	O
malloc	function
(	O
strlen	function
(	O
hostname	array
)	O
+	O
s	pointer
+	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
hostname	array
,	O
q	pointer
=	O
hp	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'/'	O
:	O
memcpy	function
(	O
q	pointer
,	O
"\\057"	pointer
,	O
4	int
)	O
;	O
q	pointer
+=	O
4	int
;	O
break	O
;	O
case	O
':'	O
:	O
memcpy	function
(	O
q	pointer
,	O
"\\072"	pointer
,	O
4	int
)	O
;	O
q	pointer
+=	O
4	int
;	O
break	O
;	O
default	O
:	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
*	O
q	pointer
=	O
0	int
;	O
}	O
else	O
hp	pointer
=	O
strdup	function
(	O
hostname	array
)	O
;	O
return	O
hp	pointer
;	O
}	O
int	O
read_random	function
(	O
void	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
int	O
fd	int
=	O
open	function
(	O
"/dev/urandom"	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
rc	int
=	O
read	pointer
(	O
fd	int
,	O
buf	pointer
,	O
size	long
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
rc	int
!=	O
size	long
;	O
}	O
int	O
maildir_mkfilename	function
(	O
const	O
char	O
*	O
directory	pointer
,	O
const	O
char	O
*	O
suffix	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
ret_name	pointer
)	O
{	O
size_t	long
size	long
=	O
strlen	function
(	O
directory	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
suffix	pointer
)	O
+	O
1	int
;	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
name	pointer
)	O
size	long
+=	O
1	int
+	O
strlen	function
(	O
name	pointer
)	O
;	O
tmp	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
errno	O
;	O
sprintf	function
(	O
tmp	pointer
,	O
"%s/%s"	pointer
,	O
directory	pointer
,	O
suffix	pointer
)	O
;	O
if	O
(	O
name	pointer
)	O
{	O
strcat	function
(	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
tmp	pointer
,	O
name	pointer
)	O
;	O
}	O
*	O
ret_name	pointer
=	O
tmp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mk_info_filename	function
(	O
char	O
*	O
directory	pointer
,	O
char	O
*	O
suffix	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
flags	int
,	O
char	O
*	O
*	O
ret_name	pointer
)	O
{	O
char	O
fbuf	array
[	O
info_map_size	O
+	O
1	int
]	O
;	O
char	O
*	O
tmp	pointer
;	O
int	O
namelen	int
;	O
tmp	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
namelen	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
else	O
namelen	int
=	O
tmp	pointer
-	O
name	pointer
;	O
flags_to_info	function
(	O
flags	int
,	O
fbuf	array
)	O
;	O
return	O
mu_asprintf	function
(	O
ret_name	pointer
,	O
"%s/%s/%*.*s:2,%s"	pointer
,	O
directory	pointer
,	O
suffix	pointer
,	O
namelen	int
,	O
namelen	int
,	O
name	pointer
,	O
fbuf	array
)	O
;	O
}	O
char	O
*	O
maildir_uniq	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
int	O
fd	int
)	O
{	O
char	O
buffer	pointer
[	O
PATH_MAX	int
]	O
;	O
int	O
ind	int
=	O
0	int
;	O
char	O
*	O
hostname	array
=	O
maildir_gethostname	function
(	O
)	O
;	O
struct	O
timeval	struct
tv	struct
;	O
unsigned	O
long	O
n	int
;	O
struct	O
stat	struct
st	pointer
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
FMT	O
(	O
"%lu"	pointer
,	O
tv	struct
.	O
tv_sec	long
)	O
;	O
COPY	O
(	O
"."	pointer
)	O
;	O
if	O
(	O
read_random	function
(	O
&	O
n	int
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
)	O
)	O
PFX	O
(	O
'R'	O
,	O
"%lX"	pointer
,	O
n	int
)	O
;	O
if	O
(	O
fd	int
>	O
0	int
&&	O
fstat	function
(	O
fd	int
,	O
&	O
st	pointer
)	O
==	O
0	int
)	O
{	O
PFX	O
(	O
'I'	O
,	O
"%lX"	pointer
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
.	O
st_ino	long
)	O
;	O
PFX	O
(	O
'V'	O
,	O
"%lX"	pointer
,	O
(	O
unsigned	O
long	O
)	O
st	pointer
.	O
st_dev	long
)	O
;	O
}	O
PFX	O
(	O
'M'	O
,	O
"%lu"	pointer
,	O
tv	struct
.	O
tv_usec	long
)	O
;	O
PFX	O
(	O
'P'	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
PFX	O
(	O
'Q'	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
amd	pointer
->	O
msg_count	long
)	O
;	O
PFX	O
(	O
'.'	O
,	O
"%s"	pointer
,	O
hostname	array
)	O
;	O
free	function
(	O
hostname	array
)	O
;	O
buffer	pointer
[	O
ind	int
]	O
=	O
0	int
;	O
return	O
strdup	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
int	O
maildir_cur_message_name	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
,	O
char	O
*	O
*	O
pname	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amsg	pointer
;	O
return	O
maildir_mkfilename	function
(	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
,	O
msg	pointer
->	O
dir	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
pname	pointer
)	O
;	O
}	O
static	O
int	O
maildir_new_message_name	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
,	O
int	O
flags	int
,	O
int	O
expunge	int
,	O
char	O
*	O
*	O
pname	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amsg	pointer
;	O
if	O
(	O
expunge	int
&&	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	int
)	O
)	O
{	O
*	O
pname	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
msg	pointer
->	O
dir	pointer
,	O
CURSUF	pointer
)	O
==	O
0	int
)	O
return	O
mk_info_filename	function
(	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
,	O
CURSUF	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
flags	int
,	O
pname	pointer
)	O
;	O
else	O
return	O
maildir_mkfilename	function
(	O
amsg	pointer
->	O
amd	pointer
->	O
name	pointer
,	O
msg	pointer
->	O
dir	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
pname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
maildir_msg_free	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
mp	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amsg	pointer
;	O
if	O
(	O
mp	pointer
)	O
free	function
(	O
mp	pointer
->	O
file_name	pointer
)	O
;	O
}	O
static	O
int	O
maildir_message_uid	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
puid	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
mp	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
puid	pointer
)	O
*	O
puid	pointer
=	O
mp	pointer
->	O
uid	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
maildir_next_uid	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
_amd_get_message	function
(	O
amd	pointer
,	O
amd	pointer
->	O
msg_count	long
)	O
;	O
return	O
(	O
msg	pointer
?	O
msg	pointer
->	O
uid	int
:	O
0	int
)	O
+	O
1	int
;	O
}	O
static	O
void	O
maildir_delete_file	function
(	O
char	O
*	O
dirname	pointer
,	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
name	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
dirname	pointer
,	O
filename	pointer
,	O
NULL	O
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"maildir: failed to create file name: %s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
st	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
time	struct
(	O
NULL	O
)	O
-	O
st	pointer
.	O
st_atime	O
>	O
36	int
*	O
3600	int
)	O
remove	function
(	O
name	pointer
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
}	O
static	O
int	O
maildir_opendir	function
(	O
DIR	struct
*	O
*	O
dir	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
permissions	int
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
*	O
dir	pointer
=	O
opendir	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
*	O
dir	pointer
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
if	O
(	O
mkdir	function
(	O
name	pointer
,	O
permissions	int
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't create directory %s: %s"	pointer
,	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
dir	pointer
=	O
opendir	function
(	O
name	pointer
)	O
;	O
if	O
(	O
*	O
dir	pointer
)	O
return	O
0	int
;	O
}	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't open directory %s: %s"	pointer
,	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_create	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
int	O
flags	int
)	O
{	O
static	O
char	O
*	O
dirs	array
[	O
]	O
=	O
{	O
TMPSUF	pointer
,	O
NEWSUF	pointer
,	O
CURSUF	pointer
}	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
DIR	struct
*	O
dir	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
tmpname	pointer
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
dirs	array
[	O
i	int
]	O
,	O
NULL	O
,	O
&	O
tmpname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_opendir	function
(	O
&	O
dir	pointer
,	O
tmpname	pointer
,	O
PERMS	int
|	O
mu_stream_flags_to_mode	function
(	O
amd	pointer
->	O
mailbox	pointer
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
free	function
(	O
tmpname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
closedir	function
(	O
dir	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_msg_init	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
struct	O
_amd_message	struct
*	O
amm	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amm	pointer
;	O
char	O
*	O
name	pointer
,	O
*	O
fname	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
i	int
;	O
int	O
rc	int
;	O
name	pointer
=	O
maildir_uniq	function
(	O
amd	pointer
,	O
-	O
1	int
)	O
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
NEWSUF	pointer
,	O
name	pointer
,	O
&	O
fname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
name	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
msg	pointer
->	O
dir	pointer
=	O
TMPSUF	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NTRIES	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
stat	struct
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
<	O
0	int
&&	O
errno	O
==	O
ENOENT	int
)	O
{	O
msg	pointer
->	O
uid	int
=	O
amd	pointer
->	O
next_uid	pointer
(	O
amd	pointer
)	O
;	O
msg	pointer
->	O
file_name	pointer
=	O
name	pointer
;	O
free	function
(	O
fname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
"cannot stat %s: %s"	pointer
,	O
fname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
sleep	function
(	O
2	int
)	O
;	O
}	O
free	function
(	O
fname	pointer
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
return	O
EAGAIN	int
;	O
}	O
static	O
int	O
maildir_msg_finish_delivery	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
struct	O
_amd_message	struct
*	O
amm	pointer
,	O
const	O
mu_message_t	pointer
orig_msg	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amm	pointer
;	O
char	O
*	O
oldname	pointer
,	O
*	O
newname	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
flags	int
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
TMPSUF	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
&	O
oldname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_message_get_attribute	function
(	O
orig_msg	pointer
,	O
&	O
attr	pointer
)	O
==	O
0	int
&&	O
mu_attribute_is_read	function
(	O
attr	pointer
)	O
&&	O
mu_attribute_get_flags	function
(	O
attr	pointer
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
{	O
msg	pointer
->	O
dir	pointer
=	O
CURSUF	pointer
;	O
rc	int
=	O
mk_info_filename	function
(	O
amd	pointer
->	O
name	pointer
,	O
CURSUF	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
flags	int
,	O
&	O
newname	pointer
)	O
;	O
}	O
else	O
{	O
msg	pointer
->	O
dir	pointer
=	O
NEWSUF	pointer
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
NEWSUF	pointer
,	O
msg	pointer
->	O
file_name	pointer
,	O
&	O
newname	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
unlink	function
(	O
newname	pointer
)	O
&&	O
errno	O
!=	O
ENOENT	int
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't unlink %s: %s"	pointer
,	O
newname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
link	function
(	O
oldname	pointer
,	O
newname	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
unlink	function
(	O
oldname	pointer
)	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't unlink %s: %s"	pointer
,	O
oldname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"renaming %s to %s failed: %s"	pointer
,	O
oldname	pointer
,	O
newname	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
free	function
(	O
oldname	pointer
)	O
;	O
free	function
(	O
newname	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
maildir_flush	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
)	O
{	O
int	O
rc	int
;	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
char	O
*	O
tmpname	pointer
;	O
if	O
(	O
!	O
(	O
amd	pointer
->	O
mailbox	pointer
->	O
flags	int
&	O
MU_STREAM_WRITE	int
)	O
)	O
return	O
EACCES	int
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
TMPSUF	pointer
,	O
NULL	O
,	O
&	O
tmpname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_opendir	function
(	O
&	O
dir	pointer
,	O
tmpname	pointer
,	O
PERMS	int
|	O
mu_stream_flags_to_mode	function
(	O
amd	pointer
->	O
mailbox	pointer
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
tmpname	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
switch	O
(	O
entry	pointer
->	O
d_name	array
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
default	O
:	O
maildir_delete_file	function
(	O
tmpname	pointer
,	O
entry	pointer
->	O
d_name	array
)	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
tmpname	pointer
)	O
;	O
closedir	function
(	O
dir	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
maildir_deliver_new	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
DIR	struct
*	O
dir	pointer
)	O
{	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
amd	pointer
->	O
mailbox	pointer
->	O
flags	int
&	O
MU_STREAM_WRITE	int
)	O
)	O
return	O
EACCES	int
;	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
char	O
*	O
oldname	pointer
,	O
*	O
newname	pointer
;	O
int	O
rc	int
;	O
switch	O
(	O
entry	pointer
->	O
d_name	array
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
default	O
:	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
NEWSUF	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
&	O
oldname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mk_info_filename	function
(	O
amd	pointer
->	O
name	pointer
,	O
CURSUF	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
0	int
,	O
&	O
newname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
oldname	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
rename	function
(	O
oldname	pointer
,	O
newname	pointer
)	O
)	O
{	O
err	int
=	O
MU_ERR_FAILURE	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"renaming %s to %s failed: %s"	pointer
,	O
oldname	pointer
,	O
newname	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
free	function
(	O
oldname	pointer
)	O
;	O
free	function
(	O
newname	pointer
)	O
;	O
}	O
}	O
return	O
err	int
;	O
}	O
static	O
int	O
maildir_scan_dir	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
DIR	struct
*	O
dir	pointer
,	O
char	O
*	O
dirname	pointer
)	O
{	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
struct	O
_maildir_message	struct
*	O
msg	pointer
,	O
key	pointer
;	O
char	O
*	O
p	pointer
;	O
size_t	long
index	function
;	O
int	O
rc	int
=	O
0	int
;	O
int	O
need_sort	int
=	O
0	int
;	O
struct	O
stat	struct
st	pointer
;	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
char	O
*	O
fname	pointer
;	O
if	O
(	O
entry	pointer
->	O
d_name	array
[	O
0	int
]	O
==	O
'.'	O
)	O
continue	O
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
dirname	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
&	O
fname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"maildir_mkfilename"	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
rc	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
stat	struct
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't stat %s: %s"	pointer
,	O
fname	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
fname	pointer
)	O
;	O
continue	O
;	O
}	O
free	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
S_ISREG	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
continue	O
;	O
msg	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	pointer
)	O
)	O
;	O
if	O
(	O
!	O
msg	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
key	pointer
.	O
file_name	pointer
=	O
entry	pointer
->	O
d_name	array
;	O
if	O
(	O
!	O
amd_msg_lookup	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
&	O
key	pointer
,	O
&	O
index	function
)	O
)	O
continue	O
;	O
rc	int
=	O
_amd_message_append	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
msg	pointer
)	O
;	O
break	O
;	O
}	O
msg	pointer
->	O
dir	pointer
=	O
dirname	pointer
;	O
msg	pointer
->	O
file_name	pointer
=	O
strdup	function
(	O
entry	pointer
->	O
d_name	array
)	O
;	O
p	pointer
=	O
maildir_name_info_ptr	function
(	O
msg	pointer
->	O
file_name	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
info_to_flags	function
(	O
p	pointer
)	O
;	O
else	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
0	int
;	O
msg	pointer
->	O
amd_message	struct
.	O
orig_flags	int
=	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
;	O
need_sort	int
=	O
1	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
need_sort	int
)	O
amd_sort	function
(	O
amd	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_scan_unlocked	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
size_t	long
*	O
pcount	pointer
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
DIR	struct
*	O
dir	pointer
;	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
name	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
size_t	long
i	int
;	O
maildir_flush	function
(	O
amd	pointer
)	O
;	O
status	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
NEWSUF	pointer
,	O
NULL	O
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
maildir_opendir	function
(	O
&	O
dir	pointer
,	O
name	pointer
,	O
PERMS	int
|	O
mu_stream_flags_to_mode	function
(	O
mailbox	pointer
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
maildir_deliver_new	function
(	O
amd	pointer
,	O
dir	pointer
)	O
)	O
status	int
=	O
maildir_scan_dir	function
(	O
amd	pointer
,	O
dir	pointer
,	O
NEWSUF	pointer
)	O
;	O
closedir	function
(	O
dir	pointer
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
status	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
CURSUF	pointer
,	O
NULL	O
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
maildir_opendir	function
(	O
&	O
dir	pointer
,	O
name	pointer
,	O
PERMS	int
|	O
mu_stream_flags_to_mode	function
(	O
mailbox	pointer
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
maildir_scan_dir	function
(	O
amd	pointer
,	O
dir	pointer
,	O
CURSUF	pointer
)	O
;	O
closedir	function
(	O
dir	pointer
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
amd	pointer
->	O
msg_count	long
;	O
i	int
++	O
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
_amd_get_message	function
(	O
amd	pointer
,	O
i	int
)	O
;	O
msg	pointer
->	O
uid	int
=	O
i	int
;	O
if	O
(	O
do_notify	int
)	O
DISPATCH_ADD_MSG	O
(	O
mailbox	pointer
,	O
amd	pointer
,	O
i	int
)	O
;	O
}	O
if	O
(	O
stat	struct
(	O
amd	pointer
->	O
name	pointer
,	O
&	O
st	pointer
)	O
==	O
0	int
)	O
amd	pointer
->	O
mtime	long
=	O
st	pointer
.	O
st_mtime	O
;	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
amd	pointer
->	O
msg_count	long
;	O
return	O
status	int
;	O
}	O
static	O
int	O
maildir_scan0	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
size_t	long
msgno	long
MU_ARG_UNUSED	O
,	O
size_t	long
*	O
pcount	pointer
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
amd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailbox	pointer
->	O
flags	int
&	O
MU_STREAM_APPEND	int
)	O
return	O
0	int
;	O
mu_monitor_wrlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
rc	int
=	O
maildir_scan_unlocked	function
(	O
mailbox	pointer
,	O
pcount	pointer
,	O
do_notify	int
)	O
;	O
mu_monitor_unlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_size_dir	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
char	O
*	O
dirsuf	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
dirent	struct
*	O
entry	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
name	pointer
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
dirsuf	pointer
,	O
NULL	O
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dir	pointer
=	O
opendir	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't open directory %s: %s"	pointer
,	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
ENOENT	int
)	O
return	O
0	int
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
entry	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
)	O
{	O
char	O
*	O
fname	pointer
;	O
if	O
(	O
entry	pointer
->	O
d_name	array
[	O
0	int
]	O
==	O
'.'	O
)	O
continue	O
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
dirsuf	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
&	O
fname	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"maildir_mkfilename"	pointer
,	O
entry	pointer
->	O
d_name	array
,	O
rc	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
stat	struct
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't stat %s: %s"	pointer
,	O
fname	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
fname	pointer
)	O
;	O
continue	O
;	O
}	O
free	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
*	O
psize	pointer
+=	O
st	pointer
.	O
st_size	long
;	O
}	O
closedir	function
(	O
dir	pointer
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_size_unlocked	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_size_dir	function
(	O
amd	pointer
,	O
NEWSUF	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_size_dir	function
(	O
amd	pointer
,	O
CURSUF	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
psize	pointer
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_size	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
mailbox	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
amd	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_monitor_wrlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
rc	int
=	O
maildir_size_unlocked	function
(	O
amd	pointer
,	O
psize	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
mailbox	pointer
->	O
monitor	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_qfetch	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
,	O
mu_message_qid_t	pointer
qid	pointer
)	O
{	O
struct	O
_maildir_message	struct
*	O
msg	pointer
;	O
char	O
*	O
name	pointer
=	O
strrchr	function
(	O
qid	pointer
,	O
'/'	O
)	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
dir	pointer
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
name	pointer
++	O
;	O
if	O
(	O
name	pointer
-	O
qid	pointer
<	O
4	int
)	O
return	O
EINVAL	int
;	O
else	O
if	O
(	O
memcmp	function
(	O
name	pointer
-	O
4	int
,	O
CURSUF	pointer
,	O
sizeof	O
(	O
CURSUF	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	pointer
=	O
CURSUF	pointer
;	O
else	O
if	O
(	O
memcmp	function
(	O
name	pointer
-	O
4	int
,	O
NEWSUF	pointer
,	O
sizeof	O
(	O
NEWSUF	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	pointer
=	O
NEWSUF	pointer
;	O
else	O
if	O
(	O
memcmp	function
(	O
name	pointer
-	O
4	int
,	O
TMPSUF	pointer
,	O
sizeof	O
(	O
TMPSUF	pointer
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	pointer
=	O
TMPSUF	pointer
;	O
else	O
return	O
EINVAL	int
;	O
msg	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	pointer
)	O
)	O
;	O
msg	pointer
->	O
file_name	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
msg	pointer
->	O
dir	pointer
=	O
dir	pointer
;	O
p	pointer
=	O
maildir_name_info_ptr	function
(	O
msg	pointer
->	O
file_name	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
info_to_flags	function
(	O
p	pointer
)	O
;	O
else	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
=	O
0	int
;	O
msg	pointer
->	O
amd_message	struct
.	O
orig_flags	int
=	O
msg	pointer
->	O
amd_message	struct
.	O
attr_flags	int
;	O
msg	pointer
->	O
uid	int
=	O
amd	pointer
->	O
next_uid	pointer
(	O
amd	pointer
)	O
;	O
_amd_message_insert	function
(	O
amd	pointer
,	O
(	O
struct	O
_amd_message	struct
*	O
)	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_remove	function
(	O
struct	O
_amd_data	struct
*	O
amd	pointer
)	O
{	O
int	O
i	int
;	O
static	O
char	O
*	O
suf	pointer
[	O
3	int
]	O
=	O
{	O
NEWSUF	pointer
,	O
CURSUF	pointer
,	O
TMPSUF	pointer
}	O
;	O
int	O
rc	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
rc	int
==	O
0	int
&&	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
name	pointer
;	O
rc	int
=	O
maildir_mkfilename	function
(	O
amd	pointer
->	O
name	pointer
,	O
suf	pointer
[	O
i	int
]	O
,	O
NULL	O
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
amd_remove_dir	function
(	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_output	function
(	O
MU_DIAG_WARNING	O
,	O
"removing contents of %s failed: %s"	pointer
,	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_chattr_msg	function
(	O
struct	O
_amd_message	struct
*	O
amsg	pointer
,	O
int	O
expunge	int
)	O
{	O
struct	O
_maildir_message	struct
*	O
mp	pointer
=	O
(	O
struct	O
_maildir_message	struct
*	O
)	O
amsg	pointer
;	O
struct	O
_amd_data	struct
*	O
amd	pointer
=	O
amsg	pointer
->	O
amd	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
new_name	pointer
;	O
rc	int
=	O
amd	pointer
->	O
new_msg_file_name	pointer
(	O
amsg	pointer
,	O
amsg	pointer
->	O
attr_flags	int
,	O
expunge	int
,	O
&	O
new_name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
new_name	pointer
)	O
{	O
if	O
(	O
unlink	function
(	O
mp	pointer
->	O
file_name	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"can't unlink %s: %s"	pointer
,	O
mp	pointer
->	O
file_name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
char	O
*	O
cur_name	pointer
;	O
rc	int
=	O
maildir_cur_message_name	function
(	O
amsg	pointer
,	O
&	O
cur_name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
new_name	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
rename	function
(	O
cur_name	pointer
,	O
new_name	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
mu_observable_notify	function
(	O
amd	pointer
->	O
mailbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILBOX_CORRUPT	int
,	O
amd	pointer
->	O
mailbox	pointer
)	O
;	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"renaming %s to %s failed: %s"	pointer
,	O
cur_name	pointer
,	O
new_name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
free	function
(	O
cur_name	pointer
)	O
;	O
}	O
free	function
(	O
new_name	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
_mailbox_maildir_init	function
(	O
mu_mailbox_t	pointer
mailbox	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_data	struct
*	O
amd	pointer
;	O
rc	int
=	O
amd_init_mailbox	function
(	O
mailbox	pointer
,	O
sizeof	O
(	O
struct	O
_amd_data	struct
)	O
,	O
&	O
amd	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
amd	pointer
->	O
msg_size	long
=	O
sizeof	O
(	O
struct	O
_maildir_message	struct
)	O
;	O
amd	pointer
->	O
msg_free	pointer
=	O
maildir_msg_free	function
;	O
amd	pointer
->	O
create	pointer
=	O
maildir_create	function
;	O
amd	pointer
->	O
msg_init_delivery	pointer
=	O
maildir_msg_init	function
;	O
amd	pointer
->	O
msg_finish_delivery	pointer
=	O
maildir_msg_finish_delivery	function
;	O
amd	pointer
->	O
cur_msg_file_name	pointer
=	O
maildir_cur_message_name	function
;	O
amd	pointer
->	O
new_msg_file_name	pointer
=	O
maildir_new_message_name	function
;	O
amd	pointer
->	O
scan0	pointer
=	O
maildir_scan0	function
;	O
amd	pointer
->	O
qfetch	pointer
=	O
maildir_qfetch	function
;	O
amd	pointer
->	O
msg_cmp	pointer
=	O
maildir_message_cmp	function
;	O
amd	pointer
->	O
message_uid	pointer
=	O
maildir_message_uid	function
;	O
amd	pointer
->	O
next_uid	pointer
=	O
maildir_next_uid	function
;	O
amd	pointer
->	O
remove	function
=	O
maildir_remove	function
;	O
amd	pointer
->	O
chattr_msg	pointer
=	O
maildir_chattr_msg	function
;	O
amd	pointer
->	O
capabilities	int
=	O
MU_AMD_STATUS	int
;	O
amd	pointer
->	O
mailbox_size	pointer
=	O
maildir_size	function
;	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailbox_get_property	function
(	O
mailbox	pointer
,	O
&	O
property	pointer
)	O
;	O
mu_property_set_value	function
(	O
property	pointer
,	O
"TYPE"	pointer
,	O
"MAILDIR"	pointer
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
