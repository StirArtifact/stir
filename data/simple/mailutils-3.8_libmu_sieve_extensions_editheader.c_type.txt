int	O
sieve_addheader	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
const	O
char	O
*	O
field_name	pointer
;	O
const	O
char	O
*	O
field_value	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
field_name	pointer
)	O
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
1	int
,	O
SVT_STRING	int
,	O
&	O
field_value	pointer
)	O
;	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"ADDHEADER"	pointer
,	O
"%s: %s"	pointer
,	O
field_name	pointer
,	O
field_value	pointer
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
_	O
(	O
"cannot get message header"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"last"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
?	O
mu_header_append	function
:	O
mu_header_prepend	function
)	O
(	O
hdr	pointer
,	O
field_name	pointer
,	O
field_value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
_	O
(	O
"cannot append message header"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
sieve_deleteheader	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
val	pointer
;	O
const	O
char	O
*	O
field_name	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
mu_sieve_comparator_t	pointer
comp	array
;	O
mu_iterator_t	pointer
itr	pointer
;	O
size_t	long
i	long
,	O
idx	long
=	O
0	int
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
field_name	pointer
)	O
;	O
val	pointer
=	O
mu_sieve_get_arg_optional	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"DELETEHEADER"	pointer
,	O
"%s%s"	pointer
,	O
field_name	pointer
,	O
val	pointer
?	O
" (values)"	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
_	O
(	O
"cannot get message header"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
mu_header_get_iterator	function
(	O
hdr	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_header_get_iterator: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"last"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
int	O
backwards	int
=	O
1	int
;	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
backwards	int
)	O
;	O
}	O
comp	array
=	O
mu_sieve_get_comparator	function
(	O
mach	pointer
)	O
;	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"index"	pointer
,	O
SVT_NUMBER	int
,	O
&	O
idx	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
fn	pointer
,	O
*	O
fv	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
fn	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
fv	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
field_name	pointer
,	O
fn	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
idx	long
&&	O
++	O
i	long
<	O
idx	long
)	O
continue	O
;	O
if	O
(	O
val	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	pointer
->	O
v	union
.	O
list	pointer
.	O
count	pointer
;	O
i	long
++	O
)	O
{	O
mu_sieve_string_t	struct
*	O
s	pointer
=	O
mu_sieve_string_raw	function
(	O
mach	pointer
,	O
&	O
val	pointer
->	O
v	union
.	O
list	pointer
,	O
i	long
)	O
;	O
if	O
(	O
comp	array
(	O
mach	pointer
,	O
s	pointer
,	O
fv	pointer
)	O
)	O
{	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
idx	long
)	O
break	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
addheader_tags	array
[	O
]	O
=	O
{	O
{	O
"last"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
addheader_tag_groups	array
[	O
]	O
=	O
{	O
{	O
addheader_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum
addheader_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
match_part_tags	array
[	O
]	O
=	O
{	O
{	O
"is"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"contains"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"matches"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"regex"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"count"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"value"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"comparator"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
deleteheader_tags	array
[	O
]	O
=	O
{	O
{	O
"last"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"index"	pointer
,	O
SVT_NUMBER	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
deleteheader_tag_groups	array
[	O
]	O
=	O
{	O
{	O
deleteheader_tags	array
,	O
NULL	O
}	O
,	O
{	O
match_part_tags	array
,	O
mu_sieve_match_part_checker	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum
deleteheader_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
editheader	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"editheader"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
1	int
)	O
;	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"addheader"	pointer
,	O
sieve_addheader	function
,	O
addheader_args	array
,	O
addheader_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_action_ext	function
(	O
mach	pointer
,	O
"deleteheader"	pointer
,	O
sieve_deleteheader	function
,	O
deleteheader_args	array
,	O
deleteheader_args	array
,	O
deleteheader_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
