static	O
const	O
char	O
*	O
default_target_version	function
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
java_version_cache	pointer
;	O
if	O
(	O
java_version_cache	pointer
==	O
NULL	O
)	O
{	O
java_version_cache	pointer
=	O
javaexec_version	function
(	O
)	O
;	O
if	O
(	O
java_version_cache	pointer
==	O
NULL	O
)	O
java_version_cache	pointer
=	O
"1.1"	pointer
;	O
else	O
if	O
(	O
(	O
java_version_cache	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
java_version_cache	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
java_version_cache	pointer
[	O
2	int
]	O
>=	O
'1'	O
&&	O
java_version_cache	pointer
[	O
2	int
]	O
<=	O
'8'	O
&&	O
java_version_cache	pointer
[	O
3	int
]	O
==	O
'\0'	O
)	O
||	O
(	O
java_version_cache	pointer
[	O
0	int
]	O
==	O
'9'	O
&&	O
java_version_cache	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
||	O
(	O
java_version_cache	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
(	O
java_version_cache	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
java_version_cache	pointer
[	O
1	int
]	O
<=	O
'1'	O
)	O
&&	O
java_version_cache	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
)	O
;	O
else	O
if	O
(	O
java_version_cache	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
(	O
java_version_cache	pointer
[	O
1	int
]	O
>=	O
'2'	O
&&	O
java_version_cache	pointer
[	O
1	int
]	O
<=	O
'7'	O
)	O
&&	O
java_version_cache	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
java_version_cache	pointer
=	O
"11"	pointer
;	O
else	O
java_version_cache	pointer
=	O
"1.1"	pointer
;	O
}	O
return	O
java_version_cache	pointer
;	O
}	O
static	O
unsigned	O
int	O
source_version_index	function
(	O
const	O
char	O
*	O
source_version	pointer
)	O
{	O
if	O
(	O
source_version	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
source_version	pointer
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
(	O
source_version	pointer
[	O
2	int
]	O
>=	O
'3'	O
&&	O
source_version	pointer
[	O
2	int
]	O
<=	O
'5'	O
)	O
&&	O
source_version	pointer
[	O
3	int
]	O
==	O
'\0'	O
)	O
return	O
source_version	pointer
[	O
2	int
]	O
-	O
'3'	O
;	O
if	O
(	O
(	O
source_version	pointer
[	O
2	int
]	O
>=	O
'7'	O
&&	O
source_version	pointer
[	O
2	int
]	O
<=	O
'8'	O
)	O
&&	O
source_version	pointer
[	O
3	int
]	O
==	O
'\0'	O
)	O
return	O
source_version	pointer
[	O
2	int
]	O
-	O
'4'	O
;	O
}	O
else	O
if	O
(	O
source_version	pointer
[	O
0	int
]	O
==	O
'9'	O
&&	O
source_version	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
return	O
5	int
;	O
else	O
if	O
(	O
source_version	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
(	O
source_version	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
source_version	pointer
[	O
1	int
]	O
<=	O
'1'	O
)	O
&&	O
source_version	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
return	O
source_version	pointer
[	O
1	int
]	O
-	O
'0'	O
+	O
6	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"invalid source_version argument to compile_java_class"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
get_goodcode_snippet	function
(	O
const	O
char	O
*	O
source_version	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest {}\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest { static { assert(true); } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest<T> { T foo() { return null; } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.7"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest { void foo () { switch (\"A\") {} } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.8"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest { void foo () { Runnable r = () -> {}; } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"9"	pointer
)	O
==	O
0	int
)	O
return	O
"interface conftest { private void foo () {} }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"10"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest { public void m() { var i = new Integer(0); } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"11"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftest { Readable r = (var b) -> 0; }\n"	pointer
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"invalid source_version argument to compile_java_class"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
const	O
char	O
*	O
get_failcode_snippet	function
(	O
const	O
char	O
*	O
source_version	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail { static { assert(true); } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail<T> { T foo() { return null; } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail { void foo () { switch (\"A\") {} } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.7"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail { void foo () { Runnable r = () -> {}; } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.8"	pointer
)	O
==	O
0	int
)	O
return	O
"interface conftestfail { private void foo () {} }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"9"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail { public void m() { var i = new Integer(0); } }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"10"	pointer
)	O
==	O
0	int
)	O
return	O
"class conftestfail { Readable r = (var b) -> 0; }\n"	pointer
;	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"11"	pointer
)	O
==	O
0	int
)	O
return	O
NULL	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"invalid source_version argument to compile_java_class"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
unsigned	O
int	O
target_version_index	function
(	O
const	O
char	O
*	O
target_version	pointer
)	O
{	O
if	O
(	O
target_version	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
target_version	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
target_version	pointer
[	O
2	int
]	O
>=	O
'1'	O
&&	O
target_version	pointer
[	O
2	int
]	O
<=	O
'8'	O
)	O
&&	O
target_version	pointer
[	O
3	int
]	O
==	O
'\0'	O
)	O
return	O
target_version	pointer
[	O
2	int
]	O
-	O
'1'	O
;	O
else	O
if	O
(	O
target_version	pointer
[	O
0	int
]	O
==	O
'9'	O
&&	O
target_version	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
return	O
8	int
;	O
else	O
if	O
(	O
target_version	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
(	O
target_version	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
target_version	pointer
[	O
1	int
]	O
<=	O
'1'	O
)	O
&&	O
target_version	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
return	O
target_version	pointer
[	O
1	int
]	O
-	O
'0'	O
+	O
9	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"invalid target_version argument to compile_java_class"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
corresponding_classfile_version	function
(	O
const	O
char	O
*	O
target_version	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.1"	pointer
)	O
==	O
0	int
)	O
return	O
45	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.2"	pointer
)	O
==	O
0	int
)	O
return	O
46	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
return	O
47	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
)	O
return	O
48	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
)	O
return	O
49	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.6"	pointer
)	O
==	O
0	int
)	O
return	O
50	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.7"	pointer
)	O
==	O
0	int
)	O
return	O
51	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.8"	pointer
)	O
==	O
0	int
)	O
return	O
52	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"9"	pointer
)	O
==	O
0	int
)	O
return	O
53	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"10"	pointer
)	O
==	O
0	int
)	O
return	O
54	int
;	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"11"	pointer
)	O
==	O
0	int
)	O
return	O
55	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"invalid target_version argument to compile_java_class"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
get_source_version_for_javac	function
(	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
target_version	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
&&	O
!	O
(	O
target_version	pointer
[	O
0	int
]	O
==	O
'1'	O
&&	O
target_version	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
target_version	pointer
[	O
2	int
]	O
>=	O
'1'	O
&&	O
target_version	pointer
[	O
2	int
]	O
<=	O
'5'	O
)	O
&&	O
target_version	pointer
[	O
3	int
]	O
==	O
'\0'	O
)	O
)	O
return	O
"1.6"	pointer
;	O
return	O
source_version	pointer
;	O
}	O
static	O
bool	bool
compile_using_envjavac	function
(	O
const	O
char	O
*	O
javac	pointer
,	O
const	O
char	O
*	O
const	O
*	O
java_sources	pointer
,	O
unsigned	O
int	O
java_sources_count	int
,	O
const	O
char	O
*	O
directory	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
,	O
bool	bool
null_stderr	bool
)	O
{	O
bool	bool
err	bool
;	O
unsigned	O
int	O
command_length	int
;	O
char	O
*	O
command	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	int
]	O
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
char	O
*	O
p	pointer
;	O
command_length	int
=	O
strlen	function
(	O
javac	pointer
)	O
;	O
if	O
(	O
optimize	bool
)	O
command_length	int
+=	O
3	int
;	O
if	O
(	O
debug	bool
)	O
command_length	int
+=	O
3	int
;	O
if	O
(	O
directory	pointer
!=	O
NULL	O
)	O
command_length	int
+=	O
4	int
+	O
shell_quote_length	function
(	O
directory	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
java_sources_count	int
;	O
i	int
++	O
)	O
command_length	int
+=	O
1	int
+	O
shell_quote_length	function
(	O
java_sources	pointer
[	O
i	int
]	O
)	O
;	O
command_length	int
+=	O
1	int
;	O
command	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
command_length	int
)	O
;	O
p	pointer
=	O
command	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
javac	pointer
,	O
strlen	function
(	O
javac	pointer
)	O
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
javac	pointer
)	O
;	O
if	O
(	O
optimize	bool
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
" -O"	pointer
,	O
3	int
)	O
;	O
p	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
debug	bool
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
" -g"	pointer
,	O
3	int
)	O
;	O
p	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
directory	pointer
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
" -d "	pointer
,	O
4	int
)	O
;	O
p	pointer
+=	O
4	int
;	O
p	pointer
=	O
shell_quote_copy	function
(	O
p	pointer
,	O
directory	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
java_sources_count	int
;	O
i	int
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
p	pointer
=	O
shell_quote_copy	function
(	O
p	pointer
,	O
java_sources	pointer
[	O
i	int
]	O
)	O
;	O
}	O
*	O
p	pointer
++	O
=	O
'\0'	O
;	O
if	O
(	O
p	pointer
-	O
command	pointer
>	O
command_length	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
BOURNE_SHELL	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-c"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
command	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
javac	pointer
,	O
BOURNE_SHELL	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
null_stderr	bool
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
err	bool
=	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
freea	function
(	O
command	pointer
)	O
;	O
return	O
err	bool
;	O
}	O
static	O
bool	bool
compile_using_gcj	function
(	O
const	O
char	O
*	O
const	O
*	O
java_sources	pointer
,	O
unsigned	O
int	O
java_sources_count	int
,	O
bool	bool
no_assert_option	bool
,	O
bool	bool
fsource_option	bool
,	O
const	O
char	O
*	O
source_version	pointer
,	O
bool	bool
ftarget_option	bool
,	O
const	O
char	O
*	O
target_version	pointer
,	O
const	O
char	O
*	O
directory	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
,	O
bool	bool
null_stderr	bool
)	O
{	O
bool	bool
err	bool
;	O
unsigned	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
*	O
argp	pointer
;	O
char	O
*	O
fsource_arg	pointer
;	O
char	O
*	O
ftarget_arg	pointer
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
argc	int
=	O
2	int
+	O
(	O
no_assert_option	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
fsource_option	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
ftarget_option	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
optimize	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
debug	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
directory	pointer
!=	O
NULL	O
?	O
2	int
:	O
0	int
)	O
+	O
java_sources_count	int
;	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
argp	pointer
=	O
argv	pointer
;	O
*	O
argp	pointer
++	O
=	O
"gcj"	pointer
;	O
*	O
argp	pointer
++	O
=	O
"-C"	pointer
;	O
if	O
(	O
no_assert_option	bool
)	O
*	O
argp	pointer
++	O
=	O
"-fno-assert"	pointer
;	O
if	O
(	O
fsource_option	bool
)	O
{	O
fsource_arg	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
9	int
+	O
strlen	function
(	O
source_version	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
fsource_arg	pointer
,	O
"-fsource="	pointer
,	O
9	int
)	O
;	O
strcpy	function
(	O
fsource_arg	pointer
+	O
9	int
,	O
source_version	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
fsource_arg	pointer
;	O
}	O
else	O
fsource_arg	pointer
=	O
NULL	O
;	O
if	O
(	O
ftarget_option	bool
)	O
{	O
ftarget_arg	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
9	int
+	O
strlen	function
(	O
target_version	pointer
)	O
+	O
1	int
)	O
;	O
memcpy	function
(	O
ftarget_arg	pointer
,	O
"-ftarget="	pointer
,	O
9	int
)	O
;	O
strcpy	function
(	O
ftarget_arg	pointer
+	O
9	int
,	O
target_version	pointer
)	O
;	O
*	O
argp	pointer
++	O
=	O
ftarget_arg	pointer
;	O
}	O
else	O
ftarget_arg	pointer
=	O
NULL	O
;	O
if	O
(	O
optimize	bool
)	O
*	O
argp	pointer
++	O
=	O
"-O"	pointer
;	O
if	O
(	O
debug	bool
)	O
*	O
argp	pointer
++	O
=	O
"-g"	pointer
;	O
if	O
(	O
directory	pointer
!=	O
NULL	O
)	O
{	O
*	O
argp	pointer
++	O
=	O
"-d"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
directory	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
java_sources_count	int
;	O
i	int
++	O
)	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
java_sources	pointer
[	O
i	int
]	O
;	O
*	O
argp	pointer
=	O
NULL	O
;	O
if	O
(	O
argp	pointer
-	O
argv	pointer
!=	O
argc	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
exitstatus	int
=	O
execute	function
(	O
"gcj"	pointer
,	O
"gcj"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
null_stderr	bool
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
err	bool
=	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
if	O
(	O
ftarget_arg	pointer
!=	O
NULL	O
)	O
freea	function
(	O
ftarget_arg	pointer
)	O
;	O
if	O
(	O
fsource_arg	pointer
!=	O
NULL	O
)	O
freea	function
(	O
fsource_arg	pointer
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
return	O
err	bool
;	O
}	O
static	O
bool	bool
compile_using_javac	function
(	O
const	O
char	O
*	O
const	O
*	O
java_sources	pointer
,	O
unsigned	O
int	O
java_sources_count	int
,	O
bool	bool
source_option	bool
,	O
const	O
char	O
*	O
source_version	pointer
,	O
bool	bool
target_option	bool
,	O
const	O
char	O
*	O
target_version	pointer
,	O
const	O
char	O
*	O
directory	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
,	O
bool	bool
null_stderr	bool
)	O
{	O
bool	bool
err	bool
;	O
unsigned	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
*	O
argp	pointer
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
argc	int
=	O
1	int
+	O
(	O
source_option	bool
?	O
2	int
:	O
0	int
)	O
+	O
(	O
target_option	bool
?	O
2	int
:	O
0	int
)	O
+	O
(	O
optimize	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
debug	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
directory	pointer
!=	O
NULL	O
?	O
2	int
:	O
0	int
)	O
+	O
java_sources_count	int
;	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
argp	pointer
=	O
argv	pointer
;	O
*	O
argp	pointer
++	O
=	O
"javac"	pointer
;	O
if	O
(	O
source_option	bool
)	O
{	O
*	O
argp	pointer
++	O
=	O
"-source"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
source_version	pointer
;	O
}	O
if	O
(	O
target_option	bool
)	O
{	O
*	O
argp	pointer
++	O
=	O
"-target"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
target_version	pointer
;	O
}	O
if	O
(	O
optimize	bool
)	O
*	O
argp	pointer
++	O
=	O
"-O"	pointer
;	O
if	O
(	O
debug	bool
)	O
*	O
argp	pointer
++	O
=	O
"-g"	pointer
;	O
if	O
(	O
directory	pointer
!=	O
NULL	O
)	O
{	O
*	O
argp	pointer
++	O
=	O
"-d"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
directory	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
java_sources_count	int
;	O
i	int
++	O
)	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
java_sources	pointer
[	O
i	int
]	O
;	O
*	O
argp	pointer
=	O
NULL	O
;	O
if	O
(	O
argp	pointer
-	O
argv	pointer
!=	O
argc	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
exitstatus	int
=	O
execute	function
(	O
"javac"	pointer
,	O
"javac"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
null_stderr	bool
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
err	bool
=	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
return	O
err	bool
;	O
}	O
static	O
bool	bool
compile_using_jikes	function
(	O
const	O
char	O
*	O
const	O
*	O
java_sources	pointer
,	O
unsigned	O
int	O
java_sources_count	int
,	O
const	O
char	O
*	O
directory	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
verbose	bool
,	O
bool	bool
null_stderr	bool
)	O
{	O
bool	bool
err	bool
;	O
unsigned	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
*	O
argp	pointer
;	O
int	O
exitstatus	int
;	O
unsigned	O
int	O
i	int
;	O
argc	int
=	O
1	int
+	O
(	O
optimize	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
debug	bool
?	O
1	int
:	O
0	int
)	O
+	O
(	O
directory	pointer
!=	O
NULL	O
?	O
2	int
:	O
0	int
)	O
+	O
java_sources_count	int
;	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
argc	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
argp	pointer
=	O
argv	pointer
;	O
*	O
argp	pointer
++	O
=	O
"jikes"	pointer
;	O
if	O
(	O
optimize	bool
)	O
*	O
argp	pointer
++	O
=	O
"-O"	pointer
;	O
if	O
(	O
debug	bool
)	O
*	O
argp	pointer
++	O
=	O
"-g"	pointer
;	O
if	O
(	O
directory	pointer
!=	O
NULL	O
)	O
{	O
*	O
argp	pointer
++	O
=	O
"-d"	pointer
;	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
directory	pointer
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
java_sources_count	int
;	O
i	int
++	O
)	O
*	O
argp	pointer
++	O
=	O
(	O
char	O
*	O
)	O
java_sources	pointer
[	O
i	int
]	O
;	O
*	O
argp	pointer
=	O
NULL	O
;	O
if	O
(	O
argp	pointer
-	O
argv	pointer
!=	O
argc	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
exitstatus	int
=	O
execute	function
(	O
"jikes"	pointer
,	O
"jikes"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
null_stderr	bool
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
err	bool
=	O
(	O
exitstatus	int
!=	O
0	int
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
return	O
err	bool
;	O
}	O
static	O
bool	bool
write_temp_file	function
(	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
,	O
const	O
char	O
*	O
file_name	pointer
,	O
const	O
char	O
*	O
contents	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
file_name	pointer
)	O
;	O
fp	pointer
=	O
fopen_temp	function
(	O
file_name	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"failed to create \"%s\""	pointer
)	O
,	O
file_name	pointer
)	O
;	O
unregister_temp_file	function
(	O
tmpdir	pointer
,	O
file_name	pointer
)	O
;	O
return	O
true	int
;	O
}	O
fputs	function
(	O
contents	pointer
,	O
fp	pointer
)	O
;	O
if	O
(	O
fwriteerror_temp	function
(	O
fp	pointer
)	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"error while writing \"%s\" file"	pointer
)	O
,	O
file_name	pointer
)	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
int	O
get_classfile_version	function
(	O
const	O
char	O
*	O
compiled_file_name	pointer
)	O
{	O
unsigned	O
char	O
header	array
[	O
8	int
]	O
;	O
int	O
fd	array
;	O
fd	array
=	O
open	function
(	O
compiled_file_name	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	array
>=	O
0	int
)	O
{	O
if	O
(	O
safe_read	function
(	O
fd	array
,	O
header	array
,	O
8	int
)	O
==	O
8	int
)	O
{	O
if	O
(	O
header	array
[	O
0	int
]	O
==	O
0xCA	int
&&	O
header	array
[	O
1	int
]	O
==	O
0xFE	int
&&	O
header	array
[	O
2	int
]	O
==	O
0xBA	int
&&	O
header	array
[	O
3	int
]	O
==	O
0xBE	int
)	O
{	O
close	pointer
(	O
fd	array
)	O
;	O
return	O
header	array
[	O
7	int
]	O
;	O
}	O
}	O
close	pointer
(	O
fd	array
)	O
;	O
}	O
return	O
INT_MAX	O
;	O
}	O
static	O
bool	bool
is_envjavac_gcj	function
(	O
const	O
char	O
*	O
javac	pointer
)	O
{	O
static	O
bool	bool
envjavac_tested	bool
;	O
static	O
bool	bool
envjavac_gcj	bool
;	O
if	O
(	O
!	O
envjavac_tested	bool
)	O
{	O
unsigned	O
int	O
command_length	int
;	O
char	O
*	O
command	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
line	pointer
;	O
size_t	long
linesize	long
;	O
size_t	long
linelen	long
;	O
int	O
exitstatus	int
;	O
char	O
*	O
p	pointer
;	O
command_length	int
=	O
strlen	function
(	O
javac	pointer
)	O
+	O
1	int
+	O
9	int
+	O
1	int
;	O
command	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
command_length	int
)	O
;	O
p	pointer
=	O
command	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
javac	pointer
,	O
strlen	function
(	O
javac	pointer
)	O
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
javac	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
" --version"	pointer
,	O
1	int
+	O
9	int
+	O
1	int
)	O
;	O
p	pointer
+=	O
1	int
+	O
9	int
+	O
1	int
;	O
if	O
(	O
p	pointer
-	O
command	pointer
>	O
command_length	int
)	O
abort	function
(	O
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
BOURNE_SHELL	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-c"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
command	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
javac	pointer
,	O
BOURNE_SHELL	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
goto	O
failed	O
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
goto	O
failed	O
;	O
line	pointer
=	O
NULL	O
;	O
linesize	long
=	O
0	int
;	O
linelen	long
=	O
getline	function
(	O
&	O
line	pointer
,	O
&	O
linesize	long
,	O
fp	pointer
)	O
;	O
if	O
(	O
linelen	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
goto	O
failed	O
;	O
}	O
envjavac_gcj	bool
=	O
(	O
c_strstr	function
(	O
line	pointer
,	O
"gcj"	pointer
)	O
!=	O
NULL	O
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
javac	pointer
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
envjavac_gcj	bool
=	O
false	int
;	O
failed	O
:	O
freea	function
(	O
command	pointer
)	O
;	O
envjavac_tested	bool
=	O
true	int
;	O
}	O
return	O
envjavac_gcj	bool
;	O
}	O
static	O
bool	bool
is_envjavac_gcj43	function
(	O
const	O
char	O
*	O
javac	pointer
)	O
{	O
static	O
bool	bool
envjavac_tested	bool
;	O
static	O
bool	bool
envjavac_gcj43	bool
;	O
if	O
(	O
!	O
envjavac_tested	bool
)	O
{	O
unsigned	O
int	O
command_length	int
;	O
char	O
*	O
command	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
line	pointer
;	O
size_t	long
linesize	long
;	O
size_t	long
linelen	long
;	O
int	O
exitstatus	int
;	O
char	O
*	O
p	pointer
;	O
command_length	int
=	O
strlen	function
(	O
javac	pointer
)	O
+	O
1	int
+	O
9	int
+	O
1	int
;	O
command	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
command_length	int
)	O
;	O
p	pointer
=	O
command	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
javac	pointer
,	O
strlen	function
(	O
javac	pointer
)	O
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
javac	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
" --version"	pointer
,	O
1	int
+	O
9	int
+	O
1	int
)	O
;	O
p	pointer
+=	O
1	int
+	O
9	int
+	O
1	int
;	O
if	O
(	O
p	pointer
-	O
command	pointer
>	O
command_length	int
)	O
abort	function
(	O
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
BOURNE_SHELL	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-c"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
command	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
javac	pointer
,	O
BOURNE_SHELL	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
goto	O
failed	O
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
goto	O
failed	O
;	O
line	pointer
=	O
NULL	O
;	O
linesize	long
=	O
0	int
;	O
linelen	long
=	O
getline	function
(	O
&	O
line	pointer
,	O
&	O
linesize	long
,	O
fp	pointer
)	O
;	O
if	O
(	O
linelen	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
goto	O
failed	O
;	O
}	O
p	pointer
=	O
line	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
'\0'	O
&&	O
!	O
(	O
*	O
p	pointer
>=	O
'0'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
)	O
)	O
p	pointer
++	O
;	O
envjavac_gcj43	bool
=	O
!	O
(	O
*	O
p	pointer
==	O
'4'	O
&&	O
p	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
p	pointer
[	O
2	int
]	O
>=	O
'0'	O
&&	O
p	pointer
[	O
2	int
]	O
<=	O
'2'	O
)	O
&&	O
(	O
*	O
p	pointer
>=	O
'4'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
javac	pointer
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
envjavac_gcj43	bool
=	O
false	int
;	O
failed	O
:	O
freea	function
(	O
command	pointer
)	O
;	O
envjavac_tested	bool
=	O
true	int
;	O
}	O
return	O
envjavac_gcj43	bool
;	O
}	O
static	O
bool	bool
is_envjavac_gcj43_usable	function
(	O
const	O
char	O
*	O
javac	pointer
,	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
target_version	pointer
,	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
fsource_option_p	pointer
,	O
bool	bool
*	O
ftarget_option_p	pointer
)	O
{	O
struct	O
result_t	struct
{	O
bool	bool
tested	bool
;	O
bool	bool
usable	bool
;	O
bool	bool
fsource_option	bool
;	O
bool	bool
ftarget_option	bool
;	O
}	O
;	O
static	O
struct	O
result_t	struct
result_cache	array
[	O
SOURCE_VERSION_BOUND	int
]	O
[	O
TARGET_VERSION_BOUND	int
]	O
;	O
struct	O
result_t	struct
*	O
resultp	pointer
;	O
resultp	pointer
=	O
&	O
result_cache	array
[	O
source_version_index	function
(	O
source_version	pointer
)	O
]	O
[	O
target_version_index	function
(	O
target_version	pointer
)	O
]	O
;	O
if	O
(	O
!	O
resultp	pointer
->	O
tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
source_version	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
char	O
*	O
javac_source	pointer
=	O
xasprintf	function
(	O
"%s -fsource=%s"	pointer
,	O
javac	pointer
,	O
source_version	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
free	function
(	O
javac_source	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_envjavac	function
(	O
javac_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
fsource_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
free	function
(	O
javac_source	pointer
)	O
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
char	O
*	O
javac_target	pointer
=	O
xasprintf	function
(	O
"%s -fsource=%s -ftarget=%s"	pointer
,	O
javac	pointer
,	O
source_version	pointer
,	O
target_version	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_target	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
resultp	pointer
->	O
fsource_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
ftarget_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
free	function
(	O
javac_target	pointer
)	O
;	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
resultp	pointer
->	O
tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
resultp	pointer
->	O
usable	bool
;	O
*	O
fsource_option_p	pointer
=	O
resultp	pointer
->	O
fsource_option	bool
;	O
*	O
ftarget_option_p	pointer
=	O
resultp	pointer
->	O
ftarget_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_envjavac_oldgcj_14_14_usable	function
(	O
const	O
char	O
*	O
javac	pointer
,	O
bool	bool
*	O
usablep	pointer
)	O
{	O
static	O
bool	bool
envjavac_tested	bool
;	O
static	O
bool	bool
envjavac_usable	bool
;	O
if	O
(	O
!	O
envjavac_tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
"1.4"	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
envjavac_usable	bool
=	O
true	int
;	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
envjavac_tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
envjavac_usable	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_envjavac_oldgcj_14_13_usable	function
(	O
const	O
char	O
*	O
javac	pointer
,	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
need_no_assert_option_p	pointer
)	O
{	O
static	O
bool	bool
envjavac_tested	bool
;	O
static	O
bool	bool
envjavac_usable	bool
;	O
static	O
bool	bool
envjavac_need_no_assert_option	bool
;	O
if	O
(	O
!	O
envjavac_tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
bool	bool
javac_works	bool
;	O
char	O
*	O
javac_noassert	pointer
;	O
bool	bool
javac_noassert_works	bool
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
"1.3"	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
javac_works	bool
=	O
true	int
;	O
else	O
javac_works	bool
=	O
false	int
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
javac_noassert	pointer
=	O
xasprintf	function
(	O
"%s -fno-assert"	pointer
,	O
javac	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_noassert	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
javac_noassert_works	bool
=	O
true	int
;	O
else	O
javac_noassert_works	bool
=	O
false	int
;	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
if	O
(	O
javac_works	bool
&&	O
javac_noassert_works	bool
)	O
{	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_failcode_snippet	function
(	O
"1.3"	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
free	function
(	O
javac_noassert	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_noassert	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
)	O
javac_works	bool
=	O
true	int
;	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
}	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
if	O
(	O
javac_works	bool
)	O
{	O
envjavac_usable	bool
=	O
true	int
;	O
envjavac_need_no_assert_option	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
javac_noassert_works	bool
)	O
{	O
envjavac_usable	bool
=	O
true	int
;	O
envjavac_need_no_assert_option	bool
=	O
true	int
;	O
}	O
envjavac_tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
envjavac_usable	bool
;	O
*	O
need_no_assert_option_p	pointer
=	O
envjavac_need_no_assert_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_envjavac_nongcj_usable	function
(	O
const	O
char	O
*	O
javac	pointer
,	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
source_version_for_javac	pointer
,	O
const	O
char	O
*	O
target_version	pointer
,	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
source_option_p	pointer
,	O
bool	bool
*	O
target_option_p	pointer
)	O
{	O
struct	O
result_t	struct
{	O
bool	bool
tested	bool
;	O
bool	bool
usable	bool
;	O
bool	bool
source_option	bool
;	O
bool	bool
target_option	bool
;	O
}	O
;	O
static	O
struct	O
result_t	struct
result_cache	array
[	O
SOURCE_VERSION_BOUND	int
]	O
[	O
TARGET_VERSION_BOUND	int
]	O
;	O
struct	O
result_t	struct
*	O
resultp	pointer
;	O
resultp	pointer
=	O
&	O
result_cache	array
[	O
source_version_index	function
(	O
source_version	pointer
)	O
]	O
[	O
target_version_index	function
(	O
target_version	pointer
)	O
]	O
;	O
if	O
(	O
!	O
resultp	pointer
->	O
tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
source_version	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
char	O
*	O
javac_source	pointer
=	O
xasprintf	function
(	O
"%s -source %s"	pointer
,	O
javac	pointer
,	O
source_version_for_javac	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
free	function
(	O
javac_source	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_envjavac	function
(	O
javac_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
free	function
(	O
javac_source	pointer
)	O
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
char	O
*	O
javac_target	pointer
=	O
xasprintf	function
(	O
"%s -target %s"	pointer
,	O
javac	pointer
,	O
target_version	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_target	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
char	O
*	O
javac_target_source	pointer
=	O
xasprintf	function
(	O
"%s -source %s"	pointer
,	O
javac_target	pointer
,	O
source_version_for_javac	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_target_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
free	function
(	O
javac_target_source	pointer
)	O
;	O
free	function
(	O
javac_target	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_target	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_envjavac	function
(	O
javac_target_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
free	function
(	O
javac_target_source	pointer
)	O
;	O
resultp	pointer
->	O
target_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
char	O
*	O
javac_target_source	pointer
=	O
xasprintf	function
(	O
"%s -source %s"	pointer
,	O
javac_target	pointer
,	O
source_version_for_javac	pointer
)	O
;	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_envjavac	function
(	O
javac_target_source	pointer
,	O
java_sources	pointer
,	O
1	int
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
target_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
free	function
(	O
javac_target_source	pointer
)	O
;	O
}	O
free	function
(	O
javac_target	pointer
)	O
;	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
resultp	pointer
->	O
tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
resultp	pointer
->	O
usable	bool
;	O
*	O
source_option_p	pointer
=	O
resultp	pointer
->	O
source_option	bool
;	O
*	O
target_option_p	pointer
=	O
resultp	pointer
->	O
target_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_gcj_present	function
(	O
void	O
)	O
{	O
static	O
bool	bool
gcj_tested	bool
;	O
static	O
bool	bool
gcj_present	bool
;	O
if	O
(	O
!	O
gcj_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"gcj"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"--version"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
"gcj"	pointer
,	O
"gcj"	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
gcj_present	bool
=	O
false	int
;	O
if	O
(	O
child	int
!=	O
-	O
1	int
)	O
{	O
char	O
c	array
[	O
3	int
]	O
;	O
size_t	long
count	long
=	O
0	int
;	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
count	long
]	O
,	O
1	int
)	O
>	O
0	int
)	O
{	O
if	O
(	O
c	array
[	O
count	long
]	O
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
c	array
[	O
0	int
]	O
>=	O
'0'	O
&&	O
c	array
[	O
0	int
]	O
<=	O
'9'	O
)	O
)	O
continue	O
;	O
gcj_present	bool
=	O
(	O
c	array
[	O
0	int
]	O
>=	O
'3'	O
)	O
;	O
}	O
count	long
++	O
;	O
if	O
(	O
count	long
==	O
3	int
)	O
{	O
if	O
(	O
c	array
[	O
0	int
]	O
==	O
'3'	O
&&	O
c	array
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
c	array
[	O
2	int
]	O
==	O
'0'	O
||	O
c	array
[	O
2	int
]	O
==	O
'1'	O
)	O
)	O
gcj_present	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
0	int
]	O
,	O
1	int
)	O
>	O
0	int
)	O
;	O
close	pointer
(	O
fd	array
[	O
0	int
]	O
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"gcj"	pointer
,	O
false	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
gcj_present	bool
=	O
false	int
;	O
}	O
if	O
(	O
gcj_present	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
gcj_present	bool
=	O
false	int
;	O
else	O
{	O
char	O
*	O
conftest_file_name	pointer
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestlib.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
"public class conftestlib {\n"	pointer
"  public static void main (String[] args) {\n"	pointer
"  }\n"	pointer
"}\n"	pointer
)	O
)	O
gcj_present	bool
=	O
false	int
;	O
else	O
{	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestlib.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
gcj_present	bool
=	O
false	int
;	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
}	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
}	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
}	O
gcj_tested	bool
=	O
true	int
;	O
}	O
return	O
gcj_present	bool
;	O
}	O
static	O
bool	bool
is_gcj_43	function
(	O
void	O
)	O
{	O
static	O
bool	bool
gcj_tested	bool
;	O
static	O
bool	bool
gcj_43	bool
;	O
if	O
(	O
!	O
gcj_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"gcj"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"--version"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
child	int
=	O
create_pipe_in	function
(	O
"gcj"	pointer
,	O
"gcj"	pointer
,	O
argv	pointer
,	O
DEV_NULL	pointer
,	O
true	int
,	O
true	int
,	O
false	int
,	O
fd	array
)	O
;	O
gcj_43	bool
=	O
false	int
;	O
if	O
(	O
child	int
!=	O
-	O
1	int
)	O
{	O
char	O
c	array
[	O
3	int
]	O
;	O
size_t	long
count	long
=	O
0	int
;	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
count	long
]	O
,	O
1	int
)	O
>	O
0	int
)	O
{	O
if	O
(	O
c	array
[	O
count	long
]	O
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
c	array
[	O
0	int
]	O
>=	O
'0'	O
&&	O
c	array
[	O
0	int
]	O
<=	O
'9'	O
)	O
)	O
continue	O
;	O
gcj_43	bool
=	O
(	O
c	array
[	O
0	int
]	O
>=	O
'4'	O
)	O
;	O
}	O
count	long
++	O
;	O
if	O
(	O
count	long
==	O
3	int
)	O
{	O
if	O
(	O
c	array
[	O
0	int
]	O
==	O
'4'	O
&&	O
c	array
[	O
1	int
]	O
==	O
'.'	O
&&	O
c	array
[	O
2	int
]	O
>=	O
'0'	O
&&	O
c	array
[	O
2	int
]	O
<=	O
'2'	O
)	O
gcj_43	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
safe_read	function
(	O
fd	array
[	O
0	int
]	O
,	O
&	O
c	array
[	O
0	int
]	O
,	O
1	int
)	O
>	O
0	int
)	O
;	O
close	pointer
(	O
fd	array
[	O
0	int
]	O
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
"gcj"	pointer
,	O
false	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
gcj_43	bool
=	O
false	int
;	O
}	O
gcj_tested	bool
=	O
true	int
;	O
}	O
return	O
gcj_43	bool
;	O
}	O
static	O
bool	bool
is_gcj43_usable	function
(	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
target_version	pointer
,	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
fsource_option_p	pointer
,	O
bool	bool
*	O
ftarget_option_p	pointer
)	O
{	O
struct	O
result_t	struct
{	O
bool	bool
tested	bool
;	O
bool	bool
usable	bool
;	O
bool	bool
fsource_option	bool
;	O
bool	bool
ftarget_option	bool
;	O
}	O
;	O
static	O
struct	O
result_t	struct
result_cache	array
[	O
SOURCE_VERSION_BOUND	int
]	O
[	O
TARGET_VERSION_BOUND	int
]	O
;	O
struct	O
result_t	struct
*	O
resultp	pointer
;	O
resultp	pointer
=	O
&	O
result_cache	array
[	O
source_version_index	function
(	O
source_version	pointer
)	O
]	O
[	O
target_version_index	function
(	O
target_version	pointer
)	O
]	O
;	O
if	O
(	O
!	O
resultp	pointer
->	O
tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
source_version	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
true	int
,	O
source_version	pointer
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
true	int
,	O
source_version	pointer
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
fsource_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
true	int
,	O
source_version	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
resultp	pointer
->	O
fsource_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
ftarget_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
resultp	pointer
->	O
tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
resultp	pointer
->	O
usable	bool
;	O
*	O
fsource_option_p	pointer
=	O
resultp	pointer
->	O
fsource_option	bool
;	O
*	O
ftarget_option_p	pointer
=	O
resultp	pointer
->	O
ftarget_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_oldgcj_14_14_usable	function
(	O
bool	bool
*	O
usablep	pointer
)	O
{	O
static	O
bool	bool
gcj_tested	bool
;	O
static	O
bool	bool
gcj_usable	bool
;	O
if	O
(	O
!	O
gcj_tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
"1.4"	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
gcj_usable	bool
=	O
true	int
;	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
gcj_tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
gcj_usable	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_oldgcj_14_13_usable	function
(	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
need_no_assert_option_p	pointer
)	O
{	O
static	O
bool	bool
gcj_tested	bool
;	O
static	O
bool	bool
gcj_usable	bool
;	O
static	O
bool	bool
gcj_need_no_assert_option	bool
;	O
if	O
(	O
!	O
gcj_tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
"1.3"	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
gcj_usable	bool
=	O
true	int
;	O
gcj_need_no_assert_option	bool
=	O
true	int
;	O
}	O
else	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
false	int
,	O
NULL	O
,	O
false	int
,	O
NULL	O
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
gcj_usable	bool
=	O
true	int
;	O
gcj_need_no_assert_option	bool
=	O
false	int
;	O
}	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
gcj_tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
gcj_usable	bool
;	O
*	O
need_no_assert_option_p	pointer
=	O
gcj_need_no_assert_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_javac_present	function
(	O
void	O
)	O
{	O
static	O
bool	bool
javac_tested	bool
;	O
static	O
bool	bool
javac_present	bool
;	O
if	O
(	O
!	O
javac_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
2	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"javac"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
"javac"	pointer
,	O
"javac"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
javac_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
1	int
||	O
exitstatus	int
==	O
2	int
)	O
;	O
javac_tested	bool
=	O
true	int
;	O
}	O
return	O
javac_present	bool
;	O
}	O
static	O
bool	bool
is_javac_usable	function
(	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
source_version_for_javac	pointer
,	O
const	O
char	O
*	O
target_version	pointer
,	O
bool	bool
*	O
usablep	pointer
,	O
bool	bool
*	O
source_option_p	pointer
,	O
bool	bool
*	O
target_option_p	pointer
)	O
{	O
struct	O
result_t	struct
{	O
bool	bool
tested	bool
;	O
bool	bool
usable	bool
;	O
bool	bool
source_option	bool
;	O
bool	bool
target_option	bool
;	O
}	O
;	O
static	O
struct	O
result_t	struct
result_cache	array
[	O
SOURCE_VERSION_BOUND	int
]	O
[	O
TARGET_VERSION_BOUND	int
]	O
;	O
struct	O
result_t	struct
*	O
resultp	pointer
;	O
resultp	pointer
=	O
&	O
result_cache	array
[	O
source_version_index	function
(	O
source_version	pointer
)	O
]	O
[	O
target_version_index	function
(	O
target_version	pointer
)	O
]	O
;	O
if	O
(	O
!	O
resultp	pointer
->	O
tested	bool
)	O
{	O
struct	O
temp_dir	struct
*	O
tmpdir	pointer
;	O
char	O
*	O
conftest_file_name	pointer
;	O
char	O
*	O
compiled_file_name	pointer
;	O
const	O
char	O
*	O
java_sources	pointer
[	O
1	int
]	O
;	O
struct	O
stat	struct
statbuf	struct
;	O
tmpdir	pointer
=	O
create_temp_dir	function
(	O
"java"	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
tmpdir	pointer
==	O
NULL	O
)	O
return	O
true	int
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
get_goodcode_snippet	function
(	O
source_version	pointer
)	O
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftest.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
source_version_for_javac	pointer
,	O
false	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
source_version_for_javac	pointer
,	O
false	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
source_version_for_javac	pointer
,	O
false	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
source_version_for_javac	pointer
,	O
false	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
source_version_for_javac	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
source_version_for_javac	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
const	O
char	O
*	O
failcode	pointer
=	O
get_failcode_snippet	function
(	O
source_version	pointer
)	O
;	O
if	O
(	O
failcode	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
conftest_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.java"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
write_temp_file	function
(	O
tmpdir	pointer
,	O
conftest_file_name	pointer
,	O
failcode	pointer
)	O
)	O
{	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
cleanup_temp_dir	function
(	O
tmpdir	pointer
)	O
;	O
return	O
true	int
;	O
}	O
compiled_file_name	pointer
=	O
xconcatenated_filename	function
(	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
"conftestfail.class"	pointer
,	O
NULL	O
)	O
;	O
register_temp_file	function
(	O
tmpdir	pointer
,	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
false	int
,	O
source_version_for_javac	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
)	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
source_version_for_javac	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
)	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
}	O
}	O
}	O
resultp	pointer
->	O
target_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
else	O
{	O
unlink	function
(	O
compiled_file_name	pointer
)	O
;	O
java_sources	pointer
[	O
0	int
]	O
=	O
conftest_file_name	pointer
;	O
if	O
(	O
!	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
1	int
,	O
true	int
,	O
source_version_for_javac	pointer
,	O
true	int
,	O
target_version	pointer
,	O
tmpdir	pointer
->	O
dir_name	pointer
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
)	O
&&	O
stat	struct
(	O
compiled_file_name	pointer
,	O
&	O
statbuf	struct
)	O
>=	O
0	int
&&	O
get_classfile_version	function
(	O
compiled_file_name	pointer
)	O
<=	O
corresponding_classfile_version	function
(	O
target_version	pointer
)	O
)	O
{	O
resultp	pointer
->	O
source_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
target_option	bool
=	O
true	int
;	O
resultp	pointer
->	O
usable	bool
=	O
true	int
;	O
}	O
}	O
}	O
free	function
(	O
compiled_file_name	pointer
)	O
;	O
free	function
(	O
conftest_file_name	pointer
)	O
;	O
resultp	pointer
->	O
tested	bool
=	O
true	int
;	O
}	O
*	O
usablep	pointer
=	O
resultp	pointer
->	O
usable	bool
;	O
*	O
source_option_p	pointer
=	O
resultp	pointer
->	O
source_option	bool
;	O
*	O
target_option_p	pointer
=	O
resultp	pointer
->	O
target_option	bool
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_jikes_present	function
(	O
void	O
)	O
{	O
static	O
bool	bool
jikes_tested	bool
;	O
static	O
bool	bool
jikes_present	bool
;	O
if	O
(	O
!	O
jikes_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
2	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"jikes"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
"jikes"	pointer
,	O
"jikes"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
jikes_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
1	int
)	O
;	O
jikes_tested	bool
=	O
true	int
;	O
}	O
return	O
jikes_present	bool
;	O
}	O
bool	bool
compile_java_class	function
(	O
const	O
char	O
*	O
const	O
*	O
java_sources	pointer
,	O
unsigned	O
int	O
java_sources_count	int
,	O
const	O
char	O
*	O
const	O
*	O
classpaths	pointer
,	O
unsigned	O
int	O
classpaths_count	int
,	O
const	O
char	O
*	O
source_version	pointer
,	O
const	O
char	O
*	O
target_version	pointer
,	O
const	O
char	O
*	O
directory	pointer
,	O
bool	bool
optimize	bool
,	O
bool	bool
debug	bool
,	O
bool	bool
use_minimal_classpath	bool
,	O
bool	bool
verbose	bool
)	O
{	O
bool	bool
err	bool
=	O
false	int
;	O
char	O
*	O
old_JAVA_HOME	pointer
;	O
{	O
const	O
char	O
*	O
javac	pointer
=	O
getenv	function
(	O
"JAVAC"	pointer
)	O
;	O
if	O
(	O
javac	pointer
!=	O
NULL	O
&&	O
javac	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
bool	bool
usable	bool
=	O
false	int
;	O
bool	bool
no_assert_option	bool
=	O
false	int
;	O
bool	bool
source_option	bool
=	O
false	int
;	O
bool	bool
target_option	bool
=	O
false	int
;	O
bool	bool
fsource_option	bool
=	O
false	int
;	O
bool	bool
ftarget_option	bool
=	O
false	int
;	O
const	O
char	O
*	O
source_version_for_javac	pointer
;	O
if	O
(	O
target_version	pointer
==	O
NULL	O
)	O
target_version	pointer
=	O
default_target_version	function
(	O
)	O
;	O
source_version_for_javac	pointer
=	O
get_source_version_for_javac	function
(	O
source_version	pointer
,	O
target_version	pointer
)	O
;	O
if	O
(	O
is_envjavac_gcj	function
(	O
javac	pointer
)	O
)	O
{	O
if	O
(	O
is_envjavac_gcj43	function
(	O
javac	pointer
)	O
)	O
{	O
if	O
(	O
is_envjavac_gcj43_usable	function
(	O
javac	pointer
,	O
source_version	pointer
,	O
target_version	pointer
,	O
&	O
usable	bool
,	O
&	O
fsource_option	bool
,	O
&	O
ftarget_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
source_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
is_envjavac_oldgcj_14_14_usable	function
(	O
javac	pointer
,	O
&	O
usable	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
source_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
is_envjavac_oldgcj_14_13_usable	function
(	O
javac	pointer
,	O
&	O
usable	bool
,	O
&	O
no_assert_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
is_envjavac_nongcj_usable	function
(	O
javac	pointer
,	O
source_version	pointer
,	O
source_version_for_javac	pointer
,	O
target_version	pointer
,	O
&	O
usable	bool
,	O
&	O
source_option	bool
,	O
&	O
target_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
if	O
(	O
usable	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
char	O
*	O
javac_with_options	pointer
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
javac_with_options	pointer
=	O
(	O
no_assert_option	bool
?	O
xasprintf	function
(	O
"%s -fno-assert"	pointer
,	O
javac	pointer
)	O
:	O
xasprintf	function
(	O
"%s%s%s%s%s%s%s%s%s"	pointer
,	O
javac	pointer
,	O
source_option	bool
?	O
" -source "	pointer
:	O
""	pointer
,	O
source_option	bool
?	O
source_version_for_javac	pointer
:	O
""	pointer
,	O
target_option	bool
?	O
" -target "	pointer
:	O
""	pointer
,	O
target_option	bool
?	O
target_version	pointer
:	O
""	pointer
,	O
fsource_option	bool
?	O
" -fsource="	pointer
:	O
""	pointer
,	O
fsource_option	bool
?	O
source_version	pointer
:	O
""	pointer
,	O
ftarget_option	bool
?	O
" -ftarget="	pointer
:	O
""	pointer
,	O
ftarget_option	bool
?	O
target_version	pointer
:	O
""	pointer
)	O
)	O
;	O
err	bool
=	O
compile_using_envjavac	function
(	O
javac_with_options	pointer
,	O
java_sources	pointer
,	O
java_sources_count	int
,	O
directory	pointer
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
,	O
false	int
)	O
;	O
free	function
(	O
javac_with_options	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
goto	O
done1	O
;	O
}	O
}	O
}	O
old_JAVA_HOME	pointer
=	O
getenv	function
(	O
"JAVA_HOME"	pointer
)	O
;	O
if	O
(	O
old_JAVA_HOME	pointer
!=	O
NULL	O
)	O
{	O
old_JAVA_HOME	pointer
=	O
xstrdup	function
(	O
old_JAVA_HOME	pointer
)	O
;	O
unsetenv	function
(	O
"JAVA_HOME"	pointer
)	O
;	O
}	O
if	O
(	O
is_gcj_present	function
(	O
)	O
)	O
{	O
bool	bool
usable	bool
=	O
false	int
;	O
bool	bool
no_assert_option	bool
=	O
false	int
;	O
bool	bool
fsource_option	bool
=	O
false	int
;	O
bool	bool
ftarget_option	bool
=	O
false	int
;	O
if	O
(	O
target_version	pointer
==	O
NULL	O
)	O
target_version	pointer
=	O
default_target_version	function
(	O
)	O
;	O
if	O
(	O
is_gcj_43	function
(	O
)	O
)	O
{	O
if	O
(	O
is_gcj43_usable	function
(	O
source_version	pointer
,	O
target_version	pointer
,	O
&	O
usable	bool
,	O
&	O
fsource_option	bool
,	O
&	O
ftarget_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
source_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
is_oldgcj_14_14_usable	function
(	O
&	O
usable	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
target_version	pointer
,	O
"1.4"	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
source_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
is_oldgcj_14_13_usable	function
(	O
&	O
usable	bool
,	O
&	O
no_assert_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
}	O
}	O
if	O
(	O
usable	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
err	bool
=	O
compile_using_gcj	function
(	O
java_sources	pointer
,	O
java_sources_count	int
,	O
no_assert_option	bool
,	O
fsource_option	bool
,	O
source_version	pointer
,	O
ftarget_option	bool
,	O
target_version	pointer
,	O
directory	pointer
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
,	O
false	int
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
if	O
(	O
is_javac_present	function
(	O
)	O
)	O
{	O
bool	bool
usable	bool
=	O
false	int
;	O
bool	bool
source_option	bool
=	O
false	int
;	O
bool	bool
target_option	bool
=	O
false	int
;	O
const	O
char	O
*	O
source_version_for_javac	pointer
;	O
if	O
(	O
target_version	pointer
==	O
NULL	O
)	O
target_version	pointer
=	O
default_target_version	function
(	O
)	O
;	O
source_version_for_javac	pointer
=	O
get_source_version_for_javac	function
(	O
source_version	pointer
,	O
target_version	pointer
)	O
;	O
if	O
(	O
is_javac_usable	function
(	O
source_version	pointer
,	O
source_version_for_javac	pointer
,	O
target_version	pointer
,	O
&	O
usable	bool
,	O
&	O
source_option	bool
,	O
&	O
target_option	bool
)	O
)	O
{	O
err	bool
=	O
true	int
;	O
goto	O
done1	O
;	O
}	O
if	O
(	O
usable	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
err	bool
=	O
compile_using_javac	function
(	O
java_sources	pointer
,	O
java_sources_count	int
,	O
source_option	bool
,	O
source_version_for_javac	pointer
,	O
target_option	bool
,	O
target_version	pointer
,	O
directory	pointer
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
,	O
false	int
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
if	O
(	O
is_jikes_present	function
(	O
)	O
)	O
{	O
bool	bool
usable	bool
=	O
(	O
strcmp	function
(	O
source_version	pointer
,	O
"1.3"	pointer
)	O
==	O
0	int
)	O
;	O
if	O
(	O
usable	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
err	bool
=	O
compile_using_jikes	function
(	O
java_sources	pointer
,	O
java_sources_count	int
,	O
directory	pointer
,	O
optimize	bool
,	O
debug	bool
,	O
verbose	bool
,	O
false	int
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Java compiler not found, try installing gcj or set $JAVAC"	pointer
)	O
)	O
;	O
err	bool
=	O
true	int
;	O
done2	O
:	O
if	O
(	O
old_JAVA_HOME	pointer
!=	O
NULL	O
)	O
{	O
xsetenv	function
(	O
"JAVA_HOME"	pointer
,	O
old_JAVA_HOME	pointer
,	O
1	int
)	O
;	O
free	function
(	O
old_JAVA_HOME	pointer
)	O
;	O
}	O
done1	O
:	O
return	O
err	bool
;	O
}	O
