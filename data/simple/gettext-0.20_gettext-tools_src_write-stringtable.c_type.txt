static	O
void	O
write_escaped_string	function
(	O
ostream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
const	O
char	O
*	O
str_limit	pointer
=	O
str	pointer
+	O
strlen	function
(	O
str	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\""	pointer
)	O
;	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
unsigned	O
char	O
c	char
=	O
(	O
unsigned	O
char	O
)	O
*	O
str	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'\t'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\\t"	pointer
)	O
;	O
else	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\\n"	pointer
)	O
;	O
else	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\\r"	pointer
)	O
;	O
else	O
if	O
(	O
c	char
==	O
'\f'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\\f"	pointer
)	O
;	O
else	O
if	O
(	O
c	char
==	O
'\\'	O
||	O
c	char
==	O
'"'	O
)	O
{	O
char	O
seq	array
[	O
2	int
]	O
;	O
seq	array
[	O
0	int
]	O
=	O
'\\'	O
;	O
seq	array
[	O
1	int
]	O
=	O
c	char
;	O
ostream_write_mem	function
(	O
stream	pointer
,	O
seq	array
,	O
2	int
)	O
;	O
}	O
else	O
{	O
char	O
seq	array
[	O
1	int
]	O
;	O
seq	array
[	O
0	int
]	O
=	O
c	char
;	O
ostream_write_mem	function
(	O
stream	pointer
,	O
seq	array
,	O
1	int
)	O
;	O
}	O
}	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\""	pointer
)	O
;	O
}	O
static	O
void	O
write_message	function
(	O
ostream_t	pointer
stream	pointer
,	O
const	O
message_ty	struct
*	O
mp	pointer
,	O
size_t	long
page_width	long
,	O
bool	bool
debug	bool
)	O
{	O
if	O
(	O
mp	pointer
->	O
comment	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
c_strstr	function
(	O
s	pointer
,	O
"*/"	pointer
)	O
==	O
NULL	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/*"	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
!=	O
'\0'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
" "	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
s	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" */\n"	pointer
)	O
;	O
}	O
else	O
do	O
{	O
const	O
char	O
*	O
e	pointer
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
"//"	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
!=	O
'\0'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
" "	pointer
)	O
;	O
e	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
ostream_write_mem	function
(	O
stream	pointer
,	O
s	pointer
,	O
e	pointer
-	O
s	pointer
)	O
;	O
s	pointer
=	O
e	pointer
+	O
1	int
;	O
}	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
while	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
c_strstr	function
(	O
s	pointer
,	O
"*/"	pointer
)	O
==	O
NULL	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/* Comment: "	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
s	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" */\n"	pointer
)	O
;	O
}	O
else	O
{	O
bool	bool
first	pointer
=	O
true	int
;	O
do	O
{	O
const	O
char	O
*	O
e	pointer
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
"//"	pointer
)	O
;	O
if	O
(	O
first	pointer
||	O
(	O
*	O
s	pointer
!=	O
'\0'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
first	pointer
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"Comment: "	pointer
)	O
;	O
e	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
ostream_write_mem	function
(	O
stream	pointer
,	O
s	pointer
,	O
e	pointer
-	O
s	pointer
)	O
;	O
s	pointer
=	O
e	pointer
+	O
1	int
;	O
}	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\n"	pointer
)	O
;	O
first	pointer
=	O
false	int
;	O
}	O
while	O
(	O
s	pointer
!=	O
NULL	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
mp	pointer
->	O
filepos_count	long
!=	O
0	int
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
++	O
j	long
)	O
{	O
lex_pos_ty	struct
*	O
pp	pointer
=	O
&	O
mp	pointer
->	O
filepos	pointer
[	O
j	long
]	O
;	O
const	O
char	O
*	O
cp	pointer
=	O
pp	pointer
->	O
file_name	pointer
;	O
char	O
*	O
str	pointer
;	O
while	O
(	O
cp	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
cp	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
cp	pointer
+=	O
2	int
;	O
str	pointer
=	O
xasprintf	function
(	O
"/* File: %s:%ld */\n"	pointer
,	O
cp	pointer
,	O
(	O
long	O
)	O
pp	pointer
->	O
line_number	long
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
}	O
}	O
if	O
(	O
mp	pointer
->	O
is_fuzzy	bool
||	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/* Flag: untranslated */\n"	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
obsolete	bool
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/* Flag: unmatched */\n"	pointer
)	O
;	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
significant_format_p	function
(	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
)	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/* Flag: "	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
make_format_description_string	function
(	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
,	O
format_language	array
[	O
i	long
]	O
,	O
debug	bool
)	O
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" */\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
has_range_p	O
(	O
mp	pointer
->	O
range	struct
)	O
)	O
{	O
char	O
*	O
string	pointer
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
"/* Flag: "	pointer
)	O
;	O
string	pointer
=	O
make_range_description_string	function
(	O
mp	pointer
->	O
range	struct
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
string	pointer
)	O
;	O
free	function
(	O
string	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" */\n"	pointer
)	O
;	O
}	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" = "	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
is_fuzzy	bool
)	O
{	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
if	O
(	O
c_strstr	function
(	O
mp	pointer
->	O
msgstr	pointer
,	O
"*/"	pointer
)	O
==	O
NULL	O
)	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
" /* = "	pointer
)	O
;	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
" */"	pointer
)	O
;	O
}	O
else	O
{	O
ostream_write_str	function
(	O
stream	pointer
,	O
"; // = "	pointer
)	O
;	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
}	O
}	O
else	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
}	O
else	O
{	O
write_escaped_string	function
(	O
stream	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
}	O
ostream_write_str	function
(	O
stream	pointer
,	O
";"	pointer
)	O
;	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
write_stringtable	function
(	O
ostream_t	pointer
stream	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_encoding	pointer
,	O
size_t	long
page_width	long
,	O
bool	bool
debug	bool
)	O
{	O
bool	bool
blank_line	bool
;	O
size_t	long
j	long
;	O
iconv_message_list	function
(	O
mlp	pointer
,	O
canon_encoding	pointer
,	O
po_charset_utf8	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
is_ascii_message_list	function
(	O
mlp	pointer
)	O
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\xef\xbb\xbf"	pointer
)	O
;	O
blank_line	bool
=	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
++	O
j	long
)	O
{	O
const	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
blank_line	bool
)	O
ostream_write_str	function
(	O
stream	pointer
,	O
"\n"	pointer
)	O
;	O
write_message	function
(	O
stream	pointer
,	O
mp	pointer
,	O
page_width	long
,	O
debug	bool
)	O
;	O
blank_line	bool
=	O
true	int
;	O
}	O
}	O
}	O
static	O
void	O
msgdomain_list_print_stringtable	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
ostream_t	pointer
stream	pointer
,	O
size_t	long
page_width	long
,	O
bool	bool
debug	bool
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
;	O
if	O
(	O
mdlp	pointer
->	O
nitems	long
==	O
1	int
)	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
else	O
mlp	pointer
=	O
message_list_alloc	function
(	O
false	int
)	O
;	O
write_stringtable	function
(	O
stream	pointer
,	O
mlp	pointer
,	O
mdlp	pointer
->	O
encoding	pointer
,	O
page_width	long
,	O
debug	bool
)	O
;	O
}	O
const	O
struct	O
catalog_output_format	struct
output_format_stringtable	struct
=	O
{	O
msgdomain_list_print_stringtable	function
,	O
true	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
false	int
}	O
;	O
