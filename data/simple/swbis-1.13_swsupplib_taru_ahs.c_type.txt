static	O
STROB	struct
*	O
s_tmpM	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
s_error_owner_storeM	pointer
=	O
NULL	O
;	O
static	O
STROB	struct
*	O
s_error_group_storeM	pointer
=	O
NULL	O
;	O
static	O
int	O
is_numeric_name	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
name	pointer
;	O
if	O
(	O
!	O
s	pointer
||	O
*	O
s	pointer
==	O
0	int
)	O
return	O
0	int
;	O
while	O
(	O
s	pointer
&&	O
*	O
s	pointer
)	O
{	O
if	O
(	O
isalpha	function
(	O
(	O
int	O
)	O
*	O
s	pointer
)	O
)	O
{	O
return	O
0	int
;	O
}	O
s	pointer
++	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
void	O
ahsStaticSetTarname_length_i	function
(	O
STROB	struct
*	O
*	O
c_sb	pointer
,	O
int	O
len	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
*	O
c_sb	pointer
==	O
NULL	O
)	O
{	O
*	O
c_sb	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
}	O
strob_set_memlength	function
(	O
*	O
c_sb	pointer
,	O
len	int
)	O
;	O
}	O
static	O
void	O
ahsStaticSetTarname_i	function
(	O
STROB	struct
*	O
*	O
c_sb	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
len	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
*	O
c_sb	pointer
)	O
strob_close	function
(	O
*	O
c_sb	pointer
)	O
;	O
*	O
c_sb	pointer
=	O
(	O
STROB	struct
*	O
)	O
NULL	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
c_sb	pointer
==	O
NULL	O
)	O
{	O
*	O
c_sb	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
}	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
if	O
(	O
name	pointer
!=	O
(	O
char	O
*	O
)	O
(	O
(	O
*	O
c_sb	pointer
)	O
->	O
str_	pointer
)	O
)	O
strob_strcpy	function
(	O
*	O
c_sb	pointer
,	O
name	pointer
)	O
;	O
}	O
else	O
{	O
strob_set_memlength	function
(	O
*	O
c_sb	pointer
,	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
name	pointer
!=	O
(	O
char	O
*	O
)	O
(	O
(	O
*	O
c_sb	pointer
)	O
->	O
str_	pointer
)	O
)	O
strob_strncpy	function
(	O
*	O
c_sb	pointer
,	O
name	pointer
,	O
len	int
)	O
;	O
*	O
(	O
strob_str	function
(	O
*	O
c_sb	pointer
)	O
+	O
len	int
)	O
=	O
'\0'	O
;	O
}	O
return	O
;	O
}	O
static	O
char	O
*	O
ahsStaticGetTarname_i	function
(	O
STROB	struct
*	O
*	O
c_sb	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
*	O
c_sb	pointer
==	O
(	O
STROB	struct
*	O
)	O
NULL	O
)	O
{	O
ahsStaticSetTarname_i	function
(	O
c_sb	pointer
,	O
""	pointer
,	O
-	O
1	int
)	O
;	O
}	O
return	O
strob_str	function
(	O
*	O
c_sb	pointer
)	O
;	O
}	O
static	O
void	O
ahsStatic_strip_leading_slash_i	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
p	pointer
=	O
name	pointer
;	O
while	O
(	O
*	O
p	pointer
==	O
'/'	O
&&	O
*	O
(	O
p	pointer
+	O
1	int
)	O
)	O
{	O
++	O
p	pointer
;	O
}	O
if	O
(	O
p	pointer
!=	O
name	pointer
)	O
memmove	function
(	O
name	pointer
,	O
p	pointer
,	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
)	O
;	O
}	O
static	O
int	O
count_newlines	function
(	O
char	O
*	O
store	pointer
,	O
char	O
*	O
key	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
n	long
;	O
s	pointer
=	O
store	pointer
;	O
if	O
(	O
key	pointer
&&	O
strstr	function
(	O
store	pointer
,	O
key	pointer
)	O
==	O
store	pointer
)	O
{	O
return	O
0	int
;	O
}	O
while	O
(	O
(	O
n	long
=	O
strchr	function
(	O
s	pointer
,	O
'\n'	O
)	O
)	O
)	O
{	O
ret	int
++	O
;	O
s	pointer
=	O
n	long
+	O
1	int
;	O
if	O
(	O
key	pointer
&&	O
strstr	function
(	O
s	pointer
,	O
key	pointer
)	O
==	O
s	pointer
)	O
{	O
break	O
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
error_msg_control	function
(	O
char	O
*	O
name	pointer
,	O
int	O
id	int
,	O
char	O
*	O
dbname	pointer
,	O
int	O
*	O
is_new	pointer
)	O
{	O
int	O
n	long
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
store	pointer
;	O
if	O
(	O
s_tmpM	pointer
==	O
NULL	O
)	O
s_tmpM	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
if	O
(	O
s_error_owner_storeM	pointer
==	O
NULL	O
)	O
s_error_owner_storeM	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
if	O
(	O
s_error_group_storeM	pointer
==	O
NULL	O
)	O
s_error_group_storeM	pointer
=	O
strob_open	function
(	O
80	int
)	O
;	O
tmp	pointer
=	O
s_tmpM	pointer
;	O
if	O
(	O
strcmp	function
(	O
dbname	pointer
,	O
"user"	pointer
)	O
==	O
0	int
)	O
{	O
store	pointer
=	O
s_error_owner_storeM	pointer
;	O
}	O
else	O
{	O
store	pointer
=	O
s_error_group_storeM	pointer
;	O
}	O
if	O
(	O
name	pointer
)	O
{	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s: %s name [%s] not found in system database\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
dbname	pointer
,	O
name	pointer
)	O
;	O
}	O
else	O
{	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%s: %s id [%d] not found in system database\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
dbname	pointer
,	O
(	O
int	O
)	O
(	O
id	int
)	O
)	O
;	O
}	O
if	O
(	O
strstr	function
(	O
strob_str	function
(	O
store	pointer
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
{	O
if	O
(	O
is_new	pointer
)	O
*	O
is_new	pointer
=	O
0	int
;	O
n	long
=	O
count_newlines	function
(	O
strob_str	function
(	O
store	pointer
)	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
strob_strcat	function
(	O
store	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
if	O
(	O
is_new	pointer
)	O
*	O
is_new	pointer
=	O
1	int
;	O
n	long
=	O
count_newlines	function
(	O
strob_str	function
(	O
store	pointer
)	O
,	O
NULL	O
)	O
;	O
}	O
return	O
n	long
;	O
}	O
int	O
ahs_copy	function
(	O
AHS	struct
*	O
ahs_to	pointer
,	O
AHS	struct
*	O
ahs_from	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_filehdr2filehdr	function
(	O
ahs_to	pointer
->	O
file_hdrM	pointer
,	O
ahs_from	pointer
->	O
file_hdrM	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
new_cpio_header	struct
*	O
ahsStaticCreateFilehdr	function
(	O
void	O
)	O
{	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
taru_make_header	function
(	O
)	O
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarUsername	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarGroupname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
return	O
file_hdr	pointer
;	O
}	O
void	O
ahsStaticDeleteFilehdr	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarUsername	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetTarGroupname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
taru_free_header	function
(	O
file_hdr	pointer
)	O
;	O
}	O
void	O
ahsStaticSetTarLinknameLength	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
len	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_length_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
(	O
&	O
(	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
)	O
)	O
,	O
len	int
)	O
;	O
}	O
void	O
ahsStaticSetTarFilenameLength	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
len	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_length_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
(	O
&	O
(	O
file_hdr	pointer
->	O
c_name	pointer
)	O
)	O
,	O
len	int
)	O
;	O
}	O
void	O
ahsStatic_strip_name_leading_slash	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
char	O
*	O
name	pointer
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
;	O
ahsStatic_strip_leading_slash_i	function
(	O
name	pointer
)	O
;	O
}	O
char	O
*	O
ahsStaticGetTarLinkname	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
)	O
)	O
;	O
}	O
char	O
*	O
ahsStaticGetTarFilename	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_name	pointer
)	O
)	O
;	O
}	O
char	O
*	O
ahsStaticGetTarUsername	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_username	pointer
)	O
)	O
;	O
}	O
char	O
*	O
ahsStaticGetTarGroupname	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_groupname	pointer
)	O
)	O
;	O
}	O
void	O
ahsStaticSetPaxLinkname	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
)	O
,	O
name	pointer
,	O
-	O
1	int
)	O
;	O
}	O
void	O
ahsStaticSetTarLinkname	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_tar_linkname	pointer
)	O
,	O
name	pointer
,	O
TARLINKNAMESIZE	int
)	O
;	O
}	O
void	O
ahsStaticSetTarFilename	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_name	pointer
)	O
,	O
name	pointer
,	O
-	O
1	int
)	O
;	O
}	O
void	O
ahsStaticSetTarUsername	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_username	pointer
)	O
,	O
name	pointer
,	O
-	O
1	int
)	O
;	O
}	O
void	O
ahsStaticSetTarGroupname	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarname_i	function
(	O
(	O
STROB	struct
*	O
*	O
)	O
&	O
(	O
file_hdr	pointer
->	O
c_groupname	pointer
)	O
,	O
name	pointer
,	O
-	O
1	int
)	O
;	O
}	O
void	O
ahs_close	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
file_hdr	pointer
=	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
swbis_free	O
(	O
xhs	pointer
)	O
;	O
}	O
AHS	struct
*	O
ahs_open	function
(	O
void	O
)	O
{	O
AHS	struct
*	O
xhs	pointer
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xhs	pointer
=	O
(	O
AHS	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
AHS	struct
)	O
)	O
;	O
if	O
(	O
!	O
xhs	pointer
)	O
return	O
NULL	O
;	O
xhs	pointer
->	O
file_hdrM	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
taru_init_header	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
;	O
return	O
xhs	pointer
;	O
}	O
void	O
ahs_init_header	function
(	O
AHS	struct
*	O
ahs	pointer
)	O
{	O
taru_init_header	function
(	O
ahs_vfile_hdr	function
(	O
ahs	pointer
)	O
)	O
;	O
}	O
struct	O
new_cpio_header	struct
*	O
ahs_vfile_hdr	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xhs	pointer
->	O
file_hdrM	pointer
)	O
;	O
}	O
char	O
*	O
ahs_get_header_buffer	function
(	O
char	O
*	O
buf	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
buf	pointer
)	O
{	O
return	O
buf	pointer
;	O
}	O
else	O
{	O
static	O
char	O
a	pointer
[	O
512	int
]	O
;	O
return	O
a	pointer
;	O
}	O
}	O
void	O
ahs_set_tar_chksum	function
(	O
void	O
)	O
{	O
return	O
;	O
}	O
void	O
ahs_set_mode	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
mode_t	int
mode	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mode	short
=	O
(	O
unsigned	O
long	O
)	O
(	O
mode	int
)	O
;	O
}	O
void	O
ahs_set_perms	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
mode_t	int
perms	int
)	O
{	O
mode_t	int
mode	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
mode	int
=	O
ahs_get_mode	function
(	O
xhs	pointer
)	O
;	O
mode	int
&=	O
~	O
(	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
|	O
S_ISUID	O
|	O
S_ISGID	O
|	O
S_ISVTX	O
)	O
;	O
mode	int
|=	O
perms	int
;	O
ahs_set_mode	function
(	O
xhs	pointer
,	O
mode	int
)	O
;	O
}	O
void	O
ahs_set_filetype_from_tartype	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
s	pointer
)	O
{	O
mode_t	int
modet	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
modet	int
=	O
(	O
mode_t	int
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mode	short
)	O
;	O
taru_set_filetype_from_tartype	function
(	O
s	pointer
,	O
&	O
modet	int
,	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mode	short
=	O
(	O
unsigned	O
long	O
)	O
modet	int
;	O
}	O
void	O
ahs_set_uid	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
uid_t	int
uid	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_uid	short
=	O
uid	int
;	O
}	O
void	O
ahs_set_uid_by_name	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
username	pointer
)	O
{	O
uid_t	int
x	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taru_get_uid_by_name	function
(	O
username	pointer
,	O
&	O
x	int
)	O
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_uid	short
=	O
AHS_UID_NOBODY	O
;	O
}	O
else	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_uid	short
=	O
(	O
unsigned	O
long	O
)	O
x	int
;	O
}	O
}	O
void	O
ahs_set_gid_by_name	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
groupname	pointer
)	O
{	O
gid_t	int
x	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taru_get_gid_by_name	function
(	O
groupname	pointer
,	O
&	O
x	int
)	O
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_gid	short
=	O
AHS_GID_NOBODY	O
;	O
}	O
else	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_gid	short
=	O
(	O
unsigned	O
long	O
)	O
x	int
;	O
}	O
}	O
void	O
ahs_set_gid	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
gid_t	int
gid	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_gid	short
=	O
gid	int
;	O
}	O
void	O
ahs_set_filesize	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
intmax_t	long
filesize	long
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_filesize	long
=	O
(	O
uintmax_t	long
)	O
filesize	long
;	O
}	O
void	O
ahs_set_nlink	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
int	O
nlink	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_nlink	short
=	O
nlink	int
;	O
}	O
void	O
ahs_set_inode	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
ino_t	long
ino	long
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_ino	short
=	O
ino	long
;	O
}	O
void	O
ahs_set_mtime	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
time_t	long
mtime	long
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mtime	long
=	O
mtime	long
;	O
}	O
void	O
ahs_set_devmajor	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
dev_t	long
dev	long
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_rdev_maj	long
=	O
(	O
dev	long
)	O
;	O
}	O
void	O
ahs_set_devminor	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
dev_t	long
dev	long
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_rdev_min	long
=	O
(	O
dev	long
)	O
;	O
}	O
void	O
ahs_set_name	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarFilename	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
,	O
name	pointer
)	O
;	O
}	O
void	O
ahs_set_linkname	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
linkname	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
,	O
linkname	pointer
)	O
;	O
}	O
void	O
ahs_set_from_statbuf	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_statbuf2filehdr	function
(	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
,	O
st	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
ahs_set_to_statbuf	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_filehdr2statbuf	function
(	O
st	pointer
,	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
)	O
;	O
}	O
void	O
ahs_set_from_new_cpio_header	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
void	O
*	O
vfh	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
taru_filehdr2filehdr	function
(	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
,	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
vfh	pointer
)	O
)	O
;	O
}	O
void	O
*	O
ahs_get_new_cpio_header	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
(	O
void	O
*	O
)	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
;	O
}	O
char	O
ahs_get_tar_typeflag	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taru_get_tar_filetype	function
(	O
(	O
mode_t	int
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mode	short
)	O
)	O
;	O
}	O
unsigned	O
ahs_get_tar_chksum	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
void	O
*	O
tarhdr	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taru_tar_checksum	function
(	O
tarhdr	pointer
)	O
;	O
}	O
char	O
*	O
ahs_get_system_username	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taru_get_tar_user_by_uid	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_uid	short
,	O
buf	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
return	O
buf	pointer
;	O
}	O
}	O
char	O
*	O
ahs_get_system_groupname	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taru_get_tar_group_by_gid	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_gid	short
,	O
buf	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
return	O
buf	pointer
;	O
}	O
}	O
int	O
ahs_set_user_systempair	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
int	O
id_decrement	int
;	O
int	O
is_new	pointer
;	O
uid_t	int
x	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
is_numeric_name	function
(	O
name	pointer
)	O
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_username	function
(	O
xhs	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
taru_get_uid_by_name	function
(	O
name	pointer
,	O
&	O
x	int
)	O
<	O
0	int
)	O
{	O
id_decrement	int
=	O
error_msg_control	function
(	O
name	pointer
,	O
0	int
,	O
"user"	pointer
,	O
&	O
is_new	pointer
)	O
;	O
x	int
=	O
AHS_UID_NOBODY	O
-	O
id_decrement	int
;	O
if	O
(	O
is_new	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: warning: user [%s] not found, setting uid to %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
name	pointer
,	O
(	O
int	O
)	O
(	O
x	int
)	O
)	O
;	O
ret	int
=	O
1	int
;	O
}	O
ahs_set_uid	function
(	O
xhs	pointer
,	O
(	O
uid_t	int
)	O
(	O
x	int
)	O
)	O
;	O
}	O
else	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_username	function
(	O
xhs	pointer
,	O
""	pointer
)	O
;	O
ahs_set_uid	function
(	O
xhs	pointer
,	O
(	O
uid_t	int
)	O
(	O
atol	function
(	O
name	pointer
)	O
)	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
ahs_set_group_systempair	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
int	O
id_decrement	int
;	O
int	O
is_new	pointer
;	O
gid_t	int
x	int
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
is_numeric_name	function
(	O
name	pointer
)	O
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_groupname	function
(	O
xhs	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
taru_get_gid_by_name	function
(	O
name	pointer
,	O
&	O
x	int
)	O
<	O
0	int
)	O
{	O
id_decrement	int
=	O
error_msg_control	function
(	O
name	pointer
,	O
0	int
,	O
"group"	pointer
,	O
&	O
is_new	pointer
)	O
;	O
x	int
=	O
AHS_GID_NOBODY	O
-	O
id_decrement	int
;	O
if	O
(	O
is_new	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: warning: group [%s] not found, setting gid to %d\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
name	pointer
,	O
(	O
int	O
)	O
(	O
x	int
)	O
)	O
;	O
ret	int
=	O
1	int
;	O
}	O
ahs_set_gid	function
(	O
xhs	pointer
,	O
(	O
gid_t	int
)	O
(	O
x	int
)	O
)	O
;	O
}	O
else	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahs_set_tar_groupname	function
(	O
xhs	pointer
,	O
""	pointer
)	O
;	O
ahs_set_gid	function
(	O
xhs	pointer
,	O
(	O
gid_t	int
)	O
(	O
atol	function
(	O
name	pointer
)	O
)	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
void	O
ahs_set_sys_db_g_policy	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
int	O
c	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xhs	pointer
->	O
file_hdrM	pointer
->	O
c_cg	char
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
void	O
ahs_set_sys_db_u_policy	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
int	O
c	int
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
xhs	pointer
->	O
file_hdrM	pointer
->	O
c_cu	char
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
void	O
ahs_set_tar_username	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarUsername	function
(	O
xhs	pointer
->	O
file_hdrM	pointer
,	O
name	pointer
)	O
;	O
}	O
void	O
ahs_set_tar_groupname	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
ahsStaticSetTarGroupname	function
(	O
xhs	pointer
->	O
file_hdrM	pointer
,	O
name	pointer
)	O
;	O
}	O
char	O
*	O
ahs_get_tar_username	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarUsername	function
(	O
xhs	pointer
->	O
file_hdrM	pointer
)	O
;	O
}	O
char	O
*	O
ahs_get_tar_groupname	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ahsStaticGetTarGroupname	function
(	O
xhs	pointer
->	O
file_hdrM	pointer
)	O
;	O
}	O
intmax_t	long
ahs_get_filesize	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
taru_hdr_get_filesize	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
;	O
}	O
time_t	long
ahs_get_mtime	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
(	O
time_t	long
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mtime	long
)	O
;	O
}	O
char	O
*	O
ahs_get_name	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
;	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
buf	pointer
)	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
buf	pointer
,	O
name	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
AHS_E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
name	pointer
;	O
}	O
}	O
char	O
*	O
ahs_get_linkname	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
ahsStaticGetTarLinkname	function
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
)	O
;	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
>	O
99	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning, Link name [%s] is too long for tar format archives, truncating linkname.\n"	pointer
,	O
name	pointer
)	O
;	O
}	O
if	O
(	O
buf	pointer
)	O
{	O
strncpy	function
(	O
buf	pointer
,	O
name	pointer
,	O
100	int
)	O
;	O
buf	pointer
[	O
99	int
]	O
=	O
'\0'	O
;	O
name	pointer
=	O
buf	pointer
;	O
}	O
return	O
name	pointer
;	O
}	O
mode_t	int
ahs_get_mode	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
return	O
(	O
mode_t	int
)	O
(	O
ahs_vfile_hdr	function
(	O
xhs	pointer
)	O
->	O
c_mode	short
)	O
;	O
}	O
mode_t	int
ahs_get_perms	function
(	O
AHS	struct
*	O
xhs	pointer
)	O
{	O
mode_t	int
mode	int
=	O
ahs_get_mode	function
(	O
xhs	pointer
)	O
;	O
return	O
mode	int
&	O
(	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
|	O
S_ISUID	O
|	O
S_ISGID	O
|	O
S_ISVTX	O
)	O
;	O
}	O
char	O
*	O
ahs_get_source_filename	function
(	O
AHS	struct
*	O
xhs	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
;	O
}	O
