static	O
void	O
central_deriv	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
x	double
,	O
double	O
h	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr_round	pointer
,	O
double	O
*	O
abserr_trunc	pointer
)	O
{	O
double	O
fm1	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
-	O
h	double
)	O
;	O
double	O
fp1	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
h	double
)	O
;	O
double	O
fmh	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
-	O
h	double
/	O
2	int
)	O
;	O
double	O
fph	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
h	double
/	O
2	int
)	O
;	O
double	O
r3	double
=	O
0.5	int
*	O
(	O
fp1	double
-	O
fm1	double
)	O
;	O
double	O
r5	double
=	O
(	O
4.0	int
/	O
3.0	int
)	O
*	O
(	O
fph	double
-	O
fmh	double
)	O
-	O
(	O
1.0	int
/	O
3.0	int
)	O
*	O
r3	double
;	O
double	O
e3	double
=	O
(	O
fabs	function
(	O
fp1	double
)	O
+	O
fabs	function
(	O
fm1	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
;	O
double	O
e5	double
=	O
2.0	int
*	O
(	O
fabs	function
(	O
fph	double
)	O
+	O
fabs	function
(	O
fmh	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
+	O
e3	double
;	O
double	O
dy	double
=	O
GSL_MAX	O
(	O
fabs	function
(	O
r3	double
/	O
h	double
)	O
,	O
fabs	function
(	O
r5	double
/	O
h	double
)	O
)	O
*	O
(	O
fabs	function
(	O
x	double
)	O
/	O
h	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
*	O
result	pointer
=	O
r5	double
/	O
h	double
;	O
*	O
abserr_trunc	pointer
=	O
fabs	function
(	O
(	O
r5	double
-	O
r3	double
)	O
/	O
h	double
)	O
;	O
*	O
abserr_round	pointer
=	O
fabs	function
(	O
e5	double
/	O
h	double
)	O
+	O
dy	double
;	O
}	O
int	O
gsl_deriv_central	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
x	double
,	O
double	O
h	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
double	O
r_0	double
,	O
round	function
,	O
trunc	function
,	O
error	double
;	O
central_deriv	function
(	O
f	pointer
,	O
x	double
,	O
h	double
,	O
&	O
r_0	double
,	O
&	O
round	function
,	O
&	O
trunc	function
)	O
;	O
error	double
=	O
round	function
+	O
trunc	function
;	O
if	O
(	O
round	function
<	O
trunc	function
&&	O
(	O
round	function
>	O
0	int
&&	O
trunc	function
>	O
0	int
)	O
)	O
{	O
double	O
r_opt	double
,	O
round_opt	double
,	O
trunc_opt	double
,	O
error_opt	double
;	O
double	O
h_opt	double
=	O
h	double
*	O
pow	function
(	O
round	function
/	O
(	O
2.0	int
*	O
trunc	function
)	O
,	O
1.0	int
/	O
3.0	int
)	O
;	O
central_deriv	function
(	O
f	pointer
,	O
x	double
,	O
h_opt	double
,	O
&	O
r_opt	double
,	O
&	O
round_opt	double
,	O
&	O
trunc_opt	double
)	O
;	O
error_opt	double
=	O
round_opt	double
+	O
trunc_opt	double
;	O
if	O
(	O
error_opt	double
<	O
error	double
&&	O
fabs	function
(	O
r_opt	double
-	O
r_0	double
)	O
<	O
4.0	int
*	O
error	double
)	O
{	O
r_0	double
=	O
r_opt	double
;	O
error	double
=	O
error_opt	double
;	O
}	O
}	O
*	O
result	pointer
=	O
r_0	double
;	O
*	O
abserr	pointer
=	O
error	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
forward_deriv	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
x	double
,	O
double	O
h	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr_round	pointer
,	O
double	O
*	O
abserr_trunc	pointer
)	O
{	O
double	O
f1	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
h	double
/	O
4.0	int
)	O
;	O
double	O
f2	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
h	double
/	O
2.0	int
)	O
;	O
double	O
f3	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
(	O
3.0	int
/	O
4.0	int
)	O
*	O
h	double
)	O
;	O
double	O
f4	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
x	double
+	O
h	double
)	O
;	O
double	O
r2	double
=	O
2.0	int
*	O
(	O
f4	double
-	O
f2	double
)	O
;	O
double	O
r4	double
=	O
(	O
22.0	int
/	O
3.0	int
)	O
*	O
(	O
f4	double
-	O
f3	double
)	O
-	O
(	O
62.0	int
/	O
3.0	int
)	O
*	O
(	O
f3	double
-	O
f2	double
)	O
+	O
(	O
52.0	int
/	O
3.0	int
)	O
*	O
(	O
f2	double
-	O
f1	double
)	O
;	O
double	O
e4	double
=	O
2	int
*	O
20.67	int
*	O
(	O
fabs	function
(	O
f4	double
)	O
+	O
fabs	function
(	O
f3	double
)	O
+	O
fabs	function
(	O
f2	double
)	O
+	O
fabs	function
(	O
f1	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
;	O
double	O
dy	double
=	O
GSL_MAX	O
(	O
fabs	function
(	O
r2	double
/	O
h	double
)	O
,	O
fabs	function
(	O
r4	double
/	O
h	double
)	O
)	O
*	O
fabs	function
(	O
x	double
/	O
h	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
*	O
result	pointer
=	O
r4	double
/	O
h	double
;	O
*	O
abserr_trunc	pointer
=	O
fabs	function
(	O
(	O
r4	double
-	O
r2	double
)	O
/	O
h	double
)	O
;	O
*	O
abserr_round	pointer
=	O
fabs	function
(	O
e4	double
/	O
h	double
)	O
+	O
dy	double
;	O
}	O
int	O
gsl_deriv_forward	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
x	double
,	O
double	O
h	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
double	O
r_0	double
,	O
round	function
,	O
trunc	function
,	O
error	double
;	O
forward_deriv	function
(	O
f	pointer
,	O
x	double
,	O
h	double
,	O
&	O
r_0	double
,	O
&	O
round	function
,	O
&	O
trunc	function
)	O
;	O
error	double
=	O
round	function
+	O
trunc	function
;	O
if	O
(	O
round	function
<	O
trunc	function
&&	O
(	O
round	function
>	O
0	int
&&	O
trunc	function
>	O
0	int
)	O
)	O
{	O
double	O
r_opt	double
,	O
round_opt	double
,	O
trunc_opt	double
,	O
error_opt	double
;	O
double	O
h_opt	double
=	O
h	double
*	O
pow	function
(	O
round	function
/	O
(	O
trunc	function
)	O
,	O
1.0	int
/	O
2.0	int
)	O
;	O
forward_deriv	function
(	O
f	pointer
,	O
x	double
,	O
h_opt	double
,	O
&	O
r_opt	double
,	O
&	O
round_opt	double
,	O
&	O
trunc_opt	double
)	O
;	O
error_opt	double
=	O
round_opt	double
+	O
trunc_opt	double
;	O
if	O
(	O
error_opt	double
<	O
error	double
&&	O
fabs	function
(	O
r_opt	double
-	O
r_0	double
)	O
<	O
4.0	int
*	O
error	double
)	O
{	O
r_0	double
=	O
r_opt	double
;	O
error	double
=	O
error_opt	double
;	O
}	O
}	O
*	O
result	pointer
=	O
r_0	double
;	O
*	O
abserr	pointer
=	O
error	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_deriv_backward	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
x	double
,	O
double	O
h	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
return	O
gsl_deriv_forward	function
(	O
f	pointer
,	O
x	double
,	O
-	O
h	double
,	O
result	pointer
,	O
abserr	pointer
)	O
;	O
}	O
