void	O
tninit	function
(	O
void	O
)	O
{	O
init_terminal	function
(	O
)	O
;	O
init_network	function
(	O
)	O
;	O
init_telnet	function
(	O
)	O
;	O
init_sys	function
(	O
)	O
;	O
}	O
int	O
family	int
=	O
0	int
;	O
char	O
*	O
user	pointer
;	O
enum	O
{	O
OPTION_NOASYNCH	int
=	O
256	int
,	O
OPTION_NOASYNCTTY	int
,	O
OPTION_NOASYNCNET	int
}	O
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"General options:"	pointer
,	O
GRID	int
}	O
,	O
{	O
"ipv4"	pointer
,	O
'4'	O
,	O
NULL	O
,	O
0	int
,	O
"use only IPv4"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"ipv6"	pointer
,	O
'6'	O
,	O
NULL	O
,	O
0	int
,	O
"use only IPv6"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"binary"	pointer
,	O
'8'	O
,	O
NULL	O
,	O
0	int
,	O
"use an 8-bit data transmission"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"login"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
"attempt automatic login"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-rc"	pointer
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
"do not read the user's .telnetrc file"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"turn on debugging"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"escape"	pointer
,	O
'e'	O
,	O
"CHAR"	pointer
,	O
0	int
,	O
"use CHAR as an escape character"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-escape"	pointer
,	O
'E'	O
,	O
NULL	O
,	O
0	int
,	O
"use no escape character"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-login"	pointer
,	O
'K'	O
,	O
NULL	O
,	O
0	int
,	O
"do not automatically login to the remote system"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"user"	pointer
,	O
'l'	O
,	O
"USER"	pointer
,	O
0	int
,	O
"attempt automatic login as USER"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"binary-output"	pointer
,	O
'L'	O
,	O
NULL	O
,	O
0	int
,	O
"use an 8-bit data transmission for output only"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"trace"	pointer
,	O
'n'	O
,	O
"FILE"	pointer
,	O
0	int
,	O
"record trace information into FILE"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"rlogin"	pointer
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"use a user-interface similar to rlogin"	pointer
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'4'	O
:	O
family	int
=	O
4	int
;	O
break	O
;	O
case	O
'6'	O
:	O
family	int
=	O
6	int
;	O
break	O
;	O
case	O
'8'	O
:	O
eight	int
=	O
3	int
;	O
break	O
;	O
case	O
'E'	O
:	O
rlogin	char
=	O
escape	char
=	O
_POSIX_VDISABLE	char
;	O
break	O
;	O
case	O
'K'	O
:	O
break	O
;	O
case	O
'L'	O
:	O
eight	int
|=	O
2	int
;	O
break	O
;	O
case	O
'a'	O
:	O
autologin	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
skiprc	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
debug	int
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
set_escape_char	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
autologin	int
=	O
1	int
;	O
user	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
SetNetTrace	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
rlogin	char
=	O
'~'	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"[HOST [PORT]]"	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Login to remote system HOST "	pointer
"(optionally, on service port PORT)"	pointer
;	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
index	function
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
tninit	function
(	O
)	O
;	O
TerminalSaveState	function
(	O
)	O
;	O
if	O
(	O
(	O
prompt	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
)	O
)	O
++	O
prompt	pointer
;	O
else	O
prompt	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
user	pointer
=	O
NULL	O
;	O
rlogin	char
=	O
(	O
strncmp	function
(	O
prompt	pointer
,	O
"rlog"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
?	O
'~'	O
:	O
_POSIX_VDISABLE	char
;	O
autologin	int
=	O
-	O
1	int
;	O
iu_argp_init	O
(	O
"telnet"	pointer
,	O
default_program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
if	O
(	O
autologin	int
==	O
-	O
1	int
)	O
autologin	int
=	O
(	O
rlogin	char
==	O
_POSIX_VDISABLE	char
)	O
?	O
0	int
:	O
1	int
;	O
argc	int
-=	O
index	function
;	O
argv	pointer
+=	O
index	function
;	O
if	O
(	O
argc	int
)	O
{	O
char	O
*	O
args	array
[	O
8	int
]	O
,	O
*	O
*	O
argp	struct
=	O
args	array
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"too many arguments"	pointer
)	O
;	O
*	O
argp	struct
++	O
=	O
prompt	pointer
;	O
if	O
(	O
user	pointer
)	O
{	O
*	O
argp	struct
++	O
=	O
"-l"	pointer
;	O
*	O
argp	struct
++	O
=	O
user	pointer
;	O
}	O
if	O
(	O
family	int
==	O
4	int
)	O
*	O
argp	struct
++	O
=	O
"-4"	pointer
;	O
else	O
if	O
(	O
family	int
==	O
6	int
)	O
*	O
argp	struct
++	O
=	O
"-6"	pointer
;	O
*	O
argp	struct
++	O
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
*	O
argp	struct
++	O
=	O
argv	pointer
[	O
1	int
]	O
;	O
*	O
argp	struct
=	O
0	int
;	O
if	O
(	O
setjmp	function
(	O
toplevel	array
)	O
!=	O
0	int
)	O
Exit	function
(	O
0	int
)	O
;	O
if	O
(	O
tn	function
(	O
argp	struct
-	O
args	array
,	O
args	array
)	O
==	O
1	int
)	O
return	O
(	O
0	int
)	O
;	O
else	O
return	O
(	O
1	int
)	O
;	O
}	O
setjmp	function
(	O
toplevel	array
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
command	function
(	O
1	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
