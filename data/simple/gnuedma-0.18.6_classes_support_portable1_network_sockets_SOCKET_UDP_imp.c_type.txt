typedef	O
struct	O
{	O
EUint32	long
s	long
;	O
EPChar	pointer
resource	pointer
;	O
EUint32	long
LocalPort	long
;	O
EUint32	long
LocalAddr	long
;	O
EUint32	long
RemoteAddr	long
;	O
EUint32	long
RemotePort	long
;	O
}	O
DtSSOCK	struct
;	O
EUint32	long
EDMAPROC	O
SOCKET_UDPbindZU32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Name	pointer
,	O
EUint32	long
port	long
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
struct	O
sockaddr_in	struct
local	struct
;	O
struct	O
hostent	struct
*	O
maq	pointer
;	O
EUint32	long
n	long
;	O
EChar	char
res	array
[	O
1024	int
]	O
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
sprintf	function
(	O
res	array
,	O
"%s:%ld"	pointer
,	O
Name	pointer
,	O
port	long
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"resource"	pointer
,	O
res	array
)	O
;	O
local	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
local	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	long
)	O
;	O
if	O
(	O
Name	pointer
==	O
NULL	O
)	O
local	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htons	function
(	O
INADDR_ANY	O
)	O
;	O
else	O
if	O
(	O
isdigit	function
(	O
Name	pointer
[	O
0	int
]	O
)	O
)	O
local	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
inet_addr	function
(	O
Name	pointer
)	O
;	O
else	O
{	O
maq	pointer
=	O
gethostbyname	function
(	O
Name	pointer
)	O
;	O
if	O
(	O
maq	pointer
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"(bind)Can't locate host %s"	pointer
,	O
Name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
local	struct
.	O
sin_addr	struct
=	O
(	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
(	O
maq	pointer
->	O
h_addr	O
)	O
)	O
;	O
}	O
}	O
bzero	function
(	O
&	O
(	O
local	struct
.	O
sin_zero	array
)	O
,	O
8	int
)	O
;	O
n	long
=	O
bind	function
(	O
m	pointer
->	O
s	long
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
local	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"(bind) Error"	pointer
)	O
;	O
return	O
n	long
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPsendAU32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
Buff	struct
,	O
EUint32	long
len	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
struct	O
sockaddr_in	struct
remote	struct
;	O
EUint32	long
i	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
remote	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
remote	struct
.	O
sin_port	short
=	O
m	pointer
->	O
RemotePort	long
;	O
remote	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
m	pointer
->	O
RemoteAddr	long
;	O
i	int
=	O
sendto	function
(	O
m	pointer
->	O
s	long
,	O
Buff	struct
.	O
dat	pointer
,	O
len	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
remote	struct
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
perror	function
(	O
""	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPrecvsAsU32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
*	O
Buff	struct
,	O
EPUint32	pointer
len	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
struct	O
sockaddr_in	struct
remote	struct
;	O
ESint32	int
i	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
remote	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
remote	struct
.	O
sin_port	short
=	O
m	pointer
->	O
RemotePort	long
;	O
remote	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
m	pointer
->	O
RemoteAddr	long
;	O
i	int
=	O
recvfrom	function
(	O
m	pointer
->	O
s	long
,	O
Buff	struct
->	O
dat	pointer
,	O
*	O
len	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
remote	struct
,	O
(	O
int	O
*	O
)	O
len	int
)	O
;	O
m	pointer
->	O
RemotePort	long
=	O
remote	struct
.	O
sin_port	short
;	O
m	pointer
->	O
RemoteAddr	long
=	O
remote	struct
.	O
sin_addr	struct
.	O
s_addr	int
;	O
return	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPSetRemoteZU32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Name	pointer
,	O
EUint32	long
port	long
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
struct	O
hostent	struct
*	O
maq	pointer
;	O
struct	O
sockaddr_in	struct
remote	struct
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
m	pointer
->	O
RemotePort	long
=	O
htons	function
(	O
port	long
)	O
;	O
if	O
(	O
Name	pointer
==	O
NULL	O
)	O
{	O
m	pointer
->	O
RemoteAddr	long
=	O
htons	function
(	O
INADDR_ANY	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
isdigit	function
(	O
Name	pointer
[	O
0	int
]	O
)	O
)	O
{	O
m	pointer
->	O
RemoteAddr	long
=	O
inet_addr	function
(	O
Name	pointer
)	O
;	O
}	O
else	O
{	O
maq	pointer
=	O
gethostbyname	function
(	O
Name	pointer
)	O
;	O
if	O
(	O
maq	pointer
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"(SetRemote)Can't locate host %s"	pointer
,	O
Name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
remote	struct
.	O
sin_addr	struct
=	O
(	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
(	O
maq	pointer
->	O
h_addr	O
)	O
)	O
;	O
m	pointer
->	O
RemoteAddr	long
=	O
remote	struct
.	O
sin_addr	struct
.	O
s_addr	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPborn	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
m	pointer
->	O
s	long
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
m	pointer
->	O
s	long
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Can't create datagram socket"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPrip	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
close	function
(	O
m	pointer
->	O
s	long
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPSendAS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
Buff	struct
,	O
EUint32	long
len	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
EUint32	long
i	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
i	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"send"	pointer
,	O
Buff	struct
,	O
len	int
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
perror	function
(	O
""	pointer
)	O
;	O
return	O
(	O
ESint32	int
)	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPRecvsAsS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct
*	O
Buff	struct
,	O
EPUint32	pointer
len	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
ESint32	int
i	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
i	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"recv"	pointer
,	O
Buff	struct
,	O
len	int
)	O
;	O
*	O
len	int
=	O
i	int
;	O
return	O
i	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPOpenZS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
Name	pointer
,	O
ESint32	int
mode	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
EChar	char
addr	array
[	O
1024	int
]	O
;	O
EChar	char
temp	array
[	O
1024	int
]	O
;	O
EUint32	long
port	long
;	O
EPChar	pointer
aux	pointer
;	O
ESint32	int
r	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
mode	int
>=	O
2	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] Append Mode (3) not support over this channel"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
temp	array
,	O
Name	pointer
)	O
;	O
aux	pointer
=	O
strchr	function
(	O
temp	array
,	O
':'	O
)	O
;	O
if	O
(	O
aux	pointer
==	O
NULL	O
)	O
{	O
port	long
=	O
0	int
;	O
if	O
(	O
mode	int
!=	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"[ERROR] No port specified for Read Openning"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
port	long
=	O
atoi	function
(	O
aux	pointer
+	O
1	int
)	O
;	O
*	O
aux	pointer
=	O
0	int
;	O
}	O
strncpy	function
(	O
addr	array
,	O
temp	array
,	O
1024	int
)	O
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
0	int
:	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"bind"	pointer
,	O
addr	array
,	O
port	long
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
r	int
;	O
break	O
;	O
case	O
1	int
:	O
r	int
=	O
(	O
ESint32	int
)	O
edma_met3	function
(	O
IdObj	int
,	O
"SetRemote"	pointer
,	O
addr	array
,	O
port	long
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
r	int
;	O
break	O
;	O
case	O
2	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPCloserS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPWaitsOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
ESint32	int
r	int
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
r	int
;	O
}	O
EUint32	long
EDMAPROC	O
SOCKET_UDPConfigOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtSSOCK	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtSSOCK	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
0	int
;	O
}	O
