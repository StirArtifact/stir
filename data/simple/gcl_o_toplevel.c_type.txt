object	O
sLcompile	int
,	O
sLload	O
,	O
sLeval	O
,	O
sKcompile_toplevel	O
,	O
sKload_toplevel	O
,	O
sKexecute	O
;	O
object	O
sLprogn	int
;	O
object	O
sLwarn	int
;	O
object	O
sSAinhibit_macro_specialA	int
;	O
object	O
sLtypep	int
;	O
static	O
void	O
FFN	function
(	O
Fdefun	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
name	O
;	O
object	O
body	int
,	O
form	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
if	O
(	O
MMcadr	function
(	O
args	int
)	O
!=	O
Cnil	O
&&	O
type_of	function
(	O
MMcadr	function
(	O
args	int
)	O
)	O
!=	O
t_cons	O
)	O
FEerror	function
(	O
"~S is an illegal lambda-list."	pointer
,	O
1	int
,	O
MMcadr	function
(	O
args	int
)	O
)	O
;	O
name	O
=	O
MMcar	function
(	O
args	int
)	O
;	O
if	O
(	O
type_of	function
(	O
name	O
)	O
!=	O
t_symbol	O
)	O
not_a_symbol	function
(	O
name	O
)	O
;	O
if	O
(	O
name	O
->	O
s	O
.	O
s_sfdef	O
!=	O
NOT_SPECIAL	O
)	O
{	O
if	O
(	O
name	O
->	O
s	O
.	O
s_mflag	O
)	O
{	O
if	O
(	O
symbol_value	function
(	O
sSAinhibit_macro_specialA	int
)	O
!=	O
Cnil	O
)	O
name	O
->	O
s	O
.	O
s_sfdef	O
=	O
NOT_SPECIAL	O
;	O
}	O
else	O
if	O
(	O
symbol_value	function
(	O
sSAinhibit_macro_specialA	int
)	O
!=	O
Cnil	O
)	O
FEerror	function
(	O
"~S, a special form, cannot be redefined."	pointer
,	O
1	int
,	O
name	O
)	O
;	O
}	O
if	O
(	O
name	O
->	O
s	O
.	O
s_hpack	O
==	O
lisp_package	O
&&	O
name	O
->	O
s	O
.	O
s_gfdef	O
!=	O
OBJNULL	O
&&	O
!	O
raw_image	O
)	O
{	O
vs_push	function
(	O
make_simple_string	function
(	O
"~S is being redefined."	pointer
)	O
)	O
;	O
ifuncall2	function
(	O
sLwarn	int
,	O
vs_head	O
,	O
name	O
)	O
;	O
vs_popp	O
;	O
}	O
vs_base	O
=	O
vs_top	O
;	O
if	O
(	O
lex_env	O
[	O
0	int
]	O
==	O
Cnil	O
&&	O
lex_env	O
[	O
1	int
]	O
==	O
Cnil	O
&&	O
lex_env	O
[	O
2	int
]	O
==	O
Cnil	O
)	O
{	O
vs_push	function
(	O
MMcons	function
(	O
sLlambda_block	O
,	O
args	int
)	O
)	O
;	O
}	O
else	O
{	O
vs_push	function
(	O
MMcons	function
(	O
lex_env	O
[	O
2	int
]	O
,	O
args	int
)	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex_env	O
[	O
1	int
]	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex_env	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
sLlambda_block_closure	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
{	O
object	O
fname	O
=	O
clear_compiler_properties	O
(	O
name	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
fname	O
->	O
s	O
.	O
s_gfdef	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
fname	O
->	O
s	O
.	O
s_mflag	O
=	O
FALSE	O
;	O
}	O
vs_base	O
[	O
0	int
]	O
=	O
name	O
;	O
for	O
(	O
body	int
=	O
MMcddr	function
(	O
args	int
)	O
;	O
!	O
endp	function
(	O
body	int
)	O
;	O
body	int
=	O
body	int
->	O
c	O
.	O
c_cdr	O
)	O
{	O
form	O
=	O
macro_expand	function
(	O
body	int
->	O
c	O
.	O
c_car	O
)	O
;	O
if	O
(	O
type_of	function
(	O
form	O
)	O
==	O
t_string	O
)	O
{	O
if	O
(	O
endp	function
(	O
body	int
->	O
c	O
.	O
c_cdr	O
)	O
)	O
break	O
;	O
vs_push	function
(	O
form	O
)	O
;	O
name	O
->	O
s	O
.	O
s_plist	O
=	O
putf	function
(	O
name	O
->	O
s	O
.	O
s_plist	O
,	O
form	O
,	O
sSfunction_documentation	O
)	O
;	O
vs_popp	O
;	O
break	O
;	O
}	O
if	O
(	O
type_of	function
(	O
form	O
)	O
!=	O
t_cons	O
||	O
form	O
->	O
c	O
.	O
c_car	O
!=	O
sLdeclare	O
)	O
break	O
;	O
}	O
}	O
static	O
void	O
FFN	function
(	O
siLAmake_special	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_sym	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
(	O
enum	O
stype	O
)	O
vs_base	O
[	O
0	int
]	O
->	O
s	O
.	O
s_stype	O
==	O
stp_constant	O
)	O
FEerror	function
(	O
"~S is a constant."	pointer
,	O
1	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
->	O
s	O
.	O
s_stype	O
=	O
(	O
short	O
)	O
stp_special	O
;	O
}	O
static	O
void	O
FFN	function
(	O
siLAmake_constant	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
2	int
)	O
;	O
check_type_sym	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
(	O
enum	O
stype	O
)	O
vs_base	O
[	O
0	int
]	O
->	O
s	O
.	O
s_stype	O
==	O
stp_special	O
)	O
FEerror	function
(	O
"The argument ~S to DEFCONSTANT is a special variable."	pointer
,	O
1	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
->	O
s	O
.	O
s_stype	O
=	O
(	O
short	O
)	O
stp_constant	O
;	O
vs_base	O
[	O
0	int
]	O
->	O
s	O
.	O
s_dbind	O
=	O
vs_base	O
[	O
1	int
]	O
;	O
vs_popp	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Feval_when	int
)	O
(	O
object	O
arg	int
)	O
{	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
ss	O
;	O
bool	O
flag	O
=	O
FALSE	O
;	O
if	O
(	O
endp	function
(	O
arg	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	int
)	O
;	O
for	O
(	O
ss	O
=	O
MMcar	function
(	O
arg	int
)	O
;	O
!	O
endp	function
(	O
ss	O
)	O
;	O
ss	O
=	O
MMcdr	function
(	O
ss	O
)	O
)	O
if	O
(	O
MMcar	function
(	O
ss	O
)	O
==	O
sLeval	O
||	O
(	O
MMcar	function
(	O
ss	O
)	O
==	O
sKexecute	O
)	O
)	O
flag	O
=	O
TRUE	O
;	O
else	O
if	O
(	O
MMcar	function
(	O
ss	O
)	O
!=	O
sLload	O
&&	O
MMcar	function
(	O
ss	O
)	O
!=	O
sLcompile	int
&&	O
MMcar	function
(	O
ss	O
)	O
!=	O
sKload_toplevel	O
&&	O
MMcar	function
(	O
ss	O
)	O
!=	O
sKcompile_toplevel	O
)	O
FEinvalid_form	function
(	O
"~S is an undefined situation for EVAL-WHEN."	pointer
,	O
MMcar	function
(	O
ss	O
)	O
)	O
;	O
if	O
(	O
flag	O
)	O
{	O
vs_push	function
(	O
make_cons	function
(	O
sLprogn	int
,	O
MMcdr	function
(	O
arg	int
)	O
)	O
)	O
;	O
eval	function
(	O
vs_head	O
)	O
;	O
}	O
else	O
{	O
vs_base	O
=	O
base	O
;	O
vs_top	O
=	O
base	O
+	O
1	int
;	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
}	O
static	O
void	O
FFN	function
(	O
Fload_time_value	int
)	O
(	O
object	O
arg	int
)	O
{	O
if	O
(	O
endp	function
(	O
arg	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
arg	int
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcdr	function
(	O
arg	int
)	O
)	O
&&	O
!	O
endp	function
(	O
MMcddr	function
(	O
arg	int
)	O
)	O
)	O
FEtoo_many_argumentsF	function
(	O
arg	int
)	O
;	O
vs_push	function
(	O
MMcar	function
(	O
arg	int
)	O
)	O
;	O
eval	function
(	O
vs_head	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fdeclare	int
)	O
(	O
object	O
arg	int
)	O
{	O
FEerror	function
(	O
"DECLARE appeared in an invalid position."	pointer
,	O
0	int
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Flocally	int
)	O
(	O
object	O
body	int
)	O
{	O
object	O
*	O
oldlex	O
=	O
lex_env	O
;	O
lex_copy	function
(	O
)	O
;	O
body	int
=	O
find_special	function
(	O
body	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
vs_push	function
(	O
body	int
)	O
;	O
Fprogn	function
(	O
body	int
)	O
;	O
lex_env	O
=	O
oldlex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fthe	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
*	O
vs	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcddr	function
(	O
args	int
)	O
)	O
)	O
FEtoo_many_argumentsF	function
(	O
args	int
)	O
;	O
eval	function
(	O
MMcadr	function
(	O
args	int
)	O
)	O
;	O
args	int
=	O
MMcar	function
(	O
args	int
)	O
;	O
if	O
(	O
type_of	function
(	O
args	int
)	O
==	O
t_cons	O
&&	O
MMcar	function
(	O
args	int
)	O
==	O
sLvalues	O
)	O
{	O
vs	O
=	O
vs_base	O
;	O
for	O
(	O
args	int
=	O
MMcdr	function
(	O
args	int
)	O
;	O
!	O
endp	function
(	O
args	int
)	O
;	O
args	int
=	O
MMcdr	function
(	O
args	int
)	O
,	O
vs	O
++	O
)	O
{	O
if	O
(	O
vs	O
>=	O
vs_top	O
)	O
FEerror	function
(	O
"Too many return values."	pointer
,	O
0	int
)	O
;	O
if	O
(	O
ifuncall2	function
(	O
sLtypep	int
,	O
*	O
vs	O
,	O
MMcar	function
(	O
args	int
)	O
)	O
==	O
Cnil	O
)	O
FEwrong_type_argument	function
(	O
MMcar	function
(	O
args	int
)	O
,	O
*	O
vs	O
)	O
;	O
}	O
if	O
(	O
vs	O
<	O
vs_top	O
)	O
FEerror	function
(	O
"Too few return values."	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ifuncall2	function
(	O
sLtypep	int
,	O
vs_base	O
[	O
0	int
]	O
,	O
args	int
)	O
==	O
Cnil	O
)	O
FEwrong_type_argument	function
(	O
args	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
}	O
DEF_ORDINARY	function
(	O
"LDB"	pointer
,	O
sLldb	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"LDB-TEST"	pointer
,	O
sLldb_test	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"DPB"	pointer
,	O
sLdpb	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"DEPOSIT-FIELD"	pointer
,	O
sLdeposit_field	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"COMPILE"	pointer
,	O
sLcompile	int
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"COMPILE-TOPLEVEL"	pointer
,	O
sKcompile_toplevel	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"DECLARE"	pointer
,	O
sLdeclare	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"EVAL"	pointer
,	O
sLeval	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"EXECUTE"	pointer
,	O
sKexecute	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"FUNCTION-DOCUMENTATION"	pointer
,	O
sSfunction_documentation	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"LOAD"	pointer
,	O
sLload	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"LOAD-TOPLEVEL"	pointer
,	O
sKload_toplevel	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"PROGN"	pointer
,	O
sLprogn	int
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"TYPEP"	pointer
,	O
sLtypep	int
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"VALUES"	pointer
,	O
sLvalues	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"VARIABLE-DOCUMENTATION"	pointer
,	O
sSvariable_documentation	O
,	O
SI	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"WARN"	pointer
,	O
sLwarn	int
,	O
LISP	O
,	O
""	pointer
)	O
;	O
void	O
gcl_init_toplevel	function
(	O
void	O
)	O
{	O
make_special_form	function
(	O
"DEFUN"	pointer
,	O
Fdefun	int
)	O
;	O
make_si_function	function
(	O
"*MAKE-SPECIAL"	pointer
,	O
siLAmake_special	int
)	O
;	O
make_si_function	function
(	O
"*MAKE-CONSTANT"	pointer
,	O
siLAmake_constant	int
)	O
;	O
make_special_form	function
(	O
"EVAL-WHEN"	pointer
,	O
Feval_when	int
)	O
;	O
make_special_form	function
(	O
"LOAD-TIME-VALUE"	pointer
,	O
Fload_time_value	int
)	O
;	O
make_special_form	function
(	O
"THE"	pointer
,	O
Fthe	int
)	O
;	O
sLdeclare	O
=	O
make_special_form	function
(	O
"DECLARE"	pointer
,	O
Fdeclare	int
)	O
;	O
make_special_form	function
(	O
"LOCALLY"	pointer
,	O
Flocally	int
)	O
;	O
}	O
