static	O
mode_t	int
octal_to_mode	function
(	O
unsigned	O
int	O
octal	int
)	O
{	O
return	O
(	O
(	O
S_ISUID	O
==	O
SUID	int
&&	O
S_ISGID	O
==	O
SGID	int
&&	O
S_ISVTX	O
==	O
SVTX	int
&&	O
S_IRUSR	O
==	O
RUSR	int
&&	O
S_IWUSR	O
==	O
WUSR	int
&&	O
S_IXUSR	O
==	O
XUSR	int
&&	O
S_IRGRP	O
==	O
RGRP	int
&&	O
S_IWGRP	O
==	O
WGRP	int
&&	O
S_IXGRP	O
==	O
XGRP	int
&&	O
S_IROTH	O
==	O
ROTH	int
&&	O
S_IWOTH	O
==	O
WOTH	int
&&	O
S_IXOTH	O
==	O
XOTH	int
)	O
?	O
octal	int
:	O
(	O
mode_t	int
)	O
(	O
(	O
octal	int
&	O
SUID	int
?	O
S_ISUID	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
SGID	int
?	O
S_ISGID	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
SVTX	int
?	O
S_ISVTX	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
RUSR	int
?	O
S_IRUSR	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
WUSR	int
?	O
S_IWUSR	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
XUSR	int
?	O
S_IXUSR	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
RGRP	int
?	O
S_IRGRP	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
WGRP	int
?	O
S_IWGRP	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
XGRP	int
?	O
S_IXGRP	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
ROTH	int
?	O
S_IROTH	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
WOTH	int
?	O
S_IWOTH	O
:	O
0	int
)	O
|	O
(	O
octal	int
&	O
XOTH	int
?	O
S_IXOTH	O
:	O
0	int
)	O
)	O
)	O
;	O
}	O
enum	O
{	O
MODE_DONE	int
,	O
MODE_ORDINARY_CHANGE	int
,	O
MODE_X_IF_ANY_X	int
,	O
MODE_COPY_EXISTING	int
}	O
;	O
struct	O
mode_change	struct
{	O
char	O
op	char
;	O
char	O
flag	char
;	O
mode_t	int
affected	int
;	O
mode_t	int
value	int
;	O
mode_t	int
mentioned	int
;	O
}	O
;	O
static	O
struct	O
mode_change	struct
*	O
make_node_op_equals	function
(	O
mode_t	int
new_mode	int
,	O
mode_t	int
mentioned	int
)	O
{	O
struct	O
mode_change	struct
*	O
p	pointer
=	O
xmalloc	function
(	O
2	int
*	O
sizeof	O
*	O
p	pointer
)	O
;	O
p	pointer
->	O
op	char
=	O
'='	O
;	O
p	pointer
->	O
flag	char
=	O
MODE_ORDINARY_CHANGE	int
;	O
p	pointer
->	O
affected	int
=	O
CHMOD_MODE_BITS	O
;	O
p	pointer
->	O
value	int
=	O
new_mode	int
;	O
p	pointer
->	O
mentioned	int
=	O
mentioned	int
;	O
p	pointer
[	O
1	int
]	O
.	O
flag	char
=	O
MODE_DONE	int
;	O
return	O
p	pointer
;	O
}	O
struct	O
mode_change	struct
*	O
mode_compile	function
(	O
char	O
const	O
*	O
mode_string	pointer
)	O
{	O
struct	O
mode_change	struct
*	O
mc	pointer
;	O
size_t	long
used	long
=	O
0	int
;	O
char	O
const	O
*	O
p	pointer
;	O
if	O
(	O
'0'	O
<=	O
*	O
mode_string	pointer
&&	O
*	O
mode_string	pointer
<	O
'8'	O
)	O
{	O
unsigned	O
int	O
octal_mode	int
=	O
0	int
;	O
mode_t	int
mode	int
;	O
mode_t	int
mentioned	int
;	O
p	pointer
=	O
mode_string	pointer
;	O
do	O
{	O
octal_mode	int
=	O
8	int
*	O
octal_mode	int
+	O
*	O
p	pointer
++	O
-	O
'0'	O
;	O
if	O
(	O
ALLM	int
<	O
octal_mode	int
)	O
return	O
NULL	O
;	O
}	O
while	O
(	O
'0'	O
<=	O
*	O
p	pointer
&&	O
*	O
p	pointer
<	O
'8'	O
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
return	O
NULL	O
;	O
mode	int
=	O
octal_to_mode	function
(	O
octal_mode	int
)	O
;	O
mentioned	int
=	O
(	O
p	pointer
-	O
mode_string	pointer
<	O
5	int
?	O
(	O
mode	int
&	O
(	O
S_ISUID	O
|	O
S_ISGID	O
)	O
)	O
|	O
S_ISVTX	O
|	O
S_IRWXUGO	O
:	O
CHMOD_MODE_BITS	O
)	O
;	O
return	O
make_node_op_equals	function
(	O
mode	int
,	O
mentioned	int
)	O
;	O
}	O
{	O
size_t	long
needed	long
=	O
1	int
;	O
for	O
(	O
p	pointer
=	O
mode_string	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
needed	long
+=	O
(	O
*	O
p	pointer
==	O
'='	O
||	O
*	O
p	pointer
==	O
'+'	O
||	O
*	O
p	pointer
==	O
'-'	O
)	O
;	O
mc	pointer
=	O
xnmalloc	function
(	O
needed	long
,	O
sizeof	O
*	O
mc	pointer
)	O
;	O
}	O
for	O
(	O
p	pointer
=	O
mode_string	pointer
;	O
;	O
p	pointer
++	O
)	O
{	O
mode_t	int
affected	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
p	pointer
++	O
)	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
default	O
:	O
goto	O
invalid	O
;	O
case	O
'u'	O
:	O
affected	int
|=	O
S_ISUID	O
|	O
S_IRWXU	O
;	O
break	O
;	O
case	O
'g'	O
:	O
affected	int
|=	O
S_ISGID	O
|	O
S_IRWXG	O
;	O
break	O
;	O
case	O
'o'	O
:	O
affected	int
|=	O
S_ISVTX	O
|	O
S_IRWXO	O
;	O
break	O
;	O
case	O
'a'	O
:	O
affected	int
|=	O
CHMOD_MODE_BITS	O
;	O
break	O
;	O
case	O
'='	O
:	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
goto	O
no_more_affected	O
;	O
}	O
no_more_affected	O
:	O
;	O
do	O
{	O
char	O
op	char
=	O
*	O
p	pointer
++	O
;	O
mode_t	int
value	int
;	O
mode_t	int
mentioned	int
=	O
0	int
;	O
char	O
flag	char
=	O
MODE_COPY_EXISTING	int
;	O
struct	O
mode_change	struct
*	O
change	pointer
;	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
unsigned	O
int	O
octal_mode	int
=	O
0	int
;	O
do	O
{	O
octal_mode	int
=	O
8	int
*	O
octal_mode	int
+	O
*	O
p	pointer
++	O
-	O
'0'	O
;	O
if	O
(	O
ALLM	int
<	O
octal_mode	int
)	O
goto	O
invalid	O
;	O
}	O
while	O
(	O
'0'	O
<=	O
*	O
p	pointer
&&	O
*	O
p	pointer
<	O
'8'	O
)	O
;	O
if	O
(	O
affected	int
||	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
','	O
)	O
)	O
goto	O
invalid	O
;	O
affected	int
=	O
mentioned	int
=	O
CHMOD_MODE_BITS	O
;	O
value	int
=	O
octal_to_mode	function
(	O
octal_mode	int
)	O
;	O
flag	char
=	O
MODE_ORDINARY_CHANGE	int
;	O
break	O
;	O
}	O
case	O
'u'	O
:	O
value	int
=	O
S_IRWXU	O
;	O
p	pointer
++	O
;	O
break	O
;	O
case	O
'g'	O
:	O
value	int
=	O
S_IRWXG	O
;	O
p	pointer
++	O
;	O
break	O
;	O
case	O
'o'	O
:	O
value	int
=	O
S_IRWXO	O
;	O
p	pointer
++	O
;	O
break	O
;	O
default	O
:	O
value	int
=	O
0	int
;	O
flag	char
=	O
MODE_ORDINARY_CHANGE	int
;	O
for	O
(	O
;	O
;	O
p	pointer
++	O
)	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'r'	O
:	O
value	int
|=	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
;	O
break	O
;	O
case	O
'w'	O
:	O
value	int
|=	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
;	O
break	O
;	O
case	O
'x'	O
:	O
value	int
|=	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
;	O
break	O
;	O
case	O
'X'	O
:	O
flag	char
=	O
MODE_X_IF_ANY_X	int
;	O
break	O
;	O
case	O
's'	O
:	O
value	int
|=	O
S_ISUID	O
|	O
S_ISGID	O
;	O
break	O
;	O
case	O
't'	O
:	O
value	int
|=	O
S_ISVTX	O
;	O
break	O
;	O
default	O
:	O
goto	O
no_more_values	O
;	O
}	O
no_more_values	O
:	O
;	O
}	O
change	pointer
=	O
&	O
mc	pointer
[	O
used	long
++	O
]	O
;	O
change	pointer
->	O
op	char
=	O
op	char
;	O
change	pointer
->	O
flag	char
=	O
flag	char
;	O
change	pointer
->	O
affected	int
=	O
affected	int
;	O
change	pointer
->	O
value	int
=	O
value	int
;	O
change	pointer
->	O
mentioned	int
=	O
(	O
mentioned	int
?	O
mentioned	int
:	O
affected	int
?	O
affected	int
&	O
value	int
:	O
value	int
)	O
;	O
}	O
while	O
(	O
*	O
p	pointer
==	O
'='	O
||	O
*	O
p	pointer
==	O
'+'	O
||	O
*	O
p	pointer
==	O
'-'	O
)	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
','	O
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
mc	pointer
[	O
used	long
]	O
.	O
flag	char
=	O
MODE_DONE	int
;	O
return	O
mc	pointer
;	O
}	O
invalid	O
:	O
free	function
(	O
mc	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
struct	O
mode_change	struct
*	O
mode_create_from_ref	function
(	O
const	O
char	O
*	O
ref_file	pointer
)	O
{	O
struct	O
stat	struct
ref_stats	struct
;	O
if	O
(	O
stat	struct
(	O
ref_file	pointer
,	O
&	O
ref_stats	struct
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
return	O
make_node_op_equals	function
(	O
ref_stats	struct
.	O
st_mode	int
,	O
CHMOD_MODE_BITS	O
)	O
;	O
}	O
mode_t	int
mode_adjust	function
(	O
mode_t	int
oldmode	int
,	O
bool	bool
dir	bool
,	O
mode_t	int
umask_value	int
,	O
struct	O
mode_change	struct
const	O
*	O
changes	pointer
,	O
mode_t	int
*	O
pmode_bits	pointer
)	O
{	O
mode_t	int
newmode	int
=	O
oldmode	int
&	O
CHMOD_MODE_BITS	O
;	O
mode_t	int
mode_bits	int
=	O
0	int
;	O
for	O
(	O
;	O
changes	pointer
->	O
flag	char
!=	O
MODE_DONE	int
;	O
changes	pointer
++	O
)	O
{	O
mode_t	int
affected	int
=	O
changes	pointer
->	O
affected	int
;	O
mode_t	int
omit_change	int
=	O
(	O
dir	bool
?	O
S_ISUID	O
|	O
S_ISGID	O
:	O
0	int
)	O
&	O
~	O
changes	pointer
->	O
mentioned	int
;	O
mode_t	int
value	int
=	O
changes	pointer
->	O
value	int
;	O
switch	O
(	O
changes	pointer
->	O
flag	char
)	O
{	O
case	O
MODE_ORDINARY_CHANGE	int
:	O
break	O
;	O
case	O
MODE_COPY_EXISTING	int
:	O
value	int
&=	O
newmode	int
;	O
value	int
|=	O
(	O
(	O
value	int
&	O
(	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
)	O
?	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
:	O
0	int
)	O
|	O
(	O
value	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
?	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
:	O
0	int
)	O
|	O
(	O
value	int
&	O
(	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
?	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
:	O
0	int
)	O
)	O
;	O
break	O
;	O
case	O
MODE_X_IF_ANY_X	int
:	O
if	O
(	O
(	O
newmode	int
&	O
(	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
)	O
|	O
dir	bool
)	O
value	int
|=	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
;	O
break	O
;	O
}	O
value	int
&=	O
(	O
affected	int
?	O
affected	int
:	O
~	O
umask_value	int
)	O
&	O
~	O
omit_change	int
;	O
switch	O
(	O
changes	pointer
->	O
op	char
)	O
{	O
case	O
'='	O
:	O
{	O
mode_t	int
preserved	int
=	O
(	O
affected	int
?	O
~	O
affected	int
:	O
0	int
)	O
|	O
omit_change	int
;	O
mode_bits	int
|=	O
CHMOD_MODE_BITS	O
&	O
~	O
preserved	int
;	O
newmode	int
=	O
(	O
newmode	int
&	O
preserved	int
)	O
|	O
value	int
;	O
break	O
;	O
}	O
case	O
'+'	O
:	O
mode_bits	int
|=	O
value	int
;	O
newmode	int
|=	O
value	int
;	O
break	O
;	O
case	O
'-'	O
:	O
mode_bits	int
|=	O
value	int
;	O
newmode	int
&=	O
~	O
value	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
pmode_bits	pointer
)	O
*	O
pmode_bits	pointer
=	O
mode_bits	int
;	O
return	O
newmode	int
;	O
}	O
