int	O
use_file_to_check_type	int
=	O
1	int
;	O
static	O
char	O
*	O
data	pointer
=	O
NULL	O
;	O
void	O
flush_extension_file	function
(	O
void	O
)	O
{	O
g_free	function
(	O
data	pointer
)	O
;	O
data	pointer
=	O
NULL	O
;	O
}	O
typedef	O
char	O
*	O
(	O
*	O
quote_func_t	pointer
)	O
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
quote_percent	int
)	O
;	O
static	O
void	O
exec_extension	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
int	O
*	O
move_dir	pointer
,	O
int	O
start_line	long
)	O
{	O
char	O
*	O
file_name	pointer
;	O
int	O
cmd_file_fd	int
;	O
FILE	struct
*	O
cmd_file	pointer
;	O
char	O
*	O
cmd	pointer
=	O
NULL	O
;	O
int	O
expand_prefix_found	int
=	O
0	int
;	O
int	O
parameter_found	int
=	O
0	int
;	O
char	O
prompt	pointer
[	O
80	int
]	O
;	O
int	O
run_view	int
=	O
0	int
;	O
int	O
def_hex_mode	int
=	O
default_hex_mode	int
,	O
changed_hex_mode	int
=	O
0	int
;	O
int	O
def_nroff_flag	int
=	O
default_nroff_flag	int
,	O
changed_nroff_flag	int
=	O
0	int
;	O
int	O
written_nonspace	int
=	O
0	int
;	O
int	O
is_cd	int
=	O
0	int
;	O
char	O
buffer	pointer
[	O
1024	int
]	O
;	O
char	O
*	O
p	pointer
=	O
0	int
;	O
char	O
*	O
localcopy	pointer
=	O
NULL	O
;	O
int	O
do_local_copy	int
;	O
time_t	long
localmtime	long
=	O
0	int
;	O
struct	O
stat	struct
mystat	struct
;	O
quote_func_t	pointer
quote_func	pointer
=	O
name_quote	function
;	O
g_return_if_fail	O
(	O
filename	pointer
!=	O
NULL	O
)	O
;	O
g_return_if_fail	O
(	O
data	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
!	O
vfs_file_is_local	function
(	O
filename	pointer
)	O
)	O
do_local_copy	int
=	O
1	int
;	O
else	O
do_local_copy	int
=	O
0	int
;	O
cmd_file_fd	int
=	O
mc_mkstemps	function
(	O
&	O
file_name	pointer
,	O
"mcext"	pointer
,	O
SCRIPT_SUFFIX	pointer
)	O
;	O
if	O
(	O
cmd_file_fd	int
==	O
-	O
1	int
)	O
{	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot create temporary command file \n %s "	pointer
)	O
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
cmd_file	pointer
=	O
fdopen	function
(	O
cmd_file_fd	int
,	O
"w"	pointer
)	O
;	O
fputs	function
(	O
"#! /bin/sh\n"	pointer
,	O
cmd_file	pointer
)	O
;	O
prompt	pointer
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
;	O
*	O
data	pointer
&&	O
*	O
data	pointer
!=	O
'\n'	O
;	O
data	pointer
++	O
)	O
{	O
if	O
(	O
parameter_found	int
)	O
{	O
if	O
(	O
*	O
data	pointer
==	O
'}'	O
)	O
{	O
char	O
*	O
parameter	pointer
;	O
parameter_found	int
=	O
0	int
;	O
parameter	pointer
=	O
input_dialog	function
(	O
_	O
(	O
" Parameter "	pointer
)	O
,	O
prompt	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
parameter	pointer
)	O
{	O
fclose	function
(	O
cmd_file	pointer
)	O
;	O
unlink	function
(	O
file_name	pointer
)	O
;	O
if	O
(	O
localcopy	pointer
)	O
{	O
mc_ungetlocalcopy	function
(	O
filename	pointer
,	O
localcopy	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
localcopy	pointer
)	O
;	O
}	O
g_free	function
(	O
file_name	pointer
)	O
;	O
return	O
;	O
}	O
fputs	function
(	O
parameter	pointer
,	O
cmd_file	pointer
)	O
;	O
written_nonspace	int
=	O
1	int
;	O
g_free	function
(	O
parameter	pointer
)	O
;	O
}	O
else	O
{	O
size_t	long
len	int
=	O
strlen	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
len	int
<	O
sizeof	O
(	O
prompt	pointer
)	O
-	O
1	int
)	O
{	O
prompt	pointer
[	O
len	int
]	O
=	O
*	O
data	pointer
;	O
prompt	pointer
[	O
len	int
+	O
1	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
expand_prefix_found	int
)	O
{	O
expand_prefix_found	int
=	O
0	int
;	O
if	O
(	O
*	O
data	pointer
==	O
'{'	O
)	O
parameter_found	int
=	O
1	int
;	O
else	O
{	O
int	O
i	array
=	O
check_format_view	function
(	O
data	pointer
)	O
;	O
char	O
*	O
v	pointer
;	O
if	O
(	O
i	array
)	O
{	O
data	pointer
+=	O
i	array
-	O
1	int
;	O
run_view	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
i	array
=	O
check_format_cd	function
(	O
data	pointer
)	O
)	O
>	O
0	int
)	O
{	O
is_cd	int
=	O
1	int
;	O
quote_func	pointer
=	O
fake_name_quote	function
;	O
do_local_copy	int
=	O
0	int
;	O
p	pointer
=	O
buffer	pointer
;	O
data	pointer
+=	O
i	array
-	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
i	array
=	O
check_format_var	function
(	O
data	pointer
,	O
&	O
v	pointer
)	O
)	O
>	O
0	int
&&	O
v	pointer
)	O
{	O
fputs	function
(	O
v	pointer
,	O
cmd_file	pointer
)	O
;	O
g_free	function
(	O
v	pointer
)	O
;	O
data	pointer
+=	O
i	array
;	O
}	O
else	O
{	O
char	O
*	O
text	pointer
;	O
if	O
(	O
*	O
data	pointer
==	O
'f'	O
)	O
{	O
if	O
(	O
do_local_copy	int
)	O
{	O
localcopy	pointer
=	O
mc_getlocalcopy	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
localcopy	pointer
==	O
NULL	O
)	O
{	O
fclose	function
(	O
cmd_file	pointer
)	O
;	O
unlink	function
(	O
file_name	pointer
)	O
;	O
g_free	function
(	O
file_name	pointer
)	O
;	O
return	O
;	O
}	O
mc_stat	function
(	O
localcopy	pointer
,	O
&	O
mystat	struct
)	O
;	O
localmtime	long
=	O
mystat	struct
.	O
st_mtime	O
;	O
text	pointer
=	O
(	O
*	O
quote_func	pointer
)	O
(	O
localcopy	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
text	pointer
=	O
(	O
*	O
quote_func	pointer
)	O
(	O
filename	pointer
,	O
0	int
)	O
;	O
}	O
}	O
else	O
text	pointer
=	O
expand_format	function
(	O
NULL	O
,	O
*	O
data	pointer
,	O
!	O
is_cd	int
)	O
;	O
if	O
(	O
!	O
is_cd	int
)	O
fputs	function
(	O
text	pointer
,	O
cmd_file	pointer
)	O
;	O
else	O
{	O
strcpy	function
(	O
p	pointer
,	O
text	pointer
)	O
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
0	int
)	O
;	O
}	O
g_free	function
(	O
text	pointer
)	O
;	O
written_nonspace	int
=	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
data	pointer
==	O
'%'	O
)	O
expand_prefix_found	int
=	O
1	int
;	O
else	O
{	O
if	O
(	O
*	O
data	pointer
!=	O
' '	O
&&	O
*	O
data	pointer
!=	O
'\t'	O
)	O
written_nonspace	int
=	O
1	int
;	O
if	O
(	O
is_cd	int
)	O
*	O
(	O
p	pointer
++	O
)	O
=	O
*	O
data	pointer
;	O
else	O
fputc	function
(	O
*	O
data	pointer
,	O
cmd_file	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
run_view	int
)	O
{	O
fprintf	function
(	O
cmd_file	pointer
,	O
"\n/bin/rm -f %s\n"	pointer
,	O
file_name	pointer
)	O
;	O
}	O
fclose	function
(	O
cmd_file	pointer
)	O
;	O
if	O
(	O
(	O
run_view	int
&&	O
!	O
written_nonspace	int
)	O
||	O
is_cd	int
)	O
{	O
unlink	function
(	O
file_name	pointer
)	O
;	O
g_free	function
(	O
file_name	pointer
)	O
;	O
file_name	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
chmod	function
(	O
file_name	pointer
,	O
S_IRWXU	O
)	O
;	O
cmd	pointer
=	O
g_strconcat	function
(	O
"/bin/sh "	pointer
,	O
file_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
run_view	int
)	O
{	O
altered_hex_mode	int
=	O
0	int
;	O
altered_nroff_flag	int
=	O
0	int
;	O
if	O
(	O
def_hex_mode	int
!=	O
default_hex_mode	int
)	O
changed_hex_mode	int
=	O
1	int
;	O
if	O
(	O
def_nroff_flag	int
!=	O
default_nroff_flag	int
)	O
changed_nroff_flag	int
=	O
1	int
;	O
if	O
(	O
written_nonspace	int
)	O
{	O
mc_internal_viewer	function
(	O
cmd	pointer
,	O
filename	pointer
,	O
move_dir	pointer
,	O
start_line	long
)	O
;	O
unlink	function
(	O
file_name	pointer
)	O
;	O
}	O
else	O
{	O
mc_internal_viewer	function
(	O
NULL	O
,	O
filename	pointer
,	O
move_dir	pointer
,	O
start_line	long
)	O
;	O
}	O
if	O
(	O
changed_hex_mode	int
&&	O
!	O
altered_hex_mode	int
)	O
default_hex_mode	int
=	O
def_hex_mode	int
;	O
if	O
(	O
changed_nroff_flag	int
&&	O
!	O
altered_nroff_flag	int
)	O
default_nroff_flag	int
=	O
def_nroff_flag	int
;	O
repaint_screen	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
is_cd	int
)	O
{	O
char	O
*	O
q	pointer
;	O
*	O
p	pointer
=	O
0	int
;	O
p	pointer
=	O
buffer	pointer
;	O
q	pointer
=	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
-	O
1	int
;	O
while	O
(	O
q	pointer
>=	O
p	pointer
&&	O
(	O
*	O
q	pointer
==	O
' '	O
||	O
*	O
q	pointer
==	O
'\t'	O
)	O
)	O
q	pointer
--	O
;	O
q	pointer
[	O
1	int
]	O
=	O
0	int
;	O
do_cd	function
(	O
p	pointer
,	O
cd_parse_command	int
)	O
;	O
}	O
else	O
{	O
shell_execute	function
(	O
cmd	pointer
,	O
EXECUTE_INTERNAL	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
{	O
handle_console	function
(	O
CONSOLE_SAVE	int
)	O
;	O
if	O
(	O
output_lines	int
&&	O
keybar_visible	int
)	O
{	O
show_console_contents	function
(	O
output_start_y	int
,	O
LINES	O
-	O
keybar_visible	int
-	O
output_lines	int
-	O
1	int
,	O
LINES	O
-	O
keybar_visible	int
-	O
1	int
)	O
;	O
}	O
}	O
}	O
g_free	function
(	O
file_name	pointer
)	O
;	O
g_free	function
(	O
cmd	pointer
)	O
;	O
if	O
(	O
localcopy	pointer
)	O
{	O
mc_stat	function
(	O
localcopy	pointer
,	O
&	O
mystat	struct
)	O
;	O
mc_ungetlocalcopy	function
(	O
filename	pointer
,	O
localcopy	pointer
,	O
localmtime	long
!=	O
mystat	struct
.	O
st_mtime	O
)	O
;	O
g_free	function
(	O
localcopy	pointer
)	O
;	O
}	O
}	O
static	O
int	O
get_file_type_local	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
char	O
*	O
buf	pointer
,	O
int	O
buflen	int
)	O
{	O
int	O
read_bytes	int
=	O
0	int
;	O
char	O
*	O
tmp	pointer
=	O
name_quote	function
(	O
filename	pointer
,	O
0	int
)	O
;	O
char	O
*	O
command	pointer
=	O
g_strconcat	function
(	O
FILE_CMD	pointer
,	O
tmp	pointer
,	O
" 2>/dev/null"	pointer
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
FILE	struct
*	O
f	float
=	O
popen	function
(	O
command	pointer
,	O
"r"	pointer
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
g_free	function
(	O
command	pointer
)	O
;	O
if	O
(	O
f	float
!=	O
NULL	O
)	O
{	O
read_bytes	int
=	O
(	O
fgets	function
(	O
buf	pointer
,	O
buflen	int
,	O
f	float
)	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
read_bytes	int
==	O
0	int
)	O
buf	pointer
[	O
0	int
]	O
=	O
0	int
;	O
pclose	function
(	O
f	float
)	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
(	O
read_bytes	int
>	O
0	int
)	O
;	O
}	O
static	O
int	O
regex_check_type	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
ptr	pointer
,	O
int	O
*	O
have_type	pointer
)	O
{	O
int	O
found	int
=	O
0	int
;	O
static	O
char	O
content_string	array
[	O
2048	int
]	O
;	O
static	O
int	O
content_shift	int
=	O
0	int
;	O
static	O
int	O
got_data	int
=	O
0	int
;	O
if	O
(	O
!	O
use_file_to_check_type	int
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
*	O
have_type	pointer
)	O
{	O
char	O
*	O
realname	pointer
;	O
char	O
*	O
localfile	pointer
;	O
*	O
have_type	pointer
=	O
1	int
;	O
localfile	pointer
=	O
mc_getlocalcopy	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
localfile	pointer
)	O
return	O
-	O
1	int
;	O
realname	pointer
=	O
localfile	pointer
;	O
got_data	int
=	O
get_file_type_local	function
(	O
localfile	pointer
,	O
content_string	array
,	O
sizeof	O
(	O
content_string	array
)	O
)	O
;	O
mc_ungetlocalcopy	function
(	O
filename	pointer
,	O
localfile	pointer
,	O
0	int
)	O
;	O
if	O
(	O
got_data	int
>	O
0	int
)	O
{	O
char	O
*	O
pp	pointer
;	O
content_string	array
[	O
sizeof	O
(	O
content_string	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
pp	pointer
=	O
strchr	function
(	O
content_string	array
,	O
'\n'	O
)	O
)	O
!=	O
0	int
)	O
*	O
pp	pointer
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
content_string	array
,	O
realname	pointer
,	O
strlen	function
(	O
realname	pointer
)	O
)	O
)	O
{	O
content_shift	int
=	O
strlen	function
(	O
realname	pointer
)	O
;	O
if	O
(	O
content_string	array
[	O
content_shift	int
]	O
==	O
':'	O
)	O
{	O
for	O
(	O
content_shift	int
++	O
;	O
content_string	array
[	O
content_shift	int
]	O
==	O
' '	O
||	O
content_string	array
[	O
content_shift	int
]	O
==	O
'\t'	O
;	O
content_shift	int
++	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
content_string	array
[	O
0	int
]	O
=	O
0	int
;	O
}	O
g_free	function
(	O
realname	pointer
)	O
;	O
}	O
if	O
(	O
got_data	int
==	O
-	O
1	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
content_string	array
[	O
0	int
]	O
&&	O
regexp_match	function
(	O
ptr	pointer
,	O
content_string	array
+	O
content_shift	int
,	O
match_regex	int
)	O
)	O
{	O
found	int
=	O
1	int
;	O
}	O
return	O
found	int
;	O
}	O
int	O
regex_command	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
action	int
,	O
int	O
*	O
move_dir	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
r	pointer
,	O
c	int
;	O
int	O
file_len	int
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
int	O
found	int
=	O
0	int
;	O
int	O
error_flag	int
=	O
0	int
;	O
int	O
ret	int
=	O
0	int
;	O
struct	O
stat	struct
mystat	struct
;	O
int	O
view_at_line_number	int
;	O
char	O
*	O
include_target	pointer
;	O
int	O
include_target_len	int
;	O
int	O
have_type	pointer
=	O
0	int
;	O
if	O
(	O
strncmp	function
(	O
action	int
,	O
"View:"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
view_at_line_number	int
=	O
atoi	function
(	O
action	int
+	O
5	int
)	O
;	O
action	int
=	O
"View"	pointer
;	O
}	O
else	O
{	O
view_at_line_number	int
=	O
0	int
;	O
}	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
{	O
char	O
*	O
extension_file	pointer
;	O
int	O
mc_user_ext	int
=	O
1	int
;	O
int	O
home_error	int
=	O
0	int
;	O
extension_file	pointer
=	O
concat_dir_and_file	function
(	O
home_dir	pointer
,	O
MC_USER_EXT	pointer
)	O
;	O
if	O
(	O
!	O
exist_file	function
(	O
extension_file	pointer
)	O
)	O
{	O
g_free	function
(	O
extension_file	pointer
)	O
;	O
check_stock_mc_ext	O
:	O
extension_file	pointer
=	O
concat_dir_and_file	function
(	O
mc_home	pointer
,	O
MC_LIB_EXT	pointer
)	O
;	O
mc_user_ext	int
=	O
0	int
;	O
}	O
data	pointer
=	O
load_file	function
(	O
extension_file	pointer
)	O
;	O
g_free	function
(	O
extension_file	pointer
)	O
;	O
if	O
(	O
data	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
strstr	function
(	O
data	pointer
,	O
"default/"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
strstr	function
(	O
data	pointer
,	O
"regex/"	pointer
)	O
&&	O
!	O
strstr	function
(	O
data	pointer
,	O
"shell/"	pointer
)	O
&&	O
!	O
strstr	function
(	O
data	pointer
,	O
"type/"	pointer
)	O
)	O
{	O
g_free	function
(	O
data	pointer
)	O
;	O
data	pointer
=	O
NULL	O
;	O
if	O
(	O
mc_user_ext	int
)	O
{	O
home_error	int
=	O
1	int
;	O
goto	O
check_stock_mc_ext	O
;	O
}	O
else	O
{	O
char	O
*	O
title	pointer
=	O
g_strdup_printf	function
(	O
_	O
(	O
" %s%s file error"	pointer
)	O
,	O
mc_home	pointer
,	O
MC_LIB_EXT	pointer
)	O
;	O
message	pointer
(	O
1	int
,	O
title	pointer
,	O
_	O
(	O
"The format of the %smc.ext "	pointer
"file has changed with version 3.0.  It seems that "	pointer
"the installation failed.  Please fetch a fresh "	pointer
"copy from the Midnight Commander package."	pointer
)	O
,	O
mc_home	pointer
)	O
;	O
g_free	function
(	O
title	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
if	O
(	O
home_error	int
)	O
{	O
char	O
*	O
title	pointer
=	O
g_strdup_printf	function
(	O
_	O
(	O
" ~/%s file error "	pointer
)	O
,	O
MC_USER_EXT	pointer
)	O
;	O
message	pointer
(	O
1	int
,	O
title	pointer
,	O
_	O
(	O
"The format of the ~/%s file has "	pointer
"changed with version 3.0.  You may either want to copy "	pointer
"it from %smc.ext or use that file as an example of how "	pointer
"to write it."	pointer
)	O
,	O
MC_USER_EXT	pointer
,	O
mc_home	pointer
)	O
;	O
g_free	function
(	O
title	pointer
)	O
;	O
}	O
}	O
mc_stat	function
(	O
filename	pointer
,	O
&	O
mystat	struct
)	O
;	O
include_target	pointer
=	O
NULL	O
;	O
include_target_len	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
data	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
for	O
(	O
q	pointer
=	O
p	pointer
;	O
*	O
q	pointer
==	O
' '	O
||	O
*	O
q	pointer
==	O
'\t'	O
;	O
q	pointer
++	O
)	O
;	O
if	O
(	O
*	O
q	pointer
==	O
'\n'	O
||	O
!	O
*	O
q	pointer
)	O
p	pointer
=	O
q	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'\n'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'\n'	O
)	O
continue	O
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
if	O
(	O
p	pointer
==	O
q	pointer
)	O
{	O
found	int
=	O
0	int
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
0	int
)	O
;	O
c	int
=	O
*	O
q	pointer
;	O
*	O
q	pointer
=	O
0	int
;	O
if	O
(	O
include_target	pointer
)	O
{	O
if	O
(	O
(	O
strncmp	function
(	O
p	pointer
,	O
"include/"	pointer
,	O
8	int
)	O
==	O
0	int
)	O
&&	O
(	O
strncmp	function
(	O
p	pointer
+	O
8	int
,	O
include_target	pointer
,	O
include_target_len	int
)	O
==	O
0	int
)	O
)	O
found	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
"regex/"	pointer
,	O
6	int
)	O
)	O
{	O
p	pointer
+=	O
6	int
;	O
if	O
(	O
regexp_match	function
(	O
p	pointer
,	O
filename	pointer
,	O
match_regex	int
)	O
)	O
found	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
"directory/"	pointer
,	O
10	int
)	O
)	O
{	O
if	O
(	O
S_ISDIR	O
(	O
mystat	struct
.	O
st_mode	int
)	O
&&	O
regexp_match	function
(	O
p	pointer
+	O
10	int
,	O
filename	pointer
,	O
match_regex	int
)	O
)	O
found	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
"shell/"	pointer
,	O
6	int
)	O
)	O
{	O
p	pointer
+=	O
6	int
;	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
&&	O
file_len	int
>=	O
(	O
q	pointer
-	O
p	pointer
)	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
filename	pointer
+	O
file_len	int
-	O
(	O
q	pointer
-	O
p	pointer
)	O
,	O
q	pointer
-	O
p	pointer
)	O
)	O
found	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
q	pointer
-	O
p	pointer
==	O
file_len	int
&&	O
!	O
strncmp	function
(	O
p	pointer
,	O
filename	pointer
,	O
q	pointer
-	O
p	pointer
)	O
)	O
found	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
"type/"	pointer
,	O
5	int
)	O
)	O
{	O
int	O
res	int
;	O
p	pointer
+=	O
5	int
;	O
res	int
=	O
regex_check_type	function
(	O
filename	pointer
,	O
p	pointer
,	O
&	O
have_type	pointer
)	O
;	O
if	O
(	O
res	int
==	O
1	int
)	O
found	int
=	O
1	int
;	O
if	O
(	O
res	int
==	O
-	O
1	int
)	O
error_flag	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
"default/"	pointer
,	O
8	int
)	O
)	O
{	O
found	int
=	O
1	int
;	O
}	O
*	O
q	pointer
=	O
c	int
;	O
p	pointer
=	O
q	pointer
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
}	O
else	O
{	O
p	pointer
=	O
q	pointer
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
found	int
&&	O
!	O
error_flag	int
)	O
{	O
r	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
r	pointer
!=	O
NULL	O
)	O
{	O
c	int
=	O
*	O
r	pointer
;	O
*	O
r	pointer
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
p	pointer
,	O
"Include"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
t	long
;	O
include_target	pointer
=	O
p	pointer
+	O
8	int
;	O
t	long
=	O
strchr	function
(	O
include_target	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
t	long
)	O
*	O
t	long
=	O
0	int
;	O
include_target_len	int
=	O
strlen	function
(	O
include_target	pointer
)	O
;	O
if	O
(	O
t	long
)	O
*	O
t	long
=	O
'\n'	O
;	O
*	O
r	pointer
=	O
c	int
;	O
p	pointer
=	O
q	pointer
;	O
found	int
=	O
0	int
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
action	int
,	O
p	pointer
)	O
)	O
{	O
*	O
r	pointer
=	O
c	int
;	O
for	O
(	O
p	pointer
=	O
r	pointer
+	O
1	int
;	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
;	O
p	pointer
++	O
)	O
;	O
if	O
(	O
p	pointer
<	O
q	pointer
)	O
{	O
char	O
*	O
filename_copy	pointer
=	O
g_strdup	function
(	O
filename	pointer
)	O
;	O
exec_extension	function
(	O
filename_copy	pointer
,	O
r	pointer
+	O
1	int
,	O
move_dir	pointer
,	O
view_at_line_number	int
)	O
;	O
g_free	function
(	O
filename_copy	pointer
)	O
;	O
ret	int
=	O
1	int
;	O
}	O
break	O
;	O
}	O
else	O
*	O
r	pointer
=	O
c	int
;	O
}	O
}	O
p	pointer
=	O
q	pointer
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
}	O
}	O
if	O
(	O
error_flag	int
)	O
return	O
-	O
1	int
;	O
return	O
ret	int
;	O
}	O
