char	O
*	O
MHD_basic_auth_get_username_password	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
char	O
*	O
*	O
password	pointer
)	O
{	O
const	O
char	O
*	O
header	pointer
;	O
char	O
*	O
decode	pointer
;	O
const	O
char	O
*	O
separator	pointer
;	O
char	O
*	O
user	pointer
;	O
if	O
(	O
(	O
MHD_NO	int
==	O
MHD_lookup_connection_value_n	function
(	O
connection	pointer
,	O
MHD_HEADER_KIND	int
,	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
MHD_HTTP_HEADER_AUTHORIZATION	pointer
)	O
,	O
&	O
header	pointer
,	O
NULL	O
)	O
)	O
||	O
(	O
0	int
!=	O
strncmp	function
(	O
header	pointer
,	O
_BASIC_BASE	pointer
,	O
MHD_STATICSTR_LEN_	O
(	O
_BASIC_BASE	pointer
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
header	pointer
+=	O
MHD_STATICSTR_LEN_	O
(	O
_BASIC_BASE	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
(	O
decode	pointer
=	O
BASE64Decode	function
(	O
header	pointer
)	O
)	O
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Error decoding basic authentication\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
separator	pointer
=	O
strchr	function
(	O
decode	pointer
,	O
':'	O
)	O
)	O
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Basic authentication doesn't contain ':' separator\n"	pointer
)	O
)	O
;	O
free	function
(	O
decode	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
NULL	O
==	O
(	O
user	pointer
=	O
strdup	function
(	O
decode	pointer
)	O
)	O
)	O
{	O
free	function
(	O
decode	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
user	pointer
[	O
separator	pointer
-	O
decode	pointer
]	O
=	O
'\0'	O
;	O
if	O
(	O
NULL	O
!=	O
password	pointer
)	O
{	O
*	O
password	pointer
=	O
strdup	function
(	O
separator	pointer
+	O
1	int
)	O
;	O
if	O
(	O
NULL	O
==	O
*	O
password	pointer
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Failed to allocate memory for password\n"	pointer
)	O
)	O
;	O
free	function
(	O
decode	pointer
)	O
;	O
free	function
(	O
user	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
free	function
(	O
decode	pointer
)	O
;	O
return	O
user	pointer
;	O
}	O
int	O
MHD_queue_basic_auth_fail_response	function
(	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
,	O
const	O
char	O
*	O
realm	pointer
,	O
struct	O
MHD_Response	struct
*	O
response	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
res	int
;	O
size_t	long
hlen	long
=	O
strlen	function
(	O
realm	pointer
)	O
+	O
strlen	function
(	O
"Basic realm=\"\""	pointer
)	O
+	O
1	int
;	O
char	O
*	O
header	pointer
;	O
header	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
hlen	long
)	O
;	O
if	O
(	O
NULL	O
==	O
header	pointer
)	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
"Failed to allocate memory for auth header\n"	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
res	int
=	O
MHD_snprintf_	O
(	O
header	pointer
,	O
hlen	long
,	O
"Basic realm=\"%s\""	pointer
,	O
realm	pointer
)	O
;	O
if	O
(	O
(	O
res	int
>	O
0	int
)	O
&&	O
(	O
(	O
size_t	long
)	O
res	int
<	O
hlen	long
)	O
)	O
ret	int
=	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_WWW_AUTHENTICATE	pointer
,	O
header	pointer
)	O
;	O
else	O
ret	int
=	O
MHD_NO	int
;	O
free	function
(	O
header	pointer
)	O
;	O
if	O
(	O
MHD_YES	int
==	O
ret	int
)	O
{	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_UNAUTHORIZED	int
,	O
response	pointer
)	O
;	O
}	O
else	O
{	O
MHD_DLOG	function
(	O
connection	pointer
->	O
daemon	function
,	O
_	O
(	O
"Failed to add Basic auth header\n"	pointer
)	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
