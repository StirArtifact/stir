struct	O
faFileHeader	struct
{	O
unsigned	O
int	O
magic	int
;	O
unsigned	O
int	O
firstFree	int
;	O
}	O
;	O
struct	O
faHeader	struct
{	O
unsigned	O
int	O
size	long
;	O
unsigned	O
int	O
freeNext	int
;	O
unsigned	O
int	O
freePrev	int
;	O
unsigned	O
int	O
isFree	int
;	O
}	O
;	O
struct	O
faFooter	struct
{	O
unsigned	O
int	O
size	long
;	O
unsigned	O
int	O
isFree	int
;	O
}	O
;	O
FD_t	pointer
fadOpen	function
(	O
const	O
char	O
*	O
path	pointer
,	O
int	O
flags	int
,	O
int	O
perms	int
)	O
{	O
struct	O
faFileHeader	struct
newHdr	struct
;	O
FD_t	pointer
fd	pointer
;	O
if	O
(	O
flags	int
&	O
O_WRONLY	int
)	O
return	O
NULL	O
;	O
fd	pointer
=	O
ufdio	pointer
->	O
_open	pointer
(	O
path	pointer
,	O
flags	int
,	O
perms	int
)	O
;	O
if	O
(	O
Ferror	function
(	O
fd	pointer
)	O
)	O
return	O
NULL	O
;	O
fdSetIo	function
(	O
fd	pointer
,	O
fadio	pointer
)	O
;	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
0	int
)	O
;	O
fadSetFileSize	function
(	O
fd	pointer
,	O
Fseek	function
(	O
fd	pointer
,	O
0	int
,	O
SEEK_END	int
)	O
)	O
;	O
if	O
(	O
fadGetFileSize	function
(	O
fd	pointer
)	O
==	O
0	int
)	O
{	O
newHdr	struct
.	O
magic	int
=	O
FA_MAGIC	int
;	O
newHdr	struct
.	O
firstFree	int
=	O
0	int
;	O
if	O
(	O
Fwrite	function
(	O
&	O
newHdr	struct
,	O
sizeof	O
(	O
char	O
)	O
,	O
sizeof	O
(	O
newHdr	struct
)	O
,	O
fd	pointer
)	O
!=	O
sizeof	O
(	O
newHdr	struct
)	O
)	O
{	O
Fclose	function
(	O
fd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
0	int
)	O
;	O
fadSetFileSize	function
(	O
fd	pointer
,	O
sizeof	O
(	O
newHdr	struct
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
newHdr	struct
,	O
sizeof	O
(	O
newHdr	struct
)	O
,	O
0	int
)	O
!=	O
sizeof	O
(	O
newHdr	struct
)	O
)	O
{	O
Fclose	function
(	O
fd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
newHdr	struct
.	O
magic	int
!=	O
FA_MAGIC	int
)	O
{	O
Fclose	function
(	O
fd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
newHdr	struct
.	O
firstFree	int
)	O
;	O
fadSetFileSize	function
(	O
fd	pointer
,	O
Fseek	function
(	O
fd	pointer
,	O
0	int
,	O
SEEK_END	int
)	O
)	O
;	O
if	O
(	O
fadGetFileSize	function
(	O
fd	pointer
)	O
<	O
0	int
)	O
{	O
Fclose	function
(	O
fd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
fd	pointer
;	O
}	O
unsigned	O
int	O
fadAlloc	function
(	O
FD_t	pointer
fd	pointer
,	O
unsigned	O
int	O
size	long
)	O
{	O
unsigned	O
int	O
nextFreeBlock	int
;	O
unsigned	O
int	O
newBlockOffset	int
;	O
unsigned	O
int	O
footerOffset	int
;	O
int	O
failed	int
=	O
0	int
;	O
struct	O
faFileHeader	struct
faHeader	struct
;	O
struct	O
faHeader	struct
header	struct
,	O
origHeader	struct
;	O
struct	O
faHeader	struct
*	O
restoreHeader	pointer
=	O
NULL	O
;	O
struct	O
faHeader	struct
nextFreeHeader	struct
,	O
origNextFreeHeader	struct
;	O
struct	O
faHeader	struct
*	O
restoreNextHeader	pointer
=	O
NULL	O
;	O
struct	O
faHeader	struct
prevFreeHeader	struct
,	O
origPrevFreeHeader	struct
;	O
struct	O
faHeader	struct
*	O
restorePrevHeader	pointer
=	O
NULL	O
;	O
struct	O
faFooter	struct
footer	struct
,	O
origFooter	struct
;	O
struct	O
faFooter	struct
*	O
restoreFooter	pointer
=	O
NULL	O
;	O
int	O
updateHeader	int
=	O
0	int
;	O
memset	function
(	O
&	O
header	struct
,	O
0	int
,	O
sizeof	O
(	O
header	struct
)	O
)	O
;	O
size	long
+=	O
sizeof	O
(	O
struct	O
faHeader	struct
)	O
+	O
sizeof	O
(	O
struct	O
faFooter	struct
)	O
;	O
(	O
size	long
%	O
64	int
)	O
?	O
size	long
+=	O
(	O
64	int
-	O
(	O
size	long
%	O
64	int
)	O
)	O
:	O
0	int
;	O
nextFreeBlock	int
=	O
fadGetFirstFree	function
(	O
fd	pointer
)	O
;	O
newBlockOffset	int
=	O
0	int
;	O
while	O
(	O
nextFreeBlock	int
&&	O
!	O
newBlockOffset	int
)	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
nextFreeBlock	int
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
header	struct
.	O
isFree	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"free list corrupt (%u)- please run\n"	pointer
"\t\"rpm --rebuilddb\"\n"	pointer
"More information is available from http://www.rpm.org "	pointer
"or the rpm-list@redhat.com mailing list\n"	pointer
"if \"rpm --rebuilddb\" fails to correct the problem.\n"	pointer
)	O
,	O
nextFreeBlock	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
header	struct
.	O
size	long
>=	O
size	long
)	O
{	O
newBlockOffset	int
=	O
nextFreeBlock	int
;	O
}	O
else	O
{	O
nextFreeBlock	int
=	O
header	struct
.	O
freeNext	int
;	O
}	O
}	O
if	O
(	O
newBlockOffset	int
)	O
{	O
origHeader	struct
=	O
header	struct
;	O
footerOffset	int
=	O
newBlockOffset	int
+	O
header	struct
.	O
size	long
-	O
sizeof	O
(	O
footer	struct
)	O
;	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
footer	struct
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
!=	O
sizeof	O
(	O
footer	struct
)	O
)	O
return	O
0	int
;	O
origFooter	struct
=	O
footer	struct
;	O
footer	struct
.	O
isFree	int
=	O
header	struct
.	O
isFree	int
=	O
0	int
;	O
if	O
(	O
newBlockOffset	int
==	O
fadGetFirstFree	function
(	O
fd	pointer
)	O
)	O
{	O
faHeader	struct
.	O
magic	int
=	O
FA_MAGIC	int
;	O
faHeader	struct
.	O
firstFree	int
=	O
header	struct
.	O
freeNext	int
;	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
header	struct
.	O
freeNext	int
)	O
;	O
updateHeader	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
prevFreeHeader	struct
,	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
,	O
header	struct
.	O
freePrev	int
)	O
!=	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
)	O
return	O
0	int
;	O
origPrevFreeHeader	struct
=	O
prevFreeHeader	struct
;	O
prevFreeHeader	struct
.	O
freeNext	int
=	O
header	struct
.	O
freeNext	int
;	O
}	O
if	O
(	O
header	struct
.	O
freeNext	int
)	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
nextFreeHeader	struct
,	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
,	O
header	struct
.	O
freeNext	int
)	O
!=	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
)	O
return	O
0	int
;	O
origNextFreeHeader	struct
=	O
nextFreeHeader	struct
;	O
nextFreeHeader	struct
.	O
freePrev	int
=	O
header	struct
.	O
freePrev	int
;	O
}	O
if	O
(	O
updateHeader	int
)	O
{	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
faHeader	struct
,	O
sizeof	O
(	O
faHeader	struct
)	O
,	O
0	int
)	O
!=	O
sizeof	O
(	O
faHeader	struct
)	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
prevFreeHeader	struct
,	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
,	O
header	struct
.	O
freePrev	int
)	O
!=	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
)	O
return	O
0	int
;	O
restorePrevHeader	pointer
=	O
&	O
origPrevFreeHeader	struct
;	O
}	O
if	O
(	O
header	struct
.	O
freeNext	int
)	O
{	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
nextFreeHeader	struct
,	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
,	O
header	struct
.	O
freeNext	int
)	O
!=	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
)	O
return	O
0	int
;	O
restoreNextHeader	pointer
=	O
&	O
origNextFreeHeader	struct
;	O
}	O
if	O
(	O
!	O
failed	int
)	O
{	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
newBlockOffset	int
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
{	O
failed	int
=	O
1	int
;	O
restoreHeader	pointer
=	O
&	O
origHeader	struct
;	O
}	O
}	O
if	O
(	O
!	O
failed	int
)	O
{	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
footer	struct
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
!=	O
sizeof	O
(	O
footer	struct
)	O
)	O
{	O
failed	int
=	O
1	int
;	O
restoreFooter	pointer
=	O
&	O
origFooter	struct
;	O
}	O
}	O
if	O
(	O
failed	int
)	O
{	O
if	O
(	O
updateHeader	int
)	O
{	O
faHeader	struct
.	O
firstFree	int
=	O
newBlockOffset	int
;	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
newBlockOffset	int
)	O
;	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
faHeader	struct
,	O
sizeof	O
(	O
faHeader	struct
)	O
,	O
0	int
)	O
;	O
}	O
if	O
(	O
restorePrevHeader	pointer
)	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
restorePrevHeader	pointer
,	O
sizeof	O
(	O
*	O
restorePrevHeader	pointer
)	O
,	O
header	struct
.	O
freePrev	int
)	O
;	O
if	O
(	O
restoreNextHeader	pointer
)	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
restoreNextHeader	pointer
,	O
sizeof	O
(	O
*	O
restoreNextHeader	pointer
)	O
,	O
header	struct
.	O
freeNext	int
)	O
;	O
if	O
(	O
restoreHeader	pointer
)	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
restoreHeader	pointer
,	O
sizeof	O
(	O
header	struct
)	O
,	O
newBlockOffset	int
)	O
;	O
if	O
(	O
restoreFooter	pointer
)	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
restoreFooter	pointer
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
{	O
char	O
*	O
space	pointer
;	O
newBlockOffset	int
=	O
fadGetFileSize	function
(	O
fd	pointer
)	O
;	O
footerOffset	int
=	O
newBlockOffset	int
+	O
size	long
-	O
sizeof	O
(	O
footer	struct
)	O
;	O
space	pointer
=	O
alloca	function
(	O
size	long
)	O
;	O
if	O
(	O
space	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
memset	function
(	O
space	pointer
,	O
0	int
,	O
size	long
)	O
;	O
footer	struct
.	O
isFree	int
=	O
header	struct
.	O
isFree	int
=	O
0	int
;	O
footer	struct
.	O
size	long
=	O
header	struct
.	O
size	long
=	O
size	long
;	O
header	struct
.	O
freePrev	int
=	O
header	struct
.	O
freeNext	int
=	O
0	int
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
space	pointer
,	O
size	long
,	O
newBlockOffset	int
)	O
!=	O
size	long
)	O
return	O
0	int
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
newBlockOffset	int
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
footer	struct
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
!=	O
sizeof	O
(	O
footer	struct
)	O
)	O
return	O
0	int
;	O
fadSetFileSize	function
(	O
fd	pointer
,	O
fadGetFileSize	function
(	O
fd	pointer
)	O
+	O
size	long
)	O
;	O
}	O
return	O
newBlockOffset	int
+	O
sizeof	O
(	O
header	struct
)	O
;	O
}	O
void	O
fadFree	function
(	O
FD_t	pointer
fd	pointer
,	O
unsigned	O
int	O
offset	long
)	O
{	O
struct	O
faHeader	struct
header	struct
;	O
struct	O
faFooter	struct
footer	struct
;	O
int	O
footerOffset	int
;	O
int	O
prevFreeOffset	int
,	O
nextFreeOffset	int
;	O
struct	O
faHeader	struct
prevFreeHeader	struct
,	O
nextFreeHeader	struct
;	O
struct	O
faFileHeader	struct
faHeader	struct
;	O
offset	long
-=	O
sizeof	O
(	O
header	struct
)	O
;	O
prevFreeOffset	int
=	O
fadGetFirstFree	function
(	O
fd	pointer
)	O
;	O
if	O
(	O
!	O
prevFreeOffset	int
||	O
(	O
prevFreeOffset	int
>	O
offset	long
)	O
)	O
{	O
nextFreeOffset	int
=	O
fadGetFirstFree	function
(	O
fd	pointer
)	O
;	O
prevFreeOffset	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
prevFreeHeader	struct
,	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
,	O
prevFreeOffset	int
)	O
!=	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
)	O
return	O
;	O
while	O
(	O
prevFreeHeader	struct
.	O
freeNext	int
&&	O
prevFreeHeader	struct
.	O
freeNext	int
<	O
offset	long
)	O
{	O
prevFreeOffset	int
=	O
prevFreeHeader	struct
.	O
freeNext	int
;	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
prevFreeHeader	struct
,	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
,	O
prevFreeOffset	int
)	O
!=	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
)	O
return	O
;	O
}	O
nextFreeOffset	int
=	O
prevFreeHeader	struct
.	O
freeNext	int
;	O
}	O
if	O
(	O
nextFreeOffset	int
)	O
{	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
nextFreeHeader	struct
,	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
,	O
nextFreeOffset	int
)	O
!=	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
)	O
return	O
;	O
}	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
offset	long
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
return	O
;	O
footerOffset	int
=	O
offset	long
+	O
header	struct
.	O
size	long
-	O
sizeof	O
(	O
footer	struct
)	O
;	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
footer	struct
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
!=	O
sizeof	O
(	O
footer	struct
)	O
)	O
return	O
;	O
header	struct
.	O
isFree	int
=	O
1	int
;	O
header	struct
.	O
freeNext	int
=	O
nextFreeOffset	int
;	O
header	struct
.	O
freePrev	int
=	O
prevFreeOffset	int
;	O
footer	struct
.	O
isFree	int
=	O
1	int
;	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
offset	long
)	O
;	O
(	O
void	O
)	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
footer	struct
,	O
sizeof	O
(	O
footer	struct
)	O
,	O
footerOffset	int
)	O
;	O
if	O
(	O
nextFreeOffset	int
)	O
{	O
nextFreeHeader	struct
.	O
freePrev	int
=	O
offset	long
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
nextFreeHeader	struct
,	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
,	O
nextFreeOffset	int
)	O
!=	O
sizeof	O
(	O
nextFreeHeader	struct
)	O
)	O
return	O
;	O
}	O
if	O
(	O
prevFreeOffset	int
)	O
{	O
prevFreeHeader	struct
.	O
freeNext	int
=	O
offset	long
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
prevFreeHeader	struct
,	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
,	O
prevFreeOffset	int
)	O
!=	O
sizeof	O
(	O
prevFreeHeader	struct
)	O
)	O
return	O
;	O
}	O
else	O
{	O
fadSetFirstFree	function
(	O
fd	pointer
,	O
offset	long
)	O
;	O
faHeader	struct
.	O
magic	int
=	O
FA_MAGIC	int
;	O
faHeader	struct
.	O
firstFree	int
=	O
fadGetFirstFree	function
(	O
fd	pointer
)	O
;	O
if	O
(	O
Pwrite	function
(	O
fd	pointer
,	O
&	O
faHeader	struct
,	O
sizeof	O
(	O
faHeader	struct
)	O
,	O
0	int
)	O
!=	O
sizeof	O
(	O
faHeader	struct
)	O
)	O
return	O
;	O
}	O
}	O
int	O
fadFirstOffset	function
(	O
FD_t	pointer
fd	pointer
)	O
{	O
return	O
fadNextOffset	function
(	O
fd	pointer
,	O
0	int
)	O
;	O
}	O
int	O
fadNextOffset	function
(	O
FD_t	pointer
fd	pointer
,	O
unsigned	O
int	O
lastOffset	int
)	O
{	O
struct	O
faHeader	struct
header	struct
;	O
int	O
offset	long
;	O
offset	long
=	O
(	O
lastOffset	int
)	O
?	O
(	O
lastOffset	int
-	O
sizeof	O
(	O
header	struct
)	O
)	O
:	O
sizeof	O
(	O
struct	O
faFileHeader	struct
)	O
;	O
if	O
(	O
offset	long
>=	O
fadGetFileSize	function
(	O
fd	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
offset	long
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
lastOffset	int
&&	O
!	O
header	struct
.	O
isFree	int
)	O
return	O
(	O
offset	long
+	O
sizeof	O
(	O
header	struct
)	O
)	O
;	O
do	O
{	O
offset	long
+=	O
header	struct
.	O
size	long
;	O
if	O
(	O
Pread	function
(	O
fd	pointer
,	O
&	O
header	struct
,	O
sizeof	O
(	O
header	struct
)	O
,	O
offset	long
)	O
!=	O
sizeof	O
(	O
header	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
header	struct
.	O
isFree	int
)	O
break	O
;	O
}	O
while	O
(	O
offset	long
<	O
fadGetFileSize	function
(	O
fd	pointer
)	O
&&	O
header	struct
.	O
isFree	int
)	O
;	O
if	O
(	O
offset	long
<	O
fadGetFileSize	function
(	O
fd	pointer
)	O
)	O
{	O
offset	long
+=	O
sizeof	O
(	O
header	struct
)	O
;	O
if	O
(	O
offset	long
<=	O
lastOffset	int
)	O
return	O
-	O
1	int
;	O
return	O
offset	long
;	O
}	O
else	O
return	O
0	int
;	O
}	O
