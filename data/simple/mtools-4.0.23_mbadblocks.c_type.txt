static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s: [-c clusterList] [-s sectorList] [-c] [-V] device\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
static	O
void	O
checkListTwice	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
if	O
(	O
filename	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Only one of the -c or -s options may be given\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
mark	function
(	O
Fs_t	struct
*	O
Fs	pointer
,	O
long	O
offset	long
,	O
unsigned	O
int	O
badClus	int
)	O
{	O
unsigned	O
int	O
old	struct
=	O
Fs	pointer
->	O
fat_decode	pointer
(	O
(	O
Fs_t	struct
*	O
)	O
Fs	pointer
,	O
offset	long
)	O
;	O
if	O
(	O
old	struct
==	O
0	int
)	O
{	O
fatEncode	function
(	O
(	O
Fs_t	struct
*	O
)	O
Fs	pointer
,	O
offset	long
,	O
badClus	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
old	struct
==	O
badClus	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cluster %ld already marked\n"	pointer
,	O
offset	long
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cluster %ld is busy\n"	pointer
,	O
offset	long
)	O
;	O
}	O
}	O
static	O
char	O
*	O
in_buf	pointer
;	O
static	O
char	O
*	O
pat_buf	pointer
;	O
static	O
size_t	long
in_len	long
;	O
static	O
void	O
progress	function
(	O
unsigned	O
int	O
i	int
,	O
unsigned	O
int	O
total	int
)	O
{	O
if	O
(	O
i	int
%	O
10	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"                     \r%d/%d\r"	pointer
,	O
i	int
,	O
total	int
)	O
;	O
}	O
static	O
int	O
scan	function
(	O
Fs_t	struct
*	O
Fs	pointer
,	O
Stream_t	struct
*	O
dev	pointer
,	O
long	O
cluster	long
,	O
unsigned	O
int	O
badClus	int
,	O
char	O
*	O
buffer	pointer
,	O
int	O
doWrite	int
)	O
{	O
off_t	long
start	array
;	O
off_t	long
ret	int
;	O
off_t	long
pos	array
;	O
int	O
bad	int
=	O
0	int
;	O
if	O
(	O
Fs	pointer
->	O
fat_decode	pointer
(	O
(	O
Fs_t	struct
*	O
)	O
Fs	pointer
,	O
cluster	long
)	O
)	O
return	O
0	int
;	O
start	array
=	O
(	O
cluster	long
-	O
2	int
)	O
*	O
Fs	pointer
->	O
cluster_size	int
+	O
Fs	pointer
->	O
clus_start	int
;	O
pos	array
=	O
sectorsToBytes	function
(	O
(	O
Stream_t	struct
*	O
)	O
Fs	pointer
,	O
start	array
)	O
;	O
if	O
(	O
doWrite	int
)	O
{	O
ret	int
=	O
force_write	function
(	O
dev	pointer
,	O
buffer	pointer
,	O
pos	array
,	O
in_len	long
)	O
;	O
if	O
(	O
ret	int
<	O
(	O
off_t	long
)	O
in_len	long
)	O
bad	int
=	O
1	int
;	O
}	O
else	O
{	O
ret	int
=	O
force_read	function
(	O
dev	pointer
,	O
in_buf	pointer
,	O
pos	array
,	O
in_len	long
)	O
;	O
if	O
(	O
ret	int
<	O
(	O
off_t	long
)	O
in_len	long
)	O
bad	int
=	O
1	int
;	O
else	O
if	O
(	O
buffer	pointer
)	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
in_len	long
;	O
i	int
++	O
)	O
if	O
(	O
in_buf	pointer
[	O
i	int
]	O
!=	O
buffer	pointer
[	O
i	int
]	O
)	O
{	O
bad	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
bad	int
)	O
{	O
printf	function
(	O
"Bad cluster %ld found\n"	pointer
,	O
cluster	long
)	O
;	O
fatEncode	function
(	O
(	O
Fs_t	struct
*	O
)	O
Fs	pointer
,	O
cluster	long
,	O
badClus	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mbadblocks	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mbadblocks	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
type	enum
UNUSEDP	O
)	O
{	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
startSector	int
=	O
2	int
;	O
unsigned	O
int	O
endSector	int
=	O
0	int
;	O
struct	O
MainParam_t	struct
mp	pointer
;	O
Fs_t	struct
*	O
Fs	pointer
;	O
Stream_t	struct
*	O
Dir	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
filename	pointer
=	O
NULL	O
;	O
int	O
c	int
;	O
unsigned	O
int	O
badClus	int
;	O
int	O
sectorMode	int
=	O
0	int
;	O
int	O
writeMode	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:s:cwS:E:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
checkListTwice	function
(	O
filename	pointer
)	O
;	O
filename	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
checkListTwice	function
(	O
filename	pointer
)	O
;	O
filename	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
sectorMode	int
=	O
1	int
;	O
break	O
;	O
case	O
'S'	O
:	O
startSector	int
=	O
atoui	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
endSector	int
=	O
atoui	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
writeMode	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
default	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
!=	O
optind	int
+	O
1	int
||	O
!	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
||	O
argv	pointer
[	O
optind	int
]	O
[	O
1	int
]	O
!=	O
':'	O
||	O
argv	pointer
[	O
optind	int
]	O
[	O
2	int
]	O
)	O
{	O
usage	function
(	O
1	int
)	O
;	O
}	O
init_mp	function
(	O
&	O
mp	pointer
)	O
;	O
Dir	pointer
=	O
open_root_dir	function
(	O
argv	pointer
[	O
optind	int
]	O
[	O
0	int
]	O
,	O
O_RDWR	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
Dir	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Cannot initialize drive\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
Fs	pointer
=	O
(	O
Fs_t	struct
*	O
)	O
GetFs	function
(	O
Dir	pointer
)	O
;	O
in_len	long
=	O
Fs	pointer
->	O
cluster_size	int
*	O
Fs	pointer
->	O
sector_size	int
;	O
in_buf	pointer
=	O
malloc	function
(	O
in_len	long
)	O
;	O
if	O
(	O
!	O
in_buf	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
ret	int
=	O
1	int
;	O
goto	O
exit_0	O
;	O
}	O
if	O
(	O
writeMode	int
)	O
{	O
pat_buf	pointer
=	O
malloc	function
(	O
in_len	long
*	O
N_PATTERN	int
)	O
;	O
if	O
(	O
!	O
pat_buf	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
ret	int
=	O
1	int
;	O
goto	O
exit_0	O
;	O
}	O
init_random	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
in_len	long
*	O
N_PATTERN	int
;	O
i	int
++	O
)	O
{	O
pat_buf	pointer
[	O
i	int
]	O
=	O
random	function
(	O
)	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
Fs	pointer
->	O
clus_start	int
;	O
i	int
++	O
)	O
{	O
ret	int
=	O
READS	O
(	O
Fs	pointer
->	O
Next	pointer
,	O
in_buf	pointer
,	O
sectorsToBytes	function
(	O
(	O
Stream_t	struct
*	O
)	O
Fs	pointer
,	O
i	int
)	O
,	O
Fs	pointer
->	O
sector_size	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
perror	function
(	O
"early error"	pointer
)	O
;	O
goto	O
exit_0	O
;	O
}	O
if	O
(	O
ret	int
<	O
(	O
signed	O
int	O
)	O
Fs	pointer
->	O
sector_size	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"end of file in file_read\n"	pointer
)	O
;	O
ret	int
=	O
1	int
;	O
goto	O
exit_0	O
;	O
}	O
}	O
ret	int
=	O
0	int
;	O
badClus	int
=	O
Fs	pointer
->	O
last_fat	int
+	O
1	int
;	O
if	O
(	O
startSector	int
<	O
2	int
)	O
startSector	int
=	O
2	int
;	O
if	O
(	O
endSector	int
>	O
Fs	pointer
->	O
num_clus	int
+	O
2	int
||	O
endSector	int
<=	O
0	int
)	O
endSector	int
=	O
Fs	pointer
->	O
num_clus	int
+	O
2	int
;	O
if	O
(	O
filename	pointer
)	O
{	O
char	O
line	array
[	O
80	int
]	O
;	O
FILE	struct
*	O
f	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Could not open %s (%s)\n"	pointer
,	O
filename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ret	int
=	O
1	int
;	O
goto	O
exit_0	O
;	O
}	O
while	O
(	O
fgets	function
(	O
line	array
,	O
sizeof	O
(	O
line	array
)	O
,	O
f	pointer
)	O
)	O
{	O
char	O
*	O
ptr	pointer
=	O
line	array
+	O
strspn	function
(	O
line	array
,	O
" \t"	pointer
)	O
;	O
long	O
offset	long
=	O
strtol	function
(	O
ptr	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
sectorMode	int
)	O
offset	long
=	O
(	O
offset	long
-	O
Fs	pointer
->	O
clus_start	int
)	O
/	O
Fs	pointer
->	O
cluster_size	int
+	O
2	int
;	O
if	O
(	O
offset	long
<	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Sector before start\n"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
offset	long
>=	O
Fs	pointer
->	O
num_clus	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Sector beyond end\n"	pointer
)	O
;	O
}	O
else	O
{	O
mark	function
(	O
Fs	pointer
,	O
offset	long
,	O
badClus	int
)	O
;	O
ret	int
=	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
Stream_t	struct
*	O
dev	pointer
;	O
dev	pointer
=	O
Fs	pointer
->	O
Next	pointer
;	O
if	O
(	O
dev	pointer
->	O
Next	pointer
)	O
dev	pointer
=	O
dev	pointer
->	O
Next	pointer
;	O
in_len	long
=	O
Fs	pointer
->	O
cluster_size	int
*	O
Fs	pointer
->	O
sector_size	int
;	O
if	O
(	O
writeMode	int
)	O
{	O
for	O
(	O
i	int
=	O
startSector	int
;	O
i	int
<	O
endSector	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
got_signal	int
)	O
break	O
;	O
progress	function
(	O
i	int
,	O
Fs	pointer
->	O
num_clus	int
)	O
;	O
ret	int
|=	O
scan	function
(	O
Fs	pointer
,	O
dev	pointer
,	O
i	int
,	O
badClus	int
,	O
pat_buf	pointer
+	O
in_len	long
*	O
(	O
i	int
%	O
N_PATTERN	int
)	O
,	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
got_signal	int
)	O
DISCARD	O
(	O
dev	pointer
)	O
;	O
for	O
(	O
i	int
=	O
startSector	int
;	O
i	int
<	O
endSector	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
got_signal	int
)	O
break	O
;	O
progress	function
(	O
i	int
,	O
Fs	pointer
->	O
num_clus	int
)	O
;	O
ret	int
|=	O
scan	function
(	O
Fs	pointer
,	O
dev	pointer
,	O
i	int
,	O
badClus	int
,	O
pat_buf	pointer
+	O
in_len	long
*	O
(	O
i	int
%	O
N_PATTERN	int
)	O
,	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
startSector	int
;	O
i	int
<	O
endSector	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
got_signal	int
)	O
break	O
;	O
progress	function
(	O
i	int
,	O
Fs	pointer
->	O
num_clus	int
)	O
;	O
ret	int
|=	O
scan	function
(	O
Fs	pointer
,	O
dev	pointer
,	O
i	int
,	O
badClus	int
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
}	O
}	O
exit_0	O
:	O
FREE	O
(	O
&	O
Dir	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
