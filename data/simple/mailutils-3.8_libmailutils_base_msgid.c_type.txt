static	O
int	O
strip_message_id	function
(	O
const	O
char	O
*	O
msgid	pointer
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
int	O
state	pointer
;	O
*	O
pval	pointer
=	O
malloc	function
(	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
pval	pointer
)	O
return	O
ENOMEM	int
;	O
state	pointer
=	O
ST_INIT	int
;	O
for	O
(	O
p	pointer
=	O
msgid	pointer
,	O
q	pointer
=	O
*	O
pval	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
ST_INIT	int
:	O
if	O
(	O
*	O
p	pointer
==	O
'<'	O
)	O
{	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
;	O
state	pointer
=	O
ST_MSGID	int
;	O
}	O
else	O
if	O
(	O
mu_isspace	O
(	O
*	O
p	pointer
)	O
)	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
;	O
break	O
;	O
case	O
ST_MSGID	int
:	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'>'	O
)	O
state	pointer
=	O
ST_INIT	int
;	O
break	O
;	O
}	O
}	O
*	O
q	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
get_msgid_header	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
val	array
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
int	O
status	int
=	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
name	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
strip_message_id	function
(	O
p	pointer
,	O
val	array
)	O
;	O
}	O
int	O
mu_rfc2822_references	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
*	O
pstr	pointer
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
get_msgid_header	function
(	O
hdr	pointer
,	O
MU_HEADER_MESSAGE_ID	pointer
,	O
&	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
get_msgid_header	function
(	O
hdr	pointer
,	O
MU_HEADER_REFERENCES	pointer
,	O
&	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
get_msgid_header	function
(	O
hdr	pointer
,	O
MU_HEADER_IN_REPLY_TO	pointer
,	O
&	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
&&	O
argv	pointer
[	O
1	int
]	O
)	O
{	O
rc	int
=	O
mu_argcv_join	function
(	O
2	int
,	O
argv	pointer
,	O
" "	pointer
,	O
mu_argcv_escape_no	int
,	O
pstr	pointer
)	O
;	O
free	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
free	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
*	O
pstr	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
if	O
(	O
argv	pointer
[	O
1	int
]	O
)	O
*	O
pstr	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
else	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_rfc2822_msg_id	function
(	O
int	O
subpart	int
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
char	O
date	struct
[	O
4	int
+	O
2	int
+	O
2	int
+	O
2	int
+	O
2	int
+	O
2	int
+	O
1	int
]	O
;	O
time_t	long
t	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
struct	O
tm	struct
*	O
tm	struct
=	O
localtime	function
(	O
&	O
t	long
)	O
;	O
char	O
*	O
host	pointer
;	O
char	O
*	O
p	pointer
;	O
mu_strftime	function
(	O
date	struct
,	O
sizeof	O
date	struct
,	O
"%Y%m%d%H%M%S"	pointer
,	O
tm	struct
)	O
;	O
mu_get_host_name	function
(	O
&	O
host	pointer
)	O
;	O
if	O
(	O
subpart	int
)	O
{	O
struct	O
timeval	struct
tv	struct
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
mu_asprintf	function
(	O
&	O
p	pointer
,	O
"<%s.%lu.%d@%s>"	pointer
,	O
date	struct
,	O
(	O
unsigned	O
long	O
)	O
getpid	function
(	O
)	O
,	O
subpart	int
,	O
host	pointer
)	O
;	O
}	O
else	O
mu_asprintf	function
(	O
&	O
p	pointer
,	O
"<%s.%lu@%s>"	pointer
,	O
date	struct
,	O
(	O
unsigned	O
long	O
)	O
getpid	function
(	O
)	O
,	O
host	pointer
)	O
;	O
free	function
(	O
host	pointer
)	O
;	O
*	O
pval	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_rfc2822_in_reply_to	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
*	O
pstr	pointer
)	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
int	O
idx	int
=	O
0	int
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_DATE	pointer
,	O
&	O
argv	pointer
[	O
idx	int
+	O
1	int
]	O
)	O
)	O
{	O
mu_envelope_t	pointer
envelope	pointer
=	O
NULL	O
;	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
envelope	pointer
)	O
;	O
mu_envelope_sget_date	function
(	O
envelope	pointer
,	O
&	O
argv	pointer
[	O
idx	int
+	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
argv	pointer
[	O
idx	int
+	O
1	int
]	O
)	O
{	O
argv	pointer
[	O
idx	int
]	O
=	O
COMMENT	pointer
;	O
idx	int
=	O
2	int
;	O
}	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_MESSAGE_ID	pointer
,	O
&	O
argv	pointer
[	O
idx	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
idx	int
>	O
1	int
)	O
{	O
argv	pointer
[	O
idx	int
+	O
1	int
]	O
=	O
argv	pointer
[	O
idx	int
]	O
;	O
argv	pointer
[	O
idx	int
]	O
=	O
"\n\t"	pointer
;	O
idx	int
++	O
;	O
}	O
idx	int
++	O
;	O
}	O
if	O
(	O
idx	int
>	O
1	int
)	O
rc	int
=	O
mu_argcv_join	function
(	O
idx	int
,	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
,	O
""	pointer
,	O
mu_argcv_escape_no	int
,	O
pstr	pointer
)	O
;	O
else	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
return	O
rc	int
;	O
}	O
