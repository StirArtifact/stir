unsigned	O
int	O
mtools_lock_timeout	int
=	O
30	int
;	O
void	O
serve_client	function
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	pointer
,	O
unsigned	O
int	O
n_dev	int
,	O
int	O
close_stderr	int
)	O
;	O
typedef	O
struct	O
io_buffer	struct
{	O
Byte	char
out_buffer	array
[	O
BUFFERED_IO_SIZE	int
]	O
;	O
Byte	char
in_buffer	array
[	O
BUFFERED_IO_SIZE	int
]	O
;	O
size_t	long
in_valid	long
;	O
size_t	long
in_start	long
;	O
size_t	long
out_valid	long
;	O
int	O
handle	int
;	O
}	O
*	O
io_buffer	struct
;	O
static	O
io_buffer	struct
new_io_buffer	function
(	O
int	O
_handle	int
)	O
{	O
io_buffer	struct
buffer	pointer
;	O
buffer	pointer
=	O
New	O
(	O
struct	O
io_buffer	struct
)	O
;	O
buffer	pointer
->	O
handle	int
=	O
_handle	int
;	O
buffer	pointer
->	O
in_valid	long
=	O
buffer	pointer
->	O
in_start	long
=	O
0	int
;	O
buffer	pointer
->	O
out_valid	long
=	O
0	int
;	O
return	O
buffer	pointer
;	O
}	O
static	O
void	O
flush	pointer
(	O
io_buffer	struct
buffer	pointer
)	O
{	O
if	O
(	O
buffer	pointer
->	O
out_valid	long
)	O
{	O
if	O
(	O
write	pointer
(	O
buffer	pointer
->	O
handle	int
,	O
buffer	pointer
->	O
out_buffer	array
,	O
buffer	pointer
->	O
out_valid	long
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"floppyd flush"	pointer
)	O
;	O
}	O
buffer	pointer
->	O
out_valid	long
=	O
0	int
;	O
}	O
}	O
static	O
void	O
free_io_buffer	function
(	O
io_buffer	struct
buffer	pointer
)	O
{	O
flush	pointer
(	O
buffer	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
size_t	long
buf_read	function
(	O
io_buffer	struct
buf	pointer
,	O
Byte	char
*	O
buffer	pointer
,	O
size_t	long
nbytes	long
)	O
{	O
size_t	long
ret	long
;	O
if	O
(	O
nbytes	long
<=	O
buf	pointer
->	O
in_valid	long
)	O
{	O
memcpy	function
(	O
buffer	pointer
,	O
buf	pointer
->	O
in_buffer	array
+	O
buf	pointer
->	O
in_start	long
,	O
nbytes	long
)	O
;	O
buf	pointer
->	O
in_valid	long
-=	O
nbytes	long
;	O
buf	pointer
->	O
in_start	long
+=	O
nbytes	long
;	O
ret	long
=	O
nbytes	long
;	O
}	O
else	O
{	O
if	O
(	O
buf	pointer
->	O
in_valid	long
)	O
memcpy	function
(	O
buffer	pointer
,	O
buf	pointer
->	O
in_buffer	array
+	O
buf	pointer
->	O
in_start	long
,	O
buf	pointer
->	O
in_valid	long
)	O
;	O
nbytes	long
-=	O
buf	pointer
->	O
in_valid	long
;	O
buffer	pointer
+=	O
buf	pointer
->	O
in_valid	long
;	O
if	O
(	O
nbytes	long
>	O
BUFFERED_IO_SIZE	int
)	O
{	O
ssize_t	long
rval	long
=	O
read	pointer
(	O
buf	pointer
->	O
handle	int
,	O
buffer	pointer
,	O
nbytes	long
)	O
;	O
if	O
(	O
rval	long
>=	O
0	int
)	O
{	O
ret	long
=	O
(	O
size_t	long
)	O
rval	long
+	O
buf	pointer
->	O
in_valid	long
;	O
}	O
else	O
{	O
perror	function
(	O
"read error"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
buf	pointer
->	O
in_valid	long
=	O
buf	pointer
->	O
in_start	long
=	O
0	int
;	O
}	O
else	O
{	O
ssize_t	long
rval	long
=	O
read	pointer
(	O
buf	pointer
->	O
handle	int
,	O
buf	pointer
->	O
in_buffer	array
,	O
BUFFERED_IO_SIZE	int
)	O
;	O
if	O
(	O
rval	long
>=	O
0	int
)	O
{	O
if	O
(	O
rval	long
<	O
(	O
ssize_t	long
)	O
nbytes	long
)	O
{	O
memcpy	function
(	O
buffer	pointer
,	O
buf	pointer
->	O
in_buffer	array
,	O
(	O
size_t	long
)	O
rval	long
)	O
;	O
ret	long
=	O
(	O
size_t	long
)	O
rval	long
+	O
buf	pointer
->	O
in_valid	long
;	O
buf	pointer
->	O
in_valid	long
=	O
buf	pointer
->	O
in_start	long
=	O
0	int
;	O
}	O
else	O
{	O
size_t	long
a	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
buf	pointer
->	O
in_buffer	array
,	O
nbytes	long
)	O
;	O
buf	pointer
->	O
in_start	long
=	O
nbytes	long
;	O
a	long
=	O
buf	pointer
->	O
in_valid	long
;	O
buf	pointer
->	O
in_valid	long
=	O
(	O
size_t	long
)	O
rval	long
-	O
nbytes	long
;	O
ret	long
=	O
a	long
+	O
nbytes	long
;	O
}	O
}	O
else	O
{	O
perror	function
(	O
"read error"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
return	O
ret	long
;	O
}	O
static	O
ssize_t	long
buf_write	function
(	O
io_buffer	struct
buf	pointer
,	O
void	O
*	O
buffer	pointer
,	O
size_t	long
nbytes	long
)	O
{	O
if	O
(	O
buf	pointer
->	O
out_valid	long
+	O
nbytes	long
>	O
BUFFERED_IO_SIZE	int
)	O
{	O
flush	pointer
(	O
buf	pointer
)	O
;	O
return	O
write	pointer
(	O
buf	pointer
->	O
handle	int
,	O
buffer	pointer
,	O
nbytes	long
)	O
;	O
}	O
memcpy	function
(	O
buf	pointer
->	O
out_buffer	array
+	O
buf	pointer
->	O
out_valid	long
,	O
buffer	pointer
,	O
nbytes	long
)	O
;	O
buf	pointer
->	O
out_valid	long
+=	O
nbytes	long
;	O
return	O
(	O
ssize_t	long
)	O
nbytes	long
;	O
}	O
typedef	O
struct	O
Packet	struct
{	O
Byte	char
*	O
data	pointer
;	O
Dword	int
len	int
;	O
Dword	int
alloc_size	int
;	O
}	O
*	O
Packet	struct
;	O
static	O
Dword	int
read_dword	function
(	O
io_buffer	struct
fp	pointer
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
if	O
(	O
buf_read	function
(	O
fp	pointer
,	O
val	int
,	O
4	int
)	O
<	O
4	int
)	O
{	O
return	O
0xffffffff	int
;	O
}	O
return	O
byte2dword	function
(	O
val	int
)	O
;	O
}	O
static	O
void	O
write_dword	function
(	O
io_buffer	struct
fp	pointer
,	O
Dword	int
parm	int
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
dword2byte	function
(	O
parm	int
,	O
val	int
)	O
;	O
buf_write	function
(	O
fp	pointer
,	O
val	int
,	O
4	int
)	O
;	O
}	O
static	O
Packet	struct
newPacket	function
(	O
void	O
)	O
{	O
Packet	struct
packet	pointer
;	O
packet	pointer
=	O
New	O
(	O
struct	O
Packet	struct
)	O
;	O
packet	pointer
->	O
data	pointer
=	O
NULL	O
;	O
packet	pointer
->	O
len	int
=	O
packet	pointer
->	O
alloc_size	int
=	O
0	int
;	O
return	O
packet	pointer
;	O
}	O
static	O
void	O
destroyPacket	function
(	O
Packet	struct
packet	pointer
)	O
{	O
if	O
(	O
packet	pointer
->	O
data	pointer
)	O
free	function
(	O
packet	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
packet	pointer
)	O
;	O
}	O
static	O
void	O
kill_packet	function
(	O
Packet	struct
packet	pointer
)	O
{	O
if	O
(	O
packet	pointer
->	O
data	pointer
)	O
free	function
(	O
packet	pointer
->	O
data	pointer
)	O
;	O
packet	pointer
->	O
data	pointer
=	O
NULL	O
;	O
packet	pointer
->	O
len	int
=	O
0	int
;	O
packet	pointer
->	O
alloc_size	int
=	O
0	int
;	O
}	O
static	O
void	O
make_new	function
(	O
Packet	struct
packet	pointer
,	O
Dword	int
l	array
)	O
{	O
if	O
(	O
l	array
<	O
packet	pointer
->	O
alloc_size	int
)	O
{	O
packet	pointer
->	O
len	int
=	O
l	array
;	O
return	O
;	O
}	O
kill_packet	function
(	O
packet	pointer
)	O
;	O
packet	pointer
->	O
len	int
=	O
packet	pointer
->	O
alloc_size	int
=	O
l	array
;	O
packet	pointer
->	O
data	pointer
=	O
malloc	function
(	O
l	array
)	O
;	O
memset	function
(	O
packet	pointer
->	O
data	pointer
,	O
0	int
,	O
l	array
)	O
;	O
}	O
static	O
char	O
send_packet	function
(	O
Packet	struct
packet	pointer
,	O
io_buffer	struct
fp	pointer
)	O
{	O
if	O
(	O
packet	pointer
->	O
data	pointer
)	O
{	O
write_dword	function
(	O
fp	pointer
,	O
packet	pointer
->	O
len	int
)	O
;	O
buf_write	function
(	O
fp	pointer
,	O
packet	pointer
->	O
data	pointer
,	O
packet	pointer
->	O
len	int
)	O
;	O
flush	pointer
(	O
fp	pointer
)	O
;	O
}	O
return	O
(	O
packet	pointer
->	O
data	pointer
!=	O
NULL	O
)	O
;	O
}	O
static	O
char	O
recv_packet	function
(	O
Packet	struct
packet	pointer
,	O
io_buffer	struct
fp	pointer
,	O
Dword	int
maxlength	int
)	O
{	O
Dword	int
start	array
;	O
size_t	long
l	array
;	O
Dword	int
length	int
=	O
read_dword	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
length	int
>	O
maxlength	int
||	O
length	int
==	O
0xffffffff	int
)	O
{	O
return	O
0	int
;	O
}	O
make_new	function
(	O
packet	pointer
,	O
length	int
)	O
;	O
l	array
=	O
0	int
;	O
for	O
(	O
start	array
=	O
0	int
;	O
start	array
<	O
length	int
;	O
start	array
+=	O
l	array
)	O
{	O
l	array
=	O
buf_read	function
(	O
fp	pointer
,	O
packet	pointer
->	O
data	pointer
+	O
start	array
,	O
length	int
-	O
start	array
)	O
;	O
if	O
(	O
l	array
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
packet	pointer
->	O
len	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
ssize_t	long
read_packet	function
(	O
Packet	struct
packet	pointer
,	O
int	O
fd	int
,	O
Dword	int
length	int
)	O
{	O
make_new	function
(	O
packet	pointer
,	O
length	int
)	O
;	O
ssize_t	long
ret	long
=	O
read	pointer
(	O
fd	int
,	O
packet	pointer
->	O
data	pointer
,	O
packet	pointer
->	O
len	int
)	O
;	O
if	O
(	O
ret	long
<	O
0	int
)	O
return	O
ret	long
;	O
packet	pointer
->	O
len	int
=	O
(	O
Dword	int
)	O
ret	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
write_packet	function
(	O
Packet	struct
packet	pointer
,	O
int	O
fd	int
)	O
{	O
return	O
(	O
int	O
)	O
write	pointer
(	O
fd	int
,	O
packet	pointer
->	O
data	pointer
,	O
packet	pointer
->	O
len	int
)	O
;	O
}	O
static	O
void	O
put_dword	function
(	O
Packet	struct
packet	pointer
,	O
int	O
my_index	int
,	O
Dword	int
val	int
)	O
{	O
dword2byte	function
(	O
val	int
,	O
packet	pointer
->	O
data	pointer
+	O
my_index	int
)	O
;	O
}	O
static	O
void	O
put_qword	function
(	O
Packet	struct
packet	pointer
,	O
int	O
my_index	int
,	O
Qword	long
val	int
)	O
{	O
qword2byte	function
(	O
val	int
,	O
packet	pointer
->	O
data	pointer
+	O
my_index	int
)	O
;	O
}	O
static	O
Dword	int
get_dword	function
(	O
Packet	struct
packet	pointer
,	O
int	O
my_index	int
)	O
{	O
return	O
byte2dword	function
(	O
packet	pointer
->	O
data	pointer
+	O
my_index	int
)	O
;	O
}	O
static	O
Qword	long
get_qword	function
(	O
Packet	struct
packet	pointer
,	O
int	O
my_index	int
)	O
{	O
return	O
byte2qword	function
(	O
packet	pointer
->	O
data	pointer
+	O
my_index	int
)	O
;	O
}	O
static	O
Dword	int
get_length	function
(	O
Packet	struct
packet	pointer
)	O
{	O
return	O
packet	pointer
->	O
len	int
;	O
}	O
static	O
int	O
eat	function
(	O
unsigned	O
char	O
*	O
*	O
ptr	pointer
,	O
size_t	long
*	O
len	int
,	O
unsigned	O
char	O
c	char
)	O
{	O
if	O
(	O
*	O
len	int
<	O
c	char
+	O
3	int
)	O
return	O
-	O
1	int
;	O
(	O
*	O
ptr	pointer
)	O
+=	O
c	char
+	O
2	int
;	O
(	O
*	O
len	int
)	O
-=	O
c	char
+	O
2	int
;	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
dispName	pointer
;	O
static	O
char	O
XAUTHORITY	array
[	O
]	O
=	O
"XAUTHORITY"	pointer
;	O
static	O
char	O
do_auth	function
(	O
io_buffer	struct
sock	int
,	O
unsigned	O
int	O
*	O
version	pointer
)	O
{	O
int	O
fd	int
;	O
Display	struct
*	O
displ	pointer
;	O
Packet	struct
proto_version	pointer
=	O
newPacket	function
(	O
)	O
;	O
Packet	struct
mit_cookie	pointer
;	O
unsigned	O
char	O
*	O
ptr	pointer
;	O
size_t	long
len	int
;	O
char	O
authFile	array
[	O
41	int
]	O
=	O
"/tmp/floppyd.XXXXXX"	pointer
;	O
unsigned	O
char	O
template	array
[	O
4096	int
]	O
;	O
Packet	struct
reply	pointer
=	O
newPacket	function
(	O
)	O
;	O
make_new	function
(	O
reply	pointer
,	O
4	int
)	O
;	O
if	O
(	O
!	O
recv_packet	function
(	O
proto_version	pointer
,	O
sock	int
,	O
4	int
)	O
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_PACKETOVERSIZE	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
destroyPacket	function
(	O
proto_version	pointer
)	O
;	O
return	O
0	int
;	O
}	O
*	O
version	pointer
=	O
get_dword	function
(	O
proto_version	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
version	pointer
>	O
FLOPPYD_PROTOCOL_VERSION	int
||	O
*	O
version	pointer
<	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_WRONGVERSION	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
destroyPacket	function
(	O
proto_version	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
version	pointer
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
}	O
else	O
{	O
Dword	int
cap	int
=	O
FLOPPYD_CAP_EXPLICIT_OPEN	int
;	O
if	O
(	O
sizeof	O
(	O
mt_off_t	long
)	O
>=	O
8	int
)	O
{	O
cap	int
|=	O
FLOPPYD_CAP_LARGE_SEEK	int
;	O
}	O
make_new	function
(	O
reply	pointer
,	O
12	int
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
4	int
,	O
FLOPPYD_PROTOCOL_VERSION	int
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
8	int
,	O
cap	int
)	O
;	O
}	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
proto_version	pointer
)	O
;	O
make_new	function
(	O
reply	pointer
,	O
4	int
)	O
;	O
mit_cookie	pointer
=	O
newPacket	function
(	O
)	O
;	O
if	O
(	O
!	O
recv_packet	function
(	O
mit_cookie	pointer
,	O
sock	int
,	O
MAX_XAUTHORITY_LENGTH	int
)	O
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_PACKETOVERSIZE	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
destroyPacket	function
(	O
mit_cookie	pointer
)	O
;	O
return	O
0	int
;	O
}	O
umask	function
(	O
077	int
)	O
;	O
fd	int
=	O
mkstemp	function
(	O
authFile	array
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_DEVLOCKED	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
destroyPacket	function
(	O
mit_cookie	pointer
)	O
;	O
return	O
0	int
;	O
}	O
setenv	function
(	O
XAUTHORITY	array
,	O
authFile	array
,	O
1	int
)	O
;	O
ptr	pointer
=	O
template	array
;	O
ptr	pointer
[	O
4095	int
]	O
=	O
0	int
;	O
*	O
ptr	pointer
++	O
=	O
1	int
;	O
*	O
ptr	pointer
++	O
=	O
0	int
;	O
*	O
ptr	pointer
++	O
=	O
0	int
;	O
gethostname	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
+	O
1	int
,	O
4088	int
)	O
;	O
len	int
=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
+	O
1	int
)	O
;	O
*	O
ptr	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
len	int
;	O
ptr	pointer
+=	O
len	int
;	O
*	O
ptr	pointer
++	O
=	O
0	int
;	O
*	O
ptr	pointer
++	O
=	O
1	int
;	O
*	O
ptr	pointer
++	O
=	O
'0'	O
;	O
*	O
ptr	pointer
++	O
=	O
'\0'	O
;	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
template	array
,	O
len	int
+	O
8	int
)	O
<	O
(	O
ssize_t	long
)	O
(	O
len	int
+	O
8	int
)	O
)	O
{	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
ptr	pointer
=	O
mit_cookie	pointer
->	O
data	pointer
;	O
len	int
=	O
mit_cookie	pointer
->	O
len	int
;	O
if	O
(	O
eat	function
(	O
&	O
ptr	pointer
,	O
&	O
len	int
,	O
1	int
)	O
||	O
eat	function
(	O
&	O
ptr	pointer
,	O
&	O
len	int
,	O
*	O
ptr	pointer
)	O
||	O
eat	function
(	O
&	O
ptr	pointer
,	O
&	O
len	int
,	O
*	O
ptr	pointer
)	O
)	O
{	O
destroyPacket	function
(	O
mit_cookie	pointer
)	O
;	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_BADPACKET	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
write	pointer
(	O
fd	int
,	O
ptr	pointer
,	O
len	int
)	O
<	O
(	O
ssize_t	long
)	O
len	int
)	O
{	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
destroyPacket	function
(	O
mit_cookie	pointer
)	O
;	O
displ	pointer
=	O
XOpenDisplay	function
(	O
dispName	pointer
)	O
;	O
if	O
(	O
!	O
displ	pointer
)	O
{	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_AUTHFAILED	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
return	O
0	int
;	O
}	O
XCloseDisplay	function
(	O
displ	pointer
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
AUTH_SUCCESS	int
)	O
;	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
uint16_t	short
getportnum	function
(	O
char	O
*	O
portnum	pointer
)	O
{	O
char	O
*	O
digits	pointer
=	O
portnum	pointer
;	O
struct	O
servent	struct
*	O
serv	pointer
;	O
uint16_t	short
port	short
;	O
for	O
(	O
port	short
=	O
0	int
;	O
isdigit	function
(	O
*	O
digits	pointer
)	O
;	O
++	O
digits	pointer
)	O
{	O
port	short
=	O
(	O
port	short
*	O
10	int
)	O
+	O
(	O
*	O
digits	pointer
-	O
'0'	O
)	O
;	O
}	O
if	O
(	O
(	O
*	O
digits	pointer
!=	O
'\0'	O
)	O
||	O
(	O
port	short
<=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
serv	pointer
=	O
getservbyname	function
(	O
portnum	pointer
,	O
"tcp"	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
port	short
=	O
ntohs	function
(	O
serv	pointer
->	O
s_port	int
)	O
;	O
}	O
else	O
{	O
port	short
=	O
0	int
;	O
}	O
endservent	function
(	O
)	O
;	O
}	O
return	O
(	O
port	short
)	O
;	O
}	O
static	O
in_addr_t	int
getipaddress	function
(	O
char	O
*	O
ipaddr	pointer
)	O
{	O
struct	O
hostent	struct
*	O
host	pointer
;	O
in_addr_t	int
ip	int
;	O
if	O
(	O
(	O
(	O
ip	int
=	O
inet_addr	function
(	O
ipaddr	pointer
)	O
)	O
==	O
INADDR_NONE	O
)	O
&&	O
(	O
strcmp	function
(	O
ipaddr	pointer
,	O
"255.255.255.255"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
host	pointer
=	O
gethostbyname	function
(	O
ipaddr	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
&	O
ip	int
,	O
host	pointer
->	O
h_addr	O
,	O
sizeof	O
(	O
ip	int
)	O
)	O
;	O
}	O
endhostent	function
(	O
)	O
;	O
}	O
return	O
(	O
ip	int
)	O
;	O
}	O
static	O
uid_t	int
getuserid	function
(	O
char	O
*	O
user	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
uid_t	int
uid	int
;	O
if	O
(	O
(	O
pw	pointer
=	O
getpwnam	function
(	O
user	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
uid	int
=	O
pw	pointer
->	O
pw_uid	int
;	O
}	O
else	O
if	O
(	O
*	O
user	pointer
==	O
'#'	O
)	O
{	O
uid	int
=	O
(	O
uid_t	int
)	O
atoi	function
(	O
&	O
user	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
uid	int
=	O
65535	int
;	O
}	O
endpwent	function
(	O
)	O
;	O
return	O
(	O
uid	int
)	O
;	O
}	O
static	O
uid_t	int
getgroupid	function
(	O
uid_t	int
uid	int
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
gid_t	int
gid	int
;	O
if	O
(	O
(	O
pw	pointer
=	O
getpwuid	function
(	O
uid	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
gid	int
=	O
pw	pointer
->	O
pw_gid	int
;	O
}	O
else	O
{	O
gid	int
=	O
65535	int
;	O
}	O
endpwent	function
(	O
)	O
;	O
return	O
(	O
gid	int
)	O
;	O
}	O
static	O
int	O
bind_to_port	function
(	O
in_addr_t	int
bind_ip	int
,	O
uint16_t	short
bind_port	short
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
int	O
sock	int
;	O
if	O
(	O
(	O
sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"socket()"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
sock	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"setsockopt"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
addr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
bind_port	short
)	O
;	O
addr	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
bind_ip	int
;	O
if	O
(	O
bind	function
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
addr	struct
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"bind()"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
listen	function
(	O
sock	int
,	O
SOMAXCONN	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"listen()"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
(	O
sock	int
)	O
;	O
}	O
static	O
int	O
sockethandle_now	int
=	O
-	O
1	int
;	O
static	O
void	O
alarm_signal	function
(	O
int	O
a	long
UNUSEDP	O
)	O
NORETURN	O
;	O
static	O
void	O
alarm_signal	function
(	O
int	O
a	long
UNUSEDP	O
)	O
{	O
if	O
(	O
sockethandle_now	int
!=	O
-	O
1	int
)	O
{	O
close	pointer
(	O
sockethandle_now	int
)	O
;	O
sockethandle_now	int
=	O
-	O
1	int
;	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
}	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
void	O
server_main_loop	function
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	pointer
,	O
unsigned	O
int	O
n_dev	int
)	O
NORETURN	O
;	O
static	O
void	O
server_main_loop	function
(	O
int	O
sock	int
,	O
char	O
*	O
*	O
device_name	pointer
,	O
unsigned	O
int	O
n_dev	int
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
unsigned	O
int	O
len	int
;	O
signal	function
(	O
SIGCLD	O
,	O
SIG_IGN	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
new_sock	int
;	O
len	int
=	O
sizeof	O
(	O
addr	struct
)	O
;	O
while	O
(	O
(	O
new_sock	int
=	O
accept	function
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
&	O
len	int
)	O
)	O
<	O
0	int
)	O
{	O
}	O
switch	O
(	O
fork	function
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
serve_client	function
(	O
new_sock	int
,	O
device_name	pointer
,	O
n_dev	int
,	O
0	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
close	pointer
(	O
new_sock	int
)	O
;	O
new_sock	int
=	O
-	O
1	int
;	O
}	O
}	O
static	O
void	O
usage	function
(	O
char	O
*	O
prog	pointer
,	O
const	O
char	O
*	O
opt	pointer
,	O
int	O
ret	long
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
char	O
*	O
prog	pointer
,	O
const	O
char	O
*	O
opt	pointer
,	O
int	O
ret	long
)	O
{	O
if	O
(	O
opt	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
prog	pointer
,	O
opt	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"usage: %s [-s port [-r user] [-b ipaddr]] devicename [Names of local host]\n"	pointer
,	O
prog	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"    -d          Run as a server (default port 5703 + DISPLAY)\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"    -s port     Run as a server bound to the specified port.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"    -r user     Run as the specified user in server mode.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"    -b ipaddr   Bind to the specified ipaddr in server mode.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"    -l          Do not attempt to connect to localhost:0 to validate connection\n"	pointer
)	O
;	O
exit	function
(	O
ret	long
)	O
;	O
}	O
static	O
char	O
*	O
makeDisplayName	function
(	O
int	O
dispNr	int
)	O
{	O
char	O
result	array
[	O
80	int
]	O
;	O
sprintf	function
(	O
result	array
,	O
":%d.0"	pointer
,	O
dispNr	int
)	O
;	O
return	O
strdup	function
(	O
result	array
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
sockfd	int
=	O
0	int
;	O
int	O
arg	int
;	O
int	O
run_as_server	int
=	O
0	int
;	O
in_addr_t	int
bind_ip	int
=	O
INADDR_ANY	O
;	O
uint16_t	short
bind_port	short
=	O
0	int
;	O
uid_t	int
run_uid	int
=	O
65535	int
;	O
gid_t	int
run_gid	int
=	O
65535	int
;	O
char	O
*	O
username	pointer
=	O
strdup	function
(	O
"nobody"	pointer
)	O
;	O
int	O
sock	int
;	O
char	O
*	O
*	O
device_name	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
floppy0	pointer
=	O
"/dev/fd0"	pointer
;	O
unsigned	O
int	O
n_dev	int
;	O
if	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"--help"	pointer
)	O
)	O
usage	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
while	O
(	O
(	O
arg	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"ds:r:b:x:h"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
arg	int
)	O
{	O
case	O
'd'	O
:	O
run_as_server	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
run_as_server	int
=	O
1	int
;	O
bind_port	short
=	O
getportnum	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
free	function
(	O
username	pointer
)	O
;	O
username	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
run_uid	int
=	O
getuserid	function
(	O
optarg	pointer
)	O
;	O
run_gid	int
=	O
getgroupid	function
(	O
run_uid	int
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
run_as_server	int
=	O
1	int
;	O
bind_ip	int
=	O
getipaddress	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
dispName	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
NULL	O
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
device_name	pointer
=	O
argv	pointer
+	O
optind	int
;	O
n_dev	int
=	O
argc	int
-	O
optind	int
;	O
}	O
else	O
{	O
device_name	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
floppy0	pointer
;	O
n_dev	int
=	O
1	int
;	O
}	O
if	O
(	O
dispName	pointer
==	O
NULL	O
)	O
dispName	pointer
=	O
getenv	function
(	O
"DISPLAY"	pointer
)	O
;	O
if	O
(	O
dispName	pointer
==	O
NULL	O
&&	O
bind_port	short
!=	O
0	int
)	O
dispName	pointer
=	O
makeDisplayName	function
(	O
(	O
unsigned	O
short	O
)	O
(	O
bind_port	short
-	O
5703	int
)	O
)	O
;	O
if	O
(	O
dispName	pointer
==	O
NULL	O
)	O
dispName	pointer
=	O
":0"	pointer
;	O
if	O
(	O
bind_port	short
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
dispName	pointer
,	O
':'	O
)	O
;	O
bind_port	short
=	O
FLOPPYD_DEFAULT_PORT	int
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
bind_port	short
+=	O
atoi	function
(	O
p	pointer
+	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
run_as_server	int
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
unsigned	O
int	O
len	int
=	O
sizeof	O
(	O
addr	struct
)	O
;	O
if	O
(	O
getsockname	function
(	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
&	O
len	int
)	O
>=	O
0	int
&&	O
len	int
==	O
sizeof	O
(	O
addr	struct
)	O
)	O
{	O
bind_port	short
=	O
ntohs	function
(	O
addr	struct
.	O
sin_port	short
)	O
;	O
}	O
}	O
umask	function
(	O
0077	int
)	O
;	O
if	O
(	O
run_as_server	int
&&	O
(	O
bind_ip	int
==	O
INADDR_NONE	O
)	O
)	O
{	O
usage	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"The server ipaddr is invalid."	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
run_as_server	int
&&	O
(	O
bind_port	short
==	O
0	int
)	O
)	O
{	O
usage	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"No server port was specified (or it was invalid)."	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
run_as_server	int
)	O
{	O
sock	int
=	O
bind_to_port	function
(	O
bind_ip	int
,	O
bind_port	short
)	O
;	O
switch	O
(	O
fork	function
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
perror	function
(	O
"fork()"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
case	O
0	int
:	O
signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
alarm_signal	function
)	O
;	O
setgid	function
(	O
run_gid	int
)	O
;	O
initgroups	function
(	O
username	pointer
,	O
run_gid	int
)	O
;	O
setuid	function
(	O
run_uid	int
)	O
;	O
setsid	function
(	O
)	O
;	O
setpgrp	function
(	O
)	O
;	O
server_main_loop	function
(	O
sock	int
,	O
device_name	pointer
,	O
n_dev	int
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
signal	function
(	O
SIGHUP	int
,	O
alarm_signal	function
)	O
;	O
signal	function
(	O
SIGINT	int
,	O
alarm_signal	function
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
alarm_signal	function
)	O
;	O
signal	function
(	O
SIGTERM	int
,	O
alarm_signal	function
)	O
;	O
signal	function
(	O
SIGTSTP	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGCONT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
alarm_signal	function
)	O
;	O
serve_client	function
(	O
sockfd	int
,	O
device_name	pointer
,	O
n_dev	int
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
send_reply	function
(	O
int	O
rval	long
,	O
io_buffer	struct
sock	int
,	O
Dword	int
len	int
)	O
{	O
Packet	struct
reply	pointer
=	O
newPacket	function
(	O
)	O
;	O
make_new	function
(	O
reply	pointer
,	O
8	int
)	O
;	O
put_dword	function
(	O
reply	pointer
,	O
0	int
,	O
len	int
)	O
;	O
if	O
(	O
rval	long
==	O
-	O
1	int
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
4	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
put_dword	function
(	O
reply	pointer
,	O
4	int
,	O
(	O
Dword	int
)	O
errno	O
)	O
;	O
}	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
}	O
static	O
void	O
send_reply64	function
(	O
int	O
rval	long
,	O
io_buffer	struct
sock	int
,	O
mt_off_t	long
len	int
)	O
{	O
Packet	struct
reply	pointer
=	O
newPacket	function
(	O
)	O
;	O
make_new	function
(	O
reply	pointer
,	O
12	int
)	O
;	O
put_qword	function
(	O
reply	pointer
,	O
0	int
,	O
len	int
)	O
;	O
if	O
(	O
rval	long
==	O
-	O
1	int
)	O
{	O
put_dword	function
(	O
reply	pointer
,	O
8	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
put_dword	function
(	O
reply	pointer
,	O
8	int
,	O
(	O
Dword	int
)	O
errno	O
)	O
;	O
}	O
send_packet	function
(	O
reply	pointer
,	O
sock	int
)	O
;	O
destroyPacket	function
(	O
reply	pointer
)	O
;	O
}	O
static	O
void	O
cleanup	function
(	O
int	O
x	int
UNUSEDP	O
)	O
NORETURN	O
;	O
static	O
void	O
cleanup	function
(	O
int	O
x	int
UNUSEDP	O
)	O
{	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
void	O
serve_client	function
(	O
int	O
sockhandle	int
,	O
char	O
*	O
*	O
device_name	pointer
,	O
unsigned	O
int	O
n_dev	int
,	O
int	O
close_stderr	int
)	O
{	O
Packet	struct
opcode	pointer
;	O
Packet	struct
parm	int
;	O
int	O
readOnly	int
;	O
int	O
devFd	int
;	O
io_buffer	struct
sock	int
;	O
int	O
stopLoop	int
;	O
unsigned	O
int	O
version	pointer
;	O
int	O
needSendReply	int
=	O
0	int
;	O
int	O
rval	long
=	O
0	int
;	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
sockhandle	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
"setsockopt"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
close_stderr	int
)	O
{	O
close	pointer
(	O
2	int
)	O
;	O
open	function
(	O
"/dev/null"	pointer
,	O
O_WRONLY	int
)	O
;	O
}	O
sock	int
=	O
new_io_buffer	function
(	O
sockhandle	int
)	O
;	O
alarm	function
(	O
60	int
)	O
;	O
version	pointer
=	O
0	int
;	O
if	O
(	O
!	O
do_auth	function
(	O
sock	int
,	O
&	O
version	pointer
)	O
)	O
{	O
free_io_buffer	function
(	O
sock	int
)	O
;	O
return	O
;	O
}	O
alarm	function
(	O
0	int
)	O
;	O
signal	function
(	O
SIGTERM	int
,	O
cleanup	function
)	O
;	O
signal	function
(	O
SIGALRM	int
,	O
cleanup	function
)	O
;	O
sockethandle_now	int
=	O
sockhandle	int
;	O
opcode	pointer
=	O
newPacket	function
(	O
)	O
;	O
parm	int
=	O
newPacket	function
(	O
)	O
;	O
devFd	int
=	O
-	O
1	int
;	O
readOnly	int
=	O
1	int
;	O
stopLoop	int
=	O
0	int
;	O
if	O
(	O
version	pointer
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
{	O
readOnly	int
=	O
0	int
;	O
devFd	int
=	O
open	function
(	O
device_name	pointer
[	O
0	int
]	O
,	O
O_RDWR	int
|	O
O_LARGEFILE	O
)	O
;	O
if	O
(	O
devFd	int
<	O
0	int
)	O
{	O
readOnly	int
=	O
1	int
;	O
devFd	int
=	O
open	function
(	O
device_name	pointer
[	O
0	int
]	O
,	O
O_RDONLY	int
|	O
O_LARGEFILE	O
)	O
;	O
}	O
if	O
(	O
devFd	int
<	O
0	int
)	O
{	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
stopLoop	int
=	O
1	int
;	O
}	O
lock_dev	function
(	O
devFd	int
,	O
!	O
readOnly	int
,	O
NULL	O
)	O
;	O
}	O
while	O
(	O
!	O
stopLoop	int
)	O
{	O
uint32_t	int
dev_nr	int
=	O
0	int
;	O
if	O
(	O
!	O
recv_packet	function
(	O
opcode	pointer
,	O
sock	int
,	O
1	int
)	O
)	O
{	O
break	O
;	O
}	O
recv_packet	function
(	O
parm	int
,	O
sock	int
,	O
MAX_DATA_REQUEST	int
)	O
;	O
cork	function
(	O
sock	int
->	O
handle	int
,	O
1	int
)	O
;	O
switch	O
(	O
opcode	pointer
->	O
data	pointer
[	O
0	int
]	O
)	O
{	O
case	O
OP_OPRO	int
:	O
if	O
(	O
get_length	function
(	O
parm	int
)	O
>=	O
4	int
)	O
dev_nr	int
=	O
get_dword	function
(	O
parm	int
,	O
0	int
)	O
;	O
else	O
dev_nr	int
=	O
0	int
;	O
if	O
(	O
dev_nr	int
>=	O
n_dev	int
)	O
{	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
devFd	int
=	O
open	function
(	O
device_name	pointer
[	O
dev_nr	int
]	O
,	O
O_RDONLY	int
|	O
O_LARGEFILE	O
)	O
;	O
if	O
(	O
devFd	int
>=	O
0	int
&&	O
lock_dev	function
(	O
devFd	int
,	O
0	int
,	O
NULL	O
)	O
)	O
{	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
readOnly	int
=	O
1	int
;	O
break	O
;	O
case	O
OP_OPRW	int
:	O
if	O
(	O
get_length	function
(	O
parm	int
)	O
>=	O
4	int
)	O
dev_nr	int
=	O
get_dword	function
(	O
parm	int
,	O
0	int
)	O
;	O
else	O
dev_nr	int
=	O
0	int
;	O
if	O
(	O
dev_nr	int
>=	O
n_dev	int
)	O
{	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
devFd	int
=	O
open	function
(	O
device_name	pointer
[	O
dev_nr	int
]	O
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
devFd	int
>=	O
0	int
&&	O
lock_dev	function
(	O
devFd	int
,	O
1	int
,	O
NULL	O
)	O
)	O
{	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
send_reply	function
(	O
0	int
,	O
sock	int
,	O
devFd	int
>=	O
0	int
?	O
0	int
:	O
DWORD_ERR	O
)	O
;	O
readOnly	int
=	O
0	int
;	O
break	O
;	O
case	O
OP_READ	int
:	O
if	O
(	O
read_packet	function
(	O
parm	int
,	O
devFd	int
,	O
get_dword	function
(	O
parm	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
else	O
{	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
get_length	function
(	O
parm	int
)	O
)	O
;	O
send_packet	function
(	O
parm	int
,	O
sock	int
)	O
;	O
}	O
break	O
;	O
case	O
OP_WRITE	int
:	O
if	O
(	O
readOnly	int
)	O
{	O
errno	O
=	O
-	O
EROFS	int
;	O
rval	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
rval	long
=	O
write_packet	function
(	O
parm	int
,	O
devFd	int
)	O
;	O
}	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
rval	long
)	O
;	O
break	O
;	O
case	O
OP_SEEK	int
:	O
lseek	function
(	O
devFd	int
,	O
get_dword	function
(	O
parm	int
,	O
0	int
)	O
,	O
get_dword	function
(	O
parm	int
,	O
4	int
)	O
)	O
;	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
(	O
Dword	int
)	O
lseek	function
(	O
devFd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
;	O
break	O
;	O
case	O
OP_SEEK64	int
:	O
if	O
(	O
sizeof	O
(	O
mt_off_t	long
)	O
<	O
8	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
mt_lseek	function
(	O
devFd	int
,	O
get_qword	function
(	O
parm	int
,	O
0	int
)	O
,	O
get_dword	function
(	O
parm	int
,	O
8	int
)	O
)	O
;	O
send_reply64	function
(	O
devFd	int
,	O
sock	int
,	O
mt_lseek	function
(	O
devFd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
)	O
;	O
break	O
;	O
case	O
OP_FLUSH	int
:	O
fsync	function
(	O
devFd	int
)	O
;	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
OP_CLOSE	int
:	O
close	pointer
(	O
devFd	int
)	O
;	O
needSendReply	int
=	O
1	int
;	O
rval	long
=	O
devFd	int
;	O
devFd	int
=	O
-	O
1	int
;	O
stopLoop	int
=	O
1	int
;	O
break	O
;	O
case	O
OP_IOCTL	int
:	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
send_reply	function
(	O
devFd	int
,	O
sock	int
,	O
DWORD_ERR	O
)	O
;	O
break	O
;	O
}	O
cork	function
(	O
sock	int
->	O
handle	int
,	O
0	int
)	O
;	O
kill_packet	function
(	O
parm	int
)	O
;	O
alarm	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
devFd	int
>=	O
0	int
)	O
{	O
close	pointer
(	O
devFd	int
)	O
;	O
devFd	int
=	O
-	O
1	int
;	O
}	O
free_io_buffer	function
(	O
sock	int
)	O
;	O
unlink	function
(	O
XauFileName	function
(	O
)	O
)	O
;	O
if	O
(	O
needSendReply	int
)	O
send_reply	function
(	O
rval	long
,	O
sock	int
,	O
0	int
)	O
;	O
destroyPacket	function
(	O
opcode	pointer
)	O
;	O
destroyPacket	function
(	O
parm	int
)	O
;	O
}	O
