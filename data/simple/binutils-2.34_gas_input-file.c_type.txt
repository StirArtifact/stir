int	O
preprocess	int
=	O
0	int
;	O
static	O
FILE	struct
*	O
f_in	pointer
;	O
static	O
const	O
char	O
*	O
file_name	pointer
;	O
struct	O
saved_file	struct
{	O
FILE	struct
*	O
f_in	pointer
;	O
const	O
char	O
*	O
file_name	pointer
;	O
int	O
preprocess	int
;	O
char	O
*	O
app_save	pointer
;	O
}	O
;	O
void	O
input_file_begin	function
(	O
void	O
)	O
{	O
f_in	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
}	O
void	O
input_file_end	function
(	O
void	O
)	O
{	O
}	O
size_t	long
input_file_buffer_size	function
(	O
void	O
)	O
{	O
return	O
(	O
BUFFER_SIZE	O
)	O
;	O
}	O
char	O
*	O
input_file_push	function
(	O
void	O
)	O
{	O
struct	O
saved_file	struct
*	O
saved	pointer
;	O
saved	pointer
=	O
XNEW	O
(	O
struct	O
saved_file	struct
)	O
;	O
saved	pointer
->	O
f_in	pointer
=	O
f_in	pointer
;	O
saved	pointer
->	O
file_name	pointer
=	O
file_name	pointer
;	O
saved	pointer
->	O
preprocess	int
=	O
preprocess	int
;	O
if	O
(	O
preprocess	int
)	O
saved	pointer
->	O
app_save	pointer
=	O
app_push	function
(	O
)	O
;	O
input_file_begin	function
(	O
)	O
;	O
return	O
(	O
char	O
*	O
)	O
saved	pointer
;	O
}	O
void	O
input_file_pop	function
(	O
char	O
*	O
arg	pointer
)	O
{	O
struct	O
saved_file	struct
*	O
saved	pointer
=	O
(	O
struct	O
saved_file	struct
*	O
)	O
arg	pointer
;	O
input_file_end	function
(	O
)	O
;	O
f_in	pointer
=	O
saved	pointer
->	O
f_in	pointer
;	O
file_name	pointer
=	O
saved	pointer
->	O
file_name	pointer
;	O
preprocess	int
=	O
saved	pointer
->	O
preprocess	int
;	O
if	O
(	O
preprocess	int
)	O
app_pop	function
(	O
saved	pointer
->	O
app_save	pointer
)	O
;	O
free	function
(	O
arg	pointer
)	O
;	O
}	O
void	O
input_file_open	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
pre	int
)	O
{	O
int	O
c	struct
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
preprocess	int
=	O
pre	int
;	O
gas_assert	O
(	O
filename	pointer
!=	O
0	int
)	O
;	O
if	O
(	O
filename	pointer
[	O
0	int
]	O
)	O
{	O
f_in	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
FOPEN_RT	pointer
)	O
;	O
file_name	pointer
=	O
filename	pointer
;	O
}	O
else	O
{	O
f_in	pointer
=	O
stdin	pointer
;	O
file_name	pointer
=	O
_	O
(	O
"{standard input}"	pointer
)	O
;	O
}	O
if	O
(	O
f_in	pointer
==	O
NULL	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"can't open %s for reading: %s"	pointer
)	O
,	O
file_name	pointer
,	O
xstrerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
c	struct
=	O
getc	function
(	O
f_in	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
f_in	pointer
)	O
)	O
{	O
as_bad	function
(	O
_	O
(	O
"can't read from %s: %s"	pointer
)	O
,	O
file_name	pointer
,	O
xstrerror	function
(	O
errno	O
)	O
)	O
;	O
fclose	function
(	O
f_in	pointer
)	O
;	O
f_in	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
if	O
(	O
feof	function
(	O
f_in	pointer
)	O
)	O
{	O
fclose	function
(	O
f_in	pointer
)	O
;	O
f_in	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
gas_assert	O
(	O
c	struct
!=	O
EOF	O
)	O
;	O
if	O
(	O
c	struct
==	O
'#'	O
)	O
{	O
c	struct
=	O
getc	function
(	O
f_in	pointer
)	O
;	O
if	O
(	O
c	struct
==	O
'N'	O
)	O
{	O
if	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
f_in	pointer
)	O
&&	O
!	O
strncmp	function
(	O
buf	pointer
,	O
"O_APP"	pointer
,	O
5	int
)	O
&&	O
ISSPACE	O
(	O
buf	pointer
[	O
5	int
]	O
)	O
)	O
preprocess	int
=	O
0	int
;	O
if	O
(	O
!	O
strchr	function
(	O
buf	pointer
,	O
'\n'	O
)	O
)	O
ungetc	function
(	O
'#'	O
,	O
f_in	pointer
)	O
;	O
else	O
ungetc	function
(	O
'\n'	O
,	O
f_in	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	struct
==	O
'A'	O
)	O
{	O
if	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
f_in	pointer
)	O
&&	O
!	O
strncmp	function
(	O
buf	pointer
,	O
"PP"	pointer
,	O
2	int
)	O
&&	O
ISSPACE	O
(	O
buf	pointer
[	O
2	int
]	O
)	O
)	O
preprocess	int
=	O
1	int
;	O
if	O
(	O
!	O
strchr	function
(	O
buf	pointer
,	O
'\n'	O
)	O
)	O
ungetc	function
(	O
'#'	O
,	O
f_in	pointer
)	O
;	O
else	O
ungetc	function
(	O
'\n'	O
,	O
f_in	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	struct
==	O
'\n'	O
)	O
ungetc	function
(	O
'\n'	O
,	O
f_in	pointer
)	O
;	O
else	O
ungetc	function
(	O
'#'	O
,	O
f_in	pointer
)	O
;	O
}	O
else	O
ungetc	function
(	O
c	struct
,	O
f_in	pointer
)	O
;	O
}	O
void	O
input_file_close	function
(	O
void	O
)	O
{	O
if	O
(	O
f_in	pointer
!=	O
NULL	O
)	O
fclose	function
(	O
f_in	pointer
)	O
;	O
f_in	pointer
=	O
0	int
;	O
}	O
static	O
size_t	long
input_file_get	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
)	O
{	O
size_t	long
size	int
;	O
if	O
(	O
feof	function
(	O
f_in	pointer
)	O
)	O
return	O
0	int
;	O
size	int
=	O
fread	function
(	O
buf	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
buflen	long
,	O
f_in	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
f_in	pointer
)	O
)	O
as_bad	function
(	O
_	O
(	O
"can't read from %s: %s"	pointer
)	O
,	O
file_name	pointer
,	O
xstrerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
size	int
;	O
}	O
char	O
*	O
input_file_give_next_buffer	function
(	O
char	O
*	O
where	long
)	O
{	O
char	O
*	O
return_value	pointer
;	O
size_t	long
size	int
;	O
if	O
(	O
f_in	pointer
==	O
(	O
FILE	struct
*	O
)	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
preprocess	int
)	O
size	int
=	O
do_scrub_chars	function
(	O
input_file_get	function
,	O
where	long
,	O
BUFFER_SIZE	O
)	O
;	O
else	O
size	int
=	O
input_file_get	function
(	O
where	long
,	O
BUFFER_SIZE	O
)	O
;	O
if	O
(	O
size	int
)	O
return_value	pointer
=	O
where	long
+	O
size	int
;	O
else	O
{	O
if	O
(	O
fclose	function
(	O
f_in	pointer
)	O
)	O
as_warn	function
(	O
_	O
(	O
"can't close %s: %s"	pointer
)	O
,	O
file_name	pointer
,	O
xstrerror	function
(	O
errno	O
)	O
)	O
;	O
f_in	pointer
=	O
(	O
FILE	struct
*	O
)	O
0	int
;	O
return_value	pointer
=	O
0	int
;	O
}	O
return	O
return_value	pointer
;	O
}	O
