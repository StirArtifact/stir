void	O
extract_rst	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
int	O
bufmax	int
;	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
int	O
line_number	long
;	O
line_number	long
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
int	O
bufpos	int
;	O
char	O
*	O
location	pointer
;	O
char	O
*	O
msgid	pointer
;	O
lex_pos_ty	struct
pos	struct
;	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
line_number	long
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
do	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
while	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
line_number	long
++	O
;	O
continue	O
;	O
}	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid string definition"	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'='	O
)	O
break	O
;	O
buffer	pointer
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
ferror	function
(	O
f	pointer
)	O
)	O
goto	O
bomb	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
location	pointer
=	O
xstrdup	function
(	O
buffer	pointer
)	O
;	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
line_number	long
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\''	O
)	O
break	O
;	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
line_number	long
++	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
int	O
n	long
;	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
ferror	function
(	O
f	pointer
)	O
)	O
goto	O
bomb	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
!	O
c_isdigit	function
(	O
c	int
)	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: missing number after #"	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
n	long
=	O
(	O
c	int
-	O
'0'	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
!	O
c_isdigit	function
(	O
c	int
)	O
)	O
break	O
;	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
n	long
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
ungetc	function
(	O
c	int
,	O
f	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'+'	O
)	O
{	O
c	int
=	O
getc	function
(	O
f	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
else	O
ungetc	function
(	O
c	int
,	O
f	pointer
)	O
;	O
}	O
else	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid string expression"	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
buffer	pointer
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
msgid	pointer
=	O
xstrdup	function
(	O
buffer	pointer
)	O
;	O
pos	struct
.	O
file_name	pointer
=	O
location	pointer
;	O
pos	struct
.	O
line_number	long
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
msgid	pointer
,	O
false	int
,	O
null_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
NULL	O
,	O
false	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
}	O
if	O
(	O
ferror	function
(	O
f	pointer
)	O
)	O
{	O
bomb	O
:	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_filename	pointer
)	O
;	O
}	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
int	O
phase1_getc	function
(	O
)	O
{	O
int	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
ungetc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
}	O
}	O
static	O
inline	O
bool	bool
is_whitespace	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
;	O
}	O
static	O
int	O
phase2_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
do	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
while	O
(	O
is_whitespace	function
(	O
c	int
)	O
)	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase2_ungetc	function
(	O
int	O
c	int
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
}	O
enum	O
parse_result	enum
{	O
pr_parsed	int
,	O
pr_none	int
,	O
pr_syntax	int
}	O
;	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
int	O
bufmax	int
;	O
static	O
enum	O
parse_result	enum
parse_integer	function
(	O
)	O
{	O
int	O
c	int
;	O
int	O
bufpos	int
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	int
)	O
{	O
bufmax	int
=	O
2	int
*	O
bufmax	int
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
break	O
;	O
buffer	pointer
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
}	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
buffer	pointer
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
bufpos	int
==	O
0	int
?	O
pr_none	int
:	O
pr_parsed	int
)	O
;	O
}	O
static	O
struct	O
mixed_string_buffer	struct
stringbuf	struct
;	O
static	O
enum	O
parse_result	enum
parse_string	function
(	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'"'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
return	O
pr_none	int
;	O
}	O
mixed_string_buffer_init	function
(	O
&	O
stringbuf	struct
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
stringbuf	struct
.	O
line_number	long
=	O
line_number	long
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
(	O
c	int
>=	O
0	int
&&	O
c	int
<	O
0x20	int
)	O
)	O
return	O
pr_syntax	int
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'u'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
return	O
pr_syntax	int
;	O
}	O
mixed_string_buffer_append_unicode	function
(	O
&	O
stringbuf	struct
,	O
n	long
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'"'	O
:	O
case	O
'\\'	O
:	O
case	O
'/'	O
:	O
break	O
;	O
case	O
'b'	O
:	O
c	int
=	O
'\b'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
c	int
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	int
=	O
'\n'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	int
=	O
'\r'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	int
=	O
'\t'	O
;	O
break	O
;	O
default	O
:	O
return	O
pr_syntax	int
;	O
}	O
mixed_string_buffer_append_char	function
(	O
&	O
stringbuf	struct
,	O
c	int
)	O
;	O
}	O
}	O
else	O
mixed_string_buffer_append_char	function
(	O
&	O
stringbuf	struct
,	O
c	int
)	O
;	O
}	O
return	O
pr_parsed	int
;	O
}	O
void	O
extract_rsj	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
int	O
c	int
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
xgettext_current_source_encoding	pointer
=	O
po_charset_utf8	pointer
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'{'	O
)	O
goto	O
invalid_json	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'}'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
s1	pointer
;	O
if	O
(	O
parse_string	function
(	O
)	O
!=	O
pr_parsed	int
)	O
goto	O
invalid_json	O
;	O
s1	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
stringbuf	struct
)	O
)	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
':'	O
)	O
goto	O
invalid_json	O
;	O
if	O
(	O
strcmp	function
(	O
s1	pointer
,	O
"version"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
parse_integer	function
(	O
)	O
!=	O
pr_parsed	int
)	O
goto	O
invalid_rsj	O
;	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
"1"	pointer
)	O
!=	O
0	int
)	O
goto	O
invalid_rsj_version	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
s1	pointer
,	O
"strings"	pointer
)	O
==	O
0	int
)	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'['	O
)	O
goto	O
invalid_rsj	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
']'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
location	pointer
=	O
NULL	O
;	O
char	O
*	O
msgid	pointer
=	O
NULL	O
;	O
lex_pos_ty	struct
pos	struct
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'{'	O
)	O
goto	O
invalid_rsj	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'}'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
s2	pointer
;	O
if	O
(	O
parse_string	function
(	O
)	O
!=	O
pr_parsed	int
)	O
goto	O
invalid_json	O
;	O
s2	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
stringbuf	struct
)	O
)	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
':'	O
)	O
goto	O
invalid_json	O
;	O
if	O
(	O
strcmp	function
(	O
s2	pointer
,	O
"hash"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
parse_integer	function
(	O
)	O
!=	O
pr_parsed	int
)	O
goto	O
invalid_rsj	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
s2	pointer
,	O
"name"	pointer
)	O
==	O
0	int
)	O
{	O
enum	O
parse_result	enum
r	enum
=	O
parse_string	function
(	O
)	O
;	O
if	O
(	O
r	enum
==	O
pr_none	int
)	O
goto	O
invalid_rsj	O
;	O
if	O
(	O
r	enum
==	O
pr_syntax	int
||	O
location	pointer
!=	O
NULL	O
)	O
goto	O
invalid_json	O
;	O
location	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
stringbuf	struct
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
s2	pointer
,	O
"sourcebytes"	pointer
)	O
==	O
0	int
)	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'['	O
)	O
goto	O
invalid_rsj	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
']'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
parse_integer	function
(	O
)	O
!=	O
pr_parsed	int
)	O
goto	O
invalid_rsj	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
']'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
','	O
)	O
goto	O
invalid_json	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
s2	pointer
,	O
"value"	pointer
)	O
==	O
0	int
)	O
{	O
enum	O
parse_result	enum
r	enum
=	O
parse_string	function
(	O
)	O
;	O
if	O
(	O
r	enum
==	O
pr_none	int
)	O
goto	O
invalid_rsj	O
;	O
if	O
(	O
r	enum
==	O
pr_syntax	int
||	O
msgid	pointer
!=	O
NULL	O
)	O
goto	O
invalid_json	O
;	O
msgid	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
stringbuf	struct
)	O
)	O
;	O
}	O
else	O
goto	O
invalid_rsj	O
;	O
free	function
(	O
s2	pointer
)	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'}'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
','	O
)	O
goto	O
invalid_json	O
;	O
}	O
}	O
if	O
(	O
location	pointer
==	O
NULL	O
||	O
msgid	pointer
==	O
NULL	O
)	O
goto	O
invalid_rsj	O
;	O
pos	struct
.	O
file_name	pointer
=	O
location	pointer
;	O
pos	struct
.	O
line_number	long
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
msgid	pointer
,	O
true	int
,	O
null_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
NULL	O
,	O
false	int
)	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
']'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
','	O
)	O
goto	O
invalid_json	O
;	O
}	O
}	O
}	O
else	O
goto	O
invalid_rsj	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'}'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
','	O
)	O
goto	O
invalid_json	O
;	O
}	O
}	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
goto	O
invalid_json	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
return	O
;	O
invalid_json	O
:	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid JSON syntax"	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
return	O
;	O
invalid_rsj	O
:	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid RSJ syntax"	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
return	O
;	O
invalid_rsj_version	O
:	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: invalid RSJ version. Only version 1 is supported."	pointer
)	O
,	O
logical_filename	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
return	O
;	O
}	O
