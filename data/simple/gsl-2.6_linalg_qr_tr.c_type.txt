static	O
double	O
qrtr_householder_transform	function
(	O
double	O
*	O
v0	pointer
,	O
gsl_vector	struct
*	O
v	pointer
)	O
;	O
int	O
gsl_linalg_QR_TR_decomp	function
(	O
gsl_matrix	struct
*	O
S	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
T	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
S	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
S	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"S matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"S and A have different number of columns"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	pointer
->	O
size1	long
!=	O
N	int
||	O
T	pointer
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix has wrong dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
*	O
T00	pointer
=	O
gsl_matrix_ptr	function
(	O
T	pointer
,	O
0	int
,	O
0	int
)	O
;	O
double	O
*	O
S00	pointer
=	O
gsl_matrix_ptr	function
(	O
S	pointer
,	O
0	int
,	O
0	int
)	O
;	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_column	function
(	O
A	pointer
,	O
0	int
)	O
;	O
*	O
T00	pointer
=	O
qrtr_householder_transform	function
(	O
S00	pointer
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
N	int
/	O
2	int
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct
S11	struct
=	O
gsl_matrix_submatrix	function
(	O
S	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
S12	struct
=	O
gsl_matrix_submatrix	function
(	O
S	pointer
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
S22	struct
=	O
gsl_matrix_submatrix	function
(	O
S	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
A1	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
M	int
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
A2	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
N1	long
,	O
M	int
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
T11	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
T12	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
T22	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
gsl_linalg_QR_TR_decomp	function
(	O
&	O
S11	struct
.	O
matrix	struct
,	O
&	O
A1	struct
.	O
matrix	struct
,	O
&	O
T11	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_memcpy	function
(	O
&	O
T12	struct
.	O
matrix	struct
,	O
&	O
S12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dgemm	function
(	O
CblasTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
A1	struct
.	O
matrix	struct
,	O
&	O
A2	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T11	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dgemm	function
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A1	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
A2	struct
.	O
matrix	struct
)	O
;	O
gsl_matrix_sub	function
(	O
&	O
S12	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
status	int
=	O
gsl_linalg_QR_TR_decomp	function
(	O
&	O
S22	struct
.	O
matrix	struct
,	O
&	O
A2	struct
.	O
matrix	struct
,	O
&	O
T22	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dgemm	function
(	O
CblasTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
A1	struct
.	O
matrix	struct
,	O
&	O
A2	struct
.	O
matrix	struct
,	O
0.0	int
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
-	O
1.0	int
,	O
&	O
T11	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasRight	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T22	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
qrtr_householder_transform	function
(	O
double	O
*	O
v0	pointer
,	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
double	O
alpha	long double
,	O
beta	long double
,	O
tau	double
;	O
double	O
xnorm	double
=	O
gsl_blas_dnrm2	function
(	O
v	pointer
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
alpha	long double
=	O
*	O
v0	pointer
;	O
beta	long double
=	O
-	O
GSL_SIGN	O
(	O
alpha	long double
)	O
*	O
hypot	function
(	O
alpha	long double
,	O
xnorm	double
)	O
;	O
tau	double
=	O
(	O
beta	long double
-	O
alpha	long double
)	O
/	O
beta	long double
;	O
{	O
double	O
s	pointer
=	O
(	O
alpha	long double
-	O
beta	long double
)	O
;	O
if	O
(	O
fabs	function
(	O
s	pointer
)	O
>	O
GSL_DBL_MIN	int
)	O
{	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
s	pointer
,	O
v	pointer
)	O
;	O
*	O
v0	pointer
=	O
beta	long double
;	O
}	O
else	O
{	O
gsl_blas_dscal	function
(	O
GSL_DBL_EPSILON	int
/	O
s	pointer
,	O
v	pointer
)	O
;	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
GSL_DBL_EPSILON	int
,	O
v	pointer
)	O
;	O
*	O
v0	pointer
=	O
beta	long double
;	O
}	O
}	O
return	O
tau	double
;	O
}	O
