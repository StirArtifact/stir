static	O
int	O
mailbox_folder_create	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
mu_record_t	pointer
record	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_url_uplevel	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
url	pointer
)	O
)	O
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
rc	int
=	O
mu_url_dup	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_folder_create_from_record	function
(	O
&	O
mbox	pointer
->	O
folder	pointer
,	O
url	pointer
,	O
record	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
_mailbox_create_from_record	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
mu_record_t	pointer
record	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
(	O
*	O
m_init	pointer
)	O
(	O
mu_mailbox_t	pointer
)	O
=	O
NULL	O
;	O
mu_record_get_mailbox	function
(	O
record	pointer
,	O
&	O
m_init	pointer
)	O
;	O
if	O
(	O
m_init	pointer
)	O
{	O
int	O
status	int
;	O
int	O
(	O
*	O
u_init	pointer
)	O
(	O
mu_url_t	pointer
)	O
=	O
NULL	O
;	O
mu_mailbox_t	pointer
mbox	pointer
;	O
mbox	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mbox	pointer
)	O
)	O
;	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
mbox	pointer
->	O
notify_fd	int
=	O
-	O
1	int
;	O
status	int
=	O
mu_monitor_create	function
(	O
&	O
mbox	pointer
->	O
monitor	pointer
,	O
0	int
,	O
mbox	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
url	pointer
->	O
scheme	pointer
,	O
record	pointer
->	O
scheme	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strdup	function
(	O
record	pointer
->	O
scheme	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
return	O
errno	O
;	O
}	O
free	function
(	O
url	pointer
->	O
scheme	pointer
)	O
;	O
url	pointer
->	O
scheme	pointer
=	O
p	pointer
;	O
}	O
mu_record_get_url	function
(	O
record	pointer
,	O
&	O
u_init	pointer
)	O
;	O
if	O
(	O
u_init	pointer
&&	O
(	O
status	int
=	O
u_init	pointer
(	O
url	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mbox	pointer
->	O
url	pointer
=	O
url	pointer
;	O
if	O
(	O
folder	pointer
)	O
{	O
folder	pointer
->	O
ref	pointer
++	O
;	O
mbox	pointer
->	O
folder	pointer
=	O
folder	pointer
;	O
}	O
else	O
status	int
=	O
mailbox_folder_create	function
(	O
mbox	pointer
,	O
name	pointer
,	O
record	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
m_init	pointer
(	O
mbox	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
mbox	pointer
->	O
url	pointer
=	O
NULL	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
else	O
*	O
pmbox	pointer
=	O
mbox	pointer
;	O
return	O
status	int
;	O
}	O
return	O
ENOSYS	int
;	O
}	O
static	O
int	O
_create_mailbox0	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_record_t	pointer
record	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
_mailbox_create_from_record	function
(	O
pmbox	pointer
,	O
record	pointer
,	O
url	pointer
,	O
NULL	O
,	O
name	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_create_mailbox	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
status	int
;	O
mu_url_t	pointer
url	pointer
;	O
status	int
=	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
_create_mailbox0	function
(	O
pmbox	pointer
,	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_create	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
pmbox	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_create_mailbox	function
(	O
pmbox	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
mu_mailbox_create_from_url	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
mu_url_t	pointer
url	pointer
)	O
{	O
if	O
(	O
pmbox	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_create_mailbox0	function
(	O
pmbox	pointer
,	O
url	pointer
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
;	O
}	O
int	O
mu_mailbox_create_from_record	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
mu_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_mailbox_create_from_record	function
(	O
pmbox	pointer
,	O
record	pointer
,	O
url	pointer
,	O
NULL	O
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_create_at	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
,	O
mu_folder_t	pointer
folder	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
;	O
const	O
char	O
*	O
oldpath	pointer
;	O
rc	int
=	O
mu_url_dup	function
(	O
folder	pointer
->	O
url	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
do	O
{	O
char	O
*	O
path	pointer
;	O
size_t	long
oldlen	long
,	O
len	int
;	O
mu_record_t	pointer
record	pointer
;	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
oldpath	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
oldlen	long
=	O
strlen	function
(	O
oldpath	pointer
)	O
;	O
if	O
(	O
oldlen	long
==	O
0	int
)	O
{	O
path	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
path	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
oldpath	pointer
[	O
oldlen	long
-	O
1	int
]	O
==	O
'/'	O
)	O
oldlen	long
--	O
;	O
len	int
=	O
oldlen	long
+	O
1	int
+	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
;	O
path	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
!	O
path	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
memcpy	function
(	O
path	pointer
,	O
oldpath	pointer
,	O
oldlen	long
)	O
;	O
path	pointer
[	O
oldlen	long
++	O
]	O
=	O
'/'	O
;	O
strcpy	function
(	O
path	pointer
+	O
oldlen	long
,	O
name	pointer
)	O
;	O
}	O
rc	int
=	O
mu_url_set_path	function
(	O
url	pointer
,	O
path	pointer
)	O
;	O
free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
_mailbox_create_from_record	function
(	O
pmbox	pointer
,	O
record	pointer
,	O
url	pointer
,	O
folder	pointer
,	O
name	pointer
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_mailbox_destroy	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
)	O
{	O
if	O
(	O
pmbox	pointer
&&	O
*	O
pmbox	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
*	O
pmbox	pointer
;	O
mu_monitor_t	pointer
monitor	pointer
=	O
mbox	pointer
->	O
monitor	pointer
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
)	O
{	O
mu_observable_notify	function
(	O
mbox	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILBOX_DESTROY	int
,	O
mbox	pointer
)	O
;	O
mu_observable_destroy	function
(	O
&	O
mbox	pointer
->	O
observable	pointer
,	O
mbox	pointer
)	O
;	O
}	O
if	O
(	O
mbox	pointer
->	O
_destroy	pointer
)	O
mbox	pointer
->	O
_destroy	pointer
(	O
mbox	pointer
)	O
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
stream	pointer
)	O
{	O
mu_stream_destroy	function
(	O
&	O
mbox	pointer
->	O
stream	pointer
)	O
;	O
}	O
mu_url_destroy	function
(	O
&	O
mbox	pointer
->	O
url	pointer
)	O
;	O
mu_locker_destroy	function
(	O
&	O
mbox	pointer
->	O
locker	pointer
)	O
;	O
mu_folder_destroy	function
(	O
&	O
mbox	pointer
->	O
folder	pointer
)	O
;	O
mu_property_destroy	function
(	O
&	O
mbox	pointer
->	O
property	pointer
)	O
;	O
free	function
(	O
mbox	pointer
->	O
notify_user	pointer
)	O
;	O
free	function
(	O
mbox	pointer
->	O
notify_sa	pointer
)	O
;	O
free	function
(	O
mbox	pointer
)	O
;	O
*	O
pmbox	pointer
=	O
NULL	O
;	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
mu_monitor_destroy	function
(	O
&	O
monitor	pointer
,	O
mbox	pointer
)	O
;	O
}	O
}	O
int	O
mu_mailbox_open	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
flag	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
_open	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
return	O
MU_ERR_OPEN	O
;	O
if	O
(	O
flag	int
&	O
MU_STREAM_QACCESS	int
)	O
{	O
if	O
(	O
flag	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
|	O
MU_STREAM_CREAT	int
)	O
)	O
return	O
EACCES	int
;	O
}	O
rc	int
=	O
mbox	pointer
->	O
_open	pointer
(	O
mbox	pointer
,	O
flag	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mbox	pointer
->	O
flags	int
|=	O
_MU_MAILBOX_OPEN	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_close	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
)	O
return	O
MU_ERR_NOT_OPEN	O
;	O
if	O
(	O
mbox	pointer
==	O
NULL	O
||	O
mbox	pointer
->	O
_close	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_EMPTY_VFN	O
;	O
rc	int
=	O
mbox	pointer
->	O
_close	pointer
(	O
mbox	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
mbox	pointer
->	O
notify_fd	int
>=	O
0	int
)	O
close	function
(	O
mbox	pointer
->	O
notify_fd	int
)	O
;	O
mbox	pointer
->	O
flags	int
&=	O
~	O
_MU_MAILBOX_OPEN	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_remove	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
return	O
MU_ERR_OPEN	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
return	O
MU_ERR_MBX_REMOVED	O
;	O
if	O
(	O
!	O
mbox	pointer
->	O
_remove	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
path	pointer
;	O
rc	int
=	O
mu_url_sget_path	function
(	O
mbox	pointer
->	O
url	pointer
,	O
&	O
path	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mbox	pointer
->	O
flags	int
|=	O
_MU_MAILBOX_REMOVED	int
;	O
rc	int
=	O
mu_folder_delete	function
(	O
mbox	pointer
->	O
folder	pointer
,	O
path	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mbox	pointer
->	O
flags	int
&=	O
~	O
_MU_MAILBOX_REMOVED	int
;	O
}	O
return	O
rc	int
;	O
}	O
return	O
mbox	pointer
->	O
_remove	pointer
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_flush	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
expunge	int
)	O
{	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
return	O
MU_ERR_MBX_REMOVED	O
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
)	O
return	O
_MU_MAILBOX_OPEN	int
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_APPEND	int
)	O
)	O
{	O
size_t	long
i	long
,	O
total	long
=	O
0	int
;	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
total	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
NULL	O
;	O
mu_attribute_t	pointer
attr	pointer
=	O
NULL	O
;	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_seen	function
(	O
attr	pointer
)	O
;	O
}	O
if	O
(	O
expunge	int
)	O
return	O
mu_mailbox_expunge	function
(	O
mbox	pointer
)	O
;	O
}	O
return	O
mu_mailbox_sync	function
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_append_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_append_message	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
EACCES	int
;	O
return	O
mbox	pointer
->	O
_append_message	pointer
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
}	O
int	O
mu_mailbox_get_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_get_message	pointer
)	O
;	O
return	O
mbox	pointer
->	O
_get_message	pointer
(	O
mbox	pointer
,	O
msgno	long
,	O
pmsg	pointer
)	O
;	O
}	O
int	O
mu_mailbox_quick_get_message	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_message_qid_t	pointer
qid	pointer
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
_MBOX_CHECK	O
(	O
mbox	pointer
,	O
_quick_get_message	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
)	O
return	O
MU_ERR_BADOP	O
;	O
return	O
mbox	pointer
->	O
_quick_get_message	pointer
(	O
mbox	pointer
,	O
qid	pointer
,	O
pmsg	pointer
)	O
;	O
}	O
int	O
mu_mailbox_messages_count	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
num	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_messages_count	pointer
)	O
;	O
return	O
mbox	pointer
->	O
_messages_count	pointer
(	O
mbox	pointer
,	O
num	pointer
)	O
;	O
}	O
int	O
mu_mailbox_messages_recent	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
num	pointer
)	O
{	O
size_t	long
i	long
,	O
count	long
,	O
n	int
;	O
int	O
rc	int
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	pointer
->	O
_messages_recent	pointer
)	O
return	O
mbox	pointer
->	O
_messages_recent	pointer
(	O
mbox	pointer
,	O
num	pointer
)	O
;	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
n	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_attribute_is_recent	function
(	O
attr	pointer
)	O
)	O
n	int
++	O
;	O
}	O
*	O
num	pointer
=	O
n	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_message_unseen	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
num	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	long
,	O
count	long
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	pointer
->	O
_message_unseen	pointer
)	O
return	O
mbox	pointer
->	O
_message_unseen	pointer
(	O
mbox	pointer
,	O
num	pointer
)	O
;	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
mu_attribute_is_seen	function
(	O
attr	pointer
)	O
)	O
{	O
*	O
num	pointer
=	O
i	long
;	O
return	O
0	int
;	O
}	O
}	O
*	O
num	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_sync	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_sync	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
0	int
;	O
return	O
mbox	pointer
->	O
_sync	pointer
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_save_attributes	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
return	O
mu_mailbox_sync	function
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_expunge	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_expunge	pointer
)	O
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
)	O
return	O
EACCES	int
;	O
return	O
mbox	pointer
->	O
_expunge	pointer
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_is_updated	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
||	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_OPEN	int
)	O
||	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_REMOVED	int
)	O
||	O
mbox	pointer
->	O
_is_updated	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
1	int
;	O
return	O
mbox	pointer
->	O
_is_updated	pointer
(	O
mbox	pointer
)	O
;	O
}	O
int	O
mu_mailbox_scan	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
msgno	long
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_scan	pointer
)	O
;	O
return	O
mbox	pointer
->	O
_scan	pointer
(	O
mbox	pointer
,	O
msgno	long
,	O
pcount	pointer
)	O
;	O
}	O
int	O
mu_mailbox_get_size	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
int	O
status	int
;	O
_MBOX_CHECK_FLAGS	O
(	O
mbox	pointer
)	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	pointer
->	O
_get_size	pointer
==	O
NULL	O
||	O
(	O
status	int
=	O
mbox	pointer
->	O
_get_size	pointer
(	O
mbox	pointer
,	O
psize	pointer
)	O
)	O
==	O
ENOSYS	int
)	O
{	O
size_t	long
i	long
,	O
total	long
;	O
mu_off_t	long
size	long
=	O
0	int
;	O
status	int
=	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
total	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
msgsize	long
;	O
status	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
msgsize	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
size	long
+=	O
msgsize	long
;	O
}	O
*	O
psize	pointer
=	O
size	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_mailbox_uidvalidity	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
unsigned	O
long	O
*	O
pvalid	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_uidvalidity	pointer
)	O
;	O
return	O
mbox	pointer
->	O
_uidvalidity	pointer
(	O
mbox	pointer
,	O
pvalid	pointer
)	O
;	O
}	O
int	O
mu_mailbox_uidnext	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
*	O
puidnext	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_uidnext	pointer
)	O
;	O
return	O
mbox	pointer
->	O
_uidnext	pointer
(	O
mbox	pointer
,	O
puidnext	pointer
)	O
;	O
}	O
int	O
mu_mailbox_set_locker	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
locker	pointer
)	O
mu_locker_destroy	function
(	O
&	O
mbox	pointer
->	O
locker	pointer
)	O
;	O
mbox	pointer
->	O
locker	pointer
=	O
locker	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_locker	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_locker_t	pointer
*	O
plocker	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plocker	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
plocker	pointer
=	O
mbox	pointer
->	O
locker	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_flags	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
flags	int
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
flags	int
=	O
mbox	pointer
->	O
flags	int
&	O
~	O
_MU_MAILBOX_MASK	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_stream	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	pointer
->	O
stream	pointer
)	O
mu_stream_destroy	function
(	O
&	O
mbox	pointer
->	O
stream	pointer
)	O
;	O
mbox	pointer
->	O
stream	pointer
=	O
stream	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_observable	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_observable_t	pointer
*	O
pobservable	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	pointer
->	O
observable	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	function
(	O
&	O
mbox	pointer
->	O
observable	pointer
,	O
mbox	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	pointer
=	O
mbox	pointer
->	O
observable	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_property	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_property_t	pointer
property	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mbox	pointer
->	O
property	pointer
)	O
mu_property_unref	function
(	O
mbox	pointer
->	O
property	pointer
)	O
;	O
mbox	pointer
->	O
property	pointer
=	O
property	pointer
;	O
mu_property_ref	function
(	O
property	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_property	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_property_t	pointer
*	O
pproperty	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pproperty	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	pointer
->	O
property	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
mbox	pointer
->	O
_get_property	pointer
)	O
status	int
=	O
mbox	pointer
->	O
_get_property	pointer
(	O
mbox	pointer
,	O
&	O
mbox	pointer
->	O
property	pointer
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	function
(	O
&	O
mbox	pointer
->	O
property	pointer
,	O
mu_assoc_property_init	function
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pproperty	pointer
=	O
mbox	pointer
->	O
property	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_url	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_url_t	pointer
*	O
purl	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
purl	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	pointer
=	O
mbox	pointer
->	O
url	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_get_folder	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_folder_t	pointer
*	O
pfolder	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pfolder	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pfolder	pointer
=	O
mbox	pointer
->	O
folder	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_folder	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_folder_t	pointer
folder	pointer
)	O
{	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mbox	pointer
->	O
folder	pointer
=	O
folder	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_lock	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
mu_locker_t	pointer
lock	pointer
=	O
NULL	O
;	O
mu_mailbox_get_locker	function
(	O
mbox	pointer
,	O
&	O
lock	pointer
)	O
;	O
return	O
mu_locker_lock	function
(	O
lock	pointer
)	O
;	O
}	O
int	O
mu_mailbox_unlock	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
mu_locker_t	pointer
lock	pointer
=	O
NULL	O
;	O
mu_mailbox_get_locker	function
(	O
mbox	pointer
,	O
&	O
lock	pointer
)	O
;	O
return	O
mu_locker_unlock	function
(	O
lock	pointer
)	O
;	O
}	O
int	O
mu_mailbox_get_uidls	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
int	O
status	int
;	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plist	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
status	int
=	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
mbox	pointer
->	O
_get_uidls	pointer
)	O
status	int
=	O
mbox	pointer
->	O
_get_uidls	pointer
(	O
mbox	pointer
,	O
list	pointer
)	O
;	O
else	O
{	O
size_t	long
i	long
,	O
total	long
;	O
status	int
=	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
total	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
total	long
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
NULL	O
;	O
char	O
buf	pointer
[	O
MU_UIDL_BUFFER_SIZE	O
]	O
;	O
size_t	long
n	int
;	O
struct	O
mu_uidl	struct
*	O
uidl	array
;	O
status	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_message_get_uidl	function
(	O
msg	pointer
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
&	O
n	int
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
uidl	array
=	O
malloc	function
(	O
sizeof	O
(	O
uidl	array
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
uidl	array
)	O
{	O
status	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
uidl	array
->	O
msgno	long
=	O
i	long
;	O
strncpy	function
(	O
uidl	array
->	O
uidl	array
,	O
buf	pointer
,	O
MU_UIDL_BUFFER_SIZE	O
)	O
;	O
status	int
=	O
mu_list_append	function
(	O
list	pointer
,	O
uidl	array
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
uidl	array
)	O
;	O
break	O
;	O
}	O
}	O
}	O
*	O
plist	pointer
=	O
list	pointer
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_uid_bsearch	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
start	long
,	O
size_t	long
stop	long
,	O
size_t	long
uid	int
,	O
size_t	long
*	O
msgno	long
)	O
{	O
mu_message_t	pointer
mid_msg	pointer
=	O
NULL	O
;	O
size_t	long
num	pointer
=	O
0	int
,	O
middle	long
;	O
int	O
rc	int
;	O
middle	long
=	O
(	O
start	long
+	O
stop	long
)	O
/	O
2	int
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
middle	long
,	O
&	O
mid_msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	function
(	O
mid_msg	pointer
,	O
&	O
num	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
num	pointer
==	O
uid	int
)	O
{	O
*	O
msgno	long
=	O
middle	long
;	O
return	O
0	int
;	O
}	O
if	O
(	O
start	long
>=	O
stop	long
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
num	pointer
>	O
uid	int
)	O
return	O
_uid_bsearch	function
(	O
mbox	pointer
,	O
start	long
,	O
middle	long
-	O
1	int
,	O
uid	int
,	O
msgno	long
)	O
;	O
else	O
return	O
_uid_bsearch	function
(	O
mbox	pointer
,	O
middle	long
+	O
1	int
,	O
stop	long
,	O
uid	int
,	O
msgno	long
)	O
;	O
}	O
static	O
int	O
_search_message_uid	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
size_t	long
uid	int
,	O
size_t	long
*	O
result	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
num	pointer
,	O
count	long
;	O
mu_message_t	pointer
msg	pointer
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
1	int
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	function
(	O
msg	pointer
,	O
&	O
num	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
uid	int
<	O
num	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
if	O
(	O
uid	int
==	O
num	pointer
)	O
{	O
*	O
result	pointer
=	O
1	int
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
count	long
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	function
(	O
msg	pointer
,	O
&	O
num	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
uid	int
>	O
num	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
if	O
(	O
uid	int
==	O
num	pointer
)	O
{	O
*	O
result	pointer
=	O
count	long
;	O
return	O
0	int
;	O
}	O
return	O
_uid_bsearch	function
(	O
mbox	pointer
,	O
1	int
,	O
count	long
,	O
uid	int
,	O
result	pointer
)	O
;	O
}	O
int	O
mu_mailbox_translate	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
cmd	enum
,	O
size_t	long
from	pointer
,	O
size_t	long
*	O
to	int
)	O
{	O
int	O
rc	int
=	O
ENOSYS	int
;	O
mu_message_t	pointer
msg	pointer
;	O
if	O
(	O
mbox	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
to	int
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mbox	pointer
->	O
flags	int
&	O
MU_STREAM_QACCESS	int
)	O
return	O
MU_ERR_BADOP	O
;	O
if	O
(	O
mbox	pointer
->	O
_translate	pointer
)	O
rc	int
=	O
mbox	pointer
->	O
_translate	pointer
(	O
mbox	pointer
,	O
cmd	enum
,	O
from	pointer
,	O
to	int
)	O
;	O
if	O
(	O
rc	int
==	O
ENOSYS	int
)	O
{	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
MU_MAILBOX_UID_TO_MSGNO	int
:	O
rc	int
=	O
_search_message_uid	function
(	O
mbox	pointer
,	O
from	pointer
,	O
to	int
)	O
;	O
break	O
;	O
case	O
MU_MAILBOX_MSGNO_TO_UID	int
:	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
from	pointer
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_uid	function
(	O
msg	pointer
,	O
to	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailbox_access_time	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
time_t	long
*	O
return_time	pointer
)	O
{	O
_MBOX_CHECK_Q	O
(	O
mbox	pointer
,	O
_get_atime	pointer
)	O
;	O
if	O
(	O
!	O
return_time	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
mbox	pointer
->	O
_get_atime	pointer
(	O
mbox	pointer
,	O
return_time	pointer
)	O
;	O
}	O
