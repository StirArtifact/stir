struct	O
binary_tree_entry	struct
{	O
int	O
value	int
;	O
int	O
smaller	int
;	O
int	O
larger	int
;	O
}	O
;	O
int	O
binary_search_tree_array	function
(	O
struct	O
binary_tree_entry	struct
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
=	O
n	int
/	O
2	int
;	O
array	array
[	O
n	int
]	O
.	O
value	int
=	O
key	int
;	O
for	O
(	O
;	O
;	O
)	O
if	O
(	O
key	int
>	O
array	array
[	O
i	int
]	O
.	O
value	int
)	O
i	int
=	O
array	array
[	O
i	int
]	O
.	O
larger	int
;	O
else	O
if	O
(	O
key	int
<	O
array	array
[	O
i	int
]	O
.	O
value	int
)	O
i	int
=	O
array	array
[	O
i	int
]	O
.	O
smaller	int
;	O
else	O
return	O
i	int
!=	O
n	int
?	O
i	int
:	O
-	O
1	int
;	O
}	O
int	O
init_binary_tree_array	function
(	O
struct	O
binary_tree_entry	struct
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
if	O
(	O
min	int
<=	O
max	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
+	O
1	int
)	O
/	O
2	int
;	O
array	array
[	O
i	int
]	O
.	O
larger	int
=	O
init_binary_tree_array	function
(	O
array	array
,	O
n	int
,	O
i	int
+	O
1	int
,	O
max	int
)	O
;	O
array	array
[	O
i	int
]	O
.	O
smaller	int
=	O
init_binary_tree_array	function
(	O
array	array
,	O
n	int
,	O
min	int
,	O
i	int
-	O
1	int
)	O
;	O
return	O
i	int
;	O
}	O
else	O
return	O
n	int
;	O
}	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
fputs	function
(	O
"Usage: bin-ary-test <array-size>\n"	pointer
"where <array-size> is the size of the array to test.\n"	pointer
,	O
stdout	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
int	O
stoi	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
long	O
x	long
=	O
strtol	function
(	O
s	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
x	long
>=	O
INT_MIN	O
&&	O
x	long
<=	O
INT_MAX	O
?	O
x	long
:	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
struct	O
binary_tree_entry	struct
*	O
array	array
;	O
int	O
n	int
,	O
i	int
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
usage	function
(	O
)	O
;	O
n	int
=	O
stoi	function
(	O
argv	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
n	int
<	O
1	int
)	O
usage	function
(	O
)	O
;	O
array	array
=	O
malloc	function
(	O
(	O
n	int
+	O
1	int
)	O
*	O
sizeof	O
*	O
array	array
)	O
;	O
if	O
(	O
array	array
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"out of memory\n"	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
array	array
[	O
i	int
]	O
.	O
value	int
=	O
i	int
;	O
init_binary_tree_array	function
(	O
array	array
,	O
n	int
,	O
0	int
,	O
n	int
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
-	O
1	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
int	O
result	int
=	O
binary_search_tree_array	function
(	O
array	array
,	O
n	int
,	O
i	int
)	O
;	O
if	O
(	O
result	int
!=	O
i	int
)	O
printf	function
(	O
"Searching for %d: expected %d, but received %d\n"	pointer
,	O
i	int
,	O
i	int
,	O
result	int
)	O
;	O
}	O
free	function
(	O
array	array
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
