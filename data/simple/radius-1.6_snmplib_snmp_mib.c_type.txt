int	O
mib_lookup	function
(	O
struct	O
mib_node_t	struct
*	O
node	pointer
,	O
oid_t	pointer
oid	pointer
,	O
int	O
len	int
,	O
struct	O
mib_node_t	struct
*	O
*	O
return_node	pointer
)	O
{	O
subid_t	int
*	O
p	pointer
=	O
OIDPTR	O
(	O
oid	pointer
)	O
;	O
int	O
ind	int
;	O
for	O
(	O
ind	int
=	O
0	int
;	O
ind	int
<	O
len	int
;	O
ind	int
++	O
)	O
{	O
while	O
(	O
SCMP	O
(	O
node	pointer
,	O
p	pointer
[	O
ind	int
]	O
,	O
<	O
)	O
)	O
{	O
if	O
(	O
node	pointer
->	O
down	pointer
)	O
{	O
node	pointer
=	O
node	pointer
->	O
down	pointer
;	O
}	O
else	O
{	O
*	O
return_node	pointer
=	O
node	pointer
;	O
return	O
MIB_MATCH_UPPER	int
;	O
}	O
}	O
if	O
(	O
node	pointer
->	O
next	pointer
==	O
NULL	O
)	O
{	O
*	O
return_node	pointer
=	O
node	pointer
;	O
break	O
;	O
}	O
node	pointer
=	O
node	pointer
->	O
next	pointer
;	O
}	O
*	O
return_node	pointer
=	O
node	pointer
;	O
return	O
(	O
ind	int
+	O
1	int
)	O
<	O
len	int
?	O
MIB_MATCH_PREV	int
:	O
MIB_MATCH_EXACT	int
;	O
}	O
int	O
mib_insert_node	function
(	O
struct	O
mib_node_t	struct
*	O
*	O
root_node	pointer
,	O
oid_t	pointer
oid	pointer
,	O
int	O
len	int
,	O
struct	O
mib_node_t	struct
*	O
*	O
return_node	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mib_node_t	struct
*	O
newp	pointer
;	O
*	O
return_node	pointer
=	O
*	O
root_node	pointer
;	O
if	O
(	O
*	O
root_node	pointer
&&	O
(	O
rc	int
=	O
mib_lookup	function
(	O
*	O
root_node	pointer
,	O
oid	pointer
,	O
len	int
,	O
return_node	pointer
)	O
)	O
==	O
MIB_MATCH_EXACT	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
(	O
newp	pointer
=	O
snmp_alloc	function
(	O
sizeof	O
(	O
*	O
newp	pointer
)	O
)	O
)	O
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
return	O
MIB_ERROR	O
;	O
}	O
newp	pointer
->	O
next	pointer
=	O
newp	pointer
->	O
down	pointer
=	O
NULL	O
;	O
newp	pointer
->	O
index	function
=	O
len	int
-	O
1	int
;	O
newp	pointer
->	O
subid	pointer
=	O
SUBID	O
(	O
oid	pointer
,	O
len	int
-	O
1	int
)	O
;	O
newp	pointer
->	O
handler	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
*	O
root_node	pointer
)	O
*	O
root_node	pointer
=	O
newp	pointer
;	O
else	O
if	O
(	O
rc	int
==	O
MIB_MATCH_UPPER	int
)	O
{	O
struct	O
mib_node_t	struct
*	O
p	pointer
;	O
newp	pointer
->	O
up	pointer
=	O
(	O
*	O
return_node	pointer
)	O
->	O
up	pointer
;	O
if	O
(	O
!	O
(	O
*	O
return_node	pointer
)	O
->	O
down	pointer
)	O
(	O
*	O
return_node	pointer
)	O
->	O
down	pointer
=	O
newp	pointer
;	O
else	O
{	O
for	O
(	O
p	pointer
=	O
(	O
*	O
return_node	pointer
)	O
->	O
down	pointer
;	O
p	pointer
->	O
down	pointer
;	O
p	pointer
=	O
p	pointer
->	O
down	pointer
)	O
;	O
p	pointer
->	O
down	pointer
=	O
newp	pointer
;	O
}	O
}	O
else	O
{	O
(	O
*	O
return_node	pointer
)	O
->	O
next	pointer
=	O
newp	pointer
;	O
newp	pointer
->	O
up	pointer
=	O
*	O
return_node	pointer
;	O
}	O
*	O
return_node	pointer
=	O
newp	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mib_insert	function
(	O
struct	O
mib_node_t	struct
*	O
*	O
node	pointer
,	O
oid_t	pointer
oid	pointer
,	O
struct	O
mib_node_t	struct
*	O
*	O
return_node	pointer
)	O
{	O
int	O
len	int
=	O
OIDLEN	O
(	O
oid	pointer
)	O
;	O
int	O
i	int
;	O
int	O
rc	int
;	O
*	O
return_node	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
len	int
;	O
i	int
++	O
)	O
rc	int
=	O
mib_insert_node	function
(	O
node	pointer
,	O
oid	pointer
,	O
i	int
,	O
return_node	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
