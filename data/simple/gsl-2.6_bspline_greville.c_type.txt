double	O
gsl_bspline_greville_abscissa	function
(	O
size_t	long
i	long
,	O
gsl_bspline_workspace	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
stride	long
=	O
w	pointer
->	O
knots	pointer
->	O
stride	long
;	O
size_t	long
km1	long
=	O
w	pointer
->	O
km1	long
;	O
double	O
*	O
data	pointer
=	O
w	pointer
->	O
knots	pointer
->	O
data	pointer
+	O
(	O
i	long
+	O
1	int
)	O
*	O
stride	long
;	O
if	O
(	O
km1	long
==	O
0	int
)	O
{	O
km1	long
=	O
2	int
;	O
data	pointer
-=	O
stride	long
;	O
}	O
return	O
gsl_stats_mean	function
(	O
data	pointer
,	O
stride	long
,	O
km1	long
)	O
;	O
}	O
int	O
gsl_bspline_knots_greville	function
(	O
const	O
gsl_vector	struct
*	O
abscissae	pointer
,	O
gsl_bspline_workspace	struct
*	O
w	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
int	O
s	pointer
;	O
if	O
(	O
w	pointer
->	O
k	long
<	O
2	int
)	O
GSL_ERROR	O
(	O
"w->k must be at least 2"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
else	O
if	O
(	O
abscissae	pointer
->	O
size	long
<	O
2	int
)	O
GSL_ERROR	O
(	O
"abscissae->size must be at least 2"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
else	O
if	O
(	O
w	pointer
->	O
nbreak	long
!=	O
abscissae	pointer
->	O
size	long
-	O
w	pointer
->	O
k	long
+	O
2	int
)	O
GSL_ERROR	O
(	O
"w->nbreak must equal abscissae->size - w->k + 2"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
if	O
(	O
w	pointer
->	O
nbreak	long
==	O
2	int
)	O
{	O
s	pointer
=	O
gsl_bspline_knots_uniform	function
(	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
0	int
)	O
,	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
abscissae	pointer
->	O
size	long
-	O
1	int
)	O
,	O
w	pointer
)	O
;	O
}	O
else	O
{	O
double	O
*	O
storage	pointer
;	O
gsl_matrix_view	struct
A	pointer
;	O
gsl_vector_view	struct
tau	double
,	O
b	double
,	O
x	double
,	O
r	pointer
;	O
size_t	long
i	long
,	O
j	long
;	O
const	O
size_t	long
km2	long
=	O
w	pointer
->	O
k	long
-	O
2	int
;	O
const	O
size_t	long
M	int
=	O
abscissae	pointer
->	O
size	long
-	O
2	int
;	O
const	O
size_t	long
N	int
=	O
w	pointer
->	O
nbreak	long
-	O
2	int
;	O
const	O
double	O
invkm1	double
=	O
1.0	int
/	O
w	pointer
->	O
km1	long
;	O
storage	pointer
=	O
(	O
double	O
*	O
)	O
calloc	function
(	O
M	int
*	O
N	int
+	O
2	int
*	O
N	int
+	O
2	int
*	O
M	int
,	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
storage	pointer
==	O
0	int
)	O
GSL_ERROR	O
(	O
"failed to allocate working storage"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
A	pointer
=	O
gsl_matrix_view_array	function
(	O
storage	pointer
,	O
M	int
,	O
N	int
)	O
;	O
tau	double
=	O
gsl_vector_view_array	function
(	O
storage	pointer
+	O
M	int
*	O
N	int
,	O
N	int
)	O
;	O
b	double
=	O
gsl_vector_view_array	function
(	O
storage	pointer
+	O
M	int
*	O
N	int
+	O
N	int
,	O
M	int
)	O
;	O
x	double
=	O
gsl_vector_view_array	function
(	O
storage	pointer
+	O
M	int
*	O
N	int
+	O
N	int
+	O
M	int
,	O
N	int
)	O
;	O
r	pointer
=	O
gsl_vector_view_array	function
(	O
storage	pointer
+	O
M	int
*	O
N	int
+	O
N	int
+	O
M	int
+	O
N	int
,	O
M	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
km2	long
;	O
++	O
i	long
)	O
gsl_matrix_set	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
i	long
+	O
j	long
,	O
j	long
,	O
invkm1	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
gsl_vector_set	function
(	O
&	O
b	double
.	O
vector	struct
,	O
i	long
,	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
i	long
+	O
1	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
km2	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
const	O
v	pointer
=	O
gsl_vector_ptr	function
(	O
&	O
b	double
.	O
vector	struct
,	O
i	long
)	O
;	O
*	O
v	pointer
-=	O
(	O
1	int
-	O
(	O
i	long
+	O
1	int
)	O
*	O
invkm1	double
)	O
*	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
km2	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
const	O
v	pointer
=	O
gsl_vector_ptr	function
(	O
&	O
b	double
.	O
vector	struct
,	O
M	int
-	O
km2	long
+	O
i	long
)	O
;	O
*	O
v	pointer
-=	O
(	O
i	long
+	O
1	int
)	O
*	O
invkm1	double
*	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
abscissae	pointer
->	O
size	long
-	O
1	int
)	O
;	O
}	O
s	pointer
=	O
gsl_linalg_QR_decomp	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
&	O
tau	double
.	O
vector	struct
)	O
||	O
gsl_linalg_QR_lssolve	function
(	O
&	O
A	pointer
.	O
matrix	struct
,	O
&	O
tau	double
.	O
vector	struct
,	O
&	O
b	double
.	O
vector	struct
,	O
&	O
x	double
.	O
vector	struct
,	O
&	O
r	pointer
.	O
vector	struct
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
free	function
(	O
storage	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
x	double
=	O
gsl_vector_view_array_with_stride	function
(	O
gsl_vector_ptr	function
(	O
&	O
x	double
.	O
vector	struct
,	O
0	int
)	O
-	O
x	double
.	O
vector	struct
.	O
stride	long
,	O
x	double
.	O
vector	struct
.	O
stride	long
,	O
x	double
.	O
vector	struct
.	O
size	long
+	O
2	int
)	O
;	O
gsl_vector_set	function
(	O
&	O
x	double
.	O
vector	struct
,	O
0	int
,	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
0	int
)	O
)	O
;	O
gsl_vector_set	function
(	O
&	O
x	double
.	O
vector	struct
,	O
x	double
.	O
vector	struct
.	O
size	long
-	O
1	int
,	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
abscissae	pointer
->	O
size	long
-	O
1	int
)	O
)	O
;	O
s	pointer
=	O
gsl_bspline_knots	function
(	O
&	O
x	double
.	O
vector	struct
,	O
w	pointer
)	O
;	O
free	function
(	O
storage	pointer
)	O
;	O
}	O
if	O
(	O
!	O
s	pointer
&&	O
abserr	pointer
)	O
{	O
size_t	long
i	long
;	O
*	O
abserr	pointer
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
abscissae	pointer
->	O
size	long
-	O
1	int
;	O
++	O
i	long
)	O
*	O
abserr	pointer
+=	O
fabs	function
(	O
gsl_bspline_greville_abscissa	function
(	O
i	long
,	O
w	pointer
)	O
-	O
gsl_vector_get	function
(	O
abscissae	pointer
,	O
i	long
)	O
)	O
;	O
}	O
return	O
s	pointer
;	O
}	O
