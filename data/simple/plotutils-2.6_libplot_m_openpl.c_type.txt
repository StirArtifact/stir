bool	enum
_pl_m_begin_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
==	O
1	int
)	O
{	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
PL_PLOT_MAGIC	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
meta_portable_output	enum
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
" 2\n"	pointer
)	O
;	O
else	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
" 1\n"	pointer
)	O
;	O
}	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_OPENPL	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
.	O
x	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_pos	struct
.	O
y	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_position_is_unknown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
0	int
]	O
=	O
1.0	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
1	int
]	O
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
2	int
]	O
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
3	int
]	O
=	O
1.0	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
4	int
]	O
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
5	int
]	O
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_fill_rule_type	int
=	O
PL_FILL_ODD_WINDING	int
;	O
_plotter	pointer
->	O
meta_line_type	int
=	O
PL_L_SOLID	int
;	O
_plotter	pointer
->	O
meta_points_are_connected	enum
=	O
true	int
;	O
_plotter	pointer
->	O
meta_cap_type	int
=	O
PL_CAP_BUTT	int
;	O
_plotter	pointer
->	O
meta_join_type	int
=	O
PL_JOIN_MITER	int
;	O
_plotter	pointer
->	O
meta_miter_limit	double
=	O
PL_DEFAULT_MITER_LIMIT	int
;	O
_plotter	pointer
->	O
meta_line_width	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_line_width_is_default	enum
=	O
true	int
;	O
_plotter	pointer
->	O
meta_dash_array	pointer
=	O
(	O
const	O
double	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
meta_dash_array_len	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_dash_offset	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
=	O
false	int
;	O
_plotter	pointer
->	O
meta_pen_type	int
=	O
1	int
;	O
_plotter	pointer
->	O
meta_fill_type	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_orientation	int
=	O
1	int
;	O
_plotter	pointer
->	O
meta_font_name	pointer
=	O
(	O
const	O
char	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
meta_font_size	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_font_size_is_default	enum
=	O
true	int
;	O
_plotter	pointer
->	O
meta_text_rotation	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
red	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
green	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
blue	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
red	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
green	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
blue	int
=	O
0	int
;	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
red	int
=	O
65535	int
;	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
green	int
=	O
65535	int
;	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
blue	int
=	O
65535	int
;	O
return	O
true	int
;	O
}	O
