int	O
mu_message_size	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
size_t	long
hsize	long
,	O
bsize	long
;	O
int	O
ret	int
=	O
0	int
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
_size	pointer
)	O
return	O
msg	pointer
->	O
_size	pointer
(	O
msg	pointer
,	O
psize	pointer
)	O
;	O
if	O
(	O
psize	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
hsize	long
=	O
bsize	long
=	O
0	int
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
mu_header_size	function
(	O
hdr	pointer
,	O
&	O
hsize	long
)	O
)	O
==	O
0	int
)	O
ret	int
=	O
mu_body_size	function
(	O
body	pointer
,	O
&	O
bsize	long
)	O
;	O
*	O
psize	pointer
=	O
hsize	long
+	O
bsize	long
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
mu_message_set_size	function
(	O
mu_message_t	pointer
msg	pointer
,	O
int	O
(	O
*	O
_size	pointer
)	O
(	O
mu_message_t	pointer
,	O
size_t	long
*	O
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
msg	pointer
->	O
_size	pointer
=	O
_size	pointer
;	O
return	O
0	int
;	O
}	O
