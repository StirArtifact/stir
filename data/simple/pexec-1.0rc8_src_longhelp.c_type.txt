static	O
void	O
remove_quotes	function
(	O
char	O
*	O
buff	pointer
)	O
{	O
int	O
k	int
;	O
while	O
(	O
*	O
buff	pointer
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
buff	pointer
[	O
k	int
]	O
==	O
'"'	O
;	O
)	O
k	int
++	O
;	O
if	O
(	O
k	int
)	O
memmove	function
(	O
buff	pointer
,	O
buff	pointer
+	O
k	int
,	O
strlen	function
(	O
buff	pointer
)	O
+	O
1	int
-	O
k	int
)	O
;	O
else	O
buff	pointer
++	O
;	O
}	O
}	O
static	O
int	O
char_is_space	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
32	int
||	O
c	int
==	O
13	int
||	O
c	int
==	O
10	int
||	O
c	int
==	O
9	int
)	O
return	O
(	O
1	int
)	O
;	O
else	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
*	O
tokenize_spaces_dyn	function
(	O
char	O
*	O
buff	pointer
)	O
{	O
int	O
intoken	int
,	O
inquota	int
,	O
i	int
,	O
n	int
,	O
nm	int
;	O
char	O
*	O
*	O
rtokens	pointer
;	O
nm	int
=	O
16	int
;	O
rtokens	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
malloc_check	O
(	O
rtokens	pointer
)	O
;	O
if	O
(	O
rtokens	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
intoken	int
=	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
=	O
0	int
;	O
while	O
(	O
*	O
buff	pointer
)	O
{	O
if	O
(	O
(	O
!	O
char_is_space	function
(	O
*	O
buff	pointer
)	O
)	O
&&	O
!	O
intoken	int
)	O
{	O
rtokens	pointer
[	O
n	int
]	O
=	O
buff	pointer
;	O
intoken	int
=	O
!	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
++	O
;	O
if	O
(	O
*	O
buff	pointer
==	O
'"'	O
)	O
inquota	int
=	O
!	O
0	int
;	O
buff	pointer
++	O
;	O
if	O
(	O
n	int
>=	O
nm	int
-	O
1	int
)	O
{	O
nm	int
+=	O
16	int
;	O
rtokens	pointer
=	O
(	O
char	O
*	O
*	O
)	O
realloc	function
(	O
rtokens	pointer
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
realloc_check	O
(	O
rtokens	pointer
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
(	O
(	O
char_is_space	function
(	O
*	O
buff	pointer
)	O
&&	O
inquota	int
)	O
||	O
(	O
!	O
char_is_space	function
(	O
*	O
buff	pointer
)	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
buff	pointer
==	O
'"'	O
)	O
inquota	int
=	O
!	O
inquota	int
;	O
buff	pointer
++	O
;	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
!	O
inquota	int
&&	O
char_is_space	function
(	O
*	O
buff	pointer
)	O
)	O
{	O
*	O
buff	pointer
=	O
0	int
,	O
buff	pointer
++	O
;	O
intoken	int
=	O
0	int
;	O
}	O
else	O
buff	pointer
++	O
;	O
}	O
;	O
rtokens	pointer
[	O
n	int
]	O
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
remove_quotes	function
(	O
rtokens	pointer
[	O
i	int
]	O
)	O
;	O
}	O
return	O
(	O
rtokens	pointer
)	O
;	O
}	O
static	O
int	O
longhelp_fprint_description	function
(	O
FILE	struct
*	O
fw	pointer
,	O
int	O
width	int
,	O
int	O
w	int
,	O
int	O
fpad	int
,	O
int	O
pad	int
,	O
char	O
*	O
desc	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
w	int
;	O
i	int
<	O
pad	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
fw	pointer
,	O
" "	pointer
)	O
;	O
}	O
if	O
(	O
width	int
<=	O
0	int
)	O
fprintf	function
(	O
fw	pointer
,	O
"%s\n"	pointer
,	O
desc	pointer
)	O
;	O
else	O
{	O
char	O
*	O
dd	pointer
,	O
*	O
*	O
cmd	pointer
;	O
int	O
n	int
,	O
w	int
,	O
p	int
,	O
l	int
;	O
dd	pointer
=	O
strdup	function
(	O
desc	pointer
)	O
;	O
cmd	pointer
=	O
tokenize_spaces_dyn	function
(	O
dd	pointer
)	O
;	O
p	int
=	O
pad	int
;	O
w	int
=	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
cmd	pointer
!=	O
NULL	O
&&	O
cmd	pointer
[	O
n	int
]	O
!=	O
NULL	O
;	O
n	int
++	O
)	O
{	O
l	int
=	O
strlen	function
(	O
cmd	pointer
[	O
n	int
]	O
)	O
;	O
if	O
(	O
w	int
>	O
0	int
)	O
l	int
++	O
;	O
if	O
(	O
l	int
>	O
width	int
-	O
p	int
)	O
{	O
fprintf	function
(	O
fw	pointer
,	O
"\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
fpad	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
fw	pointer
,	O
" "	pointer
)	O
;	O
}	O
if	O
(	O
w	int
>	O
0	int
)	O
l	int
--	O
;	O
w	int
=	O
0	int
;	O
p	int
=	O
fpad	int
;	O
}	O
if	O
(	O
w	int
>	O
0	int
)	O
fprintf	function
(	O
fw	pointer
,	O
" %s"	pointer
,	O
cmd	pointer
[	O
n	int
]	O
)	O
;	O
else	O
fprintf	function
(	O
fw	pointer
,	O
"%s"	pointer
,	O
cmd	pointer
[	O
n	int
]	O
)	O
;	O
p	int
+=	O
l	int
;	O
w	int
++	O
;	O
}	O
;	O
fprintf	function
(	O
fw	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
cmd	pointer
!=	O
NULL	O
)	O
free	function
(	O
cmd	pointer
)	O
;	O
free	function
(	O
dd	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
longhelp_fprint_entry	function
(	O
FILE	struct
*	O
fw	pointer
,	O
longhelp_entry	struct
*	O
entry	pointer
,	O
int	O
flags	int
,	O
int	O
width	int
)	O
{	O
int	O
w	int
,	O
fpad	int
,	O
pad	int
;	O
w	int
=	O
fprintf	function
(	O
fw	pointer
,	O
" %s"	pointer
,	O
entry	pointer
->	O
options	pointer
)	O
;	O
pad	int
=	O
(	O
w	int
+	O
4	int
+	O
7	int
)	O
&	O
(	O
~	O
7	int
)	O
;	O
fpad	int
=	O
16	int
;	O
if	O
(	O
width	int
>	O
0	int
)	O
longhelp_fprint_description	function
(	O
fw	pointer
,	O
width	int
,	O
w	int
,	O
fpad	int
,	O
pad	int
,	O
entry	pointer
->	O
description	pointer
)	O
;	O
else	O
{	O
for	O
(	O
;	O
w	int
<	O
pad	int
;	O
w	int
++	O
)	O
{	O
fprintf	function
(	O
fw	pointer
,	O
" "	pointer
)	O
;	O
}	O
fprintf	function
(	O
fw	pointer
,	O
"%s\n"	pointer
,	O
entry	pointer
->	O
description	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
longhelp_fprint	function
(	O
FILE	struct
*	O
fw	pointer
,	O
longhelp_entry	struct
*	O
entry	pointer
,	O
int	O
flags	int
,	O
int	O
width	int
)	O
{	O
int	O
lcnt	int
;	O
if	O
(	O
width	int
<	O
0	int
&&	O
isatty	function
(	O
fileno	function
(	O
fw	pointer
)	O
)	O
)	O
{	O
struct	O
winsize	struct
ws	struct
;	O
if	O
(	O
!	O
ioctl	function
(	O
fileno	function
(	O
fw	pointer
)	O
,	O
TIOCGWINSZ	int
,	O
&	O
ws	struct
)	O
)	O
width	int
=	O
ws	struct
.	O
ws_col	short
-	O
1	int
;	O
else	O
width	int
=	O
0	int
;	O
}	O
lcnt	int
=	O
0	int
;	O
while	O
(	O
entry	pointer
!=	O
NULL	O
&&	O
entry	pointer
->	O
options	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
entry	pointer
->	O
description	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
lcnt	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
fw	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
fw	pointer
,	O
"%s\n"	pointer
,	O
entry	pointer
->	O
options	pointer
)	O
;	O
lcnt	int
=	O
0	int
;	O
}	O
else	O
{	O
longhelp_fprint_entry	function
(	O
fw	pointer
,	O
entry	pointer
,	O
flags	int
,	O
width	int
)	O
;	O
lcnt	int
++	O
;	O
}	O
entry	pointer
++	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
