int	O
(	O
*	O
pl_libplot_warning_handler	pointer
)	O
(	O
const	O
char	O
*	O
)	O
=	O
NULL	O
;	O
int	O
(	O
*	O
pl_libplot_error_handler	pointer
)	O
(	O
const	O
char	O
*	O
)	O
=	O
NULL	O
;	O
Plotter	struct
*	O
*	O
_plotters	pointer
=	O
NULL	O
;	O
int	O
_plotters_len	int
=	O
0	int
;	O
pthread_mutex_t	union
_plotters_mutex	union
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
PlotterParams	struct
*	O
_old_api_global_plotter_params	pointer
=	O
NULL	O
;	O
const	O
Plotter	struct
_pl_g_default_plotter	struct
=	O
{	O
_pl_g_initialize	function
,	O
_pl_g_terminate	function
,	O
_pl_g_begin_page	function
,	O
_pl_g_erase_page	function
,	O
_pl_g_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_g_paint_path	function
,	O
_pl_g_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_g_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_g_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
}	O
;	O
void	O
_pl_g_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
bool	enum
open_slot	enum
=	O
false	int
;	O
int	O
i	int
,	O
j	int
;	O
pthread_mutex_lock	function
(	O
&	O
_plotters_mutex	union
)	O
;	O
if	O
(	O
_plotters_len	int
==	O
0	int
)	O
{	O
_plotters	pointer
=	O
(	O
Plotter	struct
*	O
*	O
)	O
_pl_xmalloc	function
(	O
INITIAL_PLOTTERS_LEN	int
*	O
sizeof	O
(	O
Plotter	struct
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
INITIAL_PLOTTERS_LEN	int
;	O
i	int
++	O
)	O
_plotters	pointer
[	O
i	int
]	O
=	O
(	O
Plotter	struct
*	O
)	O
NULL	O
;	O
_plotters_len	int
=	O
INITIAL_PLOTTERS_LEN	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotters_len	int
;	O
i	int
++	O
)	O
if	O
(	O
_plotters	pointer
[	O
i	int
]	O
==	O
NULL	O
)	O
{	O
open_slot	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
open_slot	enum
)	O
{	O
i	int
=	O
_plotters_len	int
;	O
_plotters	pointer
=	O
(	O
Plotter	struct
*	O
*	O
)	O
_pl_xrealloc	function
(	O
_plotters	pointer
,	O
2	int
*	O
_plotters_len	int
*	O
sizeof	O
(	O
Plotter	struct
*	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
_plotters_len	int
;	O
j	int
<	O
2	int
*	O
_plotters_len	int
;	O
j	int
++	O
)	O
_plotters	pointer
[	O
j	int
]	O
=	O
(	O
Plotter	struct
*	O
)	O
NULL	O
;	O
_plotters_len	int
*=	O
2	int
;	O
}	O
_plotters	pointer
[	O
i	int
]	O
=	O
_plotter	pointer
;	O
pthread_mutex_unlock	function
(	O
&	O
_plotters_mutex	union
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_GENERIC	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
=	O
(	O
plOutbuf	struct
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
opened	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
fontsize_invoked	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
linewidth_invoked	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
frame_number	int
=	O
0	int
;	O
_plotter	pointer
->	O
drawstate	pointer
=	O
(	O
plDrawState	struct
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
font_warning_issued	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pen_color_warning_issued	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
fill_color_warning_issued	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
bg_color_warning_issued	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_settable_bg	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
=	O
PL_F_HERSHEY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pcl_before_ps	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
issue_font_warning	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
max_unfilled_path_length	int
=	O
PL_MAX_UNFILLED_PATH_LENGTH	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_arc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_quad_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_box_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_circle_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_model_type	int
=	O
(	O
int	O
)	O
DISP_MODEL_VIRTUAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
=	O
(	O
int	O
)	O
DISP_DEVICE_COORS_REAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
1.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
1.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
=	O
(	O
plPageData	struct
*	O
)	O
NULL	O
;	O
_compute_ndc_to_device_map	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
=	O
_create_color_name_cache	function
(	O
)	O
;	O
{	O
const	O
char	O
*	O
emulate_s	pointer
;	O
emulate_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"EMULATE_COLOR"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
emulate_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
=	O
true	int
;	O
else	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
=	O
false	int
;	O
}	O
{	O
const	O
char	O
*	O
length_s	pointer
;	O
int	O
local_length	int
;	O
length_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"MAX_LINE_LENGTH"	pointer
)	O
;	O
if	O
(	O
sscanf	function
(	O
length_s	pointer
,	O
"%d"	pointer
,	O
&	O
local_length	int
)	O
<=	O
0	int
||	O
local_length	int
<=	O
0	int
)	O
{	O
length_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_default_plot_param	function
(	O
"MAX_LINE_LENGTH"	pointer
)	O
;	O
sscanf	function
(	O
length_s	pointer
,	O
"%d"	pointer
,	O
&	O
local_length	int
)	O
;	O
}	O
_plotter	pointer
->	O
data	pointer
->	O
max_unfilled_path_length	int
=	O
local_length	int
;	O
}	O
{	O
const	O
char	O
*	O
version_s	pointer
;	O
version_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"HPGL_VERSION"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
version_s	pointer
,	O
"2"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
false	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
version_s	pointer
,	O
"1.5"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
true	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
version_s	pointer
,	O
"1"	pointer
)	O
==	O
0	int
)	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
=	O
true	int
;	O
}	O
}	O
void	O
_pl_g_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
_API_closepl	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_g_free_params_in_plotter	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_delete_color_name_cache	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
_plotters_mutex	union
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotters_len	int
;	O
i	int
++	O
)	O
if	O
(	O
_plotters	pointer
[	O
i	int
]	O
==	O
_plotter	pointer
)	O
{	O
_plotters	pointer
[	O
i	int
]	O
=	O
(	O
Plotter	struct
*	O
)	O
NULL	O
;	O
break	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
_plotters_mutex	union
)	O
;	O
}	O
