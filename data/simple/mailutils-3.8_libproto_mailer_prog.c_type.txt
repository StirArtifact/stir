static	O
int	O
_url_prog_init	function
(	O
mu_url_t	pointer
)	O
;	O
static	O
struct	O
_mu_record	struct
_prog_record	struct
=	O
{	O
MU_PROG_PRIO	int
,	O
MU_PROG_SCHEME	pointer
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_PATH	int
|	O
MU_URL_QUERY	int
,	O
MU_URL_PATH	int
,	O
_url_prog_init	function
,	O
_mu_mailer_mailbox_init	function
,	O
_mu_mailer_prog_init	function
,	O
_mu_mailer_folder_init	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	pointer
mu_prog_record	pointer
=	O
&	O
_prog_record	struct
;	O
static	O
int	O
_url_prog_uplevel	function
(	O
const	O
mu_url_t	pointer
orig	pointer
,	O
mu_url_t	pointer
*	O
up	pointer
)	O
{	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
_url_prog_init	function
(	O
mu_url_t	pointer
url	pointer
)	O
{	O
url	pointer
->	O
_uplevel	pointer
=	O
_url_prog_uplevel	function
;	O
return	O
0	int
;	O
}	O
static	O
void	O
prog_destroy	function
(	O
mu_mailer_t	pointer
)	O
;	O
static	O
int	O
prog_open	function
(	O
mu_mailer_t	pointer
,	O
int	O
)	O
;	O
static	O
int	O
prog_close	function
(	O
mu_mailer_t	pointer
)	O
;	O
static	O
int	O
prog_send_message	function
(	O
mu_mailer_t	pointer
,	O
mu_message_t	pointer
,	O
mu_address_t	pointer
,	O
mu_address_t	pointer
)	O
;	O
int	O
_mu_mailer_prog_init	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
int	O
status	int
;	O
mu_progmailer_t	pointer
pm	pointer
;	O
status	int
=	O
mu_progmailer_create	function
(	O
&	O
pm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mailer	pointer
->	O
data	pointer
=	O
pm	pointer
;	O
mailer	pointer
->	O
_destroy	pointer
=	O
prog_destroy	function
;	O
mailer	pointer
->	O
_open	pointer
=	O
prog_open	function
;	O
mailer	pointer
->	O
_close	pointer
=	O
prog_close	function
;	O
mailer	pointer
->	O
_send_message	pointer
=	O
prog_send_message	function
;	O
return	O
0	int
;	O
}	O
static	O
void	O
prog_destroy	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
mu_progmailer_destroy	function
(	O
(	O
mu_progmailer_t	pointer
*	O
)	O
&	O
mailer	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
int	O
prog_open	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
int	O
flags	int
)	O
{	O
mu_progmailer_t	pointer
pm	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
const	O
char	O
*	O
path	pointer
;	O
if	O
(	O
pm	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mailer	pointer
->	O
flags	int
=	O
flags	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_url_sget_path	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
path	pointer
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
access	function
(	O
path	pointer
,	O
X_OK	int
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
status	int
=	O
mu_progmailer_set_command	function
(	O
pm	pointer
,	O
path	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"prog (%s)"	pointer
,	O
path	pointer
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
prog_close	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
return	O
mu_progmailer_close	function
(	O
mailer	pointer
->	O
data	pointer
)	O
;	O
}	O
struct	O
prog_exp	struct
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_address_t	pointer
sender_addr	pointer
;	O
mu_address_t	pointer
rcpt_addr	pointer
;	O
}	O
;	O
static	O
int	O
_expand_err	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
prefix	pointer
,	O
int	O
status	int
)	O
{	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
"%s: %s"	pointer
,	O
prefix	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
static	O
int	O
_expand_sender	function
(	O
struct	O
prog_exp	struct
*	O
pe	pointer
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
int	O
status	int
=	O
mu_address_aget_email	function
(	O
pe	pointer
->	O
sender_addr	pointer
,	O
1	int
,	O
ret	pointer
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
return	O
MU_WRDSE_OK	O
;	O
case	O
ENOMEM	int
:	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
return	O
_expand_err	function
(	O
ret	pointer
,	O
"getting email"	pointer
,	O
status	int
)	O
;	O
}	O
static	O
int	O
address_add	function
(	O
mu_address_t	pointer
*	O
paddr	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_union	function
(	O
paddr	pointer
,	O
addr	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
message_read_rcpt	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
*	O
paddr	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
value	pointer
;	O
int	O
status	int
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	function
(	O
paddr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_CC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	function
(	O
paddr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_BCC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	function
(	O
paddr	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_expand_rcpt	function
(	O
struct	O
prog_exp	struct
*	O
pe	pointer
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
i	long
,	O
count	pointer
=	O
0	int
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
str	pointer
;	O
mu_address_t	pointer
tmp_addr	pointer
=	O
NULL	O
,	O
addr	pointer
;	O
if	O
(	O
pe	pointer
->	O
rcpt_addr	pointer
)	O
addr	pointer
=	O
pe	pointer
->	O
rcpt_addr	pointer
;	O
else	O
{	O
status	int
=	O
message_read_rcpt	function
(	O
pe	pointer
->	O
msg	pointer
,	O
&	O
tmp_addr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_address_destroy	function
(	O
&	O
tmp_addr	pointer
)	O
;	O
return	O
_expand_err	function
(	O
ret	pointer
,	O
"reading recipients"	pointer
,	O
status	int
)	O
;	O
}	O
addr	pointer
=	O
tmp_addr	pointer
;	O
}	O
mu_address_get_count	function
(	O
addr	pointer
,	O
&	O
count	pointer
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	pointer
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
email	pointer
;	O
if	O
(	O
i	long
>	O
1	int
)	O
len	long
++	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
i	long
,	O
&	O
email	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_address_destroy	function
(	O
&	O
tmp_addr	pointer
)	O
;	O
return	O
_expand_err	function
(	O
ret	pointer
,	O
"reading email"	pointer
,	O
status	int
)	O
;	O
}	O
if	O
(	O
email	pointer
)	O
len	long
+=	O
strlen	function
(	O
email	pointer
)	O
;	O
}	O
str	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
{	O
mu_address_destroy	function
(	O
&	O
tmp_addr	pointer
)	O
;	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
*	O
ret	pointer
=	O
str	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	pointer
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
email	pointer
;	O
if	O
(	O
i	long
>	O
1	int
)	O
*	O
str	pointer
++	O
=	O
' '	O
;	O
if	O
(	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
i	long
,	O
&	O
email	pointer
)	O
||	O
!	O
email	pointer
)	O
continue	O
;	O
strcpy	function
(	O
str	pointer
,	O
email	pointer
)	O
;	O
str	pointer
+=	O
strlen	function
(	O
email	pointer
)	O
;	O
}	O
*	O
str	pointer
=	O
0	int
;	O
mu_address_destroy	function
(	O
&	O
tmp_addr	pointer
)	O
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
prog_getvar	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
nlen	long
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
prog_exp	struct
*	O
pe	pointer
=	O
data	pointer
;	O
if	O
(	O
SEQ	O
(	O
"sender"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
return	O
_expand_sender	function
(	O
pe	pointer
,	O
ret	pointer
)	O
;	O
if	O
(	O
SEQ	O
(	O
"rcpt"	pointer
,	O
name	pointer
,	O
nlen	long
)	O
)	O
return	O
_expand_rcpt	function
(	O
pe	pointer
,	O
ret	pointer
)	O
;	O
return	O
MU_WRDSE_UNDEF	O
;	O
}	O
static	O
int	O
url_to_argv	function
(	O
mu_url_t	pointer
url	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
,	O
int	O
*	O
pargc	pointer
,	O
char	O
*	O
*	O
*	O
pargv	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
prog_exp	struct
pe	pointer
;	O
char	O
*	O
*	O
query	pointer
;	O
size_t	long
i	long
;	O
size_t	long
argc	long
;	O
char	O
*	O
*	O
argv	pointer
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
int	O
wsflags	int
;	O
pe	pointer
.	O
msg	pointer
=	O
msg	pointer
;	O
pe	pointer
.	O
rcpt_addr	pointer
=	O
to	pointer
;	O
pe	pointer
.	O
sender_addr	pointer
=	O
from	pointer
;	O
ws	pointer
.	O
ws_getvar	pointer
=	O
prog_getvar	function
;	O
ws	pointer
.	O
ws_closure	pointer
=	O
&	O
pe	pointer
;	O
wsflags	int
=	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_GETVAR	O
|	O
MU_WRDSF_CLOSURE	O
;	O
rc	int
=	O
mu_url_sget_query	function
(	O
url	pointer
,	O
&	O
argc	long
,	O
&	O
query	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
argv	pointer
=	O
calloc	function
(	O
argc	long
+	O
2	int
,	O
sizeof	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
argv	pointer
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_url_aget_path	function
(	O
url	pointer
,	O
&	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
argv	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_wordsplit	struct
(	O
query	pointer
[	O
i	long
]	O
,	O
&	O
ws	pointer
,	O
wsflags	int
)	O
)	O
{	O
mu_argcv_free	function
(	O
i	long
,	O
argv	pointer
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
==	O
0	int
)	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
=	O
strdup	function
(	O
""	pointer
)	O
;	O
else	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
=	O
strdup	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
)	O
{	O
mu_argcv_free	function
(	O
i	long
,	O
argv	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
wsflags	int
|=	O
MU_WRDSF_REUSE	O
;	O
}	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
wsflags	int
&	O
MU_WRDSF_REUSE	O
)	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
*	O
pargc	pointer
=	O
argc	long
;	O
*	O
pargv	pointer
=	O
argv	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
prog_send_message	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
mu_progmailer_t	pointer
pm	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
int	O
argc	long
;	O
char	O
*	O
*	O
argv	pointer
;	O
int	O
status	int
;	O
const	O
char	O
*	O
command	pointer
;	O
status	int
=	O
mu_url_sget_path	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
command	pointer
)	O
;	O
if	O
(	O
status	int
&&	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get path from URL: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_progmailer_set_command	function
(	O
pm	pointer
,	O
command	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot set progmailer command: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
url_to_argv	function
(	O
mailer	pointer
->	O
url	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
to	pointer
,	O
&	O
argc	long
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot convert URL to command line: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_progmailer_open	function
(	O
pm	pointer
,	O
argv	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_progmailer_send	function
(	O
pm	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_observable_notify	function
(	O
mailer	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILER_MESSAGE_SENT	int
,	O
msg	pointer
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"progmailer error: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
mu_argcv_free	function
(	O
argc	long
,	O
argv	pointer
)	O
;	O
return	O
status	int
;	O
}	O
