char	O
query_docstring	array
[	O
]	O
=	O
N_	O
(	O
"query configuration values"	pointer
)	O
;	O
static	O
char	O
query_args_doc	array
[	O
]	O
=	O
N_	O
(	O
"PATH [PATH...]"	pointer
)	O
;	O
static	O
char	O
*	O
file_name	pointer
;	O
int	O
value_option	int
;	O
int	O
path_option	int
;	O
int	O
verbose_option	int
;	O
char	O
*	O
progname	pointer
;	O
static	O
struct	O
mu_option	struct
query_options	array
[	O
]	O
=	O
{	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"query configuration values from FILE (default mailutils.rc)"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
file_name	pointer
}	O
,	O
{	O
"value"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display parameter values only"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
value_option	int
}	O
,	O
{	O
"program"	pointer
,	O
'p'	O
,	O
N_	O
(	O
"NAME"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set program name for configuration lookup"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
progname	pointer
}	O
,	O
{	O
"path"	pointer
,	O
0	int
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display setting names as paths"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
path_option	int
}	O
,	O
{	O
"verbose"	pointer
,	O
'v'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"increase output verbosity"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
verbose_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
static	O
struct	O
mu_cfg_parse_hints	struct
hints	pointer
;	O
mu_cfg_tree_t	struct
*	O
tree	pointer
=	O
NULL	O
;	O
mu_action_getopt	function
(	O
&	O
argc	long
,	O
&	O
argv	pointer
,	O
query_options	array
,	O
query_docstring	array
,	O
query_args_doc	array
)	O
;	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"query what?"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
hints	pointer
.	O
flags	int
=	O
MU_CFHINT_SITE_FILE	int
;	O
hints	pointer
.	O
site_file	pointer
=	O
file_name	pointer
?	O
file_name	pointer
:	O
mu_site_config_file	function
(	O
)	O
;	O
if	O
(	O
progname	pointer
)	O
{	O
hints	pointer
.	O
flags	int
|=	O
MU_CFHINT_PROGRAM	int
;	O
hints	pointer
.	O
program	pointer
=	O
progname	pointer
;	O
}	O
if	O
(	O
verbose_option	int
)	O
hints	pointer
.	O
flags	int
|=	O
MU_CF_FMT_LOCUS	int
;	O
if	O
(	O
value_option	int
)	O
hints	pointer
.	O
flags	int
|=	O
MU_CF_FMT_VALUE_ONLY	int
;	O
if	O
(	O
path_option	int
)	O
hints	pointer
.	O
flags	int
|=	O
MU_CF_FMT_PARAM_PATH	int
;	O
if	O
(	O
mu_cfg_parse_config	function
(	O
&	O
tree	pointer
,	O
&	O
hints	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
tree	pointer
)	O
return	O
0	int
;	O
for	O
(	O
;	O
argc	long
>	O
0	int
;	O
argc	long
--	O
,	O
argv	pointer
++	O
)	O
{	O
char	O
*	O
path	pointer
=	O
*	O
argv	pointer
;	O
mu_cfg_node_t	struct
*	O
node	pointer
;	O
if	O
(	O
mu_cfg_find_node	function
(	O
tree	pointer
,	O
path	pointer
,	O
&	O
node	pointer
)	O
==	O
0	int
)	O
mu_cfg_format_node	function
(	O
mu_strout	pointer
,	O
node	pointer
,	O
hints	pointer
.	O
flags	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
