static	O
int	O
check_error	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
ret	int
)	O
{	O
if	O
(	O
swpath	pointer
->	O
dfiles_guardM	int
>	O
1	int
||	O
swpath	pointer
->	O
catalog_guardM	int
>	O
1	int
||	O
swpath	pointer
->	O
errorM	int
)	O
return	O
-	O
1	int
;	O
else	O
return	O
ret	int
;	O
}	O
static	O
void	O
set_control_depth	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
nd	int
)	O
{	O
if	O
(	O
swpath	pointer
->	O
swpath_is_catalog_	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
swpath	pointer
->	O
control_path_nominal_depth_	int
<	O
nd	int
)	O
{	O
swpath	pointer
->	O
control_path_nominal_depth_	int
=	O
nd	int
;	O
}	O
}	O
static	O
char	O
*	O
swpath_parse_write_debug	function
(	O
STROB	struct
*	O
buf	pointer
,	O
int	O
relative_n	int
,	O
char	O
*	O
*	O
ca	pointer
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"rel_n = %d: ca[0]=[%s] ca[1]=[%s] ca[2]=[%s]"	pointer
" ca[3]=[%s] ca[4]=[%s]"	pointer
,	O
relative_n	int
,	O
ca	pointer
[	O
0	int
]	O
?	O
ca	pointer
[	O
0	int
]	O
:	O
""	pointer
,	O
ca	pointer
[	O
1	int
]	O
?	O
ca	pointer
[	O
1	int
]	O
:	O
""	pointer
,	O
ca	pointer
[	O
2	int
]	O
?	O
ca	pointer
[	O
2	int
]	O
:	O
""	pointer
,	O
ca	pointer
[	O
3	int
]	O
?	O
ca	pointer
[	O
3	int
]	O
:	O
""	pointer
,	O
ca	pointer
[	O
4	int
]	O
?	O
ca	pointer
[	O
4	int
]	O
:	O
""	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
set_p_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
&&	O
name	pointer
)	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
p_pfiles_	pointer
,	O
name	pointer
)	O
;	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
p_pfiles_	pointer
)	O
;	O
}	O
}	O
static	O
void	O
set_p_dfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
)	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
p_dfiles_	pointer
,	O
name	pointer
)	O
;	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
p_dfiles_	pointer
)	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
static	O
char	O
*	O
get_p_dfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
;	O
}	O
static	O
char	O
*	O
get_p_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
;	O
}	O
static	O
void	O
set_p_fileset_dir	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
name	pointer
)	O
{	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
swpath	pointer
->	O
swpath_p_fileset_dir_	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
name	pointer
)	O
;	O
swpath	pointer
->	O
swpath_p_fileset_dir_	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
)	O
;	O
}	O
}	O
static	O
void	O
swpath__set__basename	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
pathname	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
str	pointer
=	O
strrchr	function
(	O
pathname	pointer
,	O
(	O
int	O
)	O
'/'	O
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
strob_strcpy	function
(	O
swpath	pointer
->	O
basename_	pointer
,	O
pathname	pointer
)	O
;	O
else	O
strob_strcpy	function
(	O
swpath	pointer
->	O
basename_	pointer
,	O
str	pointer
+	O
1	int
)	O
;	O
}	O
static	O
void	O
swpath__slashclean	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
madelist	pointer
)	O
{	O
char	O
*	O
p1	pointer
;	O
while	O
(	O
(	O
p1	pointer
=	O
strstr	function
(	O
madelist	pointer
,	O
"//"	pointer
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
)	O
memmove	function
(	O
p1	pointer
,	O
p1	pointer
+	O
1	int
,	O
strlen	function
(	O
p1	pointer
)	O
)	O
;	O
if	O
(	O
strlen	function
(	O
madelist	pointer
)	O
>=	O
3	int
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
madelist	pointer
,	O
"./"	pointer
,	O
2	int
)	O
)	O
{	O
p1	pointer
=	O
madelist	pointer
;	O
memmove	function
(	O
p1	pointer
,	O
p1	pointer
+	O
2	int
,	O
strlen	function
(	O
p1	pointer
+	O
1	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
*	O
madelist	pointer
==	O
'/'	O
&&	O
strlen	function
(	O
madelist	pointer
)	O
>	O
1	int
)	O
memmove	function
(	O
madelist	pointer
,	O
madelist	pointer
+	O
1	int
,	O
strlen	function
(	O
madelist	pointer
)	O
)	O
;	O
if	O
(	O
strlen	function
(	O
madelist	pointer
)	O
>	O
1	int
&&	O
(	O
*	O
(	O
madelist	pointer
+	O
strlen	function
(	O
madelist	pointer
)	O
-	O
1	int
)	O
)	O
==	O
'/'	O
)	O
{	O
(	O
*	O
(	O
madelist	pointer
+	O
strlen	function
(	O
madelist	pointer
)	O
-	O
1	int
)	O
)	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
swpath__form_path1	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
STROB	struct
*	O
buf	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
)	O
&&	O
strob_strlen	function
(	O
buf	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
)	O
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
)	O
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
dfiles_	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
dfiles_	pointer
)	O
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
pathname_	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pathname_	pointer
)	O
)	O
;	O
}	O
else	O
{	O
strob_strcat	function
(	O
buf	pointer
,	O
name	pointer
)	O
;	O
}	O
}	O
static	O
void	O
swpath__unsetup1	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
free	function
(	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
;	O
free	function
(	O
swpath	pointer
->	O
dfiles_default	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
dfiles_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
swpackage_pathname_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
pathname_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
;	O
strob_close	function
(	O
swpath	pointer
->	O
basename_	pointer
)	O
;	O
strar_close	function
(	O
swpath	pointer
->	O
pathlist_	pointer
)	O
;	O
swpath	pointer
->	O
is_minimal_layoutM	int
=	O
0	int
;	O
swpath	pointer
->	O
dfiles_guardM	int
=	O
0	int
;	O
swpath	pointer
->	O
catalog_guardM	int
=	O
0	int
;	O
}	O
static	O
void	O
swpath__setup1	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
swpath	pointer
->	O
errorM	int
=	O
0	int
;	O
swpath	pointer
->	O
open_pathname_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
product_control_dir_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
fileset_control_dir_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
pfiles_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
dfiles_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
swpackage_pathname_	pointer
=	O
strob_open	function
(	O
512	int
)	O
;	O
swpath	pointer
->	O
pathname_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
prepath_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
buffer_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
basename_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
p_pfiles_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
p_dfiles_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
all_filesets_	pointer
=	O
strob_open	function
(	O
2	int
)	O
;	O
swpath	pointer
->	O
pathlist_	pointer
=	O
strar_open	function
(	O
)	O
;	O
swpath	pointer
->	O
max_rel_n_	int
=	O
0	int
;	O
swpath	pointer
->	O
pfiles_default	pointer
=	O
strdup	function
(	O
"pfiles"	pointer
)	O
;	O
swpath	pointer
->	O
dfiles_default	pointer
=	O
strdup	function
(	O
"dfiles"	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
pfiles_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
dfiles_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
pathname_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
basename_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
p_pfiles_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
p_dfiles_	pointer
,	O
""	pointer
)	O
;	O
swpath	pointer
->	O
swpath_is_catalog_	int
=	O
0	int
;	O
swpath	pointer
->	O
control_path_nominal_depth_	int
=	O
0	int
;	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_e_dfiles_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_p_fileset_dir_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_p_product_dir_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
swpath_e_pfiles_	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
swpath	pointer
->	O
is_minimal_layoutM	int
=	O
0	int
;	O
swpath	pointer
->	O
dfiles_guardM	int
=	O
0	int
;	O
swpath	pointer
->	O
catalog_guardM	int
=	O
0	int
;	O
}	O
static	O
void	O
set_v_dfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
strob_strlen	function
(	O
swpath	pointer
->	O
dfiles_	pointer
)	O
==	O
0	int
&&	O
strlen	function
(	O
s	pointer
)	O
)	O
{	O
(	O
swpath	pointer
->	O
dfiles_guardM	int
)	O
++	O
;	O
}	O
strob_strcpy	function
(	O
swpath	pointer
->	O
dfiles_	pointer
,	O
s	pointer
)	O
;	O
}	O
static	O
void	O
set_v_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
pfiles_	pointer
,	O
s	pointer
)	O
;	O
}	O
static	O
int	O
is_in_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
*	O
ca	pointer
)	O
{	O
char	O
*	O
ppf	pointer
=	O
get_p_pfiles	function
(	O
swpath	pointer
)	O
;	O
if	O
(	O
ppf	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
ppf	pointer
)	O
==	O
0	int
)	O
{	O
return	O
2	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
ppf	pointer
)	O
==	O
0	int
)	O
{	O
return	O
3	int
;	O
}	O
}	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
==	O
0	int
)	O
{	O
return	O
2	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
)	O
{	O
return	O
2	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
==	O
0	int
)	O
{	O
return	O
3	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
)	O
{	O
return	O
3	int
;	O
}	O
if	O
(	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
&&	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
==	O
NULL	O
&&	O
swpath	pointer
->	O
swpath_p_fileset_dir_	pointer
==	O
NULL	O
)	O
{	O
return	O
3	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
set_max_rel_n	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
n	long
)	O
{	O
if	O
(	O
n	long
>	O
swpath	pointer
->	O
max_rel_n_	int
)	O
swpath	pointer
->	O
max_rel_n_	int
=	O
n	long
;	O
}	O
static	O
void	O
set_is_catalog	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
n	long
,	O
char	O
*	O
loc	pointer
)	O
{	O
int	O
old	int
;	O
old	int
=	O
swpath	pointer
->	O
swpath_is_catalog_	int
;	O
if	O
(	O
old	int
==	O
-	O
1	int
&&	O
n	long
==	O
0	int
)	O
{	O
swpath	pointer
->	O
errorM	int
=	O
2	int
;	O
}	O
if	O
(	O
old	int
==	O
1	int
&&	O
n	long
==	O
-	O
1	int
)	O
{	O
swpath	pointer
->	O
errorM	int
=	O
2	int
;	O
}	O
if	O
(	O
old	int
!=	O
1	int
&&	O
n	long
==	O
1	int
)	O
{	O
swpath	pointer
->	O
catalog_guardM	int
++	O
;	O
}	O
if	O
(	O
swpath	pointer
->	O
catalog_guardM	int
>	O
1	int
)	O
{	O
swpath	pointer
->	O
errorM	int
=	O
2	int
;	O
}	O
swpath_set_is_catalog	function
(	O
swpath	pointer
,	O
n	long
)	O
;	O
}	O
int	O
swpath_num_of_components	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
buffer_	pointer
,	O
str	pointer
)	O
;	O
while	O
(	O
strtok	function
(	O
i	int
?	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
:	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
,	O
"/"	pointer
)	O
)	O
i	int
++	O
;	O
return	O
i	int
;	O
}	O
int	O
swpath_resolve_prepath	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
len	int
;	O
char	O
*	O
p	pointer
,	O
*	O
s	pointer
;	O
if	O
(	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
)	O
return	O
0	int
;	O
p	pointer
=	O
strstr	function
(	O
name	pointer
,	O
SW_A_catalog	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
s	pointer
=	O
strstr	function
(	O
name	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
strob_strcat	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
name	pointer
+	O
strob_strlen	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
;	O
}	O
else	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
""	pointer
)	O
;	O
}	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
p	pointer
&&	O
!	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
&&	O
!	O
strob_strlen	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
{	O
len	int
=	O
(	O
int	O
)	O
(	O
p	pointer
-	O
name	pointer
)	O
;	O
strob_set_length	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
len	int
+	O
1	int
)	O
;	O
strob_strncpy	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
name	pointer
,	O
len	int
+	O
20	int
)	O
;	O
if	O
(	O
len	int
)	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
else	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
[	O
len	int
]	O
=	O
'\0'	O
;	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
;	O
}	O
else	O
{	O
len	int
=	O
(	O
int	O
)	O
(	O
p	pointer
-	O
name	pointer
)	O
;	O
strob_set_length	function
(	O
swpath	pointer
->	O
prepath_	pointer
,	O
len	int
+	O
1	int
)	O
;	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
[	O
len	int
]	O
=	O
'\0'	O
;	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
;	O
if	O
(	O
strncmp	function
(	O
name	pointer
,	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
,	O
len	int
-	O
1	int
<	O
0	int
?	O
0	int
:	O
len	int
-	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swpath: inconsistent package pre-path"	pointer
" %s not = %s over %d chars.\n"	pointer
,	O
name	pointer
,	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
,	O
len	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
SWPATH	struct
*	O
swpath_open	function
(	O
char	O
*	O
path	pointer
)	O
{	O
SWPATH	struct
*	O
swpath	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
SWPATH	struct
)	O
)	O
;	O
swpath__setup1	function
(	O
swpath	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
,	O
path	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
path	pointer
)	O
)	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
)	O
)	O
;	O
return	O
swpath	pointer
;	O
}	O
void	O
swpath_reset	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
)	O
)	O
;	O
swpath__unsetup1	function
(	O
swpath	pointer
)	O
;	O
swpath__setup1	function
(	O
swpath	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
if	O
(	O
strlen	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
)	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
open_pathname_	pointer
)	O
)	O
;	O
return	O
;	O
}	O
char	O
*	O
swpath_form_path	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
if	O
(	O
swpath	pointer
->	O
swpath_is_catalog_	int
)	O
return	O
swpath_form_catalog_path	function
(	O
swpath	pointer
,	O
buf	pointer
)	O
;	O
else	O
return	O
swpath_form_storage_path	function
(	O
swpath	pointer
,	O
buf	pointer
)	O
;	O
}	O
void	O
swpath_set_dfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
free	function
(	O
swpath	pointer
->	O
dfiles_default	pointer
)	O
;	O
swpath	pointer
->	O
dfiles_default	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
}	O
void	O
swpath_set_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
free	function
(	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
;	O
swpath	pointer
->	O
pfiles_default	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
}	O
int	O
swpath_close	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
swpath__unsetup1	function
(	O
swpath	pointer
)	O
;	O
free	function
(	O
swpath	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
swpath_set_product_control_dir	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
&&	O
strlen	function
(	O
s	pointer
)	O
)	O
set_control_depth	function
(	O
swpath	pointer
,	O
2	int
)	O
;	O
if	O
(	O
swpath	pointer
->	O
swpath_is_catalog_	int
==	O
0	int
)	O
{	O
if	O
(	O
swpath	pointer
->	O
control_path_nominal_depth_	int
==	O
0	int
)	O
{	O
s	pointer
=	O
""	pointer
;	O
}	O
}	O
strob_strcpy	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
swpath_set_fileset_control_dir	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
&&	O
strlen	function
(	O
s	pointer
)	O
)	O
set_control_depth	function
(	O
swpath	pointer
,	O
1	int
)	O
;	O
if	O
(	O
swpath	pointer
->	O
swpath_is_catalog_	int
==	O
0	int
)	O
{	O
if	O
(	O
swpath	pointer
->	O
control_path_nominal_depth_	int
==	O
0	int
)	O
{	O
s	pointer
=	O
""	pointer
;	O
}	O
}	O
strob_strcpy	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
swpath_set_pathname	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
pathname_	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
swpath_set_pkgpathname	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
strob_strcpy	function
(	O
swpath	pointer
->	O
swpackage_pathname_	pointer
,	O
s	pointer
)	O
;	O
}	O
void	O
swpath_set_filename	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
!	O
s	pointer
)	O
swpath__set__basename	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pathname_	pointer
)	O
)	O
;	O
else	O
swpath__set__basename	function
(	O
swpath	pointer
,	O
s	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_product_control_dir	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
product_control_dir_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_fileset_control_dir	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
fileset_control_dir_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_pfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_dfiles	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
dfiles_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_prepath	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_pathname	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
pathname_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_pkgpathname	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
swpackage_pathname_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_get_basename	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
strob_str	function
(	O
swpath	pointer
->	O
basename_	pointer
)	O
;	O
}	O
char	O
*	O
swpath_form_catalog_path	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
strob_strncpy	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
,	O
200	int
)	O
;	O
if	O
(	O
swpath	pointer
->	O
swpath_is_catalog_	int
<	O
0	int
)	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
strob_strlen	function
(	O
buf	pointer
)	O
)	O
strob_strcat	function
(	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strob_strcat	function
(	O
buf	pointer
,	O
SW_A_catalog	pointer
)	O
;	O
swpath__form_path1	function
(	O
swpath	pointer
,	O
buf	pointer
,	O
NULL	O
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
char	O
*	O
swpath_form_storage_path	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
strob_strncpy	function
(	O
buf	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
,	O
200	int
)	O
;	O
swpath__form_path1	function
(	O
swpath	pointer
,	O
buf	pointer
,	O
NULL	O
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
void	O
swpath_set_is_catalog	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
n	long
)	O
{	O
swpath	pointer
->	O
swpath_is_catalog_	int
=	O
n	long
;	O
}	O
int	O
swpath_get_is_catalog	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
swpath	pointer
->	O
swpath_is_catalog_	int
;	O
}	O
void	O
swpath_set_is_minimal_layout	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
n	long
)	O
{	O
swpath	pointer
->	O
is_minimal_layoutM	int
=	O
n	long
;	O
}	O
int	O
swpath_get_is_minimal_layout	function
(	O
SWPATH	struct
*	O
swpath	pointer
)	O
{	O
return	O
swpath	pointer
->	O
is_minimal_layoutM	int
;	O
}	O
int	O
swpath_parse_path	function
(	O
SWPATH	struct
*	O
swpath	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
relative_n	int
;	O
int	O
n	long
=	O
0	int
;	O
int	O
i	int
;	O
int	O
n_prepath	int
;	O
int	O
ret	int
=	O
0	int
;	O
int	O
compy	int
=	O
0	int
;	O
int	O
pfiles_index	int
=	O
0	int
;	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
char	O
*	O
ca	pointer
[	O
SWPATH_PARSE_CA	int
+	O
1	int
]	O
;	O
SWPATH_E_DEBUG2	O
(	O
"ENTER swpath_parse_path [%s]"	pointer
,	O
name	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
buffer_	pointer
,	O
name	pointer
)	O
;	O
swpath_set_pkgpathname	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
swlib_squash_trailing_slash	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
swlib_squash_leading_dot_slash	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
swlib_squash_leading_slash	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
strar_add	function
(	O
swpath	pointer
->	O
pathlist_	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
pathname_	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
basename_	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swpath_resolve_prepath	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
)	O
{	O
swpath_set_is_catalog	function
(	O
swpath	pointer
,	O
-	O
1	int
)	O
;	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_dump_string_s	O
(	O
swpath	pointer
,	O
""	pointer
)	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"EXIT swpath_parse_path"	pointer
)	O
;	O
return	O
check_error	function
(	O
swpath	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
strlen	function
(	O
swpath	pointer
->	O
swpath_p_prepath_	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
s	pointer
=	O
strstr	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
)	O
||	O
(	O
s	pointer
!=	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
||	O
(	O
*	O
(	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
+	O
strob_strlen	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
!=	O
'/'	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swpath_set_is_catalog	function
(	O
swpath	pointer
,	O
-	O
1	int
)	O
;	O
swpath	pointer
->	O
errorM	int
=	O
1	int
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_dump_string_s	O
(	O
swpath	pointer
,	O
""	pointer
)	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"EXIT swpath_parse_path"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
swpath__slashclean	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
;	O
n_prepath	int
=	O
swpath_num_of_components	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWPATH_PARSE_CA	int
;	O
i	int
++	O
)	O
ca	pointer
[	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
strob_strcpy	function
(	O
swpath	pointer
->	O
buffer_	pointer
,	O
name	pointer
)	O
;	O
swpath__slashclean	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
strob_strstr	function
(	O
swpath	pointer
->	O
buffer_	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
)	O
)	O
!=	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
n_prepath	int
=	O
0	int
;	O
}	O
s	pointer
=	O
strob_str	function
(	O
swpath	pointer
->	O
buffer_	pointer
)	O
+	O
strob_strlen	function
(	O
swpath	pointer
->	O
prepath_	pointer
)	O
;	O
if	O
(	O
*	O
s	pointer
==	O
'/'	O
)	O
s	pointer
++	O
;	O
while	O
(	O
(	O
p	pointer
=	O
strchr	function
(	O
s	pointer
,	O
(	O
int	O
)	O
(	O
'/'	O
)	O
)	O
)	O
&&	O
n	long
<	O
SWPATH_PARSE_CA	int
)	O
{	O
ca	pointer
[	O
n	long
]	O
=	O
s	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
n	long
++	O
;	O
}	O
if	O
(	O
n	long
>=	O
(	O
SWPATH_PARSE_CA	int
-	O
1	int
)	O
)	O
exit	function
(	O
87	int
)	O
;	O
ca	pointer
[	O
n	long
]	O
=	O
s	pointer
;	O
n	long
++	O
;	O
relative_n	int
=	O
n	long
;	O
if	O
(	O
!	O
relative_n	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_dump_string_s	O
(	O
swpath	pointer
,	O
""	pointer
)	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"EXIT swpath_parse_path"	pointer
)	O
;	O
if	O
(	O
swpath	pointer
->	O
errorM	int
)	O
return	O
-	O
1	int
;	O
return	O
check_error	function
(	O
swpath	pointer
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
relative_n	int
==	O
1	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"relative_n == 1"	pointer
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_parse_write_debug	function
(	O
dbuf	O
,	O
relative_n	int
,	O
ca	pointer
)	O
)	O
;	O
compy	int
=	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
0	int
]	O
,	O
SW_A_catalog	pointer
)	O
!=	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
0	int
,	O
"A"	pointer
)	O
;	O
if	O
(	O
swpath	pointer
->	O
max_rel_n_	int
>=	O
SWPATH_DEGEN_N	int
)	O
{	O
ret	int
++	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
0	int
]	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
else	O
{	O
compy	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_max_rel_n	function
(	O
swpath	pointer
,	O
relative_n	int
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
1	int
,	O
"B"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
relative_n	int
==	O
2	int
)	O
{	O
compy	int
=	O
2	int
;	O
SWPATH_E_DEBUG	O
(	O
"relative_n == 2"	pointer
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_parse_write_debug	function
(	O
dbuf	O
,	O
relative_n	int
,	O
ca	pointer
)	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
0	int
]	O
,	O
SW_A_catalog	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"In catalog"	pointer
)	O
;	O
set_max_rel_n	function
(	O
swpath	pointer
,	O
relative_n	int
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
1	int
,	O
"C"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
if	O
(	O
(	O
get_p_dfiles	function
(	O
swpath	pointer
)	O
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
get_p_dfiles	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
)	O
||	O
(	O
!	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
"INDEX"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"C::-<>-"	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_dfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
1	int
&&	O
strlen	function
(	O
swpath_get_product_control_dir	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
&&	O
!	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"C::-<>-.-<>-.-<>-"	pointer
)	O
;	O
swpath_set_is_minimal_layout	function
(	O
swpath	pointer
,	O
1	int
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"C::-<>-.-<>-.-<>-.-<>-.-<>-.-<>-."	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
;	O
swpath_set_is_minimal_layout	function
(	O
swpath	pointer
,	O
1	int
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
}	O
else	O
if	O
(	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
"INDEX"	pointer
)	O
!=	O
0	int
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
)	O
!=	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"C:-<>-.-<>-.-<>-.-<>-.-<>-.-<>-.-<>-."	pointer
)	O
;	O
ret	int
++	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
NULL	O
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
swpath_get_is_minimal_layout	function
(	O
swpath	pointer
)	O
)	O
{	O
compy	int
=	O
1	int
;	O
}	O
else	O
{	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
"INDEX"	pointer
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"C::-<>-.-<>-.-<>-.-<>-.-<>-.-<>-.-<>-.-<>-.-<>-."	pointer
)	O
;	O
compy	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
0	int
,	O
"D"	pointer
)	O
;	O
if	O
(	O
swpath	pointer
->	O
max_rel_n_	int
>=	O
SWPATH_DEGEN_N	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"relative_n other"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"Not in catalog"	pointer
)	O
;	O
ret	int
++	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
0	int
]	O
)	O
;	O
ret	int
++	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
compy	int
=	O
2	int
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
compy	int
=	O
0	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
relative_n	int
==	O
3	int
)	O
{	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_parse_write_debug	function
(	O
dbuf	O
,	O
relative_n	int
,	O
ca	pointer
)	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
0	int
]	O
,	O
SW_A_catalog	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
set_max_rel_n	function
(	O
swpath	pointer
,	O
relative_n	int
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
1	int
,	O
"E"	pointer
)	O
;	O
compy	int
=	O
n	long
;	O
SWPATH_E_DEBUG	O
(	O
"In catalog"	pointer
)	O
;	O
if	O
(	O
(	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
swpath_p_dfiles_	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"NOT In dfiles"	pointer
)	O
;	O
compy	int
=	O
2	int
;	O
ret	int
++	O
;	O
if	O
(	O
strcmp	function
(	O
swpath_get_product_control_dir	function
(	O
swpath	pointer
)	O
,	O
ca	pointer
[	O
1	int
]	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
NULL	O
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
NULL	O
)	O
;	O
}	O
pfiles_index	int
=	O
is_in_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
)	O
;	O
if	O
(	O
0	int
||	O
(	O
get_p_pfiles	function
(	O
swpath	pointer
)	O
==	O
NULL	O
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
1	int
&&	O
swpath	pointer
->	O
swpath_p_pfiles_	pointer
==	O
NULL	O
&&	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
pfiles_index	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"In pfiles"	pointer
)	O
;	O
compy	int
=	O
pfiles_index	int
;	O
if	O
(	O
compy	int
==	O
2	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
}	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
strlen	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
}	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"NOT In pfiles"	pointer
)	O
;	O
ret	int
++	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
compy	int
=	O
3	int
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Internal error: Tripped a"	pointer
" bug in swpath.c,"	pointer
" assumes pfiles = pfiles\n"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"In dfiles"	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_dfiles	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
compy	int
=	O
2	int
;	O
}	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
0	int
,	O
"F"	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
swpath	pointer
->	O
max_rel_n_	int
>=	O
SWPATH_DEGEN_N	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"Not in catalog"	pointer
)	O
;	O
ret	int
++	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
0	int
]	O
)	O
;	O
ret	int
++	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
compy	int
=	O
2	int
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
compy	int
=	O
0	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
relative_n	int
>	O
3	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_parse_write_debug	function
(	O
dbuf	O
,	O
relative_n	int
,	O
ca	pointer
)	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
0	int
]	O
,	O
SW_A_catalog	pointer
)	O
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"in catalog"	pointer
)	O
;	O
set_max_rel_n	function
(	O
swpath	pointer
,	O
relative_n	int
)	O
;	O
set_is_catalog	function
(	O
swpath	pointer
,	O
1	int
,	O
"G"	pointer
)	O
;	O
compy	int
=	O
n	long
;	O
if	O
(	O
strcmp	function
(	O
ca	pointer
[	O
1	int
]	O
,	O
swpath	pointer
->	O
dfiles_default	pointer
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"not in dfiles"	pointer
)	O
;	O
compy	int
=	O
2	int
;	O
ret	int
++	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
)	O
&&	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"not in pfiles"	pointer
)	O
;	O
ret	int
++	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
set_p_fileset_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
2	int
]	O
)	O
;	O
compy	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
(	O
get_p_pfiles	function
(	O
swpath	pointer
)	O
&&	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
get_p_pfiles	function
(	O
swpath	pointer
)	O
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
ca	pointer
[	O
2	int
]	O
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
==	O
0	int
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"In pfiles"	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
)	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
set_v_pfiles	function
(	O
swpath	pointer
,	O
swpath	pointer
->	O
pfiles_default	pointer
)	O
;	O
}	O
set_p_pfiles	function
(	O
swpath	pointer
,	O
strob_str	function
(	O
swpath	pointer
->	O
pfiles_	pointer
)	O
)	O
;	O
set_v_dfiles	function
(	O
swpath	pointer
,	O
""	pointer
)	O
;	O
compy	int
=	O
3	int
;	O
}	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
compy	int
=	O
2	int
;	O
}	O
}	O
else	O
{	O
set_is_catalog	function
(	O
swpath	pointer
,	O
0	int
,	O
"H"	pointer
)	O
;	O
if	O
(	O
swpath	pointer
->	O
max_rel_n_	int
>=	O
SWPATH_DEGEN_N	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"-<>-"	pointer
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"Not in catalog"	pointer
)	O
;	O
ret	int
++	O
;	O
swpath_set_product_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
0	int
]	O
)	O
;	O
ret	int
++	O
;	O
swpath_set_fileset_control_dir	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
1	int
]	O
)	O
;	O
compy	int
=	O
2	int
;	O
}	O
else	O
{	O
SWPATH_E_DEBUG	O
(	O
""	pointer
)	O
;	O
compy	int
=	O
0	int
;	O
}	O
}	O
}	O
if	O
(	O
swpath	pointer
->	O
control_path_nominal_depth_	int
==	O
0	int
&&	O
swpath	pointer
->	O
swpath_is_catalog_	int
==	O
0	int
)	O
{	O
SWPATH_E_DEBUG	O
(	O
"compy=0"	pointer
)	O
;	O
compy	int
=	O
0	int
;	O
}	O
SWPATH_E_DEBUG2	O
(	O
"FINAL compy=%d"	pointer
,	O
compy	int
)	O
;	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_parse_write_debug	function
(	O
dbuf	O
,	O
relative_n	int
,	O
ca	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
compy	int
;	O
i	int
<	O
n	long
-	O
1	int
;	O
i	int
++	O
)	O
*	O
(	O
ca	pointer
[	O
i	int
]	O
+	O
strlen	function
(	O
ca	pointer
[	O
i	int
]	O
)	O
)	O
=	O
'/'	O
;	O
if	O
(	O
ca	pointer
[	O
compy	int
]	O
)	O
{	O
SWPATH_E_DEBUG3	O
(	O
"set_pathname ca[%d] = %s"	pointer
,	O
compy	int
,	O
ca	pointer
[	O
compy	int
]	O
)	O
;	O
swpath_set_pathname	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
compy	int
]	O
)	O
;	O
}	O
if	O
(	O
ca	pointer
[	O
compy	int
]	O
)	O
{	O
SWPATH_E_DEBUG3	O
(	O
"set_filename ca[%d] = %s"	pointer
,	O
compy	int
,	O
ca	pointer
[	O
compy	int
]	O
)	O
;	O
swpath_set_filename	function
(	O
swpath	pointer
,	O
ca	pointer
[	O
compy	int
]	O
)	O
;	O
}	O
SWPATH_E_DEBUG2	O
(	O
"%s"	pointer
,	O
swpath_dump_string_s	O
(	O
swpath	pointer
,	O
""	pointer
)	O
)	O
;	O
SWPATH_E_DEBUG	O
(	O
"EXIT swpath_parse_path"	pointer
)	O
;	O
return	O
check_error	function
(	O
swpath	pointer
,	O
ret	int
)	O
;	O
}	O
void	O
swpath_shallow_fill_export	function
(	O
SWPATH_EX	struct
*	O
sx	pointer
,	O
SWPATH	struct
*	O
sp	pointer
)	O
{	O
sx	pointer
->	O
is_minimal_layoutM	int
=	O
swpath_get_is_minimal_layout	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
is_catalog	int
=	O
swpath_get_is_catalog	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
ctl_depth	int
=	O
sp	pointer
->	O
control_path_nominal_depth_	int
;	O
sx	pointer
->	O
pkgpathname	pointer
=	O
swpath_get_pkgpathname	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
prepath	pointer
=	O
swpath_get_prepath	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
dfiles	pointer
=	O
swpath_get_dfiles	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
pfiles	pointer
=	O
swpath_get_pfiles	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
product_control_dir	pointer
=	O
swpath_get_product_control_dir	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
fileset_control_dir	pointer
=	O
swpath_get_fileset_control_dir	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
pathname	pointer
=	O
swpath_get_pathname	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
basename	function
=	O
swpath_get_basename	function
(	O
sp	pointer
)	O
;	O
}	O
SWPATH_EX	struct
*	O
swpath_shallow_create_export	function
(	O
void	O
)	O
{	O
return	O
swpath_create_export	function
(	O
NULL	O
)	O
;	O
}	O
SWPATH_EX	struct
*	O
swpath_create_export	function
(	O
SWPATH	struct
*	O
sp	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
SWPATH_EX	struct
*	O
sx	pointer
=	O
(	O
SWPATH_EX	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWPATH_EX	struct
)	O
)	O
;	O
if	O
(	O
!	O
sx	pointer
)	O
return	O
sx	pointer
;	O
if	O
(	O
!	O
sp	pointer
)	O
{	O
sx	pointer
->	O
is_minimal_layoutM	int
=	O
0	int
;	O
sx	pointer
->	O
is_catalog	int
=	O
0	int
;	O
sx	pointer
->	O
ctl_depth	int
=	O
0	int
;	O
sx	pointer
->	O
pkgpathname	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
prepath	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
dfiles	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
pfiles	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
product_control_dir	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
fileset_control_dir	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
pathname	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
sx	pointer
->	O
basename	function
=	O
strdup	function
(	O
""	pointer
)	O
;	O
}	O
else	O
{	O
sx	pointer
->	O
is_minimal_layoutM	int
=	O
swpath_get_is_minimal_layout	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
is_catalog	int
=	O
swpath_get_is_catalog	function
(	O
sp	pointer
)	O
;	O
sx	pointer
->	O
ctl_depth	int
=	O
sp	pointer
->	O
control_path_nominal_depth_	int
;	O
sx	pointer
->	O
pkgpathname	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_pkgpathname	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
prepath	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_prepath	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
dfiles	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_dfiles	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
pfiles	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_pfiles	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
product_control_dir	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_product_control_dir	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
fileset_control_dir	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_fileset_control_dir	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
pathname	pointer
=	O
(	O
(	O
s	pointer
=	O
swpath_get_pathname	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sx	pointer
->	O
basename	function
=	O
(	O
(	O
s	pointer
=	O
swpath_get_basename	function
(	O
sp	pointer
)	O
)	O
?	O
strdup	function
(	O
s	pointer
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
return	O
sx	pointer
;	O
}	O
void	O
swpath_delete_export	function
(	O
SWPATH_EX	struct
*	O
sx	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
pkgpathname	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
prepath	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
dfiles	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
pfiles	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
product_control_dir	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
fileset_control_dir	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
pathname	pointer
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
s	pointer
=	O
sx	pointer
->	O
basename	function
)	O
)	O
free	function
(	O
s	pointer
)	O
;	O
free	function
(	O
sx	pointer
)	O
;	O
}	O
void	O
swpath_shallow_delete_export	function
(	O
SWPATH_EX	struct
*	O
sx	pointer
)	O
{	O
free	function
(	O
sx	pointer
)	O
;	O
}	O
char	O
*	O
swpath_ex_print	function
(	O
SWPATH_EX	struct
*	O
swpath	pointer
,	O
STROB	struct
*	O
buf	pointer
,	O
char	O
*	O
prefix	pointer
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s%p (SWPATH_EX*)\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
)	O
;	O
if	O
(	O
swpath	pointer
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->pkgpathname     = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
pkgpathname	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->is_minimal_layoutM = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
is_minimal_layoutM	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->is_catalog      = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
is_catalog	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->ctl_depth       = [%d]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
ctl_depth	int
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->prepath         = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
prepath	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->dfiles          = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
dfiles	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->pfiles          = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
pfiles	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->product_control_dir = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
product_control_dir	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->fileset_control_dir = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
fileset_control_dir	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->pathname            = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
pathname	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s%p->basename            = [%s]\n"	pointer
,	O
prefix	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
swpath	pointer
->	O
basename	function
)	O
;	O
}	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
