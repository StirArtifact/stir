static	O
int	O
bisquare	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
if	O
(	O
fabs	function
(	O
ri	double
)	O
<	O
1.0	int
)	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
(	O
1.0	int
-	O
ri	double
*	O
ri	double
)	O
*	O
(	O
1.0	int
-	O
ri	double
*	O
ri	double
)	O
)	O
;	O
else	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bisquare_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
if	O
(	O
fabs	function
(	O
ri	double
)	O
<	O
1.0	int
)	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
(	O
1.0	int
-	O
ri	double
*	O
ri	double
)	O
*	O
(	O
1.0	int
-	O
5.0	int
*	O
ri	double
*	O
ri	double
)	O
)	O
;	O
else	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
bisquare_type	struct
=	O
{	O
"bisquare"	pointer
,	O
&	O
bisquare	function
,	O
&	O
bisquare_dpsi	function
,	O
TUNING_BISQUARE	O
}	O
;	O
static	O
int	O
cauchy	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
1.0	int
/	O
(	O
1.0	int
+	O
ri	double
*	O
ri	double
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cauchy_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
double	O
rsq	double
=	O
ri	double
*	O
ri	double
;	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
(	O
1	int
-	O
rsq	double
)	O
/	O
(	O
1.0	int
+	O
rsq	double
)	O
/	O
(	O
1.0	int
+	O
rsq	double
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
cauchy_type	struct
=	O
{	O
"cauchy"	pointer
,	O
&	O
cauchy	function
,	O
&	O
cauchy_dpsi	function
,	O
TUNING_CAUCHY	O
}	O
;	O
static	O
int	O
fair	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
1.0	int
/	O
(	O
1.0	int
+	O
fabs	function
(	O
ri	double
)	O
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
fair_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
1.0	int
/	O
(	O
1.0	int
+	O
fabs	function
(	O
ri	double
)	O
)	O
/	O
(	O
1.0	int
+	O
fabs	function
(	O
ri	double
)	O
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
fair_type	struct
=	O
{	O
"fair"	pointer
,	O
&	O
fair	function
,	O
&	O
fair_dpsi	function
,	O
TUNING_FAIR	O
}	O
;	O
static	O
int	O
huber	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
absri	double
=	O
fabs	function
(	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
)	O
;	O
if	O
(	O
absri	double
<=	O
1.0	int
)	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
1.0	int
)	O
;	O
else	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
1.0	int
/	O
absri	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
huber_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
if	O
(	O
fabs	function
(	O
ri	double
)	O
<=	O
1.0	int
)	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
1.0	int
)	O
;	O
else	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
huber_type	struct
=	O
{	O
"huber"	pointer
,	O
&	O
huber	function
,	O
&	O
huber_dpsi	function
,	O
TUNING_HUBER	O
}	O
;	O
static	O
int	O
ols	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
gsl_vector_set_all	function
(	O
w	pointer
,	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
ols_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
gsl_vector_set_all	function
(	O
dpsi	pointer
,	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
ols_type	struct
=	O
{	O
"ols"	pointer
,	O
&	O
ols	function
,	O
&	O
ols_dpsi	function
,	O
TUNING_OLS	O
}	O
;	O
static	O
int	O
welsch	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
i	long
,	O
exp	function
(	O
-	O
ri	double
*	O
ri	double
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
welsch_dpsi	function
(	O
const	O
gsl_vector	struct
*	O
r	pointer
,	O
gsl_vector	struct
*	O
dpsi	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
n	int
=	O
r	pointer
->	O
size	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
ri	double
=	O
gsl_vector_get	function
(	O
r	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
dpsi	pointer
,	O
i	long
,	O
(	O
1.0	int
-	O
2.0	int
*	O
ri	double
*	O
ri	double
)	O
*	O
exp	function
(	O
-	O
ri	double
*	O
ri	double
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_robust_type	struct
welsch_type	struct
=	O
{	O
"welsch"	pointer
,	O
&	O
welsch	function
,	O
&	O
welsch_dpsi	function
,	O
TUNING_WELSCH	O
}	O
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_default	pointer
=	O
&	O
bisquare_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_bisquare	pointer
=	O
&	O
bisquare_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_cauchy	pointer
=	O
&	O
cauchy_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_fair	pointer
=	O
&	O
fair_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_huber	pointer
=	O
&	O
huber_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_ols	pointer
=	O
&	O
ols_type	struct
;	O
const	O
gsl_multifit_robust_type	struct
*	O
gsl_multifit_robust_welsch	pointer
=	O
&	O
welsch_type	struct
;	O
