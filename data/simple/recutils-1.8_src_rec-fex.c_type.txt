struct	O
rec_fex_elem_s	struct
{	O
char	O
*	O
str	pointer
;	O
char	O
*	O
field_name	pointer
;	O
char	O
*	O
rewrite_to	pointer
;	O
int	O
max	int
;	O
int	O
min	int
;	O
char	O
*	O
function_name	pointer
;	O
void	O
*	O
function_data	pointer
;	O
}	O
;	O
struct	O
rec_fex_s	struct
{	O
int	O
num_elems	int
;	O
char	O
*	O
str	pointer
;	O
rec_fex_elem_t	pointer
elems	array
[	O
REC_FEX_MAX_ELEMS	int
]	O
;	O
}	O
;	O
static	O
void	O
rec_fex_init	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
;	O
static	O
bool	bool
rec_fex_parse_str_simple	function
(	O
rec_fex_t	pointer
new	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
sep	pointer
)	O
;	O
static	O
bool	bool
rec_fex_parse_str_subscripts	function
(	O
rec_fex_t	pointer
new	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
;	O
static	O
bool	bool
rec_fex_parse_elem	function
(	O
rec_fex_elem_t	pointer
elem	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
;	O
rec_fex_t	pointer
rec_fex_new	function
(	O
const	O
char	O
*	O
str	pointer
,	O
enum	O
rec_fex_kind_e	enum
kind	enum
)	O
{	O
rec_fex_t	pointer
new	pointer
;	O
int	O
i	long
;	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
rec_fex_init	function
(	O
new	pointer
)	O
;	O
new	pointer
->	O
num_elems	int
=	O
0	int
;	O
new	pointer
->	O
str	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
REC_FEX_MAX_ELEMS	int
;	O
i	long
++	O
)	O
{	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
str	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
kind	enum
==	O
REC_FEX_SUBSCRIPTS	int
)	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_subscripts	function
(	O
new	pointer
,	O
str	pointer
)	O
)	O
{	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
kind	enum
==	O
REC_FEX_SIMPLE	int
)	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_simple	function
(	O
new	pointer
,	O
str	pointer
,	O
" \t\n"	pointer
)	O
)	O
{	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_simple	function
(	O
new	pointer
,	O
str	pointer
,	O
","	pointer
)	O
)	O
{	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
return	O
new	pointer
;	O
}	O
void	O
rec_fex_destroy	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
int	O
i	long
;	O
if	O
(	O
fex	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	function
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
rewrite_to	pointer
)	O
;	O
free	function
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
field_name	pointer
)	O
;	O
free	function
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
str	pointer
)	O
;	O
free	function
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
fex	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
fex	pointer
)	O
;	O
}	O
}	O
rec_fex_t	pointer
rec_fex_dup	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
rec_fex_t	pointer
copy	pointer
=	O
NULL	O
;	O
size_t	long
i	long
=	O
0	int
;	O
copy	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_s	struct
)	O
)	O
;	O
if	O
(	O
copy	pointer
)	O
{	O
rec_fex_init	function
(	O
copy	pointer
)	O
;	O
copy	pointer
->	O
num_elems	int
=	O
fex	pointer
->	O
num_elems	int
;	O
copy	pointer
->	O
str	pointer
=	O
strdup	function
(	O
fex	pointer
->	O
str	pointer
)	O
;	O
if	O
(	O
!	O
copy	pointer
->	O
str	pointer
)	O
{	O
rec_fex_destroy	function
(	O
copy	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
==	O
NULL	O
)	O
{	O
copy	pointer
->	O
elems	array
[	O
i	long
]	O
=	O
NULL	O
;	O
continue	O
;	O
}	O
copy	pointer
->	O
elems	array
[	O
i	long
]	O
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct
)	O
)	O
;	O
if	O
(	O
!	O
copy	pointer
->	O
elems	array
[	O
i	long
]	O
)	O
{	O
rec_fex_destroy	function
(	O
copy	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
copy	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
=	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
;	O
copy	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
=	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
str	pointer
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
field_name	pointer
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
rewrite_to	pointer
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
function_name	pointer
)	O
;	O
}	O
}	O
return	O
copy	pointer
;	O
}	O
bool	bool
rec_fex_check	function
(	O
const	O
char	O
*	O
str	pointer
,	O
enum	O
rec_fex_kind_e	enum
kind	enum
)	O
{	O
char	O
*	O
regexp_str	pointer
;	O
switch	O
(	O
kind	enum
)	O
{	O
case	O
REC_FEX_SIMPLE	int
:	O
{	O
regexp_str	pointer
=	O
"^"	pointer
REC_FNAME_LIST_RE	O
"$"	pointer
;	O
break	O
;	O
}	O
case	O
REC_FEX_CSV	int
:	O
{	O
regexp_str	pointer
=	O
"^"	pointer
REC_FNAME_LIST_CS_RE	O
"$"	pointer
;	O
break	O
;	O
}	O
case	O
REC_FEX_SUBSCRIPTS	int
:	O
{	O
regexp_str	pointer
=	O
"^"	pointer
REC_FNAME_LIST_SUB_RE	O
"$"	pointer
;	O
break	O
;	O
}	O
default	O
:	O
{	O
regexp_str	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
return	O
rec_match	function
(	O
str	pointer
,	O
regexp_str	pointer
)	O
;	O
}	O
size_t	long
rec_fex_size	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
return	O
fex	pointer
->	O
num_elems	int
;	O
}	O
rec_fex_elem_t	pointer
rec_fex_get	function
(	O
rec_fex_t	pointer
fex	pointer
,	O
size_t	long
position	long
)	O
{	O
if	O
(	O
(	O
position	long
<	O
0	int
)	O
||	O
(	O
position	long
>=	O
fex	pointer
->	O
num_elems	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
return	O
fex	pointer
->	O
elems	array
[	O
position	long
]	O
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_field_name	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
field_name	pointer
;	O
}	O
bool	bool
rec_fex_elem_set_field_name	function
(	O
rec_fex_elem_t	pointer
elem	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
elem	pointer
->	O
field_name	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
return	O
(	O
elem	pointer
->	O
field_name	pointer
!=	O
NULL	O
)	O
;	O
}	O
int	O
rec_fex_elem_min	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
min	int
;	O
}	O
int	O
rec_fex_elem_max	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
max	int
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_rewrite_to	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
rewrite_to	pointer
;	O
}	O
void	O
rec_fex_sort	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
bool	bool
done	bool
;	O
rec_fex_elem_t	pointer
aux	pointer
;	O
int	O
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
aux	pointer
=	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
;	O
j	long
=	O
i	long
-	O
1	int
;	O
done	bool
=	O
false	int
;	O
while	O
(	O
!	O
done	bool
)	O
{	O
if	O
(	O
(	O
fex	pointer
->	O
elems	array
[	O
j	long
]	O
->	O
min	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	pointer
->	O
elems	array
[	O
j	long
]	O
->	O
min	int
>	O
aux	pointer
->	O
min	int
)	O
)	O
{	O
fex	pointer
->	O
elems	array
[	O
j	long
+	O
1	int
]	O
=	O
fex	pointer
->	O
elems	array
[	O
j	long
]	O
;	O
j	long
=	O
j	long
-	O
1	int
;	O
if	O
(	O
j	long
<	O
0	int
)	O
{	O
done	bool
=	O
true	int
;	O
}	O
}	O
else	O
{	O
done	bool
=	O
true	int
;	O
}	O
}	O
fex	pointer
->	O
elems	array
[	O
j	long
+	O
1	int
]	O
=	O
aux	pointer
;	O
}	O
}	O
char	O
*	O
rec_fex_str	function
(	O
rec_fex_t	pointer
fex	pointer
,	O
enum	O
rec_fex_kind_e	enum
kind	enum
)	O
{	O
char	O
*	O
result	pointer
;	O
size_t	long
result_size	long
;	O
rec_buf_t	pointer
buf	pointer
;	O
size_t	long
i	long
;	O
char	O
*	O
tmp	pointer
;	O
result	pointer
=	O
NULL	O
;	O
buf	pointer
=	O
rec_buf_new	function
(	O
&	O
result	pointer
,	O
&	O
result_size	long
)	O
;	O
if	O
(	O
buf	pointer
)	O
{	O
char	O
*	O
field_str	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
if	O
(	O
kind	enum
==	O
REC_FEX_SIMPLE	int
)	O
{	O
rec_buf_putc	function
(	O
' '	O
,	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
rec_buf_putc	function
(	O
','	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
field_str	pointer
=	O
strdup	function
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
field_name	pointer
)	O
;	O
if	O
(	O
!	O
field_str	pointer
)	O
{	O
rec_buf_close	function
(	O
buf	pointer
)	O
;	O
free	function
(	O
result	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
rec_buf_puts	function
(	O
field_str	pointer
,	O
buf	pointer
)	O
;	O
free	function
(	O
field_str	pointer
)	O
;	O
if	O
(	O
kind	enum
==	O
REC_FEX_SUBSCRIPTS	int
)	O
{	O
if	O
(	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
!=	O
-	O
1	int
)	O
||	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
!=	O
-	O
1	int
)	O
)	O
{	O
rec_buf_putc	function
(	O
'['	O
,	O
buf	pointer
)	O
;	O
if	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
asprintf	function
(	O
&	O
tmp	pointer
,	O
"%d"	pointer
,	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
)	O
!=	O
-	O
1	int
)	O
{	O
rec_buf_puts	function
(	O
tmp	pointer
,	O
buf	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
asprintf	function
(	O
&	O
tmp	pointer
,	O
"-%d"	pointer
,	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
)	O
!=	O
-	O
1	int
)	O
{	O
rec_buf_puts	function
(	O
tmp	pointer
,	O
buf	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
rec_buf_putc	function
(	O
']'	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
}	O
}	O
rec_buf_close	function
(	O
buf	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
bool	bool
rec_fex_member_p	function
(	O
rec_fex_t	pointer
fex	pointer
,	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
bool	bool
res	bool
=	O
false	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	function
(	O
fname	pointer
,	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
field_name	pointer
)	O
&&	O
(	O
(	O
min	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
min	int
==	O
min	int
)	O
)	O
&&	O
(	O
(	O
max	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
max	int
==	O
max	int
)	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
rec_fex_elem_t	pointer
rec_fex_append	function
(	O
rec_fex_t	pointer
fex	pointer
,	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
rec_fex_elem_t	pointer
new_elem	pointer
;	O
if	O
(	O
fex	pointer
->	O
num_elems	int
>=	O
REC_FEX_MAX_ELEMS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"internal error: REC_FEX_MAX_ELEMS exceeded.  Please report this.\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct
)	O
)	O
;	O
if	O
(	O
new_elem	pointer
)	O
{	O
memset	function
(	O
new_elem	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
new_elem	pointer
)	O
)	O
;	O
new_elem	pointer
->	O
field_name	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
new_elem	pointer
->	O
field_name	pointer
)	O
{	O
free	function
(	O
new_elem	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	pointer
->	O
str	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
new_elem	pointer
->	O
str	pointer
)	O
{	O
free	function
(	O
new_elem	pointer
->	O
field_name	pointer
)	O
;	O
free	function
(	O
new_elem	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	pointer
->	O
min	int
=	O
min	int
;	O
new_elem	pointer
->	O
max	int
=	O
max	int
;	O
fex	pointer
->	O
elems	array
[	O
fex	pointer
->	O
num_elems	int
++	O
]	O
=	O
new_elem	pointer
;	O
}	O
return	O
new_elem	pointer
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_function_name	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
function_name	pointer
;	O
}	O
void	O
*	O
*	O
rec_fex_elem_function_data	function
(	O
rec_fex_elem_t	pointer
elem	pointer
)	O
{	O
return	O
elem	pointer
->	O
function_data	pointer
;	O
}	O
bool	bool
rec_fex_all_calls_p	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
bool	bool
result	pointer
=	O
true	int
;	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
fex	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
function_name	pointer
==	O
NULL	O
)	O
{	O
result	pointer
=	O
false	int
;	O
break	O
;	O
}	O
}	O
return	O
result	pointer
;	O
}	O
static	O
void	O
rec_fex_init	function
(	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
memset	function
(	O
fex	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_fex_s	struct
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_fex_parse_str_simple	function
(	O
rec_fex_t	pointer
new	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
sep	pointer
)	O
{	O
bool	bool
res	bool
;	O
rec_fex_elem_t	pointer
elem	pointer
;	O
char	O
*	O
fex_str	pointer
,	O
*	O
fex_str_orig	pointer
;	O
char	O
*	O
elem_str	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
str	pointer
)	O
{	O
return	O
false	int
;	O
}	O
fex_str	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
!	O
fex_str	pointer
)	O
{	O
return	O
false	int
;	O
}	O
fex_str_orig	pointer
=	O
fex_str	pointer
;	O
res	bool
=	O
true	int
;	O
elem_str	pointer
=	O
strsep	function
(	O
&	O
fex_str	pointer
,	O
sep	pointer
)	O
;	O
do	O
{	O
if	O
(	O
strlen	function
(	O
elem_str	pointer
)	O
>	O
0	int
)	O
{	O
if	O
(	O
(	O
elem	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct
)	O
)	O
)	O
)	O
{	O
const	O
char	O
*	O
p	pointer
=	O
elem_str	pointer
;	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FNAME_RE	pointer
,	O
&	O
(	O
elem	pointer
->	O
field_name	pointer
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
char	O
*	O
subname	pointer
=	O
NULL	O
;	O
p	pointer
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FNAME_RE	pointer
,	O
&	O
subname	pointer
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
free	function
(	O
elem	pointer
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
elem	pointer
->	O
field_name	pointer
=	O
rec_concat_strings	function
(	O
elem	pointer
->	O
field_name	pointer
,	O
"_"	pointer
,	O
subname	pointer
)	O
;	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
free	function
(	O
elem	pointer
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
elem	pointer
->	O
function_name	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
function_data	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
rewrite_to	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
str	pointer
=	O
strdup	function
(	O
elem_str	pointer
)	O
;	O
elem	pointer
->	O
min	int
=	O
-	O
1	int
;	O
elem	pointer
->	O
max	int
=	O
-	O
1	int
;	O
new	pointer
->	O
elems	array
[	O
new	pointer
->	O
num_elems	int
++	O
]	O
=	O
elem	pointer
;	O
}	O
else	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
(	O
elem_str	pointer
=	O
strsep	function
(	O
&	O
fex_str	pointer
,	O
sep	pointer
)	O
)	O
)	O
;	O
if	O
(	O
new	pointer
->	O
num_elems	int
==	O
0	int
)	O
{	O
res	bool
=	O
false	int
;	O
}	O
if	O
(	O
res	bool
)	O
{	O
new	pointer
->	O
str	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
new	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
rewrite_to	pointer
)	O
;	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
field_name	pointer
)	O
;	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
str	pointer
)	O
;	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
)	O
;	O
}	O
}	O
free	function
(	O
fex_str_orig	pointer
)	O
;	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_fex_parse_str_subscripts	function
(	O
rec_fex_t	pointer
new	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
bool	bool
res	bool
;	O
char	O
*	O
elem_str	pointer
;	O
char	O
*	O
fex_str	pointer
,	O
*	O
fex_str_orig	pointer
;	O
rec_fex_elem_t	pointer
elem	pointer
;	O
int	O
i	long
;	O
res	bool
=	O
true	int
;	O
fex_str	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
!	O
fex_str	pointer
)	O
{	O
return	O
false	int
;	O
}	O
fex_str_orig	pointer
=	O
fex_str	pointer
;	O
elem_str	pointer
=	O
strsep	function
(	O
&	O
fex_str	pointer
,	O
","	pointer
)	O
;	O
do	O
{	O
elem	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct
)	O
)	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
rec_fex_parse_elem	function
(	O
elem	pointer
,	O
elem_str	pointer
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
new	pointer
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
field_name	pointer
)	O
;	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
->	O
str	pointer
)	O
;	O
free	function
(	O
new	pointer
->	O
elems	array
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
elem	pointer
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
new	pointer
->	O
elems	array
[	O
new	pointer
->	O
num_elems	int
++	O
]	O
=	O
elem	pointer
;	O
}	O
while	O
(	O
(	O
elem_str	pointer
=	O
strsep	function
(	O
&	O
fex_str	pointer
,	O
","	pointer
)	O
)	O
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
new	pointer
->	O
str	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
}	O
free	function
(	O
fex_str_orig	pointer
)	O
;	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_fex_parse_elem	function
(	O
rec_fex_elem_t	pointer
elem	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	pointer
;	O
ret	bool
=	O
true	int
;	O
p	pointer
=	O
str	pointer
;	O
elem	pointer
->	O
field_name	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
function_name	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
function_data	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
str	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
rewrite_to	pointer
=	O
NULL	O
;	O
elem	pointer
->	O
min	int
=	O
-	O
1	int
;	O
elem	pointer
->	O
max	int
=	O
-	O
1	int
;	O
elem	pointer
->	O
str	pointer
=	O
strdup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rec_match	function
(	O
p	pointer
,	O
"^"	pointer
REC_FEX_CALL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FEX_FUNCTION_NAME	pointer
,	O
&	O
(	O
elem	pointer
->	O
function_name	pointer
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
return	O
false	int
;	O
}	O
p	pointer
++	O
;	O
}	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FNAME_RE	pointer
,	O
&	O
(	O
elem	pointer
->	O
field_name	pointer
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
char	O
*	O
subname	pointer
=	O
NULL	O
;	O
p	pointer
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FNAME_RE	pointer
,	O
&	O
subname	pointer
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
return	O
false	int
;	O
}	O
elem	pointer
->	O
field_name	pointer
=	O
rec_concat_strings	function
(	O
elem	pointer
->	O
field_name	pointer
,	O
"_"	pointer
,	O
subname	pointer
)	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'['	O
)	O
{	O
p	pointer
++	O
;	O
if	O
(	O
!	O
rec_parse_int	function
(	O
&	O
p	pointer
,	O
&	O
(	O
elem	pointer
->	O
min	int
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'-'	O
)	O
{	O
p	pointer
++	O
;	O
if	O
(	O
!	O
rec_parse_int	function
(	O
&	O
p	pointer
,	O
&	O
(	O
elem	pointer
->	O
max	int
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
']'	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
p	pointer
++	O
;	O
}	O
if	O
(	O
elem	pointer
->	O
function_name	pointer
)	O
{	O
p	pointer
++	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
p	pointer
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	function
(	O
&	O
p	pointer
,	O
"^"	pointer
REC_FNAME_RE	pointer
,	O
&	O
(	O
elem	pointer
->	O
rewrite_to	pointer
)	O
)	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
{	O
free	function
(	O
elem	pointer
->	O
str	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
field_name	pointer
)	O
;	O
free	function
(	O
elem	pointer
->	O
rewrite_to	pointer
)	O
;	O
return	O
false	int
;	O
}	O
return	O
ret	bool
;	O
}	O
