static	O
int	O
make_integer	function
(	O
unsigned	O
char	O
*	O
buf	pointer
)	O
{	O
register	O
int	O
lo	int
,	O
hi	int
;	O
lo	int
=	O
(	O
int	O
)	O
*	O
buf	pointer
++	O
;	O
hi	int
=	O
(	O
int	O
)	O
*	O
buf	pointer
;	O
if	O
(	O
hi	int
==	O
0377	int
)	O
{	O
if	O
(	O
lo	int
==	O
0377	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
lo	int
==	O
0376	int
)	O
return	O
-	O
2	int
;	O
}	O
return	O
lo	int
+	O
256	int
*	O
hi	int
;	O
}	O
struct	O
_pSLterminfo_Type	struct
{	O
unsigned	O
int	O
flags	int
;	O
unsigned	O
int	O
name_section_size	int
;	O
char	O
*	O
terminal_names	pointer
;	O
unsigned	O
int	O
boolean_section_size	int
;	O
unsigned	O
char	O
*	O
boolean_flags	pointer
;	O
unsigned	O
int	O
num_numbers	int
;	O
unsigned	O
char	O
*	O
numbers	pointer
;	O
unsigned	O
int	O
num_string_offsets	int
;	O
unsigned	O
char	O
*	O
string_offsets	pointer
;	O
unsigned	O
int	O
string_table_size	int
;	O
char	O
*	O
string_table	pointer
;	O
}	O
;	O
static	O
char	O
*	O
tcap_getstr	function
(	O
char	O
*	O
,	O
SLterminfo_Type	struct
*	O
)	O
;	O
static	O
int	O
tcap_getnum	function
(	O
char	O
*	O
,	O
SLterminfo_Type	struct
*	O
)	O
;	O
static	O
int	O
tcap_getflag	function
(	O
char	O
*	O
,	O
SLterminfo_Type	struct
*	O
)	O
;	O
static	O
int	O
tcap_getent	function
(	O
char	O
*	O
,	O
SLterminfo_Type	struct
*	O
)	O
;	O
static	O
FILE	struct
*	O
open_terminfo	function
(	O
char	O
*	O
file	pointer
,	O
SLterminfo_Type	struct
*	O
h	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
unsigned	O
char	O
buf	pointer
[	O
12	int
]	O
;	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
12	int
==	O
fread	function
(	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
1	int
,	O
12	int
,	O
fp	pointer
)	O
&&	O
(	O
MAGIC	int
==	O
make_integer	function
(	O
buf	pointer
)	O
)	O
)	O
)	O
{	O
h	pointer
->	O
name_section_size	int
=	O
make_integer	function
(	O
buf	pointer
+	O
2	int
)	O
;	O
h	pointer
->	O
boolean_section_size	int
=	O
make_integer	function
(	O
buf	pointer
+	O
4	int
)	O
;	O
h	pointer
->	O
num_numbers	int
=	O
make_integer	function
(	O
buf	pointer
+	O
6	int
)	O
;	O
h	pointer
->	O
num_string_offsets	int
=	O
make_integer	function
(	O
buf	pointer
+	O
8	int
)	O
;	O
h	pointer
->	O
string_table_size	int
=	O
make_integer	function
(	O
buf	pointer
+	O
10	int
)	O
;	O
}	O
else	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
}	O
return	O
fp	pointer
;	O
}	O
static	O
unsigned	O
char	O
*	O
read_terminfo_section	function
(	O
FILE	struct
*	O
fp	pointer
,	O
unsigned	O
int	O
size	long
)	O
{	O
char	O
*	O
s	pointer
;	O
if	O
(	O
NULL	O
==	O
(	O
s	pointer
=	O
(	O
char	O
*	O
)	O
SLmalloc	O
(	O
size	long
)	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
size	long
!=	O
fread	function
(	O
s	pointer
,	O
1	int
,	O
size	long
,	O
fp	pointer
)	O
)	O
{	O
SLfree	O
(	O
s	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
(	O
unsigned	O
char	O
*	O
)	O
s	pointer
;	O
}	O
static	O
char	O
*	O
read_terminal_names	function
(	O
FILE	struct
*	O
fp	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
return	O
t	long
->	O
terminal_names	pointer
=	O
(	O
char	O
*	O
)	O
read_terminfo_section	function
(	O
fp	pointer
,	O
t	long
->	O
name_section_size	int
)	O
;	O
}	O
static	O
unsigned	O
char	O
*	O
read_boolean_flags	function
(	O
FILE	struct
*	O
fp	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
unsigned	O
int	O
size	long
=	O
(	O
t	long
->	O
name_section_size	int
+	O
t	long
->	O
boolean_section_size	int
)	O
%	O
2	int
;	O
size	long
+=	O
t	long
->	O
boolean_section_size	int
;	O
return	O
t	long
->	O
boolean_flags	pointer
=	O
read_terminfo_section	function
(	O
fp	pointer
,	O
size	long
)	O
;	O
}	O
static	O
unsigned	O
char	O
*	O
read_numbers	function
(	O
FILE	struct
*	O
fp	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
return	O
t	long
->	O
numbers	pointer
=	O
read_terminfo_section	function
(	O
fp	pointer
,	O
2	int
*	O
t	long
->	O
num_numbers	int
)	O
;	O
}	O
static	O
unsigned	O
char	O
*	O
read_string_offsets	function
(	O
FILE	struct
*	O
fp	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
return	O
t	long
->	O
string_offsets	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
read_terminfo_section	function
(	O
fp	pointer
,	O
2	int
*	O
t	long
->	O
num_string_offsets	int
)	O
;	O
}	O
static	O
char	O
*	O
read_string_table	function
(	O
FILE	struct
*	O
fp	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
return	O
t	long
->	O
string_table	pointer
=	O
(	O
char	O
*	O
)	O
read_terminfo_section	function
(	O
fp	pointer
,	O
t	long
->	O
string_table_size	int
)	O
;	O
}	O
static	O
char	O
*	O
Terminfo_Dirs	array
[	O
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
"/usr/share/terminfo"	pointer
,	O
"/usr/lib/terminfo"	pointer
,	O
"/usr/share/lib/terminfo"	pointer
,	O
"/etc/terminfo"	pointer
,	O
"/usr/local/lib/terminfo"	pointer
,	O
""	pointer
}	O
;	O
SLterminfo_Type	struct
*	O
_pSLtt_tigetent	function
(	O
char	O
*	O
term	pointer
)	O
{	O
char	O
*	O
tidir	pointer
;	O
int	O
i	array
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
char	O
file	pointer
[	O
1024	int
]	O
;	O
static	O
char	O
home_ti	array
[	O
1024	int
]	O
;	O
char	O
*	O
home	pointer
;	O
SLterminfo_Type	struct
*	O
ti	pointer
;	O
if	O
(	O
(	O
term	pointer
==	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
_pSLsecure_issetugid	function
(	O
)	O
&&	O
(	O
(	O
term	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
||	O
(	O
NULL	O
!=	O
strchr	function
(	O
term	pointer
,	O
'/'	O
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
NULL	O
==	O
(	O
ti	pointer
=	O
(	O
SLterminfo_Type	struct
*	O
)	O
SLmalloc	O
(	O
sizeof	O
(	O
SLterminfo_Type	struct
)	O
)	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
0	int
==	O
tcap_getent	function
(	O
term	pointer
,	O
ti	pointer
)	O
)	O
return	O
ti	pointer
;	O
if	O
(	O
NULL	O
!=	O
(	O
home	pointer
=	O
_pSLsecure_getenv	function
(	O
"HOME"	pointer
)	O
)	O
)	O
{	O
size_t	long
len	int
=	O
strlen	function
(	O
home	pointer
)	O
;	O
if	O
(	O
len	int
>	O
sizeof	O
(	O
home_ti	array
)	O
-	O
sizeof	O
(	O
"/.terminfo"	pointer
)	O
)	O
len	int
=	O
sizeof	O
(	O
home_ti	array
)	O
-	O
sizeof	O
(	O
"/.terminfo"	pointer
)	O
;	O
memcpy	function
(	O
home_ti	array
,	O
home	pointer
,	O
len	int
)	O
;	O
memcpy	function
(	O
home_ti	array
+	O
len	int
,	O
"/.terminfo"	pointer
,	O
sizeof	O
(	O
"/.terminfo"	pointer
)	O
)	O
;	O
Terminfo_Dirs	array
[	O
0	int
]	O
=	O
home_ti	array
;	O
}	O
Terminfo_Dirs	array
[	O
1	int
]	O
=	O
_pSLsecure_getenv	function
(	O
"TERMINFO"	pointer
)	O
;	O
i	array
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
tidir	pointer
=	O
Terminfo_Dirs	array
[	O
i	array
]	O
;	O
if	O
(	O
tidir	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
*	O
tidir	pointer
==	O
0	int
)	O
break	O
;	O
if	O
(	O
sizeof	O
(	O
file	pointer
)	O
>=	O
strlen	function
(	O
tidir	pointer
)	O
+	O
4	int
+	O
strlen	function
(	O
term	pointer
)	O
)	O
{	O
sprintf	function
(	O
file	pointer
,	O
"%s/%c/%s"	pointer
,	O
tidir	pointer
,	O
*	O
term	pointer
,	O
term	pointer
)	O
;	O
if	O
(	O
NULL	O
!=	O
(	O
fp	pointer
=	O
open_terminfo	function
(	O
file	pointer
,	O
ti	pointer
)	O
)	O
)	O
break	O
;	O
}	O
}	O
i	array
++	O
;	O
}	O
if	O
(	O
fp	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
NULL	O
!=	O
read_terminal_names	function
(	O
fp	pointer
,	O
ti	pointer
)	O
)	O
{	O
if	O
(	O
NULL	O
!=	O
read_boolean_flags	function
(	O
fp	pointer
,	O
ti	pointer
)	O
)	O
{	O
if	O
(	O
NULL	O
!=	O
read_numbers	function
(	O
fp	pointer
,	O
ti	pointer
)	O
)	O
{	O
if	O
(	O
NULL	O
!=	O
read_string_offsets	function
(	O
fp	pointer
,	O
ti	pointer
)	O
)	O
{	O
if	O
(	O
NULL	O
!=	O
read_string_table	function
(	O
fp	pointer
,	O
ti	pointer
)	O
)	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
ti	pointer
->	O
flags	int
=	O
SLTERMINFO	int
;	O
return	O
ti	pointer
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
ti	pointer
->	O
string_offsets	pointer
)	O
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
ti	pointer
->	O
numbers	pointer
)	O
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
ti	pointer
->	O
boolean_flags	pointer
)	O
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
ti	pointer
->	O
terminal_names	pointer
)	O
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
ti	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
typedef	O
SLCONST	O
struct	O
{	O
char	O
name	pointer
[	O
3	int
]	O
;	O
int	O
offset	int
;	O
}	O
Tgetstr_Map_Type	struct
;	O
static	O
Tgetstr_Map_Type	struct
Tgetstr_Map	array
[	O
]	O
=	O
{	O
{	O
"!1"	pointer
,	O
212	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"!2"	pointer
,	O
213	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"!3"	pointer
,	O
214	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"#1"	pointer
,	O
198	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"#2"	pointer
,	O
199	int
UNTIC_COMMENT	O
(	O
"Key S-Home"	pointer
)	O
}	O
,	O
{	O
"#3"	pointer
,	O
200	int
UNTIC_COMMENT	O
(	O
"Key S-Insert"	pointer
)	O
}	O
,	O
{	O
"#4"	pointer
,	O
201	int
UNTIC_COMMENT	O
(	O
"Key S-Left"	pointer
)	O
}	O
,	O
{	O
"%0"	pointer
,	O
177	int
UNTIC_COMMENT	O
(	O
"redo key"	pointer
)	O
}	O
,	O
{	O
"%1"	pointer
,	O
168	int
UNTIC_COMMENT	O
(	O
"help key"	pointer
)	O
}	O
,	O
{	O
"%2"	pointer
,	O
169	int
UNTIC_COMMENT	O
(	O
"mark key"	pointer
)	O
}	O
,	O
{	O
"%3"	pointer
,	O
170	int
UNTIC_COMMENT	O
(	O
"message key"	pointer
)	O
}	O
,	O
{	O
"%4"	pointer
,	O
171	int
UNTIC_COMMENT	O
(	O
"move key"	pointer
)	O
}	O
,	O
{	O
"%5"	pointer
,	O
172	int
UNTIC_COMMENT	O
(	O
"next key"	pointer
)	O
}	O
,	O
{	O
"%6"	pointer
,	O
173	int
UNTIC_COMMENT	O
(	O
"open key"	pointer
)	O
}	O
,	O
{	O
"%7"	pointer
,	O
174	int
UNTIC_COMMENT	O
(	O
"options key"	pointer
)	O
}	O
,	O
{	O
"%8"	pointer
,	O
175	int
UNTIC_COMMENT	O
(	O
"previous key"	pointer
)	O
}	O
,	O
{	O
"%9"	pointer
,	O
176	int
UNTIC_COMMENT	O
(	O
"print key"	pointer
)	O
}	O
,	O
{	O
"%a"	pointer
,	O
202	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%b"	pointer
,	O
203	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%c"	pointer
,	O
204	int
UNTIC_COMMENT	O
(	O
"Key S-Next"	pointer
)	O
}	O
,	O
{	O
"%d"	pointer
,	O
205	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%e"	pointer
,	O
206	int
UNTIC_COMMENT	O
(	O
"Key S-Previous"	pointer
)	O
}	O
,	O
{	O
"%f"	pointer
,	O
207	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%g"	pointer
,	O
208	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%h"	pointer
,	O
209	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"%i"	pointer
,	O
210	int
UNTIC_COMMENT	O
(	O
"Key S-Right"	pointer
)	O
}	O
,	O
{	O
"%j"	pointer
,	O
211	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"&0"	pointer
,	O
187	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"&1"	pointer
,	O
178	int
UNTIC_COMMENT	O
(	O
"reference key"	pointer
)	O
}	O
,	O
{	O
"&2"	pointer
,	O
179	int
UNTIC_COMMENT	O
(	O
"refresh key"	pointer
)	O
}	O
,	O
{	O
"&3"	pointer
,	O
180	int
UNTIC_COMMENT	O
(	O
"replace key"	pointer
)	O
}	O
,	O
{	O
"&4"	pointer
,	O
181	int
UNTIC_COMMENT	O
(	O
"restart key"	pointer
)	O
}	O
,	O
{	O
"&5"	pointer
,	O
182	int
UNTIC_COMMENT	O
(	O
"resume key"	pointer
)	O
}	O
,	O
{	O
"&6"	pointer
,	O
183	int
UNTIC_COMMENT	O
(	O
"save key"	pointer
)	O
}	O
,	O
{	O
"&7"	pointer
,	O
184	int
UNTIC_COMMENT	O
(	O
"suspend key"	pointer
)	O
}	O
,	O
{	O
"&8"	pointer
,	O
185	int
UNTIC_COMMENT	O
(	O
"undo key"	pointer
)	O
}	O
,	O
{	O
"&9"	pointer
,	O
186	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*0"	pointer
,	O
197	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*1"	pointer
,	O
188	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*2"	pointer
,	O
189	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*3"	pointer
,	O
190	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*4"	pointer
,	O
191	int
UNTIC_COMMENT	O
(	O
"Key S-Delete"	pointer
)	O
}	O
,	O
{	O
"*5"	pointer
,	O
192	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*6"	pointer
,	O
193	int
UNTIC_COMMENT	O
(	O
"select key"	pointer
)	O
}	O
,	O
{	O
"*7"	pointer
,	O
194	int
UNTIC_COMMENT	O
(	O
"Key S-End"	pointer
)	O
}	O
,	O
{	O
"*8"	pointer
,	O
195	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"*9"	pointer
,	O
196	int
UNTIC_COMMENT	O
(	O
"shifted key"	pointer
)	O
}	O
,	O
{	O
"@0"	pointer
,	O
167	int
UNTIC_COMMENT	O
(	O
"find key"	pointer
)	O
}	O
,	O
{	O
"@1"	pointer
,	O
158	int
UNTIC_COMMENT	O
(	O
"begin key"	pointer
)	O
}	O
,	O
{	O
"@2"	pointer
,	O
159	int
UNTIC_COMMENT	O
(	O
"cancel key"	pointer
)	O
}	O
,	O
{	O
"@3"	pointer
,	O
160	int
UNTIC_COMMENT	O
(	O
"close key"	pointer
)	O
}	O
,	O
{	O
"@4"	pointer
,	O
161	int
UNTIC_COMMENT	O
(	O
"command key"	pointer
)	O
}	O
,	O
{	O
"@5"	pointer
,	O
162	int
UNTIC_COMMENT	O
(	O
"copy key"	pointer
)	O
}	O
,	O
{	O
"@6"	pointer
,	O
163	int
UNTIC_COMMENT	O
(	O
"create key"	pointer
)	O
}	O
,	O
{	O
"@7"	pointer
,	O
164	int
UNTIC_COMMENT	O
(	O
"Key End"	pointer
)	O
}	O
,	O
{	O
"@8"	pointer
,	O
165	int
UNTIC_COMMENT	O
(	O
"enter/send key"	pointer
)	O
}	O
,	O
{	O
"@9"	pointer
,	O
166	int
UNTIC_COMMENT	O
(	O
"exit key"	pointer
)	O
}	O
,	O
{	O
"AB"	pointer
,	O
360	int
UNTIC_COMMENT	O
(	O
"set ANSI color background"	pointer
)	O
}	O
,	O
{	O
"AF"	pointer
,	O
359	int
UNTIC_COMMENT	O
(	O
"set ANSI color foreground"	pointer
)	O
}	O
,	O
{	O
"AL"	pointer
,	O
110	int
UNTIC_COMMENT	O
(	O
"parm_insert_line"	pointer
)	O
}	O
,	O
{	O
"CC"	pointer
,	O
9	int
UNTIC_COMMENT	O
(	O
"terminal settable cmd character in prototype !?"	pointer
)	O
}	O
,	O
{	O
"CM"	pointer
,	O
15	int
UNTIC_COMMENT	O
(	O
"memory relative cursor addressing"	pointer
)	O
}	O
,	O
{	O
"CW"	pointer
,	O
277	int
UNTIC_COMMENT	O
(	O
"define a window #1 from #2, #3 to #4, #5"	pointer
)	O
}	O
,	O
{	O
"DC"	pointer
,	O
105	int
UNTIC_COMMENT	O
(	O
"delete #1 chars"	pointer
)	O
}	O
,	O
{	O
"DI"	pointer
,	O
280	int
UNTIC_COMMENT	O
(	O
"dial number #1"	pointer
)	O
}	O
,	O
{	O
"DK"	pointer
,	O
275	int
UNTIC_COMMENT	O
(	O
"display clock at (#1,#2)"	pointer
)	O
}	O
,	O
{	O
"DL"	pointer
,	O
106	int
UNTIC_COMMENT	O
(	O
"parm_delete_line"	pointer
)	O
}	O
,	O
{	O
"DO"	pointer
,	O
107	int
UNTIC_COMMENT	O
(	O
"down #1 lines"	pointer
)	O
}	O
,	O
{	O
"F1"	pointer
,	O
216	int
UNTIC_COMMENT	O
(	O
"key_f11"	pointer
)	O
}	O
,	O
{	O
"F2"	pointer
,	O
217	int
UNTIC_COMMENT	O
(	O
"key_f12"	pointer
)	O
}	O
,	O
{	O
"F3"	pointer
,	O
218	int
UNTIC_COMMENT	O
(	O
"key_f13"	pointer
)	O
}	O
,	O
{	O
"F4"	pointer
,	O
219	int
UNTIC_COMMENT	O
(	O
"key_f14"	pointer
)	O
}	O
,	O
{	O
"F5"	pointer
,	O
220	int
UNTIC_COMMENT	O
(	O
"key_f15"	pointer
)	O
}	O
,	O
{	O
"F6"	pointer
,	O
221	int
UNTIC_COMMENT	O
(	O
"key_f16"	pointer
)	O
}	O
,	O
{	O
"F7"	pointer
,	O
222	int
UNTIC_COMMENT	O
(	O
"key_f17"	pointer
)	O
}	O
,	O
{	O
"F8"	pointer
,	O
223	int
UNTIC_COMMENT	O
(	O
"key_f18"	pointer
)	O
}	O
,	O
{	O
"F9"	pointer
,	O
224	int
UNTIC_COMMENT	O
(	O
"key_f19"	pointer
)	O
}	O
,	O
{	O
"FA"	pointer
,	O
225	int
UNTIC_COMMENT	O
(	O
"key_f20"	pointer
)	O
}	O
,	O
{	O
"FB"	pointer
,	O
226	int
UNTIC_COMMENT	O
(	O
"F21 function key"	pointer
)	O
}	O
,	O
{	O
"FC"	pointer
,	O
227	int
UNTIC_COMMENT	O
(	O
"F22 function key"	pointer
)	O
}	O
,	O
{	O
"FD"	pointer
,	O
228	int
UNTIC_COMMENT	O
(	O
"F23 function key"	pointer
)	O
}	O
,	O
{	O
"FE"	pointer
,	O
229	int
UNTIC_COMMENT	O
(	O
"F24 function key"	pointer
)	O
}	O
,	O
{	O
"FF"	pointer
,	O
230	int
UNTIC_COMMENT	O
(	O
"F25 function key"	pointer
)	O
}	O
,	O
{	O
"FG"	pointer
,	O
231	int
UNTIC_COMMENT	O
(	O
"F26 function key"	pointer
)	O
}	O
,	O
{	O
"FH"	pointer
,	O
232	int
UNTIC_COMMENT	O
(	O
"F27 function key"	pointer
)	O
}	O
,	O
{	O
"FI"	pointer
,	O
233	int
UNTIC_COMMENT	O
(	O
"F28 function key"	pointer
)	O
}	O
,	O
{	O
"FJ"	pointer
,	O
234	int
UNTIC_COMMENT	O
(	O
"F29 function key"	pointer
)	O
}	O
,	O
{	O
"FK"	pointer
,	O
235	int
UNTIC_COMMENT	O
(	O
"F30 function key"	pointer
)	O
}	O
,	O
{	O
"FL"	pointer
,	O
236	int
UNTIC_COMMENT	O
(	O
"F31 function key"	pointer
)	O
}	O
,	O
{	O
"FM"	pointer
,	O
237	int
UNTIC_COMMENT	O
(	O
"F32 function key"	pointer
)	O
}	O
,	O
{	O
"FN"	pointer
,	O
238	int
UNTIC_COMMENT	O
(	O
"F33 function key"	pointer
)	O
}	O
,	O
{	O
"FO"	pointer
,	O
239	int
UNTIC_COMMENT	O
(	O
"F34 function key"	pointer
)	O
}	O
,	O
{	O
"FP"	pointer
,	O
240	int
UNTIC_COMMENT	O
(	O
"F35 function key"	pointer
)	O
}	O
,	O
{	O
"FQ"	pointer
,	O
241	int
UNTIC_COMMENT	O
(	O
"F36 function key"	pointer
)	O
}	O
,	O
{	O
"FR"	pointer
,	O
242	int
UNTIC_COMMENT	O
(	O
"F37 function key"	pointer
)	O
}	O
,	O
{	O
"FS"	pointer
,	O
243	int
UNTIC_COMMENT	O
(	O
"F38 function key"	pointer
)	O
}	O
,	O
{	O
"FT"	pointer
,	O
244	int
UNTIC_COMMENT	O
(	O
"F39 function key"	pointer
)	O
}	O
,	O
{	O
"FU"	pointer
,	O
245	int
UNTIC_COMMENT	O
(	O
"F40 function key"	pointer
)	O
}	O
,	O
{	O
"FV"	pointer
,	O
246	int
UNTIC_COMMENT	O
(	O
"F41 function key"	pointer
)	O
}	O
,	O
{	O
"FW"	pointer
,	O
247	int
UNTIC_COMMENT	O
(	O
"F42 function key"	pointer
)	O
}	O
,	O
{	O
"FX"	pointer
,	O
248	int
UNTIC_COMMENT	O
(	O
"F43 function key"	pointer
)	O
}	O
,	O
{	O
"FY"	pointer
,	O
249	int
UNTIC_COMMENT	O
(	O
"F44 function key"	pointer
)	O
}	O
,	O
{	O
"FZ"	pointer
,	O
250	int
UNTIC_COMMENT	O
(	O
"F45 function key"	pointer
)	O
}	O
,	O
{	O
"Fa"	pointer
,	O
251	int
UNTIC_COMMENT	O
(	O
"F46 function key"	pointer
)	O
}	O
,	O
{	O
"Fb"	pointer
,	O
252	int
UNTIC_COMMENT	O
(	O
"F47 function key"	pointer
)	O
}	O
,	O
{	O
"Fc"	pointer
,	O
253	int
UNTIC_COMMENT	O
(	O
"F48 function key"	pointer
)	O
}	O
,	O
{	O
"Fd"	pointer
,	O
254	int
UNTIC_COMMENT	O
(	O
"F49 function key"	pointer
)	O
}	O
,	O
{	O
"Fe"	pointer
,	O
255	int
UNTIC_COMMENT	O
(	O
"F50 function key"	pointer
)	O
}	O
,	O
{	O
"Ff"	pointer
,	O
256	int
UNTIC_COMMENT	O
(	O
"F51 function key"	pointer
)	O
}	O
,	O
{	O
"Fg"	pointer
,	O
257	int
UNTIC_COMMENT	O
(	O
"F52 function key"	pointer
)	O
}	O
,	O
{	O
"Fh"	pointer
,	O
258	int
UNTIC_COMMENT	O
(	O
"F53 function key"	pointer
)	O
}	O
,	O
{	O
"Fi"	pointer
,	O
259	int
UNTIC_COMMENT	O
(	O
"F54 function key"	pointer
)	O
}	O
,	O
{	O
"Fj"	pointer
,	O
260	int
UNTIC_COMMENT	O
(	O
"F55 function key"	pointer
)	O
}	O
,	O
{	O
"Fk"	pointer
,	O
261	int
UNTIC_COMMENT	O
(	O
"F56 function key"	pointer
)	O
}	O
,	O
{	O
"Fl"	pointer
,	O
262	int
UNTIC_COMMENT	O
(	O
"F57 function key"	pointer
)	O
}	O
,	O
{	O
"Fm"	pointer
,	O
263	int
UNTIC_COMMENT	O
(	O
"F58 function key"	pointer
)	O
}	O
,	O
{	O
"Fn"	pointer
,	O
264	int
UNTIC_COMMENT	O
(	O
"F59 function key"	pointer
)	O
}	O
,	O
{	O
"Fo"	pointer
,	O
265	int
UNTIC_COMMENT	O
(	O
"F60 function key"	pointer
)	O
}	O
,	O
{	O
"Fp"	pointer
,	O
266	int
UNTIC_COMMENT	O
(	O
"F61 function key"	pointer
)	O
}	O
,	O
{	O
"Fq"	pointer
,	O
267	int
UNTIC_COMMENT	O
(	O
"F62 function key"	pointer
)	O
}	O
,	O
{	O
"Fr"	pointer
,	O
268	int
UNTIC_COMMENT	O
(	O
"F63 function key"	pointer
)	O
}	O
,	O
{	O
"G1"	pointer
,	O
400	int
UNTIC_COMMENT	O
(	O
"single upper right"	pointer
)	O
}	O
,	O
{	O
"G2"	pointer
,	O
398	int
UNTIC_COMMENT	O
(	O
"single upper left"	pointer
)	O
}	O
,	O
{	O
"G3"	pointer
,	O
399	int
UNTIC_COMMENT	O
(	O
"single lower left"	pointer
)	O
}	O
,	O
{	O
"G4"	pointer
,	O
401	int
UNTIC_COMMENT	O
(	O
"single lower right"	pointer
)	O
}	O
,	O
{	O
"GC"	pointer
,	O
408	int
UNTIC_COMMENT	O
(	O
"single intersection"	pointer
)	O
}	O
,	O
{	O
"GD"	pointer
,	O
405	int
UNTIC_COMMENT	O
(	O
"tee pointing down"	pointer
)	O
}	O
,	O
{	O
"GH"	pointer
,	O
406	int
UNTIC_COMMENT	O
(	O
"single horizontal line"	pointer
)	O
}	O
,	O
{	O
"GL"	pointer
,	O
403	int
UNTIC_COMMENT	O
(	O
"tee pointing left"	pointer
)	O
}	O
,	O
{	O
"GR"	pointer
,	O
402	int
UNTIC_COMMENT	O
(	O
"tee pointing right"	pointer
)	O
}	O
,	O
{	O
"GU"	pointer
,	O
404	int
UNTIC_COMMENT	O
(	O
"tee pointing up"	pointer
)	O
}	O
,	O
{	O
"GV"	pointer
,	O
407	int
UNTIC_COMMENT	O
(	O
"single vertical line"	pointer
)	O
}	O
,	O
{	O
"Gm"	pointer
,	O
358	int
UNTIC_COMMENT	O
(	O
"Curses should get button events"	pointer
)	O
}	O
,	O
{	O
"HU"	pointer
,	O
279	int
UNTIC_COMMENT	O
(	O
"hang-up phone"	pointer
)	O
}	O
,	O
{	O
"IC"	pointer
,	O
108	int
UNTIC_COMMENT	O
(	O
"insert #1 chars"	pointer
)	O
}	O
,	O
{	O
"Ic"	pointer
,	O
299	int
UNTIC_COMMENT	O
(	O
"initialize color #1 to (#2,#3,#4)"	pointer
)	O
}	O
,	O
{	O
"Ip"	pointer
,	O
300	int
UNTIC_COMMENT	O
(	O
"Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7)"	pointer
)	O
}	O
,	O
{	O
"K1"	pointer
,	O
139	int
UNTIC_COMMENT	O
(	O
"upper left of keypad"	pointer
)	O
}	O
,	O
{	O
"K2"	pointer
,	O
141	int
UNTIC_COMMENT	O
(	O
"center of keypad"	pointer
)	O
}	O
,	O
{	O
"K3"	pointer
,	O
140	int
UNTIC_COMMENT	O
(	O
"upper right of keypad"	pointer
)	O
}	O
,	O
{	O
"K4"	pointer
,	O
142	int
UNTIC_COMMENT	O
(	O
"lower left of keypad"	pointer
)	O
}	O
,	O
{	O
"K5"	pointer
,	O
143	int
UNTIC_COMMENT	O
(	O
"lower right of keypad"	pointer
)	O
}	O
,	O
{	O
"Km"	pointer
,	O
355	int
UNTIC_COMMENT	O
(	O
"Mouse event has occurred"	pointer
)	O
}	O
,	O
{	O
"LE"	pointer
,	O
111	int
UNTIC_COMMENT	O
(	O
"move #1 chars to the left"	pointer
)	O
}	O
,	O
{	O
"LF"	pointer
,	O
157	int
UNTIC_COMMENT	O
(	O
"turn off soft labels"	pointer
)	O
}	O
,	O
{	O
"LO"	pointer
,	O
156	int
UNTIC_COMMENT	O
(	O
"turn on soft labels"	pointer
)	O
}	O
,	O
{	O
"Lf"	pointer
,	O
273	int
UNTIC_COMMENT	O
(	O
"label format"	pointer
)	O
}	O
,	O
{	O
"MC"	pointer
,	O
270	int
UNTIC_COMMENT	O
(	O
"clear right and left soft margins"	pointer
)	O
}	O
,	O
{	O
"ML"	pointer
,	O
271	int
UNTIC_COMMENT	O
(	O
"set left soft margin"	pointer
)	O
}	O
,	O
{	O
"ML"	pointer
,	O
368	int
UNTIC_COMMENT	O
(	O
"Set both left and right margins to #1, #2"	pointer
)	O
}	O
,	O
{	O
"MR"	pointer
,	O
272	int
UNTIC_COMMENT	O
(	O
"set right soft margin"	pointer
)	O
}	O
,	O
{	O
"MT"	pointer
,	O
369	int
UNTIC_COMMENT	O
(	O
"Sets both top and bottom margins to #1, #2"	pointer
)	O
}	O
,	O
{	O
"Mi"	pointer
,	O
356	int
UNTIC_COMMENT	O
(	O
"Mouse status information"	pointer
)	O
}	O
,	O
{	O
"PA"	pointer
,	O
285	int
UNTIC_COMMENT	O
(	O
"pause for 2-3 seconds"	pointer
)	O
}	O
,	O
{	O
"PU"	pointer
,	O
283	int
UNTIC_COMMENT	O
(	O
"select pulse dialling"	pointer
)	O
}	O
,	O
{	O
"QD"	pointer
,	O
281	int
UNTIC_COMMENT	O
(	O
"dial number #1 without checking"	pointer
)	O
}	O
,	O
{	O
"RA"	pointer
,	O
152	int
UNTIC_COMMENT	O
(	O
"turn off automatic margins"	pointer
)	O
}	O
,	O
{	O
"RC"	pointer
,	O
276	int
UNTIC_COMMENT	O
(	O
"remove clock"	pointer
)	O
}	O
,	O
{	O
"RF"	pointer
,	O
215	int
UNTIC_COMMENT	O
(	O
"send next input char (for ptys)"	pointer
)	O
}	O
,	O
{	O
"RI"	pointer
,	O
112	int
UNTIC_COMMENT	O
(	O
"parm_right_cursor"	pointer
)	O
}	O
,	O
{	O
"RQ"	pointer
,	O
357	int
UNTIC_COMMENT	O
(	O
"Request mouse position"	pointer
)	O
}	O
,	O
{	O
"RX"	pointer
,	O
150	int
UNTIC_COMMENT	O
(	O
"turn off xon/xoff handshaking"	pointer
)	O
}	O
,	O
{	O
"S1"	pointer
,	O
378	int
UNTIC_COMMENT	O
(	O
"Display PC character"	pointer
)	O
}	O
,	O
{	O
"S2"	pointer
,	O
379	int
UNTIC_COMMENT	O
(	O
"Enter PC character display mode"	pointer
)	O
}	O
,	O
{	O
"S3"	pointer
,	O
380	int
UNTIC_COMMENT	O
(	O
"Exit PC character display mode"	pointer
)	O
}	O
,	O
{	O
"S4"	pointer
,	O
381	int
UNTIC_COMMENT	O
(	O
"Enter PC scancode mode"	pointer
)	O
}	O
,	O
{	O
"S5"	pointer
,	O
382	int
UNTIC_COMMENT	O
(	O
"Exit PC scancode mode"	pointer
)	O
}	O
,	O
{	O
"S6"	pointer
,	O
383	int
UNTIC_COMMENT	O
(	O
"PC terminal options"	pointer
)	O
}	O
,	O
{	O
"S7"	pointer
,	O
384	int
UNTIC_COMMENT	O
(	O
"Escape for scancode emulation"	pointer
)	O
}	O
,	O
{	O
"S8"	pointer
,	O
385	int
UNTIC_COMMENT	O
(	O
"Alternate escape for scancode emulation"	pointer
)	O
}	O
,	O
{	O
"SA"	pointer
,	O
151	int
UNTIC_COMMENT	O
(	O
"turn on automatic margins"	pointer
)	O
}	O
,	O
{	O
"SC"	pointer
,	O
274	int
UNTIC_COMMENT	O
(	O
"set clock, #1 hrs #2 mins #3 secs"	pointer
)	O
}	O
,	O
{	O
"SF"	pointer
,	O
109	int
UNTIC_COMMENT	O
(	O
"scroll forward #1 lines"	pointer
)	O
}	O
,	O
{	O
"SR"	pointer
,	O
113	int
UNTIC_COMMENT	O
(	O
"scroll back #1 lines"	pointer
)	O
}	O
,	O
{	O
"SX"	pointer
,	O
149	int
UNTIC_COMMENT	O
(	O
"turn on xon/xoff handshaking"	pointer
)	O
}	O
,	O
{	O
"Sb"	pointer
,	O
303	int
UNTIC_COMMENT	O
(	O
"set background (color)"	pointer
)	O
}	O
,	O
{	O
"Sf"	pointer
,	O
302	int
UNTIC_COMMENT	O
(	O
"set foreground (color)"	pointer
)	O
}	O
,	O
{	O
"TO"	pointer
,	O
282	int
UNTIC_COMMENT	O
(	O
"select touch tone dialing"	pointer
)	O
}	O
,	O
{	O
"UP"	pointer
,	O
114	int
UNTIC_COMMENT	O
(	O
"up #1 lines"	pointer
)	O
}	O
,	O
{	O
"WA"	pointer
,	O
286	int
UNTIC_COMMENT	O
(	O
"wait for dial-tone"	pointer
)	O
}	O
,	O
{	O
"WG"	pointer
,	O
278	int
UNTIC_COMMENT	O
(	O
"go to window #1"	pointer
)	O
}	O
,	O
{	O
"XF"	pointer
,	O
154	int
UNTIC_COMMENT	O
(	O
"XOFF character"	pointer
)	O
}	O
,	O
{	O
"XN"	pointer
,	O
153	int
UNTIC_COMMENT	O
(	O
"XON character"	pointer
)	O
}	O
,	O
{	O
"Xh"	pointer
,	O
386	int
UNTIC_COMMENT	O
(	O
"Enter horizontal highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xl"	pointer
,	O
387	int
UNTIC_COMMENT	O
(	O
"Enter left highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xo"	pointer
,	O
388	int
UNTIC_COMMENT	O
(	O
"Enter low highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xr"	pointer
,	O
389	int
UNTIC_COMMENT	O
(	O
"Enter right highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xt"	pointer
,	O
390	int
UNTIC_COMMENT	O
(	O
"Enter top highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xv"	pointer
,	O
391	int
UNTIC_COMMENT	O
(	O
"Enter vertical highlight mode"	pointer
)	O
}	O
,	O
{	O
"Xy"	pointer
,	O
370	int
UNTIC_COMMENT	O
(	O
"Repeat bit image cell #1 #2 times"	pointer
)	O
}	O
,	O
{	O
"YZ"	pointer
,	O
377	int
UNTIC_COMMENT	O
(	O
"Set page length to #1 lines"	pointer
)	O
}	O
,	O
{	O
"Yv"	pointer
,	O
372	int
UNTIC_COMMENT	O
(	O
"Move to beginning of same row"	pointer
)	O
}	O
,	O
{	O
"Yw"	pointer
,	O
373	int
UNTIC_COMMENT	O
(	O
"Give name for color #1"	pointer
)	O
}	O
,	O
{	O
"Yx"	pointer
,	O
374	int
UNTIC_COMMENT	O
(	O
"Define rectangualar bit image region"	pointer
)	O
}	O
,	O
{	O
"Yy"	pointer
,	O
375	int
UNTIC_COMMENT	O
(	O
"End a bit-image region"	pointer
)	O
}	O
,	O
{	O
"Yz"	pointer
,	O
376	int
UNTIC_COMMENT	O
(	O
"Change to ribbon color #1"	pointer
)	O
}	O
,	O
{	O
"ZA"	pointer
,	O
304	int
UNTIC_COMMENT	O
(	O
"Change number of characters per inch"	pointer
)	O
}	O
,	O
{	O
"ZB"	pointer
,	O
305	int
UNTIC_COMMENT	O
(	O
"Change number of lines per inch"	pointer
)	O
}	O
,	O
{	O
"ZC"	pointer
,	O
306	int
UNTIC_COMMENT	O
(	O
"Change horizontal resolution"	pointer
)	O
}	O
,	O
{	O
"ZD"	pointer
,	O
307	int
UNTIC_COMMENT	O
(	O
"Change vertical resolution"	pointer
)	O
}	O
,	O
{	O
"ZE"	pointer
,	O
308	int
UNTIC_COMMENT	O
(	O
"Define a character"	pointer
)	O
}	O
,	O
{	O
"ZF"	pointer
,	O
309	int
UNTIC_COMMENT	O
(	O
"Enter double-wide mode"	pointer
)	O
}	O
,	O
{	O
"ZG"	pointer
,	O
310	int
UNTIC_COMMENT	O
(	O
"Enter draft-quality mode"	pointer
)	O
}	O
,	O
{	O
"ZH"	pointer
,	O
311	int
UNTIC_COMMENT	O
(	O
"Enter italic mode"	pointer
)	O
}	O
,	O
{	O
"ZI"	pointer
,	O
312	int
UNTIC_COMMENT	O
(	O
"Start leftward carriage motion"	pointer
)	O
}	O
,	O
{	O
"ZJ"	pointer
,	O
313	int
UNTIC_COMMENT	O
(	O
"Start micro-motion mode"	pointer
)	O
}	O
,	O
{	O
"ZK"	pointer
,	O
314	int
UNTIC_COMMENT	O
(	O
"Enter NLQ mode"	pointer
)	O
}	O
,	O
{	O
"ZL"	pointer
,	O
315	int
UNTIC_COMMENT	O
(	O
"Wnter normal-quality mode"	pointer
)	O
}	O
,	O
{	O
"ZM"	pointer
,	O
316	int
UNTIC_COMMENT	O
(	O
"Enter shadow-print mode"	pointer
)	O
}	O
,	O
{	O
"ZN"	pointer
,	O
317	int
UNTIC_COMMENT	O
(	O
"Enter subscript mode"	pointer
)	O
}	O
,	O
{	O
"ZO"	pointer
,	O
318	int
UNTIC_COMMENT	O
(	O
"Enter superscript mode"	pointer
)	O
}	O
,	O
{	O
"ZP"	pointer
,	O
319	int
UNTIC_COMMENT	O
(	O
"Start upward carriage motion"	pointer
)	O
}	O
,	O
{	O
"ZQ"	pointer
,	O
320	int
UNTIC_COMMENT	O
(	O
"End double-wide mode"	pointer
)	O
}	O
,	O
{	O
"ZR"	pointer
,	O
321	int
UNTIC_COMMENT	O
(	O
"End italic mode"	pointer
)	O
}	O
,	O
{	O
"ZS"	pointer
,	O
322	int
UNTIC_COMMENT	O
(	O
"End left-motion mode"	pointer
)	O
}	O
,	O
{	O
"ZT"	pointer
,	O
323	int
UNTIC_COMMENT	O
(	O
"End micro-motion mode"	pointer
)	O
}	O
,	O
{	O
"ZU"	pointer
,	O
324	int
UNTIC_COMMENT	O
(	O
"End shadow-print mode"	pointer
)	O
}	O
,	O
{	O
"ZV"	pointer
,	O
325	int
UNTIC_COMMENT	O
(	O
"End subscript mode"	pointer
)	O
}	O
,	O
{	O
"ZW"	pointer
,	O
326	int
UNTIC_COMMENT	O
(	O
"End superscript mode"	pointer
)	O
}	O
,	O
{	O
"ZX"	pointer
,	O
327	int
UNTIC_COMMENT	O
(	O
"End reverse character motion"	pointer
)	O
}	O
,	O
{	O
"ZY"	pointer
,	O
328	int
UNTIC_COMMENT	O
(	O
"Like column_address in micro mode"	pointer
)	O
}	O
,	O
{	O
"ZZ"	pointer
,	O
329	int
UNTIC_COMMENT	O
(	O
"Like cursor_down in micro mode"	pointer
)	O
}	O
,	O
{	O
"Za"	pointer
,	O
330	int
UNTIC_COMMENT	O
(	O
"Like cursor_left in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zb"	pointer
,	O
331	int
UNTIC_COMMENT	O
(	O
"Like cursor_right in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zc"	pointer
,	O
332	int
UNTIC_COMMENT	O
(	O
"Like row_address in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zd"	pointer
,	O
333	int
UNTIC_COMMENT	O
(	O
"Like cursor_up in micro mode"	pointer
)	O
}	O
,	O
{	O
"Ze"	pointer
,	O
334	int
UNTIC_COMMENT	O
(	O
"Match software bits to print-head pins"	pointer
)	O
}	O
,	O
{	O
"Zf"	pointer
,	O
335	int
UNTIC_COMMENT	O
(	O
"Like parm_down_cursor in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zg"	pointer
,	O
336	int
UNTIC_COMMENT	O
(	O
"Like parm_left_cursor in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zh"	pointer
,	O
337	int
UNTIC_COMMENT	O
(	O
"Like parm_right_cursor in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zi"	pointer
,	O
338	int
UNTIC_COMMENT	O
(	O
"Like parm_up_cursor in micro mode"	pointer
)	O
}	O
,	O
{	O
"Zj"	pointer
,	O
339	int
UNTIC_COMMENT	O
(	O
"Select character set"	pointer
)	O
}	O
,	O
{	O
"Zk"	pointer
,	O
340	int
UNTIC_COMMENT	O
(	O
"Set bottom margin at current line"	pointer
)	O
}	O
,	O
{	O
"Zl"	pointer
,	O
341	int
UNTIC_COMMENT	O
(	O
"Set bottom margin at line #1 or #2 lines from bottom"	pointer
)	O
}	O
,	O
{	O
"Zm"	pointer
,	O
342	int
UNTIC_COMMENT	O
(	O
"Set left (right) margin at column #1 (#2)"	pointer
)	O
}	O
,	O
{	O
"Zn"	pointer
,	O
343	int
UNTIC_COMMENT	O
(	O
"Set right margin at column #1"	pointer
)	O
}	O
,	O
{	O
"Zo"	pointer
,	O
344	int
UNTIC_COMMENT	O
(	O
"Set top margin at current line"	pointer
)	O
}	O
,	O
{	O
"Zp"	pointer
,	O
345	int
UNTIC_COMMENT	O
(	O
"Set top (bottom) margin at row #1 (#2)"	pointer
)	O
}	O
,	O
{	O
"Zq"	pointer
,	O
346	int
UNTIC_COMMENT	O
(	O
"Start printing bit image braphics"	pointer
)	O
}	O
,	O
{	O
"Zr"	pointer
,	O
347	int
UNTIC_COMMENT	O
(	O
"Start character set definition"	pointer
)	O
}	O
,	O
{	O
"Zs"	pointer
,	O
348	int
UNTIC_COMMENT	O
(	O
"Stop printing bit image graphics"	pointer
)	O
}	O
,	O
{	O
"Zt"	pointer
,	O
349	int
UNTIC_COMMENT	O
(	O
"End definition of character aet"	pointer
)	O
}	O
,	O
{	O
"Zu"	pointer
,	O
350	int
UNTIC_COMMENT	O
(	O
"List of subscriptable characters"	pointer
)	O
}	O
,	O
{	O
"Zv"	pointer
,	O
351	int
UNTIC_COMMENT	O
(	O
"List of superscriptable characters"	pointer
)	O
}	O
,	O
{	O
"Zw"	pointer
,	O
352	int
UNTIC_COMMENT	O
(	O
"Printing any of these chars causes CR"	pointer
)	O
}	O
,	O
{	O
"Zx"	pointer
,	O
353	int
UNTIC_COMMENT	O
(	O
"No motion for subsequent character"	pointer
)	O
}	O
,	O
{	O
"Zy"	pointer
,	O
354	int
UNTIC_COMMENT	O
(	O
"List of character set names"	pointer
)	O
}	O
,	O
{	O
"Zz"	pointer
,	O
371	int
UNTIC_COMMENT	O
(	O
"Move to next row of the bit image"	pointer
)	O
}	O
,	O
{	O
"ac"	pointer
,	O
146	int
UNTIC_COMMENT	O
(	O
"acs_chars"	pointer
)	O
}	O
,	O
{	O
"ae"	pointer
,	O
38	int
UNTIC_COMMENT	O
(	O
"exit_alt_charset_mode"	pointer
)	O
}	O
,	O
{	O
"al"	pointer
,	O
53	int
UNTIC_COMMENT	O
(	O
"insert line"	pointer
)	O
}	O
,	O
{	O
"as"	pointer
,	O
25	int
UNTIC_COMMENT	O
(	O
"enter_alt_charset_mode"	pointer
)	O
}	O
,	O
{	O
"bc"	pointer
,	O
395	int
UNTIC_COMMENT	O
(	O
"move left, if not ^H"	pointer
)	O
}	O
,	O
{	O
"bl"	pointer
,	O
1	int
UNTIC_COMMENT	O
(	O
"audible signal (bell)"	pointer
)	O
}	O
,	O
{	O
"bt"	pointer
,	O
0	int
UNTIC_COMMENT	O
(	O
"back tab"	pointer
)	O
}	O
,	O
{	O
"bx"	pointer
,	O
411	int
UNTIC_COMMENT	O
(	O
"box chars primary set"	pointer
)	O
}	O
,	O
{	O
"cb"	pointer
,	O
269	int
UNTIC_COMMENT	O
(	O
"Clear to beginning of line"	pointer
)	O
}	O
,	O
{	O
"cd"	pointer
,	O
7	int
UNTIC_COMMENT	O
(	O
"clear to end of screen"	pointer
)	O
}	O
,	O
{	O
"ce"	pointer
,	O
6	int
UNTIC_COMMENT	O
(	O
"clr_eol"	pointer
)	O
}	O
,	O
{	O
"ch"	pointer
,	O
8	int
UNTIC_COMMENT	O
(	O
"horizontal position #1, absolute"	pointer
)	O
}	O
,	O
{	O
"ci"	pointer
,	O
363	int
UNTIC_COMMENT	O
(	O
"Init sequence for multiple codesets"	pointer
)	O
}	O
,	O
{	O
"cl"	pointer
,	O
5	int
UNTIC_COMMENT	O
(	O
"clear screen and home cursor"	pointer
)	O
}	O
,	O
{	O
"cm"	pointer
,	O
10	int
UNTIC_COMMENT	O
(	O
"move to row #1 columns #2"	pointer
)	O
}	O
,	O
{	O
"cr"	pointer
,	O
2	int
UNTIC_COMMENT	O
(	O
"carriage return"	pointer
)	O
}	O
,	O
{	O
"cs"	pointer
,	O
3	int
UNTIC_COMMENT	O
(	O
"change region to line #1 to line #2"	pointer
)	O
}	O
,	O
{	O
"ct"	pointer
,	O
4	int
UNTIC_COMMENT	O
(	O
"clear all tab stops"	pointer
)	O
}	O
,	O
{	O
"cv"	pointer
,	O
127	int
UNTIC_COMMENT	O
(	O
"vertical position #1 absolute"	pointer
)	O
}	O
,	O
{	O
"dc"	pointer
,	O
21	int
UNTIC_COMMENT	O
(	O
"delete character"	pointer
)	O
}	O
,	O
{	O
"dl"	pointer
,	O
22	int
UNTIC_COMMENT	O
(	O
"delete line"	pointer
)	O
}	O
,	O
{	O
"dm"	pointer
,	O
29	int
UNTIC_COMMENT	O
(	O
"enter delete mode"	pointer
)	O
}	O
,	O
{	O
"do"	pointer
,	O
11	int
UNTIC_COMMENT	O
(	O
"down one line"	pointer
)	O
}	O
,	O
{	O
"ds"	pointer
,	O
23	int
UNTIC_COMMENT	O
(	O
"disable status line"	pointer
)	O
}	O
,	O
{	O
"dv"	pointer
,	O
362	int
UNTIC_COMMENT	O
(	O
"Indicate language/codeset support"	pointer
)	O
}	O
,	O
{	O
"eA"	pointer
,	O
155	int
UNTIC_COMMENT	O
(	O
"enable alternate char set"	pointer
)	O
}	O
,	O
{	O
"ec"	pointer
,	O
37	int
UNTIC_COMMENT	O
(	O
"erase #1 characters"	pointer
)	O
}	O
,	O
{	O
"ed"	pointer
,	O
41	int
UNTIC_COMMENT	O
(	O
"end delete mode"	pointer
)	O
}	O
,	O
{	O
"ei"	pointer
,	O
42	int
UNTIC_COMMENT	O
(	O
"exit insert mode"	pointer
)	O
}	O
,	O
{	O
"ff"	pointer
,	O
46	int
UNTIC_COMMENT	O
(	O
"hardcopy terminal page eject"	pointer
)	O
}	O
,	O
{	O
"fh"	pointer
,	O
284	int
UNTIC_COMMENT	O
(	O
"flash switch hook"	pointer
)	O
}	O
,	O
{	O
"fs"	pointer
,	O
47	int
UNTIC_COMMENT	O
(	O
"return from status line"	pointer
)	O
}	O
,	O
{	O
"hd"	pointer
,	O
24	int
UNTIC_COMMENT	O
(	O
"half a line down"	pointer
)	O
}	O
,	O
{	O
"ho"	pointer
,	O
12	int
UNTIC_COMMENT	O
(	O
"home cursor (if no cup)"	pointer
)	O
}	O
,	O
{	O
"hu"	pointer
,	O
137	int
UNTIC_COMMENT	O
(	O
"half a line up"	pointer
)	O
}	O
,	O
{	O
"i1"	pointer
,	O
48	int
UNTIC_COMMENT	O
(	O
"initialization string"	pointer
)	O
}	O
,	O
{	O
"i2"	pointer
,	O
392	int
UNTIC_COMMENT	O
(	O
"secondary initialization string"	pointer
)	O
}	O
,	O
{	O
"i3"	pointer
,	O
50	int
UNTIC_COMMENT	O
(	O
"initialization string"	pointer
)	O
}	O
,	O
{	O
"iP"	pointer
,	O
138	int
UNTIC_COMMENT	O
(	O
"path name of program for initialization"	pointer
)	O
}	O
,	O
{	O
"ic"	pointer
,	O
52	int
UNTIC_COMMENT	O
(	O
"insert character"	pointer
)	O
}	O
,	O
{	O
"if"	pointer
,	O
51	int
UNTIC_COMMENT	O
(	O
"name of initialization file"	pointer
)	O
}	O
,	O
{	O
"im"	pointer
,	O
31	int
UNTIC_COMMENT	O
(	O
"enter insert mode"	pointer
)	O
}	O
,	O
{	O
"ip"	pointer
,	O
54	int
UNTIC_COMMENT	O
(	O
"insert padding after inserted character"	pointer
)	O
}	O
,	O
{	O
"is"	pointer
,	O
49	int
UNTIC_COMMENT	O
(	O
"initialization string"	pointer
)	O
}	O
,	O
{	O
"k0"	pointer
,	O
65	int
UNTIC_COMMENT	O
(	O
"F0 function key"	pointer
)	O
}	O
,	O
{	O
"k1"	pointer
,	O
66	int
UNTIC_COMMENT	O
(	O
"F1 function key"	pointer
)	O
}	O
,	O
{	O
"k2"	pointer
,	O
68	int
UNTIC_COMMENT	O
(	O
"F2 function key"	pointer
)	O
}	O
,	O
{	O
"k3"	pointer
,	O
69	int
UNTIC_COMMENT	O
(	O
"F3 function key"	pointer
)	O
}	O
,	O
{	O
"k4"	pointer
,	O
70	int
UNTIC_COMMENT	O
(	O
"F4 function key"	pointer
)	O
}	O
,	O
{	O
"k5"	pointer
,	O
71	int
UNTIC_COMMENT	O
(	O
"F5 function key"	pointer
)	O
}	O
,	O
{	O
"k6"	pointer
,	O
72	int
UNTIC_COMMENT	O
(	O
"F6 function key"	pointer
)	O
}	O
,	O
{	O
"k7"	pointer
,	O
73	int
UNTIC_COMMENT	O
(	O
"F7 function key"	pointer
)	O
}	O
,	O
{	O
"k8"	pointer
,	O
74	int
UNTIC_COMMENT	O
(	O
"F8 fucntion key"	pointer
)	O
}	O
,	O
{	O
"k9"	pointer
,	O
75	int
UNTIC_COMMENT	O
(	O
"F9 function key"	pointer
)	O
}	O
,	O
{	O
"k;"	pointer
,	O
67	int
UNTIC_COMMENT	O
(	O
"F10 function key"	pointer
)	O
}	O
,	O
{	O
"kA"	pointer
,	O
78	int
UNTIC_COMMENT	O
(	O
"insert-line key"	pointer
)	O
}	O
,	O
{	O
"kB"	pointer
,	O
148	int
UNTIC_COMMENT	O
(	O
"back-tab key"	pointer
)	O
}	O
,	O
{	O
"kC"	pointer
,	O
57	int
UNTIC_COMMENT	O
(	O
"clear-screen or erase key"	pointer
)	O
}	O
,	O
{	O
"kD"	pointer
,	O
59	int
UNTIC_COMMENT	O
(	O
"delete-character key"	pointer
)	O
}	O
,	O
{	O
"kE"	pointer
,	O
63	int
UNTIC_COMMENT	O
(	O
"clear-to-end-of-line key"	pointer
)	O
}	O
,	O
{	O
"kF"	pointer
,	O
84	int
UNTIC_COMMENT	O
(	O
"scroll-forward key"	pointer
)	O
}	O
,	O
{	O
"kH"	pointer
,	O
80	int
UNTIC_COMMENT	O
(	O
"last-line key"	pointer
)	O
}	O
,	O
{	O
"kI"	pointer
,	O
77	int
UNTIC_COMMENT	O
(	O
"insert-character key"	pointer
)	O
}	O
,	O
{	O
"kL"	pointer
,	O
60	int
UNTIC_COMMENT	O
(	O
"delete-line key"	pointer
)	O
}	O
,	O
{	O
"kM"	pointer
,	O
62	int
UNTIC_COMMENT	O
(	O
"sent by rmir or smir in insert mode"	pointer
)	O
}	O
,	O
{	O
"kN"	pointer
,	O
81	int
UNTIC_COMMENT	O
(	O
"next-page key"	pointer
)	O
}	O
,	O
{	O
"kP"	pointer
,	O
82	int
UNTIC_COMMENT	O
(	O
"prev-page key"	pointer
)	O
}	O
,	O
{	O
"kR"	pointer
,	O
85	int
UNTIC_COMMENT	O
(	O
"scroll-backward key"	pointer
)	O
}	O
,	O
{	O
"kS"	pointer
,	O
64	int
UNTIC_COMMENT	O
(	O
"clear-to-end-of-screen key"	pointer
)	O
}	O
,	O
{	O
"kT"	pointer
,	O
86	int
UNTIC_COMMENT	O
(	O
"set-tab key"	pointer
)	O
}	O
,	O
{	O
"ka"	pointer
,	O
56	int
UNTIC_COMMENT	O
(	O
"clear-all-tabs key"	pointer
)	O
}	O
,	O
{	O
"kb"	pointer
,	O
55	int
UNTIC_COMMENT	O
(	O
"backspace key"	pointer
)	O
}	O
,	O
{	O
"kd"	pointer
,	O
61	int
UNTIC_COMMENT	O
(	O
"down-arrow key"	pointer
)	O
}	O
,	O
{	O
"ke"	pointer
,	O
88	int
UNTIC_COMMENT	O
(	O
"leave 'keyboard_transmit' mode"	pointer
)	O
}	O
,	O
{	O
"kh"	pointer
,	O
76	int
UNTIC_COMMENT	O
(	O
"home key"	pointer
)	O
}	O
,	O
{	O
"kl"	pointer
,	O
79	int
UNTIC_COMMENT	O
(	O
"left-arrow key"	pointer
)	O
}	O
,	O
{	O
"ko"	pointer
,	O
396	int
UNTIC_COMMENT	O
(	O
"list of self-mapped keycaps"	pointer
)	O
}	O
,	O
{	O
"kr"	pointer
,	O
83	int
UNTIC_COMMENT	O
(	O
"right-arrow key"	pointer
)	O
}	O
,	O
{	O
"ks"	pointer
,	O
89	int
UNTIC_COMMENT	O
(	O
"enter 'keyboard_transmit' mode"	pointer
)	O
}	O
,	O
{	O
"kt"	pointer
,	O
58	int
UNTIC_COMMENT	O
(	O
"clear-tab key"	pointer
)	O
}	O
,	O
{	O
"ku"	pointer
,	O
87	int
UNTIC_COMMENT	O
(	O
"up-arrow key"	pointer
)	O
}	O
,	O
{	O
"l0"	pointer
,	O
90	int
UNTIC_COMMENT	O
(	O
"label on function key f0 if not f0"	pointer
)	O
}	O
,	O
{	O
"l1"	pointer
,	O
91	int
UNTIC_COMMENT	O
(	O
"label on function key f1 if not f1"	pointer
)	O
}	O
,	O
{	O
"l2"	pointer
,	O
93	int
UNTIC_COMMENT	O
(	O
"label on function key f2 if not f2"	pointer
)	O
}	O
,	O
{	O
"l3"	pointer
,	O
94	int
UNTIC_COMMENT	O
(	O
"label on function key f3 if not f3"	pointer
)	O
}	O
,	O
{	O
"l4"	pointer
,	O
95	int
UNTIC_COMMENT	O
(	O
"label on function key f4 if not f4"	pointer
)	O
}	O
,	O
{	O
"l5"	pointer
,	O
96	int
UNTIC_COMMENT	O
(	O
"lable on function key f5 if not f5"	pointer
)	O
}	O
,	O
{	O
"l6"	pointer
,	O
97	int
UNTIC_COMMENT	O
(	O
"label on function key f6 if not f6"	pointer
)	O
}	O
,	O
{	O
"l7"	pointer
,	O
98	int
UNTIC_COMMENT	O
(	O
"label on function key f7 if not f7"	pointer
)	O
}	O
,	O
{	O
"l8"	pointer
,	O
99	int
UNTIC_COMMENT	O
(	O
"label on function key f8 if not f8"	pointer
)	O
}	O
,	O
{	O
"l9"	pointer
,	O
100	int
UNTIC_COMMENT	O
(	O
"label on function key f9 if not f9"	pointer
)	O
}	O
,	O
{	O
"la"	pointer
,	O
92	int
UNTIC_COMMENT	O
(	O
"label on function key f10 if not f10"	pointer
)	O
}	O
,	O
{	O
"le"	pointer
,	O
14	int
UNTIC_COMMENT	O
(	O
"move left one space"	pointer
)	O
}	O
,	O
{	O
"ll"	pointer
,	O
18	int
UNTIC_COMMENT	O
(	O
"last line, first column (if no cup)"	pointer
)	O
}	O
,	O
{	O
"ma"	pointer
,	O
397	int
UNTIC_COMMENT	O
(	O
"map arrow keys rogue(1) motion keys"	pointer
)	O
}	O
,	O
{	O
"mb"	pointer
,	O
26	int
UNTIC_COMMENT	O
(	O
"turn on blinking"	pointer
)	O
}	O
,	O
{	O
"md"	pointer
,	O
27	int
UNTIC_COMMENT	O
(	O
"turn on bold (extra bright) mode"	pointer
)	O
}	O
,	O
{	O
"me"	pointer
,	O
39	int
UNTIC_COMMENT	O
(	O
"turn off all attributes"	pointer
)	O
}	O
,	O
{	O
"mh"	pointer
,	O
30	int
UNTIC_COMMENT	O
(	O
"turn on half-bright mode"	pointer
)	O
}	O
,	O
{	O
"mk"	pointer
,	O
32	int
UNTIC_COMMENT	O
(	O
"turn on blank mode (characters invisible)"	pointer
)	O
}	O
,	O
{	O
"ml"	pointer
,	O
409	int
UNTIC_COMMENT	O
(	O
"memory lock above"	pointer
)	O
}	O
,	O
{	O
"mm"	pointer
,	O
102	int
UNTIC_COMMENT	O
(	O
"turn on meta mode (8th-bit on)"	pointer
)	O
}	O
,	O
{	O
"mo"	pointer
,	O
101	int
UNTIC_COMMENT	O
(	O
"turn off meta mode"	pointer
)	O
}	O
,	O
{	O
"mp"	pointer
,	O
33	int
UNTIC_COMMENT	O
(	O
"turn on protected mode"	pointer
)	O
}	O
,	O
{	O
"mr"	pointer
,	O
34	int
UNTIC_COMMENT	O
(	O
"turn on reverse video mode"	pointer
)	O
}	O
,	O
{	O
"mu"	pointer
,	O
410	int
UNTIC_COMMENT	O
(	O
"memory unlock"	pointer
)	O
}	O
,	O
{	O
"nd"	pointer
,	O
17	int
UNTIC_COMMENT	O
(	O
"move right one space"	pointer
)	O
}	O
,	O
{	O
"nl"	pointer
,	O
394	int
UNTIC_COMMENT	O
(	O
"use to move down"	pointer
)	O
}	O
,	O
{	O
"nw"	pointer
,	O
103	int
UNTIC_COMMENT	O
(	O
"newline (behave like cr followed by lf)"	pointer
)	O
}	O
,	O
{	O
"oc"	pointer
,	O
298	int
UNTIC_COMMENT	O
(	O
"Set all color pairs to the original ones"	pointer
)	O
}	O
,	O
{	O
"op"	pointer
,	O
297	int
UNTIC_COMMENT	O
(	O
"Set default pair to its original value"	pointer
)	O
}	O
,	O
{	O
"pO"	pointer
,	O
144	int
UNTIC_COMMENT	O
(	O
"turn on printer for #1 bytes"	pointer
)	O
}	O
,	O
{	O
"pc"	pointer
,	O
104	int
UNTIC_COMMENT	O
(	O
"padding char (instead of null)"	pointer
)	O
}	O
,	O
{	O
"pf"	pointer
,	O
119	int
UNTIC_COMMENT	O
(	O
"turn off printer"	pointer
)	O
}	O
,	O
{	O
"pk"	pointer
,	O
115	int
UNTIC_COMMENT	O
(	O
"program function key #1 to type string #2"	pointer
)	O
}	O
,	O
{	O
"pl"	pointer
,	O
116	int
UNTIC_COMMENT	O
(	O
"program function key #1 to execute string #2"	pointer
)	O
}	O
,	O
{	O
"pn"	pointer
,	O
147	int
UNTIC_COMMENT	O
(	O
"program label #1 to show string #2"	pointer
)	O
}	O
,	O
{	O
"po"	pointer
,	O
120	int
UNTIC_COMMENT	O
(	O
"turn on printer"	pointer
)	O
}	O
,	O
{	O
"ps"	pointer
,	O
118	int
UNTIC_COMMENT	O
(	O
"print contents of screen"	pointer
)	O
}	O
,	O
{	O
"px"	pointer
,	O
117	int
UNTIC_COMMENT	O
(	O
"program function key #1 to transmit string #2"	pointer
)	O
}	O
,	O
{	O
"r1"	pointer
,	O
122	int
UNTIC_COMMENT	O
(	O
"reset string"	pointer
)	O
}	O
,	O
{	O
"r2"	pointer
,	O
123	int
UNTIC_COMMENT	O
(	O
"reset string"	pointer
)	O
}	O
,	O
{	O
"r3"	pointer
,	O
124	int
UNTIC_COMMENT	O
(	O
"reset string"	pointer
)	O
}	O
,	O
{	O
"rP"	pointer
,	O
145	int
UNTIC_COMMENT	O
(	O
"like ip but when in insert mode"	pointer
)	O
}	O
,	O
{	O
"rc"	pointer
,	O
126	int
UNTIC_COMMENT	O
(	O
"restore cursor to last position of sc"	pointer
)	O
}	O
,	O
{	O
"rf"	pointer
,	O
125	int
UNTIC_COMMENT	O
(	O
"name of reset file"	pointer
)	O
}	O
,	O
{	O
"rp"	pointer
,	O
121	int
UNTIC_COMMENT	O
(	O
"repeat char #1 #2 times"	pointer
)	O
}	O
,	O
{	O
"rs"	pointer
,	O
393	int
UNTIC_COMMENT	O
(	O
"terminal reset string"	pointer
)	O
}	O
,	O
{	O
"s0"	pointer
,	O
364	int
UNTIC_COMMENT	O
(	O
"Shift to code set 0 (EUC set 0, ASCII)"	pointer
)	O
}	O
,	O
{	O
"s1"	pointer
,	O
365	int
UNTIC_COMMENT	O
(	O
"Shift to code set 1"	pointer
)	O
}	O
,	O
{	O
"s2"	pointer
,	O
366	int
UNTIC_COMMENT	O
(	O
"Shift to code set 2"	pointer
)	O
}	O
,	O
{	O
"s3"	pointer
,	O
367	int
UNTIC_COMMENT	O
(	O
"Shift to code set 3"	pointer
)	O
}	O
,	O
{	O
"sa"	pointer
,	O
131	int
UNTIC_COMMENT	O
(	O
"define video attributes #1-#9 (PG9)"	pointer
)	O
}	O
,	O
{	O
"sc"	pointer
,	O
128	int
UNTIC_COMMENT	O
(	O
"save current cursor position"	pointer
)	O
}	O
,	O
{	O
"se"	pointer
,	O
43	int
UNTIC_COMMENT	O
(	O
"exit standout mode"	pointer
)	O
}	O
,	O
{	O
"sf"	pointer
,	O
129	int
UNTIC_COMMENT	O
(	O
"scroll text up"	pointer
)	O
}	O
,	O
{	O
"so"	pointer
,	O
35	int
UNTIC_COMMENT	O
(	O
"begin standout mode"	pointer
)	O
}	O
,	O
{	O
"sp"	pointer
,	O
301	int
UNTIC_COMMENT	O
(	O
"Set current color pair to #1"	pointer
)	O
}	O
,	O
{	O
"sr"	pointer
,	O
130	int
UNTIC_COMMENT	O
(	O
"scroll text down"	pointer
)	O
}	O
,	O
{	O
"st"	pointer
,	O
132	int
UNTIC_COMMENT	O
(	O
"set a tab in every row, current columns"	pointer
)	O
}	O
,	O
{	O
"ta"	pointer
,	O
134	int
UNTIC_COMMENT	O
(	O
"tab to next 8-space hardware tab stop"	pointer
)	O
}	O
,	O
{	O
"te"	pointer
,	O
40	int
UNTIC_COMMENT	O
(	O
"strings to end programs using cup"	pointer
)	O
}	O
,	O
{	O
"ti"	pointer
,	O
28	int
UNTIC_COMMENT	O
(	O
"string to start programs using cup"	pointer
)	O
}	O
,	O
{	O
"ts"	pointer
,	O
135	int
UNTIC_COMMENT	O
(	O
"move to status line"	pointer
)	O
}	O
,	O
{	O
"u0"	pointer
,	O
287	int
UNTIC_COMMENT	O
(	O
"User string #0"	pointer
)	O
}	O
,	O
{	O
"u1"	pointer
,	O
288	int
UNTIC_COMMENT	O
(	O
"User string #1"	pointer
)	O
}	O
,	O
{	O
"u2"	pointer
,	O
289	int
UNTIC_COMMENT	O
(	O
"User string #2"	pointer
)	O
}	O
,	O
{	O
"u3"	pointer
,	O
290	int
UNTIC_COMMENT	O
(	O
"User string #3"	pointer
)	O
}	O
,	O
{	O
"u4"	pointer
,	O
291	int
UNTIC_COMMENT	O
(	O
"User string #4"	pointer
)	O
}	O
,	O
{	O
"u5"	pointer
,	O
292	int
UNTIC_COMMENT	O
(	O
"User string #5"	pointer
)	O
}	O
,	O
{	O
"u6"	pointer
,	O
293	int
UNTIC_COMMENT	O
(	O
"User string #6"	pointer
)	O
}	O
,	O
{	O
"u7"	pointer
,	O
294	int
UNTIC_COMMENT	O
(	O
"User string #7"	pointer
)	O
}	O
,	O
{	O
"u8"	pointer
,	O
295	int
UNTIC_COMMENT	O
(	O
"User string #8"	pointer
)	O
}	O
,	O
{	O
"u9"	pointer
,	O
296	int
UNTIC_COMMENT	O
(	O
"User string #9"	pointer
)	O
}	O
,	O
{	O
"uc"	pointer
,	O
136	int
UNTIC_COMMENT	O
(	O
"underline char and move past it"	pointer
)	O
}	O
,	O
{	O
"ue"	pointer
,	O
44	int
UNTIC_COMMENT	O
(	O
"exit underline mode"	pointer
)	O
}	O
,	O
{	O
"up"	pointer
,	O
19	int
UNTIC_COMMENT	O
(	O
"up one line"	pointer
)	O
}	O
,	O
{	O
"us"	pointer
,	O
36	int
UNTIC_COMMENT	O
(	O
"begin underline mode"	pointer
)	O
}	O
,	O
{	O
"vb"	pointer
,	O
45	int
UNTIC_COMMENT	O
(	O
"visible bell (may not move cursor)"	pointer
)	O
}	O
,	O
{	O
"ve"	pointer
,	O
16	int
UNTIC_COMMENT	O
(	O
"make cursor appear normal (undo civis/cvvis)"	pointer
)	O
}	O
,	O
{	O
"vi"	pointer
,	O
13	int
UNTIC_COMMENT	O
(	O
"make cursor invisible"	pointer
)	O
}	O
,	O
{	O
"vs"	pointer
,	O
20	int
UNTIC_COMMENT	O
(	O
"make cursor very visible"	pointer
)	O
}	O
,	O
{	O
"wi"	pointer
,	O
133	int
UNTIC_COMMENT	O
(	O
"current window is lines #1-#2 cols #3-#4"	pointer
)	O
}	O
,	O
{	O
"xl"	pointer
,	O
361	int
UNTIC_COMMENT	O
(	O
"Program function key #1 to type string #2 and show string #3"	pointer
)	O
}	O
,	O
{	O
""	pointer
,	O
-	O
1	int
UNTIC_COMMENT	O
(	O
NULL	O
)	O
}	O
}	O
;	O
static	O
int	O
compute_cap_offset	function
(	O
char	O
*	O
cap	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
,	O
Tgetstr_Map_Type	struct
*	O
map	pointer
,	O
unsigned	O
int	O
max_ofs	int
)	O
{	O
char	O
cha	char
,	O
chb	char
;	O
(	O
void	O
)	O
t	long
;	O
cha	char
=	O
*	O
cap	pointer
++	O
;	O
chb	char
=	O
*	O
cap	pointer
;	O
while	O
(	O
*	O
map	pointer
->	O
name	pointer
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
cha	char
==	O
*	O
map	pointer
->	O
name	pointer
)	O
&&	O
(	O
chb	char
==	O
*	O
(	O
map	pointer
->	O
name	pointer
+	O
1	int
)	O
)	O
)	O
{	O
if	O
(	O
map	pointer
->	O
offset	int
>=	O
(	O
int	O
)	O
max_ofs	int
)	O
return	O
-	O
1	int
;	O
return	O
map	pointer
->	O
offset	int
;	O
}	O
map	pointer
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
char	O
*	O
_pSLtt_tigetstr	function
(	O
SLterminfo_Type	struct
*	O
t	long
,	O
char	O
*	O
cap	pointer
)	O
{	O
int	O
offset	int
;	O
if	O
(	O
t	long
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
t	long
->	O
flags	int
==	O
SLTERMCAP	int
)	O
return	O
tcap_getstr	function
(	O
cap	pointer
,	O
t	long
)	O
;	O
offset	int
=	O
compute_cap_offset	function
(	O
cap	pointer
,	O
t	long
,	O
Tgetstr_Map	array
,	O
t	long
->	O
num_string_offsets	int
)	O
;	O
if	O
(	O
offset	int
<	O
0	int
)	O
return	O
NULL	O
;	O
offset	int
=	O
make_integer	function
(	O
t	long
->	O
string_offsets	pointer
+	O
2	int
*	O
offset	int
)	O
;	O
if	O
(	O
offset	int
<	O
0	int
)	O
return	O
NULL	O
;	O
return	O
t	long
->	O
string_table	pointer
+	O
offset	int
;	O
}	O
static	O
Tgetstr_Map_Type	struct
Tgetnum_Map	array
[	O
]	O
=	O
{	O
{	O
"BT"	pointer
,	O
30	int
UNTIC_COMMENT	O
(	O
"number of buttons on mouse"	pointer
)	O
}	O
,	O
{	O
"Co"	pointer
,	O
13	int
UNTIC_COMMENT	O
(	O
"maximum numbers of colors on screen"	pointer
)	O
}	O
,	O
{	O
"MW"	pointer
,	O
12	int
UNTIC_COMMENT	O
(	O
"maxumum number of defineable windows"	pointer
)	O
}	O
,	O
{	O
"NC"	pointer
,	O
15	int
UNTIC_COMMENT	O
(	O
"video attributes that can't be used with colors"	pointer
)	O
}	O
,	O
{	O
"Nl"	pointer
,	O
8	int
UNTIC_COMMENT	O
(	O
"number of labels on screen"	pointer
)	O
}	O
,	O
{	O
"Ya"	pointer
,	O
16	int
UNTIC_COMMENT	O
(	O
"numbers of bytes buffered before printing"	pointer
)	O
}	O
,	O
{	O
"Yb"	pointer
,	O
17	int
UNTIC_COMMENT	O
(	O
"spacing of pins vertically in pins per inch"	pointer
)	O
}	O
,	O
{	O
"Yc"	pointer
,	O
18	int
UNTIC_COMMENT	O
(	O
"spacing of dots horizontally in dots per inch"	pointer
)	O
}	O
,	O
{	O
"Yd"	pointer
,	O
19	int
UNTIC_COMMENT	O
(	O
"maximum value in micro_..._address"	pointer
)	O
}	O
,	O
{	O
"Ye"	pointer
,	O
20	int
UNTIC_COMMENT	O
(	O
"maximum value in parm_..._micro"	pointer
)	O
}	O
,	O
{	O
"Yf"	pointer
,	O
21	int
UNTIC_COMMENT	O
(	O
"character size when in micro mode"	pointer
)	O
}	O
,	O
{	O
"Yg"	pointer
,	O
22	int
UNTIC_COMMENT	O
(	O
"line size when in micro mode"	pointer
)	O
}	O
,	O
{	O
"Yh"	pointer
,	O
23	int
UNTIC_COMMENT	O
(	O
"numbers of pins in print-head"	pointer
)	O
}	O
,	O
{	O
"Yi"	pointer
,	O
24	int
UNTIC_COMMENT	O
(	O
"horizontal resolution in units per line"	pointer
)	O
}	O
,	O
{	O
"Yj"	pointer
,	O
25	int
UNTIC_COMMENT	O
(	O
"vertical resolution in units per line"	pointer
)	O
}	O
,	O
{	O
"Yk"	pointer
,	O
26	int
UNTIC_COMMENT	O
(	O
"horizontal resolution in units per inch"	pointer
)	O
}	O
,	O
{	O
"Yl"	pointer
,	O
27	int
UNTIC_COMMENT	O
(	O
"vertical resolution in units per inch"	pointer
)	O
}	O
,	O
{	O
"Ym"	pointer
,	O
28	int
UNTIC_COMMENT	O
(	O
"print rate in chars per second"	pointer
)	O
}	O
,	O
{	O
"Yn"	pointer
,	O
29	int
UNTIC_COMMENT	O
(	O
"character step size when in double wide mode"	pointer
)	O
}	O
,	O
{	O
"Yo"	pointer
,	O
31	int
UNTIC_COMMENT	O
(	O
"number of passed for each bit-image row"	pointer
)	O
}	O
,	O
{	O
"Yp"	pointer
,	O
32	int
UNTIC_COMMENT	O
(	O
"type of bit-image device"	pointer
)	O
}	O
,	O
{	O
"co"	pointer
,	O
0	int
UNTIC_COMMENT	O
(	O
"number of columns in aline"	pointer
)	O
}	O
,	O
{	O
"dB"	pointer
,	O
36	int
UNTIC_COMMENT	O
(	O
"padding required for ^H"	pointer
)	O
}	O
,	O
{	O
"dC"	pointer
,	O
34	int
UNTIC_COMMENT	O
(	O
"pad needed for CR"	pointer
)	O
}	O
,	O
{	O
"dN"	pointer
,	O
35	int
UNTIC_COMMENT	O
(	O
"pad needed for LF"	pointer
)	O
}	O
,	O
{	O
"dT"	pointer
,	O
37	int
UNTIC_COMMENT	O
(	O
"padding required for ^I"	pointer
)	O
}	O
,	O
{	O
"it"	pointer
,	O
1	int
UNTIC_COMMENT	O
(	O
"tabs initially every # spaces"	pointer
)	O
}	O
,	O
{	O
"kn"	pointer
,	O
38	int
UNTIC_COMMENT	O
(	O
"count of function keys"	pointer
)	O
}	O
,	O
{	O
"lh"	pointer
,	O
9	int
UNTIC_COMMENT	O
(	O
"rows in each label"	pointer
)	O
}	O
,	O
{	O
"li"	pointer
,	O
2	int
UNTIC_COMMENT	O
(	O
"number of lines on screen or page"	pointer
)	O
}	O
,	O
{	O
"lm"	pointer
,	O
3	int
UNTIC_COMMENT	O
(	O
"lines of memory if > line. 0 => varies"	pointer
)	O
}	O
,	O
{	O
"lw"	pointer
,	O
10	int
UNTIC_COMMENT	O
(	O
"columns in each label"	pointer
)	O
}	O
,	O
{	O
"ma"	pointer
,	O
11	int
UNTIC_COMMENT	O
(	O
"maximum combined attributes terminal can handle"	pointer
)	O
}	O
,	O
{	O
"pa"	pointer
,	O
14	int
UNTIC_COMMENT	O
(	O
"maximum number of color-pairs on the screen"	pointer
)	O
}	O
,	O
{	O
"pb"	pointer
,	O
5	int
UNTIC_COMMENT	O
(	O
"lowest baud rate where padding needed"	pointer
)	O
}	O
,	O
{	O
"sg"	pointer
,	O
4	int
UNTIC_COMMENT	O
(	O
"number of blank chars left by smso or rmso"	pointer
)	O
}	O
,	O
{	O
"ug"	pointer
,	O
33	int
UNTIC_COMMENT	O
(	O
"number of blanks left by ul"	pointer
)	O
}	O
,	O
{	O
"vt"	pointer
,	O
6	int
UNTIC_COMMENT	O
(	O
"virtual terminal number (CB/unix)"	pointer
)	O
}	O
,	O
{	O
"ws"	pointer
,	O
7	int
UNTIC_COMMENT	O
(	O
"columns in status line"	pointer
)	O
}	O
,	O
{	O
""	pointer
,	O
-	O
1	int
UNTIC_COMMENT	O
(	O
NULL	O
)	O
}	O
}	O
;	O
int	O
_pSLtt_tigetnum	function
(	O
SLterminfo_Type	struct
*	O
t	long
,	O
char	O
*	O
cap	pointer
)	O
{	O
int	O
offset	int
;	O
if	O
(	O
t	long
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
t	long
->	O
flags	int
==	O
SLTERMCAP	int
)	O
return	O
tcap_getnum	function
(	O
cap	pointer
,	O
t	long
)	O
;	O
offset	int
=	O
compute_cap_offset	function
(	O
cap	pointer
,	O
t	long
,	O
Tgetnum_Map	array
,	O
t	long
->	O
num_numbers	int
)	O
;	O
if	O
(	O
offset	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
make_integer	function
(	O
t	long
->	O
numbers	pointer
+	O
2	int
*	O
offset	int
)	O
;	O
}	O
static	O
Tgetstr_Map_Type	struct
Tgetflag_Map	array
[	O
]	O
=	O
{	O
{	O
"5i"	pointer
,	O
22	int
UNTIC_COMMENT	O
(	O
"printer won't echo on screen"	pointer
)	O
}	O
,	O
{	O
"HC"	pointer
,	O
23	int
UNTIC_COMMENT	O
(	O
"cursor is hard to see"	pointer
)	O
}	O
,	O
{	O
"MT"	pointer
,	O
40	int
UNTIC_COMMENT	O
(	O
"has meta key"	pointer
)	O
}	O
,	O
{	O
"ND"	pointer
,	O
26	int
UNTIC_COMMENT	O
(	O
"scrolling region is non-destructive"	pointer
)	O
}	O
,	O
{	O
"NL"	pointer
,	O
41	int
UNTIC_COMMENT	O
(	O
"move down with \n"	pointer
)	O
}	O
,	O
{	O
"NP"	pointer
,	O
25	int
UNTIC_COMMENT	O
(	O
"pad character does not exist"	pointer
)	O
}	O
,	O
{	O
"NR"	pointer
,	O
24	int
UNTIC_COMMENT	O
(	O
"smcup does not reverse rmcup"	pointer
)	O
}	O
,	O
{	O
"YA"	pointer
,	O
30	int
UNTIC_COMMENT	O
(	O
"only positive motion for hpa/mhpa caps"	pointer
)	O
}	O
,	O
{	O
"YB"	pointer
,	O
31	int
UNTIC_COMMENT	O
(	O
"using cr turns off micro mode"	pointer
)	O
}	O
,	O
{	O
"YC"	pointer
,	O
32	int
UNTIC_COMMENT	O
(	O
"printer needs operator to change character set"	pointer
)	O
}	O
,	O
{	O
"YD"	pointer
,	O
33	int
UNTIC_COMMENT	O
(	O
"only positive motion for vpa/mvpa caps"	pointer
)	O
}	O
,	O
{	O
"YE"	pointer
,	O
34	int
UNTIC_COMMENT	O
(	O
"printing in last column causes cr"	pointer
)	O
}	O
,	O
{	O
"YF"	pointer
,	O
35	int
UNTIC_COMMENT	O
(	O
"changing character pitch changes resolution"	pointer
)	O
}	O
,	O
{	O
"YG"	pointer
,	O
36	int
UNTIC_COMMENT	O
(	O
"changing line pitch changes resolution"	pointer
)	O
}	O
,	O
{	O
"am"	pointer
,	O
1	int
UNTIC_COMMENT	O
(	O
"terminal has automatic margins"	pointer
)	O
}	O
,	O
{	O
"bs"	pointer
,	O
37	int
UNTIC_COMMENT	O
(	O
"uses ^H to move left"	pointer
)	O
}	O
,	O
{	O
"bw"	pointer
,	O
0	int
UNTIC_COMMENT	O
(	O
"cub1 wraps from column 0 to last column"	pointer
)	O
}	O
,	O
{	O
"cc"	pointer
,	O
27	int
UNTIC_COMMENT	O
(	O
"terminal can re-define existing colors"	pointer
)	O
}	O
,	O
{	O
"da"	pointer
,	O
11	int
UNTIC_COMMENT	O
(	O
"display may be retained above the screen"	pointer
)	O
}	O
,	O
{	O
"db"	pointer
,	O
12	int
UNTIC_COMMENT	O
(	O
"display may be retained below the screen"	pointer
)	O
}	O
,	O
{	O
"eo"	pointer
,	O
5	int
UNTIC_COMMENT	O
(	O
"can erase overstrikes with a blank"	pointer
)	O
}	O
,	O
{	O
"es"	pointer
,	O
16	int
UNTIC_COMMENT	O
(	O
"escape can be used on the status line"	pointer
)	O
}	O
,	O
{	O
"gn"	pointer
,	O
6	int
UNTIC_COMMENT	O
(	O
"generic line type"	pointer
)	O
}	O
,	O
{	O
"hc"	pointer
,	O
7	int
UNTIC_COMMENT	O
(	O
"hardcopy terminal"	pointer
)	O
}	O
,	O
{	O
"hl"	pointer
,	O
29	int
UNTIC_COMMENT	O
(	O
"terminal uses only HLS color notation (tektronix)"	pointer
)	O
}	O
,	O
{	O
"hs"	pointer
,	O
9	int
UNTIC_COMMENT	O
(	O
"has extra status line"	pointer
)	O
}	O
,	O
{	O
"hz"	pointer
,	O
18	int
UNTIC_COMMENT	O
(	O
"can't print ~'s (hazeltine)"	pointer
)	O
}	O
,	O
{	O
"in"	pointer
,	O
10	int
UNTIC_COMMENT	O
(	O
"insert mode distinguishes nulls"	pointer
)	O
}	O
,	O
{	O
"km"	pointer
,	O
8	int
UNTIC_COMMENT	O
(	O
"Has a meta key, sets msb high"	pointer
)	O
}	O
,	O
{	O
"mi"	pointer
,	O
13	int
UNTIC_COMMENT	O
(	O
"safe to move while in insert mode"	pointer
)	O
}	O
,	O
{	O
"ms"	pointer
,	O
14	int
UNTIC_COMMENT	O
(	O
"safe to move while in standout mode"	pointer
)	O
}	O
,	O
{	O
"nc"	pointer
,	O
39	int
UNTIC_COMMENT	O
(	O
"no way to go to start of line"	pointer
)	O
}	O
,	O
{	O
"ns"	pointer
,	O
38	int
UNTIC_COMMENT	O
(	O
"crt cannot scroll"	pointer
)	O
}	O
,	O
{	O
"nx"	pointer
,	O
21	int
UNTIC_COMMENT	O
(	O
"padding won't work, xon/xoff required"	pointer
)	O
}	O
,	O
{	O
"os"	pointer
,	O
15	int
UNTIC_COMMENT	O
(	O
"terminal can overstrike"	pointer
)	O
}	O
,	O
{	O
"pt"	pointer
,	O
42	int
UNTIC_COMMENT	O
(	O
"has 8-char tabs invoked with ^I"	pointer
)	O
}	O
,	O
{	O
"ul"	pointer
,	O
19	int
UNTIC_COMMENT	O
(	O
"underline character overstrikes"	pointer
)	O
}	O
,	O
{	O
"ut"	pointer
,	O
28	int
UNTIC_COMMENT	O
(	O
"screen erased with background color"	pointer
)	O
}	O
,	O
{	O
"xb"	pointer
,	O
2	int
UNTIC_COMMENT	O
(	O
"beehive (f1=escape, f2=ctrl C)"	pointer
)	O
}	O
,	O
{	O
"xn"	pointer
,	O
4	int
UNTIC_COMMENT	O
(	O
"newline ignored after 80 cols (concept)"	pointer
)	O
}	O
,	O
{	O
"xo"	pointer
,	O
20	int
UNTIC_COMMENT	O
(	O
"terminal uses xon/xoff handshaking"	pointer
)	O
}	O
,	O
{	O
"xr"	pointer
,	O
43	int
UNTIC_COMMENT	O
(	O
"return clears the line"	pointer
)	O
}	O
,	O
{	O
"xs"	pointer
,	O
3	int
UNTIC_COMMENT	O
(	O
"standout not erased by overwriting (hp)"	pointer
)	O
}	O
,	O
{	O
"xt"	pointer
,	O
17	int
UNTIC_COMMENT	O
(	O
"tabs destructive, magic so char (t1061)"	pointer
)	O
}	O
,	O
{	O
""	pointer
,	O
-	O
1	int
UNTIC_COMMENT	O
(	O
NULL	O
)	O
}	O
}	O
;	O
int	O
_pSLtt_tigetflag	function
(	O
SLterminfo_Type	struct
*	O
t	long
,	O
char	O
*	O
cap	pointer
)	O
{	O
int	O
offset	int
;	O
if	O
(	O
t	long
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
t	long
->	O
flags	int
==	O
SLTERMCAP	int
)	O
return	O
tcap_getflag	function
(	O
cap	pointer
,	O
t	long
)	O
;	O
offset	int
=	O
compute_cap_offset	function
(	O
cap	pointer
,	O
t	long
,	O
Tgetflag_Map	array
,	O
t	long
->	O
boolean_section_size	int
)	O
;	O
if	O
(	O
offset	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
(	O
int	O
)	O
*	O
(	O
t	long
->	O
boolean_flags	pointer
+	O
offset	int
)	O
;	O
}	O
static	O
int	O
tcap_getflag	function
(	O
char	O
*	O
cap	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
char	O
a	pointer
,	O
b	pointer
;	O
char	O
*	O
f	float
=	O
(	O
char	O
*	O
)	O
t	long
->	O
boolean_flags	pointer
;	O
char	O
*	O
fmax	pointer
;	O
if	O
(	O
f	float
==	O
NULL	O
)	O
return	O
0	int
;	O
fmax	pointer
=	O
f	float
+	O
t	long
->	O
boolean_section_size	int
;	O
a	pointer
=	O
*	O
cap	pointer
;	O
b	pointer
=	O
*	O
(	O
cap	pointer
+	O
1	int
)	O
;	O
while	O
(	O
f	float
<	O
fmax	pointer
)	O
{	O
if	O
(	O
(	O
a	pointer
==	O
f	float
[	O
0	int
]	O
)	O
&&	O
(	O
b	pointer
==	O
f	float
[	O
1	int
]	O
)	O
)	O
return	O
1	int
;	O
f	float
+=	O
2	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
tcap_get_cap	function
(	O
unsigned	O
char	O
*	O
cap	pointer
,	O
unsigned	O
char	O
*	O
caps	pointer
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
char	O
c0	char
,	O
c1	char
;	O
unsigned	O
char	O
*	O
caps_max	pointer
;	O
c0	char
=	O
cap	pointer
[	O
0	int
]	O
;	O
c1	char
=	O
cap	pointer
[	O
1	int
]	O
;	O
if	O
(	O
caps	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
caps_max	pointer
=	O
caps	pointer
+	O
len	int
;	O
while	O
(	O
caps	pointer
<	O
caps_max	pointer
)	O
{	O
if	O
(	O
(	O
c0	char
==	O
caps	pointer
[	O
0	int
]	O
)	O
&&	O
(	O
c1	char
==	O
caps	pointer
[	O
1	int
]	O
)	O
)	O
{	O
return	O
(	O
char	O
*	O
)	O
caps	pointer
+	O
3	int
;	O
}	O
caps	pointer
+=	O
(	O
int	O
)	O
caps	pointer
[	O
2	int
]	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
tcap_getnum	function
(	O
char	O
*	O
cap	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
cap	pointer
=	O
tcap_get_cap	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
cap	pointer
,	O
t	long
->	O
numbers	pointer
,	O
t	long
->	O
num_numbers	int
)	O
;	O
if	O
(	O
cap	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
atoi	function
(	O
cap	pointer
)	O
;	O
}	O
static	O
char	O
*	O
tcap_getstr	function
(	O
char	O
*	O
cap	pointer
,	O
SLterminfo_Type	struct
*	O
t	long
)	O
{	O
return	O
tcap_get_cap	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
cap	pointer
,	O
(	O
unsigned	O
char	O
*	O
)	O
t	long
->	O
string_table	pointer
,	O
t	long
->	O
string_table_size	int
)	O
;	O
}	O
static	O
int	O
tcap_extract_field	function
(	O
unsigned	O
char	O
*	O
t0	pointer
)	O
{	O
register	O
unsigned	O
char	O
ch	int
,	O
*	O
t	long
=	O
t0	pointer
;	O
while	O
(	O
(	O
(	O
ch	int
=	O
*	O
t	long
)	O
!=	O
0	int
)	O
&&	O
(	O
ch	int
!=	O
':'	O
)	O
)	O
t	long
++	O
;	O
if	O
(	O
ch	int
==	O
':'	O
)	O
return	O
(	O
int	O
)	O
(	O
t	long
-	O
t0	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
SLtt_Try_Termcap	int
=	O
1	int
;	O
static	O
int	O
tcap_getent	function
(	O
char	O
*	O
term	pointer
,	O
SLterminfo_Type	struct
*	O
ti	pointer
)	O
{	O
unsigned	O
char	O
*	O
termcap	pointer
,	O
ch	int
;	O
unsigned	O
char	O
*	O
buf	pointer
,	O
*	O
b	pointer
;	O
unsigned	O
char	O
*	O
t	long
;	O
int	O
len	int
;	O
if	O
(	O
SLtt_Try_Termcap	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
term	pointer
,	O
"xterm"	pointer
,	O
5	int
)	O
)	O
return	O
-	O
1	int
;	O
termcap	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
getenv	function
(	O
"TERMCAP"	pointer
)	O
;	O
if	O
(	O
(	O
termcap	pointer
==	O
NULL	O
)	O
||	O
(	O
*	O
termcap	pointer
==	O
'/'	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
termcap	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
&&	O
(	O
termcap	pointer
[	O
1	int
]	O
==	O
0	int
)	O
)	O
return	O
-	O
1	int
;	O
t	long
=	O
termcap	pointer
;	O
while	O
(	O
(	O
len	int
=	O
tcap_extract_field	function
(	O
t	long
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
(	O
len	int
>	O
3	int
)	O
&&	O
(	O
t	long
[	O
0	int
]	O
==	O
't'	O
)	O
&&	O
(	O
t	long
[	O
1	int
]	O
==	O
'c'	O
)	O
&&	O
(	O
t	long
[	O
2	int
]	O
==	O
'='	O
)	O
)	O
return	O
-	O
1	int
;	O
t	long
+=	O
(	O
len	int
+	O
1	int
)	O
;	O
}	O
len	int
=	O
strlen	function
(	O
(	O
char	O
*	O
)	O
termcap	pointer
)	O
+	O
256	int
;	O
if	O
(	O
NULL	O
==	O
(	O
buf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
SLmalloc	O
(	O
(	O
unsigned	O
int	O
)	O
len	int
)	O
)	O
)	O
return	O
-	O
1	int
;	O
b	pointer
=	O
buf	pointer
;	O
ti	pointer
->	O
terminal_names	pointer
=	O
(	O
char	O
*	O
)	O
b	pointer
;	O
t	long
=	O
termcap	pointer
;	O
len	int
=	O
tcap_extract_field	function
(	O
t	long
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strncpy	function
(	O
(	O
char	O
*	O
)	O
b	pointer
,	O
(	O
char	O
*	O
)	O
t	long
,	O
(	O
unsigned	O
int	O
)	O
len	int
)	O
;	O
b	pointer
[	O
len	int
]	O
=	O
0	int
;	O
b	pointer
+=	O
len	int
+	O
1	int
;	O
ti	pointer
->	O
name_section_size	int
=	O
len	int
;	O
termcap	pointer
=	O
t	long
+	O
(	O
len	int
+	O
1	int
)	O
;	O
ti	pointer
->	O
string_table	pointer
=	O
(	O
char	O
*	O
)	O
b	pointer
;	O
t	long
=	O
termcap	pointer
;	O
while	O
(	O
-	O
1	int
!=	O
(	O
len	int
=	O
tcap_extract_field	function
(	O
t	long
)	O
)	O
)	O
{	O
unsigned	O
char	O
*	O
b1	pointer
;	O
unsigned	O
char	O
*	O
tmax	pointer
;	O
if	O
(	O
(	O
len	int
<	O
4	int
)	O
||	O
(	O
t	long
[	O
2	int
]	O
!=	O
'='	O
)	O
||	O
(	O
*	O
t	long
==	O
'.'	O
)	O
)	O
{	O
t	long
+=	O
len	int
+	O
1	int
;	O
continue	O
;	O
}	O
tmax	pointer
=	O
t	long
+	O
len	int
;	O
b1	pointer
=	O
b	pointer
;	O
while	O
(	O
t	long
<	O
tmax	pointer
)	O
{	O
ch	int
=	O
*	O
t	long
++	O
;	O
if	O
(	O
(	O
ch	int
==	O
'\\'	O
)	O
&&	O
(	O
t	long
<	O
tmax	pointer
)	O
)	O
{	O
SLwchar_Type	int
wch	int
;	O
t	long
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pSLexpand_escaped_char	function
(	O
(	O
char	O
*	O
)	O
t	long
,	O
&	O
wch	int
,	O
NULL	O
)	O
;	O
if	O
(	O
t	long
==	O
NULL	O
)	O
{	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
buf	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ch	int
=	O
(	O
char	O
)	O
wch	int
;	O
}	O
else	O
if	O
(	O
(	O
ch	int
==	O
'^'	O
)	O
&&	O
(	O
t	long
<	O
tmax	pointer
)	O
)	O
{	O
ch	int
=	O
*	O
t	long
++	O
;	O
if	O
(	O
ch	int
==	O
'?'	O
)	O
ch	int
=	O
127	int
;	O
else	O
ch	int
=	O
(	O
ch	int
|	O
0x20	int
)	O
-	O
(	O
'a'	O
-	O
1	int
)	O
;	O
}	O
*	O
b	pointer
++	O
=	O
ch	int
;	O
}	O
*	O
b	pointer
++	O
=	O
0	int
;	O
len	int
=	O
(	O
int	O
)	O
(	O
b	pointer
-	O
b1	pointer
)	O
;	O
b1	pointer
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
len	int
;	O
t	long
++	O
;	O
}	O
ti	pointer
->	O
string_table_size	int
=	O
(	O
int	O
)	O
(	O
b	pointer
-	O
(	O
unsigned	O
char	O
*	O
)	O
ti	pointer
->	O
string_table	pointer
)	O
;	O
t	long
=	O
termcap	pointer
;	O
ti	pointer
->	O
numbers	pointer
=	O
b	pointer
;	O
while	O
(	O
-	O
1	int
!=	O
(	O
len	int
=	O
tcap_extract_field	function
(	O
t	long
)	O
)	O
)	O
{	O
unsigned	O
char	O
*	O
b1	pointer
;	O
unsigned	O
char	O
*	O
tmax	pointer
;	O
if	O
(	O
(	O
len	int
<	O
4	int
)	O
||	O
(	O
t	long
[	O
2	int
]	O
!=	O
'#'	O
)	O
||	O
(	O
*	O
t	long
==	O
'.'	O
)	O
)	O
{	O
t	long
+=	O
len	int
+	O
1	int
;	O
continue	O
;	O
}	O
tmax	pointer
=	O
t	long
+	O
len	int
;	O
b1	pointer
=	O
b	pointer
;	O
while	O
(	O
t	long
<	O
tmax	pointer
)	O
{	O
*	O
b	pointer
++	O
=	O
*	O
t	long
++	O
;	O
}	O
*	O
b	pointer
++	O
=	O
0	int
;	O
len	int
=	O
(	O
int	O
)	O
(	O
b	pointer
-	O
b1	pointer
)	O
;	O
b1	pointer
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
len	int
;	O
t	long
++	O
;	O
}	O
ti	pointer
->	O
num_numbers	int
=	O
(	O
int	O
)	O
(	O
b	pointer
-	O
ti	pointer
->	O
numbers	pointer
)	O
;	O
t	long
=	O
termcap	pointer
;	O
ti	pointer
->	O
boolean_flags	pointer
=	O
b	pointer
;	O
while	O
(	O
-	O
1	int
!=	O
(	O
len	int
=	O
tcap_extract_field	function
(	O
t	long
)	O
)	O
)	O
{	O
if	O
(	O
(	O
len	int
!=	O
2	int
)	O
||	O
(	O
*	O
t	long
==	O
'.'	O
)	O
||	O
(	O
*	O
t	long
<=	O
' '	O
)	O
)	O
{	O
t	long
+=	O
len	int
+	O
1	int
;	O
continue	O
;	O
}	O
b	pointer
[	O
0	int
]	O
=	O
t	long
[	O
0	int
]	O
;	O
b	pointer
[	O
1	int
]	O
=	O
t	long
[	O
1	int
]	O
;	O
t	long
+=	O
3	int
;	O
b	pointer
+=	O
2	int
;	O
}	O
ti	pointer
->	O
boolean_section_size	int
=	O
(	O
int	O
)	O
(	O
b	pointer
-	O
ti	pointer
->	O
boolean_flags	pointer
)	O
;	O
ti	pointer
->	O
flags	int
=	O
SLTERMCAP	int
;	O
return	O
0	int
;	O
}	O
char	O
*	O
SLtt_tigetent	function
(	O
char	O
*	O
s	pointer
)	O
{	O
return	O
(	O
char	O
*	O
)	O
_pSLtt_tigetent	function
(	O
s	pointer
)	O
;	O
}	O
extern	O
char	O
*	O
SLtt_tigetstr	function
(	O
char	O
*	O
s	pointer
,	O
char	O
*	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
_pSLtt_tigetstr	function
(	O
(	O
SLterminfo_Type	struct
*	O
)	O
*	O
p	pointer
,	O
s	pointer
)	O
;	O
}	O
extern	O
int	O
SLtt_tigetnum	function
(	O
char	O
*	O
s	pointer
,	O
char	O
*	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
_pSLtt_tigetnum	function
(	O
(	O
SLterminfo_Type	struct
*	O
)	O
*	O
p	pointer
,	O
s	pointer
)	O
;	O
}	O
