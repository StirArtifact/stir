int	O
mu_observer_create	function
(	O
mu_observer_t	pointer
*	O
pobserver	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
mu_observer_t	pointer
observer	pointer
;	O
observer	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
observer	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
observer	pointer
->	O
owner	pointer
=	O
owner	pointer
;	O
*	O
pobserver	pointer
=	O
observer	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_observer_destroy	function
(	O
mu_observer_t	pointer
*	O
pobserver	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
pobserver	pointer
&&	O
*	O
pobserver	pointer
)	O
{	O
mu_observer_t	pointer
observer	pointer
=	O
*	O
pobserver	pointer
;	O
if	O
(	O
observer	pointer
->	O
owner	pointer
==	O
owner	pointer
||	O
observer	pointer
->	O
flags	int
&	O
MU_OBSERVER_NO_CHECK	int
)	O
{	O
if	O
(	O
observer	pointer
->	O
_destroy	pointer
)	O
observer	pointer
->	O
_destroy	pointer
(	O
observer	pointer
,	O
observer	pointer
->	O
_action_data	pointer
)	O
;	O
free	function
(	O
observer	pointer
)	O
;	O
}	O
*	O
pobserver	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
*	O
mu_observer_get_owner	function
(	O
mu_observer_t	pointer
observer	pointer
)	O
{	O
return	O
(	O
observer	pointer
)	O
?	O
observer	pointer
->	O
owner	pointer
:	O
NULL	O
;	O
}	O
int	O
mu_observer_action	function
(	O
mu_observer_t	pointer
observer	pointer
,	O
size_t	long
type	long
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
observer	pointer
->	O
_action	pointer
)	O
return	O
observer	pointer
->	O
_action	pointer
(	O
observer	pointer
,	O
type	long
,	O
data	pointer
,	O
observer	pointer
->	O
_action_data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_observer_set_action	function
(	O
mu_observer_t	pointer
observer	pointer
,	O
int	O
(	O
*	O
_action	pointer
)	O
(	O
mu_observer_t	pointer
,	O
size_t	long
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
observer	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
observer	pointer
->	O
_action	pointer
=	O
_action	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_observer_set_action_data	function
(	O
mu_observer_t	pointer
observer	pointer
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
observer	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
observer	pointer
->	O
_action_data	pointer
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_observer_set_destroy	function
(	O
mu_observer_t	pointer
observer	pointer
,	O
int	O
(	O
*	O
_destroy	pointer
)	O
(	O
mu_observer_t	pointer
,	O
void	O
*	O
)	O
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
observer	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
observer	pointer
->	O
_destroy	pointer
=	O
_destroy	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_observer_set_flags	function
(	O
mu_observer_t	pointer
observer	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
observer	pointer
->	O
flags	int
|=	O
flags	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_free_event	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
event_t	pointer
event	pointer
=	O
ptr	pointer
;	O
mu_observer_destroy	function
(	O
&	O
event	pointer
->	O
observer	pointer
,	O
NULL	O
)	O
;	O
free	function
(	O
event	pointer
)	O
;	O
}	O
int	O
mu_observable_create	function
(	O
mu_observable_t	pointer
*	O
pobservable	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
mu_observable_t	pointer
observable	pointer
;	O
int	O
status	int
;	O
if	O
(	O
pobservable	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
observable	pointer
=	O
calloc	function
(	O
sizeof	O
(	O
*	O
observable	pointer
)	O
,	O
1	int
)	O
;	O
if	O
(	O
observable	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_list_create	function
(	O
&	O
observable	pointer
->	O
list	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
free	function
(	O
observable	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_list_set_destroy_item	function
(	O
observable	pointer
->	O
list	pointer
,	O
_free_event	function
)	O
;	O
observable	pointer
->	O
owner	pointer
=	O
owner	pointer
;	O
*	O
pobservable	pointer
=	O
observable	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_observable_destroy	function
(	O
mu_observable_t	pointer
*	O
pobservable	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
pobservable	pointer
&&	O
*	O
pobservable	pointer
)	O
{	O
mu_observable_t	pointer
observable	pointer
=	O
*	O
pobservable	pointer
;	O
if	O
(	O
observable	pointer
->	O
owner	pointer
==	O
owner	pointer
)	O
{	O
mu_list_destroy	function
(	O
&	O
observable	pointer
->	O
list	pointer
)	O
;	O
free	function
(	O
observable	pointer
)	O
;	O
}	O
*	O
pobservable	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
*	O
mu_observable_get_owner	function
(	O
mu_observable_t	pointer
observable	pointer
)	O
{	O
return	O
(	O
observable	pointer
)	O
?	O
observable	pointer
->	O
owner	pointer
:	O
NULL	O
;	O
}	O
int	O
mu_observable_attach	function
(	O
mu_observable_t	pointer
observable	pointer
,	O
size_t	long
type	long
,	O
mu_observer_t	pointer
observer	pointer
)	O
{	O
event_t	pointer
event	pointer
;	O
if	O
(	O
observable	pointer
==	O
NULL	O
||	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
event	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
event	pointer
)	O
)	O
;	O
if	O
(	O
event	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
event	pointer
->	O
type	long
=	O
type	long
;	O
event	pointer
->	O
observer	pointer
=	O
observer	pointer
;	O
return	O
mu_list_append	function
(	O
observable	pointer
->	O
list	pointer
,	O
event	pointer
)	O
;	O
}	O
int	O
mu_observable_detach	function
(	O
mu_observable_t	pointer
observable	pointer
,	O
mu_observer_t	pointer
observer	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
event_t	pointer
event	pointer
=	O
NULL	O
;	O
if	O
(	O
observable	pointer
==	O
NULL	O
||	O
observer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_list_get_iterator	function
(	O
observable	pointer
->	O
list	pointer
,	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
status	int
=	O
MU_ERR_NOENT	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
event	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
event	pointer
)	O
;	O
if	O
(	O
event	pointer
&&	O
event	pointer
->	O
observer	pointer
==	O
observer	pointer
)	O
{	O
mu_iterator_ctl	function
(	O
iterator	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
status	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_observable_notify	function
(	O
mu_observable_t	pointer
observable	pointer
,	O
int	O
type	long
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
event_t	pointer
event	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
observable	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_list_get_iterator	function
(	O
observable	pointer
->	O
list	pointer
,	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
event	pointer
=	O
NULL	O
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
event	pointer
)	O
;	O
if	O
(	O
event	pointer
&&	O
event	pointer
->	O
type	long
&	O
type	long
)	O
{	O
status	int
|=	O
mu_observer_action	function
(	O
event	pointer
->	O
observer	pointer
,	O
type	long
,	O
data	pointer
)	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
