static	O
inline	O
double	O
symschur2	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
size_t	long
p	int
,	O
size_t	long
q	long
,	O
double	O
*	O
c	pointer
,	O
double	O
*	O
s	pointer
)	O
{	O
double	O
Apq	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
p	int
,	O
q	long
)	O
;	O
if	O
(	O
Apq	double
!=	O
0.0	int
)	O
{	O
double	O
App	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
p	int
,	O
p	int
)	O
;	O
double	O
Aqq	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
q	long
,	O
q	long
)	O
;	O
double	O
tau	pointer
=	O
(	O
Aqq	double
-	O
App	double
)	O
/	O
(	O
2.0	int
*	O
Apq	double
)	O
;	O
double	O
t	double
,	O
c1	double
;	O
if	O
(	O
tau	pointer
>=	O
0.0	int
)	O
{	O
t	double
=	O
1.0	int
/	O
(	O
tau	pointer
+	O
hypot	function
(	O
1.0	int
,	O
tau	pointer
)	O
)	O
;	O
}	O
else	O
{	O
t	double
=	O
-	O
1.0	int
/	O
(	O
-	O
tau	pointer
+	O
hypot	function
(	O
1.0	int
,	O
tau	pointer
)	O
)	O
;	O
}	O
c1	double
=	O
1.0	int
/	O
hypot	function
(	O
1.0	int
,	O
t	double
)	O
;	O
*	O
c	pointer
=	O
c1	double
;	O
*	O
s	pointer
=	O
t	double
*	O
c1	double
;	O
}	O
else	O
{	O
*	O
c	pointer
=	O
1.0	int
;	O
*	O
s	pointer
=	O
0.0	int
;	O
}	O
return	O
fabs	function
(	O
Apq	double
)	O
;	O
}	O
inline	O
static	O
void	O
apply_jacobi_L	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
size_t	long
p	int
,	O
size_t	long
q	long
,	O
double	O
c	pointer
,	O
double	O
s	pointer
)	O
{	O
size_t	long
j	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
Apj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
p	int
,	O
j	long
)	O
;	O
double	O
Aqj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
q	long
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
p	int
,	O
j	long
,	O
Apj	double
*	O
c	pointer
-	O
Aqj	double
*	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
q	long
,	O
j	long
,	O
Apj	double
*	O
s	pointer
+	O
Aqj	double
*	O
c	pointer
)	O
;	O
}	O
}	O
inline	O
static	O
void	O
apply_jacobi_R	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
size_t	long
p	int
,	O
size_t	long
q	long
,	O
double	O
c	pointer
,	O
double	O
s	pointer
)	O
{	O
size_t	long
i	long
;	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
i	long
++	O
)	O
{	O
double	O
Aip	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
p	int
)	O
;	O
double	O
Aiq	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
q	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
p	int
,	O
Aip	double
*	O
c	pointer
-	O
Aiq	double
*	O
s	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
q	long
,	O
Aip	double
*	O
s	pointer
+	O
Aiq	double
*	O
c	pointer
)	O
;	O
}	O
}	O
inline	O
static	O
double	O
norm	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
,	O
M	int
=	O
A	pointer
->	O
size1	long
,	O
N	int
=	O
A	pointer
->	O
size2	long
;	O
double	O
sum	double
=	O
0.0	int
,	O
scale	double
=	O
0.0	int
,	O
ssq	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
if	O
(	O
i	long
==	O
j	long
)	O
continue	O
;	O
if	O
(	O
Aij	double
!=	O
0.0	int
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
Aij	double
)	O
;	O
if	O
(	O
scale	double
<	O
ax	double
)	O
{	O
ssq	double
=	O
1.0	int
+	O
ssq	double
*	O
(	O
scale	double
/	O
ax	double
)	O
*	O
(	O
scale	double
/	O
ax	double
)	O
;	O
scale	double
=	O
ax	double
;	O
}	O
else	O
{	O
ssq	double
+=	O
(	O
ax	double
/	O
scale	double
)	O
*	O
(	O
ax	double
/	O
scale	double
)	O
;	O
}	O
}	O
}	O
}	O
sum	double
=	O
scale	double
*	O
sqrt	function
(	O
ssq	double
)	O
;	O
return	O
sum	double
;	O
}	O
int	O
gsl_eigen_jacobi	function
(	O
gsl_matrix	struct
*	O
a	double
,	O
gsl_vector	struct
*	O
eval	pointer
,	O
gsl_matrix	struct
*	O
evec	pointer
,	O
unsigned	O
int	O
max_rot	int
,	O
unsigned	O
int	O
*	O
nrot	pointer
)	O
{	O
size_t	long
i	long
,	O
p	int
,	O
q	long
;	O
const	O
size_t	long
M	int
=	O
a	double
->	O
size1	long
,	O
N	int
=	O
a	double
->	O
size2	long
;	O
double	O
red	double
,	O
redsum	double
=	O
0.0	int
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenproblem requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
evec	pointer
->	O
size1	long
||	O
M	int
!=	O
evec	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must match input matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
eval	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match input matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
gsl_vector_set_zero	function
(	O
eval	pointer
)	O
;	O
gsl_matrix_set_identity	function
(	O
evec	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
max_rot	int
;	O
i	long
++	O
)	O
{	O
double	O
nrm	double
=	O
norm	function
(	O
a	double
)	O
;	O
if	O
(	O
nrm	double
==	O
0.0	int
)	O
break	O
;	O
for	O
(	O
p	int
=	O
0	int
;	O
p	int
<	O
N	int
;	O
p	int
++	O
)	O
{	O
for	O
(	O
q	long
=	O
p	int
+	O
1	int
;	O
q	long
<	O
N	int
;	O
q	long
++	O
)	O
{	O
double	O
c	pointer
,	O
s	pointer
;	O
red	double
=	O
symschur2	function
(	O
a	double
,	O
p	int
,	O
q	long
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
redsum	double
+=	O
red	double
;	O
apply_jacobi_L	function
(	O
a	double
,	O
p	int
,	O
q	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
apply_jacobi_R	function
(	O
a	double
,	O
p	int
,	O
q	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
apply_jacobi_R	function
(	O
evec	pointer
,	O
p	int
,	O
q	long
,	O
c	pointer
,	O
s	pointer
)	O
;	O
}	O
}	O
}	O
*	O
nrot	pointer
=	O
i	long
;	O
for	O
(	O
p	int
=	O
0	int
;	O
p	int
<	O
N	int
;	O
p	int
++	O
)	O
{	O
double	O
ep	double
=	O
gsl_matrix_get	function
(	O
a	double
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_set	function
(	O
eval	pointer
,	O
p	int
,	O
ep	double
)	O
;	O
}	O
if	O
(	O
i	long
==	O
max_rot	int
)	O
{	O
return	O
GSL_EMAXITER	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_eigen_invert_jacobi	function
(	O
const	O
gsl_matrix	struct
*	O
a	double
,	O
gsl_matrix	struct
*	O
ainv	pointer
,	O
unsigned	O
int	O
max_rot	int
)	O
{	O
if	O
(	O
a	double
->	O
size1	long
!=	O
a	double
->	O
size2	long
||	O
ainv	pointer
->	O
size1	long
!=	O
ainv	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"jacobi method requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
a	double
->	O
size1	long
!=	O
ainv	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"inverse matrix must match input matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
{	O
const	O
size_t	long
n	int
=	O
a	double
->	O
size2	long
;	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
unsigned	O
int	O
nrot	pointer
=	O
0	int
;	O
int	O
status	int
;	O
gsl_vector	struct
*	O
eval	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
gsl_matrix	struct
*	O
evec	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
n	int
)	O
;	O
gsl_matrix	struct
*	O
tmp	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
n	int
)	O
;	O
gsl_matrix_memcpy	function
(	O
tmp	pointer
,	O
a	double
)	O
;	O
status	int
=	O
gsl_eigen_jacobi	function
(	O
tmp	pointer
,	O
eval	pointer
,	O
evec	pointer
,	O
max_rot	int
,	O
&	O
nrot	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
double	O
ainv_ij	double
=	O
0.0	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
n	int
;	O
k	long
++	O
)	O
{	O
double	O
f	pointer
=	O
1.0	int
/	O
gsl_vector_get	function
(	O
eval	pointer
,	O
k	long
)	O
;	O
double	O
vik	double
=	O
gsl_matrix_get	function
(	O
evec	pointer
,	O
i	long
,	O
k	long
)	O
;	O
double	O
vjk	double
=	O
gsl_matrix_get	function
(	O
evec	pointer
,	O
j	long
,	O
k	long
)	O
;	O
ainv_ij	double
+=	O
vik	double
*	O
vjk	double
*	O
f	pointer
;	O
}	O
gsl_matrix_set	function
(	O
ainv	pointer
,	O
i	long
,	O
j	long
,	O
ainv_ij	double
)	O
;	O
}	O
}	O
gsl_vector_free	function
(	O
eval	pointer
)	O
;	O
gsl_matrix_free	function
(	O
evec	pointer
)	O
;	O
gsl_matrix_free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
return	O
status	int
;	O
}	O
else	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
