void	O
VdbeExposeBuffer	function
(	O
Viewport	struct
*	O
v	struct
,	O
GC	pointer
gc	pointer
)	O
{	O
XdbeSwapInfo	struct
si	struct
;	O
si	struct
.	O
swap_window	long
=	O
v	struct
->	O
win	long
;	O
si	struct
.	O
swap_action	char
=	O
XdbeUntouched	int
;	O
XdbeSwapBuffers	function
(	O
v	struct
->	O
dpy	pointer
,	O
&	O
si	struct
,	O
1	int
)	O
;	O
v	struct
->	O
lastPixel	long
=	O
0xffffffff	int
;	O
}	O
void	O
VdbeDrawLine	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x1	short
,	O
int	O
y1	function
,	O
int	O
x2	short
,	O
int	O
y2	short
,	O
Color	short
color	pointer
)	O
{	O
Drawable	long
d	long
;	O
d	long
=	O
(	O
Drawable	long
)	O
v	struct
->	O
dbeDrawable	long
;	O
if	O
(	O
color	pointer
!=	O
v	struct
->	O
lastPixel	long
)	O
{	O
XSetForeground	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
gc	pointer
,	O
color	pointer
)	O
;	O
v	struct
->	O
lastPixel	long
=	O
color	pointer
;	O
}	O
XDrawLine	function
(	O
v	struct
->	O
dpy	pointer
,	O
d	long
,	O
v	struct
->	O
gc	pointer
,	O
x1	short
,	O
y1	function
,	O
x2	short
,	O
y2	short
)	O
;	O
}	O
void	O
VdbeFillRectangle	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x	double
,	O
int	O
y	double
,	O
int	O
w	pointer
,	O
int	O
h	int
,	O
Color	short
color	pointer
)	O
{	O
Drawable	long
d	long
;	O
if	O
(	O
color	pointer
!=	O
UnchangedColor	int
)	O
{	O
d	long
=	O
(	O
Drawable	long
)	O
v	struct
->	O
dbeDrawable	long
;	O
if	O
(	O
color	pointer
!=	O
v	struct
->	O
lastPixel	long
)	O
{	O
XSetForeground	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
gc	pointer
,	O
color	pointer
)	O
;	O
v	struct
->	O
lastPixel	long
=	O
color	pointer
;	O
}	O
XFillRectangle	function
(	O
v	struct
->	O
dpy	pointer
,	O
d	long
,	O
v	struct
->	O
gc	pointer
,	O
x	double
,	O
y	double
,	O
w	pointer
,	O
h	int
)	O
;	O
}	O
}	O
void	O
VdbeDrawSegments	function
(	O
Viewport	struct
*	O
v	struct
,	O
Segment	struct
*	O
seg	pointer
,	O
int	O
nseg	int
,	O
Color	short
color	pointer
)	O
{	O
int	O
i	int
;	O
Drawable	long
d	long
;	O
Display	struct
*	O
dpy	pointer
=	O
v	struct
->	O
dpy	pointer
;	O
GC	pointer
gc	pointer
=	O
v	struct
->	O
gc	pointer
;	O
if	O
(	O
nseg	int
>	O
1024	int
)	O
{	O
printf	function
(	O
"nseg > 1024; only the first 1024 will be used.\n"	pointer
)	O
;	O
nseg	int
=	O
1024	int
;	O
}	O
d	long
=	O
(	O
Drawable	long
)	O
v	struct
->	O
dbeDrawable	long
;	O
if	O
(	O
color	pointer
!=	O
v	struct
->	O
lastPixel	long
)	O
{	O
XSetForeground	function
(	O
dpy	pointer
,	O
gc	pointer
,	O
color	pointer
)	O
;	O
v	struct
->	O
lastPixel	long
=	O
color	pointer
;	O
}	O
XDrawSegments	function
(	O
dpy	pointer
,	O
d	long
,	O
gc	pointer
,	O
seg	pointer
,	O
nseg	int
)	O
;	O
}	O
void	O
VdbeFillPolygon	function
(	O
Viewport	struct
*	O
v	struct
,	O
Window	long
win	long
,	O
GC	pointer
gc	pointer
,	O
VPolygon	struct
*	O
poly	pointer
)	O
{	O
VPoint	struct
*	O
p	pointer
;	O
XPoint	struct
xpt	array
[	O
VmaxVP	int
]	O
,	O
*	O
lastpt	pointer
;	O
register	O
int	O
i	int
,	O
k	int
;	O
Drawable	long
d	long
;	O
Color	short
c	pointer
;	O
Display	struct
*	O
dpy	pointer
=	O
v	struct
->	O
dpy	pointer
;	O
GC	pointer
xgc	pointer
=	O
v	struct
->	O
gc	pointer
;	O
d	long
=	O
(	O
Drawable	long
)	O
v	struct
->	O
dbeDrawable	long
;	O
if	O
(	O
poly	pointer
==	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
k	int
=	O
0	int
;	O
lastpt	pointer
=	O
&	O
xpt	array
[	O
0	int
]	O
;	O
c	pointer
=	O
VComputePolygonColor	function
(	O
v	struct
,	O
poly	pointer
)	O
;	O
if	O
(	O
c	pointer
!=	O
v	struct
->	O
lastPixel	long
)	O
{	O
XSetForeground	function
(	O
dpy	pointer
,	O
xgc	pointer
,	O
c	pointer
)	O
;	O
v	struct
->	O
lastPixel	long
=	O
c	pointer
;	O
}	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
poly	pointer
->	O
vertex	pointer
)	O
;	O
i	int
<	O
poly	pointer
->	O
numVtces	short
;	O
(	O
++	O
i	int
,	O
++	O
p	pointer
)	O
)	O
{	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPPerspective	int
&&	O
p	pointer
->	O
z	double
!=	O
0.0	int
)	O
{	O
xpt	array
[	O
k	int
]	O
.	O
x	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
x	double
+	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
x	double
*	O
p	pointer
->	O
x	double
/	O
p	pointer
->	O
z	double
)	O
)	O
>>	O
2	int
;	O
xpt	array
[	O
k	int
]	O
.	O
y	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
y	double
-	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
y	double
*	O
p	pointer
->	O
y	double
/	O
p	pointer
->	O
z	double
)	O
)	O
>>	O
2	int
;	O
}	O
else	O
{	O
xpt	array
[	O
k	int
]	O
.	O
x	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
x	double
+	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
x	double
*	O
p	pointer
->	O
x	double
)	O
)	O
>>	O
2	int
;	O
xpt	array
[	O
k	int
]	O
.	O
y	double
=	O
(	O
v	struct
->	O
Middl	struct
.	O
y	double
-	O
(	O
int	O
)	O
(	O
v	struct
->	O
Scale	struct
.	O
y	double
*	O
p	pointer
->	O
y	double
)	O
)	O
>>	O
2	int
;	O
}	O
++	O
k	int
;	O
}	O
if	O
(	O
k	int
>	O
0	int
)	O
{	O
XFillPolygon	function
(	O
dpy	pointer
,	O
d	long
,	O
xgc	pointer
,	O
xpt	array
,	O
k	int
,	O
Convex	int
,	O
CoordModeOrigin	int
)	O
;	O
}	O
}	O
void	O
VdbeSetClipRect	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
x1	short
,	O
int	O
y1	function
,	O
int	O
x2	short
,	O
int	O
y2	short
)	O
{	O
XRectangle	struct
rect	array
[	O
1	int
]	O
;	O
if	O
(	O
x2	short
==	O
-	O
1	int
&&	O
y2	short
==	O
-	O
1	int
)	O
{	O
XSetClipMask	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
gc	pointer
,	O
None	int
)	O
;	O
}	O
else	O
{	O
rect	array
[	O
0	int
]	O
.	O
x	double
=	O
x1	short
;	O
rect	array
[	O
0	int
]	O
.	O
y	double
=	O
y1	function
;	O
rect	array
[	O
0	int
]	O
.	O
width	int
=	O
x2	short
-	O
x1	short
+	O
1	int
;	O
rect	array
[	O
0	int
]	O
.	O
height	int
=	O
y2	short
-	O
y1	function
+	O
1	int
;	O
XSetClipRectangles	function
(	O
v	struct
->	O
dpy	pointer
,	O
v	struct
->	O
gc	pointer
,	O
0	int
,	O
0	int
,	O
rect	array
,	O
1	int
,	O
YXBanded	int
)	O
;	O
}	O
}	O
void	O
VdbeClose	function
(	O
Viewport	struct
*	O
v	struct
)	O
{	O
}	O
Status	int
VdbeAllocColor	function
(	O
Viewport	struct
*	O
v	struct
,	O
Colormap	long
colormap	long
,	O
XColor	struct
*	O
c	pointer
)	O
{	O
Status	int
result	int
;	O
result	int
=	O
XAllocColor	function
(	O
v	struct
->	O
dpy	pointer
,	O
colormap	long
,	O
c	pointer
)	O
;	O
return	O
result	int
;	O
}	O
