static	O
char	O
*	O
_url_path_default	function
(	O
const	O
char	O
*	O
spooldir	pointer
,	O
const	O
char	O
*	O
user	pointer
,	O
int	O
unused	int
)	O
{	O
return	O
mu_make_file_name	O
(	O
spooldir	pointer
,	O
user	pointer
)	O
;	O
}	O
static	O
char	O
*	O
_url_path_hashed	function
(	O
const	O
char	O
*	O
spooldir	pointer
,	O
const	O
char	O
*	O
user	pointer
,	O
int	O
param	pointer
)	O
{	O
int	O
i	int
;	O
int	O
ulen	int
=	O
strlen	function
(	O
user	pointer
)	O
;	O
char	O
*	O
mbox	pointer
;	O
unsigned	O
hash	int
;	O
if	O
(	O
param	pointer
>	O
ulen	int
)	O
param	pointer
=	O
ulen	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
hash	int
=	O
0	int
;	O
i	int
<	O
param	pointer
;	O
i	int
++	O
)	O
hash	int
+=	O
user	pointer
[	O
i	int
]	O
;	O
mbox	pointer
=	O
malloc	function
(	O
ulen	int
+	O
strlen	function
(	O
spooldir	pointer
)	O
+	O
5	int
)	O
;	O
sprintf	function
(	O
mbox	pointer
,	O
"%s/%02X/%s"	pointer
,	O
spooldir	pointer
,	O
hash	int
%	O
256	int
,	O
user	pointer
)	O
;	O
return	O
mbox	pointer
;	O
}	O
static	O
int	O
transtab	array
[	O
]	O
=	O
{	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'a'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
,	O
'h'	O
,	O
'i'	O
,	O
'j'	O
,	O
'k'	O
,	O
'l'	O
,	O
'm'	O
,	O
'n'	O
,	O
'o'	O
,	O
'p'	O
,	O
'q'	O
,	O
'r'	O
,	O
's'	O
,	O
't'	O
,	O
'u'	O
,	O
'v'	O
,	O
'w'	O
,	O
'x'	O
,	O
'y'	O
,	O
'z'	O
,	O
'b'	O
,	O
'c'	O
,	O
'd'	O
,	O
'e'	O
,	O
'f'	O
,	O
'g'	O
}	O
;	O
static	O
char	O
*	O
_url_path_index	function
(	O
const	O
char	O
*	O
spooldir	pointer
,	O
const	O
char	O
*	O
iuser	pointer
,	O
int	O
index_depth	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
user	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iuser	pointer
;	O
int	O
i	int
,	O
ulen	int
=	O
strlen	function
(	O
iuser	pointer
)	O
;	O
char	O
*	O
mbox	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
ulen	int
==	O
0	int
)	O
return	O
NULL	O
;	O
mbox	pointer
=	O
malloc	function
(	O
ulen	int
+	O
strlen	function
(	O
spooldir	pointer
)	O
+	O
2	int
*	O
index_depth	int
+	O
2	int
)	O
;	O
strcpy	function
(	O
mbox	pointer
,	O
spooldir	pointer
)	O
;	O
p	pointer
=	O
mbox	pointer
+	O
strlen	function
(	O
mbox	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
index_depth	int
&&	O
i	int
<	O
ulen	int
;	O
i	int
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
*	O
p	pointer
++	O
=	O
transtab	array
[	O
user	pointer
[	O
i	int
]	O
]	O
;	O
}	O
for	O
(	O
;	O
i	int
<	O
index_depth	int
;	O
i	int
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
*	O
p	pointer
++	O
=	O
transtab	array
[	O
user	pointer
[	O
ulen	int
-	O
1	int
]	O
]	O
;	O
}	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
strcpy	function
(	O
p	pointer
,	O
iuser	pointer
)	O
;	O
return	O
mbox	pointer
;	O
}	O
static	O
char	O
*	O
_url_path_rev_index	function
(	O
const	O
char	O
*	O
spooldir	pointer
,	O
const	O
char	O
*	O
iuser	pointer
,	O
int	O
index_depth	int
)	O
{	O
const	O
unsigned	O
char	O
*	O
user	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iuser	pointer
;	O
int	O
i	int
,	O
ulen	int
=	O
strlen	function
(	O
iuser	pointer
)	O
;	O
char	O
*	O
mbox	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
ulen	int
==	O
0	int
)	O
return	O
NULL	O
;	O
mbox	pointer
=	O
malloc	function
(	O
ulen	int
+	O
strlen	function
(	O
spooldir	pointer
)	O
+	O
2	int
*	O
index_depth	int
+	O
1	int
)	O
;	O
strcpy	function
(	O
mbox	pointer
,	O
spooldir	pointer
)	O
;	O
p	pointer
=	O
mbox	pointer
+	O
strlen	function
(	O
mbox	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
index_depth	int
&&	O
i	int
<	O
ulen	int
;	O
i	int
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
*	O
p	pointer
++	O
=	O
transtab	array
[	O
user	pointer
[	O
ulen	int
-	O
i	int
-	O
1	int
]	O
]	O
;	O
}	O
for	O
(	O
;	O
i	int
<	O
index_depth	int
;	O
i	int
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
*	O
p	pointer
++	O
=	O
transtab	array
[	O
user	pointer
[	O
0	int
]	O
]	O
;	O
}	O
*	O
p	pointer
++	O
=	O
'/'	O
;	O
strcpy	function
(	O
p	pointer
,	O
iuser	pointer
)	O
;	O
return	O
mbox	pointer
;	O
}	O
static	O
int	O
rmselector	function
(	O
const	O
char	O
*	O
p	pointer
,	O
void	O
*	O
data	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
strncmp	function
(	O
p	pointer
,	O
"type="	pointer
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
p	pointer
,	O
"user="	pointer
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
p	pointer
,	O
"param="	pointer
,	O
6	int
)	O
==	O
0	int
;	O
}	O
int	O
mu_url_expand_path	function
(	O
mu_url_t	pointer
url	pointer
)	O
{	O
size_t	long
i	int
;	O
char	O
*	O
user	pointer
=	O
NULL	O
;	O
int	O
param	pointer
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
(	O
*	O
fun	pointer
)	O
(	O
const	O
char	O
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
=	O
_url_path_default	function
;	O
if	O
(	O
url	pointer
->	O
fvcount	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
url	pointer
->	O
fvcount	int
;	O
i	int
++	O
)	O
{	O
p	pointer
=	O
url	pointer
->	O
fvpairs	pointer
[	O
i	int
]	O
;	O
if	O
(	O
strncmp	function
(	O
p	pointer
,	O
"type="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
type	pointer
=	O
p	pointer
+	O
5	int
;	O
if	O
(	O
strcmp	function
(	O
type	pointer
,	O
"hash"	pointer
)	O
==	O
0	int
)	O
fun	pointer
=	O
_url_path_hashed	function
;	O
else	O
if	O
(	O
strcmp	function
(	O
type	pointer
,	O
"index"	pointer
)	O
==	O
0	int
)	O
fun	pointer
=	O
_url_path_index	function
;	O
else	O
if	O
(	O
strcmp	function
(	O
type	pointer
,	O
"rev-index"	pointer
)	O
==	O
0	int
)	O
fun	pointer
=	O
_url_path_rev_index	function
;	O
else	O
return	O
MU_ERR_NOENT	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
p	pointer
,	O
"user="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
user	pointer
=	O
p	pointer
+	O
5	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
p	pointer
,	O
"param="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
param	pointer
=	O
strtoul	function
(	O
p	pointer
+	O
6	int
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
user	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
fun	pointer
(	O
url	pointer
->	O
path	pointer
,	O
user	pointer
,	O
param	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
free	function
(	O
url	pointer
->	O
path	pointer
)	O
;	O
url	pointer
->	O
path	pointer
=	O
p	pointer
;	O
}	O
mu_argcv_remove	function
(	O
&	O
url	pointer
->	O
fvcount	int
,	O
&	O
url	pointer
->	O
fvpairs	pointer
,	O
rmselector	function
,	O
NULL	O
)	O
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
return	O
0	int
;	O
}	O
