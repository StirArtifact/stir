off_t	long
restart_point	long
;	O
static	O
char	O
cbuf	array
[	O
512	int
]	O
;	O
static	O
char	O
*	O
fromname	pointer
;	O
static	O
int	O
cmd_type	int
;	O
static	O
int	O
cmd_form	int
;	O
static	O
int	O
cmd_bytesz	int
;	O
struct	O
tab	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
short	O
token	short
;	O
short	O
state	pointer
;	O
short	O
implemented	short
;	O
const	O
char	O
*	O
help	pointer
;	O
}	O
;	O
extern	O
struct	O
tab	struct
cmdtab	array
[	O
]	O
;	O
extern	O
struct	O
tab	struct
sitetab	array
[	O
]	O
;	O
static	O
char	O
*	O
copy	function
(	O
char	O
*	O
)	O
;	O
static	O
void	O
help	pointer
(	O
struct	O
tab	struct
*	O
,	O
char	O
*	O
)	O
;	O
static	O
struct	O
tab	struct
*	O
lookup	function
(	O
struct	O
tab	struct
*	O
,	O
char	O
*	O
)	O
;	O
static	O
void	O
sizecmd	function
(	O
char	O
*	O
)	O
;	O
static	O
int	O
yylex	function
(	O
void	O
)	O
;	O
static	O
void	O
yyerror	function
(	O
const	O
char	O
*	O
s	pointer
)	O
;	O
enum	O
yytokentype	enum
{	O
A	int
=	O
258	int
,	O
B	int
=	O
259	int
,	O
C	int
=	O
260	int
,	O
E	int
=	O
261	int
,	O
F	int
=	O
262	int
,	O
I	int
=	O
263	int
,	O
L	int
=	O
264	int
,	O
N	int
=	O
265	int
,	O
P	int
=	O
266	int
,	O
R	int
=	O
267	int
,	O
S	int
=	O
268	int
,	O
T	int
=	O
269	int
,	O
SP	int
=	O
270	int
,	O
CRLF	int
=	O
271	int
,	O
COMMA	int
=	O
272	int
,	O
USER	int
=	O
273	int
,	O
PASS	int
=	O
274	int
,	O
ACCT	int
=	O
275	int
,	O
REIN	int
=	O
276	int
,	O
QUIT	int
=	O
277	int
,	O
PORT	int
=	O
278	int
,	O
PASV	int
=	O
279	int
,	O
TYPE	int
=	O
280	int
,	O
STRU	int
=	O
281	int
,	O
MODE	int
=	O
282	int
,	O
RETR	int
=	O
283	int
,	O
STOR	int
=	O
284	int
,	O
APPE	int
=	O
285	int
,	O
MLFL	int
=	O
286	int
,	O
MAIL	int
=	O
287	int
,	O
MSND	int
=	O
288	int
,	O
MSOM	int
=	O
289	int
,	O
MSAM	int
=	O
290	int
,	O
MRSQ	int
=	O
291	int
,	O
MRCP	int
=	O
292	int
,	O
ALLO	int
=	O
293	int
,	O
REST	int
=	O
294	int
,	O
RNFR	int
=	O
295	int
,	O
RNTO	int
=	O
296	int
,	O
ABOR	int
=	O
297	int
,	O
DELE	int
=	O
298	int
,	O
CWD	int
=	O
299	int
,	O
LIST	int
=	O
300	int
,	O
NLST	int
=	O
301	int
,	O
SITE	int
=	O
302	int
,	O
STAT	int
=	O
303	int
,	O
HELP	int
=	O
304	int
,	O
NOOP	int
=	O
305	int
,	O
MKD	int
=	O
306	int
,	O
RMD	int
=	O
307	int
,	O
PWD	int
=	O
308	int
,	O
CDUP	int
=	O
309	int
,	O
STOU	int
=	O
310	int
,	O
SMNT	int
=	O
311	int
,	O
SYST	int
=	O
312	int
,	O
SIZE	int
=	O
313	int
,	O
MDTM	int
=	O
314	int
,	O
UMASK	int
=	O
315	int
,	O
IDLE	int
=	O
316	int
,	O
CHMOD	int
=	O
317	int
,	O
LEXERR	int
=	O
318	int
,	O
STRING	int
=	O
319	int
,	O
NUMBER	int
=	O
320	int
}	O
;	O
typedef	O
union	O
YYSTYPE	union
{	O
int	O
i	int
;	O
char	O
*	O
s	pointer
;	O
}	O
YYSTYPE	union
;	O
typedef	O
unsigned	O
char	O
yytype_uint8	char
;	O
typedef	O
signed	O
char	O
yytype_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
yytype_uint16	short
;	O
typedef	O
short	O
int	O
yytype_int16	short
;	O
union	O
yyalloc	union
{	O
yytype_int16	short
yyss_alloc	short
;	O
YYSTYPE	union
yyvs_alloc	union
;	O
}	O
;	O
static	O
const	O
yytype_uint8	char
yytranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
62	int
,	O
63	int
,	O
64	int
,	O
65	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr1	array
[	O
]	O
=	O
{	O
0	int
,	O
66	int
,	O
67	int
,	O
67	int
,	O
67	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
68	int
,	O
69	int
,	O
69	int
,	O
70	int
,	O
71	int
,	O
71	int
,	O
72	int
,	O
73	int
,	O
74	int
,	O
74	int
,	O
74	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
76	int
,	O
76	int
,	O
76	int
,	O
77	int
,	O
77	int
,	O
77	int
,	O
78	int
,	O
79	int
,	O
80	int
,	O
81	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
0	int
,	O
2	int
,	O
2	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
8	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
3	int
,	O
5	int
,	O
3	int
,	O
5	int
,	O
5	int
,	O
2	int
,	O
5	int
,	O
5	int
,	O
2	int
,	O
3	int
,	O
5	int
,	O
2	int
,	O
4	int
,	O
2	int
,	O
5	int
,	O
5	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
6	int
,	O
5	int
,	O
7	int
,	O
9	int
,	O
4	int
,	O
7	int
,	O
5	int
,	O
2	int
,	O
5	int
,	O
5	int
,	O
2	int
,	O
2	int
,	O
5	int
,	O
4	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
11	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yydefact	array
[	O
]	O
=	O
{	O
2	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
0	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
0	int
,	O
75	int
,	O
0	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
75	int
,	O
0	int
,	O
75	int
,	O
75	int
,	O
3	int
,	O
4	int
,	O
47	int
,	O
0	int
,	O
51	int
,	O
46	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
25	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
22	int
,	O
0	int
,	O
0	int
,	O
28	int
,	O
30	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
43	int
,	O
0	int
,	O
0	int
,	O
50	int
,	O
0	int
,	O
52	int
,	O
0	int
,	O
0	int
,	O
8	int
,	O
58	int
,	O
60	int
,	O
62	int
,	O
63	int
,	O
0	int
,	O
66	int
,	O
68	int
,	O
67	int
,	O
0	int
,	O
70	int
,	O
71	int
,	O
69	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
53	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
26	int
,	O
0	int
,	O
19	int
,	O
0	int
,	O
17	int
,	O
0	int
,	O
75	int
,	O
0	int
,	O
75	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
33	int
,	O
34	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
5	int
,	O
6	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
65	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
73	int
,	O
0	int
,	O
72	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
12	int
,	O
49	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
35	int
,	O
0	int
,	O
40	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
29	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
7	int
,	O
57	int
,	O
55	int
,	O
56	int
,	O
59	int
,	O
61	int
,	O
64	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
0	int
,	O
48	int
,	O
24	int
,	O
23	int
,	O
27	int
,	O
20	int
,	O
18	int
,	O
0	int
,	O
0	int
,	O
37	int
,	O
0	int
,	O
0	int
,	O
21	int
,	O
31	int
,	O
32	int
,	O
42	int
,	O
44	int
,	O
45	int
,	O
0	int
,	O
0	int
,	O
36	int
,	O
74	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
38	int
,	O
0	int
,	O
41	int
,	O
0	int
,	O
13	int
,	O
0	int
,	O
0	int
,	O
39	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
54	int
}	O
;	O
static	O
const	O
yytype_int16	short
yydefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
1	int
,	O
36	int
,	O
37	int
,	O
74	int
,	O
76	int
,	O
97	int
,	O
124	int
,	O
164	int
,	O
83	int
,	O
87	int
,	O
91	int
,	O
133	int
,	O
134	int
,	O
192	int
,	O
42	int
}	O
;	O
static	O
const	O
yytype_int16	short
yypact	array
[	O
]	O
=	O
{	O
-	O
94	int
,	O
42	int
,	O
-	O
94	int
,	O
-	O
7	int
,	O
8	int
,	O
17	int
,	O
15	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
20	int
,	O
25	int
,	O
44	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
59	int
,	O
62	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
47	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
83	int
,	O
88	int
,	O
39	int
,	O
98	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
99	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
52	int
,	O
53	int
,	O
-	O
94	int
,	O
103	int
,	O
104	int
,	O
70	int
,	O
6	int
,	O
7	int
,	O
106	int
,	O
107	int
,	O
108	int
,	O
54	int
,	O
60	int
,	O
112	int
,	O
113	int
,	O
-	O
94	int
,	O
114	int
,	O
41	int
,	O
87	int
,	O
91	int
,	O
-	O
46	int
,	O
-	O
94	int
,	O
115	int
,	O
67	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
117	int
,	O
118	int
,	O
119	int
,	O
120	int
,	O
122	int
,	O
-	O
94	int
,	O
123	int
,	O
124	int
,	O
-	O
94	int
,	O
125	int
,	O
-	O
94	int
,	O
126	int
,	O
69	int
,	O
-	O
94	int
,	O
128	int
,	O
129	int
,	O
-	O
94	int
,	O
-	O
13	int
,	O
130	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
131	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
132	int
,	O
76	int
,	O
76	int
,	O
76	int
,	O
93	int
,	O
-	O
94	int
,	O
133	int
,	O
76	int
,	O
76	int
,	O
76	int
,	O
76	int
,	O
-	O
94	int
,	O
76	int
,	O
-	O
94	int
,	O
81	int
,	O
-	O
94	int
,	O
95	int
,	O
-	O
94	int
,	O
134	int
,	O
-	O
94	int
,	O
90	int
,	O
76	int
,	O
136	int
,	O
76	int
,	O
76	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
76	int
,	O
76	int
,	O
76	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
137	int
,	O
139	int
,	O
48	int
,	O
48	int
,	O
60	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
140	int
,	O
-	O
94	int
,	O
141	int
,	O
142	int
,	O
147	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
144	int
,	O
145	int
,	O
146	int
,	O
148	int
,	O
149	int
,	O
150	int
,	O
89	int
,	O
-	O
94	int
,	O
97	int
,	O
-	O
94	int
,	O
152	int
,	O
153	int
,	O
154	int
,	O
-	O
94	int
,	O
155	int
,	O
156	int
,	O
157	int
,	O
158	int
,	O
159	int
,	O
111	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
162	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
163	int
,	O
116	int
,	O
-	O
94	int
,	O
116	int
,	O
121	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
161	int
,	O
127	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
164	int
,	O
167	int
,	O
168	int
,	O
135	int
,	O
169	int
,	O
-	O
94	int
,	O
76	int
,	O
-	O
94	int
,	O
166	int
,	O
-	O
94	int
,	O
171	int
,	O
138	int
,	O
-	O
94	int
,	O
172	int
,	O
143	int
,	O
173	int
,	O
151	int
,	O
-	O
94	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypgoto	array
[	O
]	O
=	O
{	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
78	int
,	O
-	O
94	int
,	O
37	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
94	int
,	O
-	O
93	int
,	O
-	O
94	int
,	O
-	O
11	int
,	O
16	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yytable	array
[	O
]	O
=	O
{	O
135	int
,	O
136	int
,	O
127	int
,	O
107	int
,	O
128	int
,	O
140	int
,	O
141	int
,	O
142	int
,	O
143	int
,	O
38	int
,	O
144	int
,	O
88	int
,	O
89	int
,	O
84	int
,	O
108	int
,	O
109	int
,	O
110	int
,	O
85	int
,	O
86	int
,	O
152	int
,	O
90	int
,	O
154	int
,	O
155	int
,	O
39	int
,	O
43	int
,	O
156	int
,	O
157	int
,	O
158	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
41	int
,	O
40	int
,	O
52	int
,	O
53	int
,	O
44	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
45	int
,	O
61	int
,	O
2	int
,	O
3	int
,	O
65	int
,	O
66	int
,	O
67	int
,	O
68	int
,	O
69	int
,	O
166	int
,	O
71	int
,	O
72	int
,	O
96	int
,	O
161	int
,	O
62	int
,	O
63	int
,	O
101	int
,	O
102	int
,	O
162	int
,	O
46	int
,	O
4	int
,	O
5	int
,	O
163	int
,	O
54	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
79	int
,	O
50	int
,	O
111	int
,	O
80	int
,	O
51	int
,	O
81	int
,	O
82	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
59	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
103	int
,	O
104	int
,	O
60	int
,	O
202	int
,	O
105	int
,	O
106	int
,	O
137	int
,	O
138	int
,	O
146	int
,	O
147	int
,	O
178	int
,	O
179	int
,	O
64	int
,	O
70	int
,	O
73	int
,	O
75	int
,	O
77	int
,	O
95	int
,	O
78	int
,	O
92	int
,	O
93	int
,	O
94	int
,	O
148	int
,	O
96	int
,	O
150	int
,	O
98	int
,	O
99	int
,	O
100	int
,	O
112	int
,	O
113	int
,	O
114	int
,	O
115	int
,	O
123	int
,	O
116	int
,	O
117	int
,	O
118	int
,	O
119	int
,	O
120	int
,	O
132	int
,	O
121	int
,	O
122	int
,	O
125	int
,	O
126	int
,	O
145	int
,	O
129	int
,	O
130	int
,	O
131	int
,	O
139	int
,	O
149	int
,	O
151	int
,	O
153	int
,	O
177	int
,	O
159	int
,	O
160	int
,	O
167	int
,	O
168	int
,	O
169	int
,	O
170	int
,	O
171	int
,	O
172	int
,	O
173	int
,	O
165	int
,	O
174	int
,	O
175	int
,	O
176	int
,	O
180	int
,	O
181	int
,	O
193	int
,	O
182	int
,	O
183	int
,	O
184	int
,	O
185	int
,	O
186	int
,	O
187	int
,	O
188	int
,	O
189	int
,	O
195	int
,	O
190	int
,	O
197	int
,	O
191	int
,	O
198	int
,	O
203	int
,	O
199	int
,	O
201	int
,	O
194	int
,	O
204	int
,	O
0	int
,	O
206	int
,	O
208	int
,	O
0	int
,	O
196	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
200	int
,	O
0	int
,	O
0	int
,	O
205	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
207	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
209	int
}	O
;	O
static	O
const	O
yytype_int16	short
yycheck	array
[	O
]	O
=	O
{	O
93	int
,	O
94	int
,	O
15	int
,	O
49	int
,	O
82	int
,	O
98	int
,	O
99	int
,	O
100	int
,	O
101	int
,	O
16	int
,	O
103	int
,	O
4	int
,	O
5	int
,	O
7	int
,	O
60	int
,	O
61	int
,	O
62	int
,	O
11	int
,	O
12	int
,	O
112	int
,	O
13	int
,	O
114	int
,	O
115	int
,	O
15	int
,	O
8	int
,	O
118	int
,	O
119	int
,	O
120	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
16	int
,	O
15	int
,	O
17	int
,	O
18	int
,	O
15	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
15	int
,	O
25	int
,	O
0	int
,	O
1	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
127	int
,	O
34	int
,	O
35	int
,	O
65	int
,	O
5	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
10	int
,	O
15	int
,	O
18	int
,	O
19	int
,	O
14	int
,	O
16	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
3	int
,	O
15	int
,	O
59	int
,	O
6	int
,	O
15	int
,	O
8	int
,	O
9	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
15	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
198	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
64	int
,	O
64	int
,	O
15	int
,	O
65	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
108	int
,	O
65	int
,	O
110	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
64	int
,	O
15	int
,	O
15	int
,	O
65	int
,	O
16	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
64	int
,	O
16	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
64	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
61	int
,	O
16	int
,	O
64	int
,	O
17	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
12	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
126	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
180	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
65	int
,	O
15	int
,	O
17	int
,	O
16	int
,	O
16	int
,	O
65	int
,	O
15	int
,	O
17	int
,	O
16	int
,	O
16	int
,	O
65	int
,	O
16	int
,	O
-	O
1	int
,	O
17	int
,	O
17	int
,	O
-	O
1	int
,	O
65	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
65	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
65	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
65	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
65	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yystos	array
[	O
]	O
=	O
{	O
0	int
,	O
67	int
,	O
0	int
,	O
1	int
,	O
18	int
,	O
19	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
68	int
,	O
69	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
16	int
,	O
81	int
,	O
81	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
15	int
,	O
15	int
,	O
81	int
,	O
81	int
,	O
16	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
15	int
,	O
16	int
,	O
81	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
81	int
,	O
16	int
,	O
81	int
,	O
81	int
,	O
64	int
,	O
70	int
,	O
64	int
,	O
71	int
,	O
15	int
,	O
16	int
,	O
3	int
,	O
6	int
,	O
8	int
,	O
9	int
,	O
75	int
,	O
7	int
,	O
11	int
,	O
12	int
,	O
76	int
,	O
4	int
,	O
5	int
,	O
13	int
,	O
77	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
65	int
,	O
65	int
,	O
72	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
49	int
,	O
60	int
,	O
61	int
,	O
62	int
,	O
81	int
,	O
15	int
,	O
64	int
,	O
15	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
65	int
,	O
73	int
,	O
15	int
,	O
15	int
,	O
15	int
,	O
72	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
64	int
,	O
78	int
,	O
79	int
,	O
78	int
,	O
78	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
64	int
,	O
15	int
,	O
16	int
,	O
81	int
,	O
16	int
,	O
81	int
,	O
61	int
,	O
78	int
,	O
16	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
78	int
,	O
17	int
,	O
16	int
,	O
5	int
,	O
10	int
,	O
14	int
,	O
74	int
,	O
74	int
,	O
72	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
12	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
64	int
,	O
15	int
,	O
16	int
,	O
15	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
65	int
,	O
15	int
,	O
16	int
,	O
65	int
,	O
80	int
,	O
80	int
,	O
65	int
,	O
17	int
,	O
65	int
,	O
16	int
,	O
15	int
,	O
16	int
,	O
65	int
,	O
16	int
,	O
78	int
,	O
17	int
,	O
16	int
,	O
65	int
,	O
17	int
,	O
65	int
,	O
17	int
,	O
65	int
}	O
;	O
static	O
void	O
yydestruct	function
(	O
const	O
char	O
*	O
yymsg	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
*	O
yyvaluep	pointer
)	O
{	O
YYUSE	O
(	O
yyvaluep	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
yymsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	O
)	O
;	O
switch	O
(	O
yytype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
yyparse	function
(	O
void	O
)	O
;	O
int	O
yychar	int
;	O
YYSTYPE	union
yylval	union
;	O
int	O
yynerrs	int
;	O
int	O
yyparse	function
(	O
void	O
)	O
{	O
int	O
yystate	int
;	O
int	O
yyerrstatus	int
;	O
yytype_int16	short
yyssa	array
[	O
YYINITDEPTH	int
]	O
;	O
yytype_int16	short
*	O
yyss	pointer
;	O
yytype_int16	short
*	O
yyssp	pointer
;	O
YYSTYPE	union
yyvsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
yyvs	pointer
;	O
YYSTYPE	union
*	O
yyvsp	pointer
;	O
YYSIZE_T	O
yystacksize	long
;	O
int	O
yyn	int
;	O
int	O
yyresult	int
;	O
int	O
yytoken	int
;	O
YYSTYPE	union
yyval	union
;	O
int	O
yylen	int
=	O
0	int
;	O
yytoken	int
=	O
0	int
;	O
yyss	pointer
=	O
yyssa	array
;	O
yyvs	pointer
=	O
yyvsa	array
;	O
yystacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
yystate	int
=	O
0	int
;	O
yyerrstatus	int
=	O
0	int
;	O
yynerrs	int
=	O
0	int
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yyssp	pointer
=	O
yyss	pointer
;	O
yyvsp	pointer
=	O
yyvs	pointer
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	pointer
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	pointer
=	O
yystate	int
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
{	O
YYSIZE_T	O
yysize	long
=	O
yyssp	pointer
-	O
yyss	pointer
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
yystacksize	long
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
yystacksize	long
)	O
yystacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
yytype_int16	short
*	O
yyss1	pointer
=	O
yyss	pointer
;	O
union	O
yyalloc	union
*	O
yyptr	pointer
=	O
(	O
union	O
yyalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	pointer
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	short
,	O
yyss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	union
,	O
yyvs	pointer
)	O
;	O
if	O
(	O
yyss1	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss1	pointer
)	O
;	O
}	O
yyssp	pointer
=	O
yyss	pointer
+	O
yysize	long
-	O
1	int
;	O
yyvsp	pointer
=	O
yyvs	pointer
+	O
yysize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
yystate	int
)	O
)	O
;	O
if	O
(	O
yystate	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
yychar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
yychar	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
yychar	int
=	O
yytoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
}	O
yyn	int
+=	O
yytoken	int
;	O
if	O
(	O
yyn	int
<	O
0	int
||	O
YYLAST	int
<	O
yyn	int
||	O
yycheck	array
[	O
yyn	int
]	O
!=	O
yytoken	int
)	O
goto	O
yydefault	O
;	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
yyn	int
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	O
(	O
yyn	int
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	int
=	O
-	O
yyn	int
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	int
)	O
yyerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
,	O
&	O
yylloc	O
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
yystate	int
=	O
yyn	int
;	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	int
=	O
yydefact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
yyn	int
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
yylen	int
=	O
yyr2	array
[	O
yyn	int
]	O
;	O
yyval	union
=	O
yyvsp	pointer
[	O
1	int
-	O
yylen	int
]	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	int
)	O
;	O
switch	O
(	O
yyn	int
)	O
{	O
case	O
3	int
:	O
{	O
free	function
(	O
fromname	pointer
)	O
;	O
fromname	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
restart_point	long
=	O
(	O
off_t	long
)	O
0	int
;	O
}	O
break	O
;	O
case	O
5	int
:	O
{	O
user	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
pass	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
memset	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
,	O
0	int
,	O
strlen	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
7	int
:	O
{	O
usedefault	int
=	O
0	int
;	O
if	O
(	O
pdata	int
>=	O
0	int
)	O
{	O
close	pointer
(	O
pdata	int
)	O
;	O
pdata	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
if	O
(	O
memcmp	function
(	O
&	O
his_addr	struct
.	O
sin_addr	struct
,	O
&	O
data_dest	struct
.	O
sin_addr	struct
,	O
sizeof	O
(	O
data_dest	struct
.	O
sin_addr	struct
)	O
)	O
==	O
0	int
&&	O
ntohs	function
(	O
data_dest	struct
.	O
sin_port	short
)	O
>	O
IPPORT_RESERVED	int
)	O
{	O
reply	function
(	O
200	int
,	O
"PORT command successful."	pointer
)	O
;	O
}	O
else	O
{	O
memset	function
(	O
&	O
data_dest	struct
,	O
0	int
,	O
sizeof	O
(	O
data_dest	struct
)	O
)	O
;	O
reply	function
(	O
500	int
,	O
"Illegal PORT Command"	pointer
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
passive	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
switch	O
(	O
cmd_type	int
)	O
{	O
case	O
TYPE_A	int
:	O
if	O
(	O
cmd_form	int
==	O
FORM_N	int
)	O
{	O
reply	function
(	O
200	int
,	O
"Type set to A."	pointer
)	O
;	O
type	int
=	O
cmd_type	int
;	O
form	int
=	O
cmd_form	int
;	O
}	O
else	O
reply	function
(	O
504	int
,	O
"Form must be N."	pointer
)	O
;	O
break	O
;	O
case	O
TYPE_E	int
:	O
reply	function
(	O
504	int
,	O
"Type E not implemented."	pointer
)	O
;	O
break	O
;	O
case	O
TYPE_I	int
:	O
reply	function
(	O
200	int
,	O
"Type set to I."	pointer
)	O
;	O
type	int
=	O
cmd_type	int
;	O
break	O
;	O
case	O
TYPE_L	int
:	O
if	O
(	O
cmd_bytesz	int
==	O
8	int
)	O
{	O
reply	function
(	O
200	int
,	O
"Type set to L (byte size 8)."	pointer
)	O
;	O
type	int
=	O
cmd_type	int
;	O
}	O
else	O
reply	function
(	O
504	int
,	O
"Byte size must be 8."	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
switch	O
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
case	O
STRU_F	int
:	O
reply	function
(	O
200	int
,	O
"STRU F ok."	pointer
)	O
;	O
break	O
;	O
default	O
:	O
reply	function
(	O
504	int
,	O
"Unimplemented STRU type."	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
switch	O
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
case	O
MODE_S	int
:	O
reply	function
(	O
200	int
,	O
"MODE S ok."	pointer
)	O
;	O
break	O
;	O
default	O
:	O
reply	function
(	O
502	int
,	O
"Unimplemented MODE type."	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
reply	function
(	O
202	int
,	O
"ALLO command ignored."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
reply	function
(	O
202	int
,	O
"ALLO command ignored."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
retrieve	function
(	O
(	O
char	O
*	O
)	O
0	int
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
store	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
,	O
"w"	pointer
,	O
0	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
16	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
store	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
,	O
"a"	pointer
,	O
0	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
send_file_list	function
(	O
"."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
send_file_list	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
retrieve	function
(	O
"/bin/ls -lgA"	pointer
,	O
""	pointer
)	O
;	O
}	O
break	O
;	O
case	O
20	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
retrieve	function
(	O
"/bin/ls -lgA %s"	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
21	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
statfilecmd	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
22	int
:	O
{	O
statcmd	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
23	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
delete	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
if	O
(	O
fromname	pointer
)	O
{	O
renamecmd	function
(	O
fromname	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
fromname	pointer
)	O
;	O
fromname	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
}	O
else	O
{	O
reply	function
(	O
503	int
,	O
"Bad sequence of commands."	pointer
)	O
;	O
}	O
}	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
reply	function
(	O
225	int
,	O
"ABOR command successful."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
26	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
cwd	short
(	O
cred	struct
.	O
homedir	pointer
)	O
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
cwd	short
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
28	int
:	O
{	O
help	pointer
(	O
cmdtab	array
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
char	O
*	O
cp	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
;	O
if	O
(	O
strncasecmp	function
(	O
cp	pointer
,	O
"SITE"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
cp	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
+	O
4	int
;	O
if	O
(	O
*	O
cp	pointer
==	O
' '	O
)	O
cp	pointer
++	O
;	O
if	O
(	O
*	O
cp	pointer
)	O
help	pointer
(	O
sitetab	array
,	O
cp	pointer
)	O
;	O
else	O
help	pointer
(	O
sitetab	array
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
}	O
else	O
help	pointer
(	O
cmdtab	array
,	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
reply	function
(	O
200	int
,	O
"NOOP command successful."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
makedir	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
removedir	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
33	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
pwd	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
34	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
)	O
cwd	short
(	O
".."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
35	int
:	O
{	O
help	pointer
(	O
sitetab	array
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
36	int
:	O
{	O
help	pointer
(	O
sitetab	array
,	O
(	O
yyvsp	pointer
[	O
(	O
5	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
5	int
)	O
-	O
(	O
6	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
37	int
:	O
{	O
int	O
oldmask	long
;	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
oldmask	long
=	O
umask	function
(	O
0	int
)	O
;	O
umask	function
(	O
oldmask	long
)	O
;	O
reply	function
(	O
200	int
,	O
"Current UMASK is %03o"	pointer
,	O
oldmask	long
)	O
;	O
}	O
}	O
break	O
;	O
case	O
38	int
:	O
{	O
int	O
oldmask	long
;	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
if	O
(	O
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
==	O
-	O
1	int
)	O
||	O
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
>	O
0777	int
)	O
)	O
{	O
reply	function
(	O
501	int
,	O
"Bad UMASK value"	pointer
)	O
;	O
}	O
else	O
{	O
oldmask	long
=	O
umask	function
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
)	O
;	O
reply	function
(	O
200	int
,	O
"UMASK set to %03o (was %03o)"	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
,	O
oldmask	long
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
39	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
i	int
)	O
>	O
0777	int
)	O
reply	function
(	O
501	int
,	O
"CHMOD: Mode value must be between 0 and 0777"	pointer
)	O
;	O
else	O
if	O
(	O
chmod	function
(	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
s	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
i	int
)	O
)	O
<	O
0	int
)	O
perror_reply	function
(	O
550	int
,	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
else	O
reply	function
(	O
200	int
,	O
"CHMOD command successful."	pointer
)	O
;	O
}	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
8	int
)	O
-	O
(	O
9	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
40	int
:	O
{	O
reply	function
(	O
200	int
,	O
"Current IDLE time limit is %d seconds; max %d"	pointer
,	O
timeout	int
,	O
maxtimeout	int
)	O
;	O
}	O
break	O
;	O
case	O
41	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
)	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
<	O
30	int
||	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
>	O
maxtimeout	int
)	O
{	O
reply	function
(	O
501	int
,	O
"Maximum IDLE time must be between 30 and %d seconds"	pointer
,	O
maxtimeout	int
)	O
;	O
}	O
else	O
{	O
timeout	int
=	O
(	O
yyvsp	pointer
[	O
(	O
6	int
)	O
-	O
(	O
7	int
)	O
]	O
.	O
i	int
)	O
;	O
alarm	function
(	O
(	O
unsigned	O
)	O
timeout	int
)	O
;	O
reply	function
(	O
200	int
,	O
"Maximum IDLE time set to %d seconds"	pointer
,	O
timeout	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
42	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
store	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
,	O
"w"	pointer
,	O
1	int
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
43	int
:	O
{	O
const	O
char	O
*	O
sys_type	pointer
;	O
char	O
*	O
version	array
=	O
0	int
;	O
struct	O
utsname	struct
u	struct
;	O
if	O
(	O
uname	function
(	O
&	O
u	struct
)	O
==	O
0	int
)	O
{	O
version	array
=	O
malloc	function
(	O
strlen	function
(	O
u	struct
.	O
sysname	array
)	O
+	O
1	int
+	O
strlen	function
(	O
u	struct
.	O
release	array
)	O
+	O
1	int
)	O
;	O
if	O
(	O
version	array
)	O
sprintf	function
(	O
version	array
,	O
"%s %s"	pointer
,	O
u	struct
.	O
sysname	array
,	O
u	struct
.	O
release	array
)	O
;	O
}	O
sys_type	pointer
=	O
"UNIX"	pointer
;	O
if	O
(	O
version	array
)	O
reply	function
(	O
215	int
,	O
"%s Type: L%d Version: %s"	pointer
,	O
sys_type	pointer
,	O
NBBY	O
,	O
version	array
)	O
;	O
else	O
reply	function
(	O
215	int
,	O
"%s Type: L%d"	pointer
,	O
sys_type	pointer
,	O
NBBY	O
)	O
;	O
free	function
(	O
version	array
)	O
;	O
}	O
break	O
;	O
case	O
44	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
sizecmd	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
45	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
!=	O
NULL	O
)	O
{	O
struct	O
stat	struct
stbuf	struct
;	O
if	O
(	O
stat	struct
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
,	O
&	O
stbuf	struct
)	O
<	O
0	int
)	O
reply	function
(	O
550	int
,	O
"%s: %s"	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
else	O
if	O
(	O
!	O
S_ISREG	O
(	O
stbuf	struct
.	O
st_mode	int
)	O
)	O
{	O
reply	function
(	O
550	int
,	O
"%s: not a plain file."	pointer
,	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
else	O
{	O
struct	O
tm	struct
*	O
t	pointer
;	O
t	pointer
=	O
gmtime	function
(	O
&	O
stbuf	struct
.	O
st_mtime	O
)	O
;	O
reply	function
(	O
213	int
,	O
"%04d%02d%02d%02d%02d%02d"	pointer
,	O
1900	int
+	O
t	pointer
->	O
tm_year	int
,	O
t	pointer
->	O
tm_mon	int
+	O
1	int
,	O
t	pointer
->	O
tm_mday	int
,	O
t	pointer
->	O
tm_hour	int
,	O
t	pointer
->	O
tm_min	int
,	O
t	pointer
->	O
tm_sec	int
)	O
;	O
}	O
}	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
46	int
:	O
{	O
reply	function
(	O
221	int
,	O
"Goodbye."	pointer
)	O
;	O
dologout	function
(	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
47	int
:	O
{	O
yyerrok	O
;	O
}	O
break	O
;	O
case	O
48	int
:	O
{	O
restart_point	long
=	O
(	O
off_t	long
)	O
0	int
;	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
i	int
)	O
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
{	O
free	function
(	O
fromname	pointer
)	O
;	O
fromname	pointer
=	O
renamefrom	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
if	O
(	O
fromname	pointer
==	O
(	O
char	O
*	O
)	O
0	int
&&	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
5	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
49	int
:	O
{	O
free	function
(	O
fromname	pointer
)	O
;	O
fromname	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
restart_point	long
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
i	int
)	O
;	O
reply	function
(	O
350	int
,	O
(	O
sizeof	O
(	O
restart_point	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
?	O
"Restarting at %lld. %s"	pointer
:	O
"Restarting at %ld. %s"	pointer
)	O
,	O
restart_point	long
,	O
"Send STORE or RETRIEVE to initiate transfer."	pointer
)	O
;	O
}	O
break	O
;	O
case	O
51	int
:	O
{	O
(	O
yyval	union
.	O
s	pointer
)	O
=	O
(	O
char	O
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
54	int
:	O
{	O
char	O
*	O
a	pointer
,	O
*	O
p	pointer
;	O
a	pointer
=	O
(	O
char	O
*	O
)	O
&	O
data_dest	struct
.	O
sin_addr	struct
;	O
a	pointer
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
a	pointer
[	O
1	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
a	pointer
[	O
2	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
5	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
a	pointer
[	O
3	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
7	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
p	pointer
=	O
(	O
char	O
*	O
)	O
&	O
data_dest	struct
.	O
sin_port	short
;	O
p	pointer
[	O
0	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
9	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
p	pointer
[	O
1	int
]	O
=	O
(	O
yyvsp	pointer
[	O
(	O
11	int
)	O
-	O
(	O
11	int
)	O
]	O
.	O
i	int
)	O
;	O
data_dest	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
}	O
break	O
;	O
case	O
55	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
FORM_N	int
;	O
}	O
break	O
;	O
case	O
56	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
FORM_T	int
;	O
}	O
break	O
;	O
case	O
57	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
FORM_C	int
;	O
}	O
break	O
;	O
case	O
58	int
:	O
{	O
cmd_type	int
=	O
TYPE_A	int
;	O
cmd_form	int
=	O
FORM_N	int
;	O
}	O
break	O
;	O
case	O
59	int
:	O
{	O
cmd_type	int
=	O
TYPE_A	int
;	O
cmd_form	int
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
;	O
}	O
break	O
;	O
case	O
60	int
:	O
{	O
cmd_type	int
=	O
TYPE_E	int
;	O
cmd_form	int
=	O
FORM_N	int
;	O
}	O
break	O
;	O
case	O
61	int
:	O
{	O
cmd_type	int
=	O
TYPE_E	int
;	O
cmd_form	int
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
;	O
}	O
break	O
;	O
case	O
62	int
:	O
{	O
cmd_type	int
=	O
TYPE_I	int
;	O
}	O
break	O
;	O
case	O
63	int
:	O
{	O
cmd_type	int
=	O
TYPE_L	int
;	O
cmd_bytesz	int
=	O
NBBY	O
;	O
}	O
break	O
;	O
case	O
64	int
:	O
{	O
cmd_type	int
=	O
TYPE_L	int
;	O
cmd_bytesz	int
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
i	int
)	O
;	O
}	O
break	O
;	O
case	O
65	int
:	O
{	O
cmd_type	int
=	O
TYPE_L	int
;	O
cmd_bytesz	int
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
i	int
)	O
;	O
}	O
break	O
;	O
case	O
66	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
STRU_F	int
;	O
}	O
break	O
;	O
case	O
67	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
STRU_R	int
;	O
}	O
break	O
;	O
case	O
68	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
STRU_P	int
;	O
}	O
break	O
;	O
case	O
69	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
MODE_S	int
;	O
}	O
break	O
;	O
case	O
70	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
MODE_B	int
;	O
}	O
break	O
;	O
case	O
71	int
:	O
{	O
(	O
yyval	union
.	O
i	int
)	O
=	O
MODE_C	int
;	O
}	O
break	O
;	O
case	O
72	int
:	O
{	O
if	O
(	O
cred	struct
.	O
logged_in	int
&&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
&&	O
*	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
==	O
'~'	O
)	O
{	O
glob_t	struct
gl	struct
;	O
int	O
flags	int
=	O
GLOB_NOCHECK	O
;	O
flags	int
|=	O
GLOB_BRACE	O
;	O
flags	int
|=	O
GLOB_TILDE	O
;	O
memset	function
(	O
&	O
gl	struct
,	O
0	int
,	O
sizeof	O
(	O
gl	struct
)	O
)	O
;	O
if	O
(	O
glob	O
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
,	O
flags	int
,	O
NULL	O
,	O
&	O
gl	struct
)	O
||	O
gl	struct
.	O
gl_pathc	long
==	O
0	int
)	O
{	O
reply	function
(	O
550	int
,	O
"not found"	pointer
)	O
;	O
(	O
yyval	union
.	O
s	pointer
)	O
=	O
NULL	O
;	O
}	O
else	O
{	O
(	O
yyval	union
.	O
s	pointer
)	O
=	O
strdup	function
(	O
gl	struct
.	O
gl_pathv	pointer
[	O
0	int
]	O
)	O
;	O
}	O
globfree	O
(	O
&	O
gl	struct
)	O
;	O
free	function
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
)	O
;	O
}	O
else	O
(	O
yyval	union
.	O
s	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
74	int
:	O
{	O
int	O
ret	int
,	O
dec	int
,	O
multby	int
,	O
digit	int
;	O
dec	int
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
i	int
)	O
;	O
multby	int
=	O
1	int
;	O
ret	int
=	O
0	int
;	O
while	O
(	O
dec	int
)	O
{	O
digit	int
=	O
dec	int
%	O
10	int
;	O
if	O
(	O
digit	int
>	O
7	int
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
ret	int
+=	O
digit	int
*	O
multby	int
;	O
multby	int
*=	O
8	int
;	O
dec	int
/=	O
10	int
;	O
}	O
(	O
yyval	union
.	O
i	int
)	O
=	O
ret	int
;	O
}	O
break	O
;	O
case	O
75	int
:	O
{	O
if	O
(	O
cred	struct
.	O
logged_in	int
)	O
(	O
yyval	union
.	O
i	int
)	O
=	O
1	int
;	O
else	O
{	O
reply	function
(	O
530	int
,	O
"Please login with USER and PASS."	pointer
)	O
;	O
(	O
yyval	union
.	O
i	int
)	O
=	O
0	int
;	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
yyr1	array
[	O
yyn	int
]	O
,	O
&	O
yyval	union
,	O
&	O
yyloc	O
)	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
*	O
++	O
yyvsp	pointer
=	O
yyval	union
;	O
yyn	int
=	O
yyr1	array
[	O
yyn	int
]	O
;	O
yystate	int
=	O
yypgoto	array
[	O
yyn	int
-	O
YYNTOKENS	int
]	O
+	O
*	O
yyssp	pointer
;	O
if	O
(	O
0	int
<=	O
yystate	int
&&	O
yystate	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yystate	int
]	O
==	O
*	O
yyssp	pointer
)	O
yystate	int
=	O
yytable	array
[	O
yystate	int
]	O
;	O
else	O
yystate	int
=	O
yydefgoto	array
[	O
yyn	int
-	O
YYNTOKENS	int
]	O
;	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	int
=	O
yychar	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
if	O
(	O
!	O
yyerrstatus	int
)	O
{	O
++	O
yynerrs	int
;	O
yyerror	function
(	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
yyerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
yychar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
yychar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	function
(	O
"Error: discarding"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
)	O
;	O
yychar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	int
=	O
yypact	array
[	O
yystate	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	int
)	O
)	O
{	O
yyn	int
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
yyn	int
&&	O
yyn	int
<=	O
YYLAST	int
&&	O
yycheck	array
[	O
yyn	int
]	O
==	O
YYTERROR	int
)	O
{	O
yyn	int
=	O
yytable	array
[	O
yyn	int
]	O
;	O
if	O
(	O
0	int
<	O
yyn	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	pointer
==	O
yyss	pointer
)	O
YYABORT	O
;	O
yydestruct	function
(	O
"Error: popping"	pointer
,	O
yystos	array
[	O
yystate	int
]	O
,	O
yyvsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
yystate	int
=	O
*	O
yyssp	pointer
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
}	O
*	O
++	O
yyvsp	pointer
=	O
yylval	union
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yystos	array
[	O
yyn	int
]	O
,	O
yyvsp	pointer
,	O
yylsp	O
)	O
;	O
yystate	int
=	O
yyn	int
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	int
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	int
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
yyerror	function
(	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
yyresult	int
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
yychar	int
!=	O
YYEMPTY	O
)	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
yychar	int
)	O
;	O
yydestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
yytoken	int
,	O
&	O
yylval	union
)	O
;	O
}	O
YYPOPSTACK	O
(	O
yylen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
while	O
(	O
yyssp	pointer
!=	O
yyss	pointer
)	O
{	O
yydestruct	function
(	O
"Cleanup: popping"	pointer
,	O
yystos	array
[	O
*	O
yyssp	pointer
]	O
,	O
yyvsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss	pointer
)	O
;	O
return	O
YYID	O
(	O
yyresult	int
)	O
;	O
}	O
struct	O
tab	struct
cmdtab	array
[	O
]	O
=	O
{	O
{	O
"USER"	pointer
,	O
USER	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> username"	pointer
}	O
,	O
{	O
"PASS"	pointer
,	O
PASS	int
,	O
ZSTR1	int
,	O
1	int
,	O
"<sp> password"	pointer
}	O
,	O
{	O
"ACCT"	pointer
,	O
ACCT	int
,	O
STR1	int
,	O
0	int
,	O
"(specify account)"	pointer
}	O
,	O
{	O
"SMNT"	pointer
,	O
SMNT	int
,	O
ARGS	int
,	O
0	int
,	O
"(structure mount)"	pointer
}	O
,	O
{	O
"REIN"	pointer
,	O
REIN	int
,	O
ARGS	int
,	O
0	int
,	O
"(reinitialize server state)"	pointer
}	O
,	O
{	O
"QUIT"	pointer
,	O
QUIT	int
,	O
ARGS	int
,	O
1	int
,	O
"(terminate service)"	pointer
,	O
}	O
,	O
{	O
"PORT"	pointer
,	O
PORT	int
,	O
ARGS	int
,	O
1	int
,	O
"<sp> b0, b1, b2, b3, b4"	pointer
}	O
,	O
{	O
"PASV"	pointer
,	O
PASV	int
,	O
ARGS	int
,	O
1	int
,	O
"(set server in passive mode)"	pointer
}	O
,	O
{	O
"TYPE"	pointer
,	O
TYPE	int
,	O
ARGS	int
,	O
1	int
,	O
"<sp> [ A | E | I | L ]"	pointer
}	O
,	O
{	O
"STRU"	pointer
,	O
STRU	int
,	O
ARGS	int
,	O
1	int
,	O
"(specify file structure)"	pointer
}	O
,	O
{	O
"MODE"	pointer
,	O
MODE	int
,	O
ARGS	int
,	O
1	int
,	O
"(specify transfer mode)"	pointer
}	O
,	O
{	O
"RETR"	pointer
,	O
RETR	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"STOR"	pointer
,	O
STOR	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"APPE"	pointer
,	O
APPE	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"MLFL"	pointer
,	O
MLFL	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail file)"	pointer
}	O
,	O
{	O
"MAIL"	pointer
,	O
MAIL	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail to user)"	pointer
}	O
,	O
{	O
"MSND"	pointer
,	O
MSND	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail send to terminal)"	pointer
}	O
,	O
{	O
"MSOM"	pointer
,	O
MSOM	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail send to terminal or mailbox)"	pointer
}	O
,	O
{	O
"MSAM"	pointer
,	O
MSAM	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail send to terminal and mailbox)"	pointer
}	O
,	O
{	O
"MRSQ"	pointer
,	O
MRSQ	int
,	O
OSTR	int
,	O
0	int
,	O
"(mail recipient scheme question)"	pointer
}	O
,	O
{	O
"MRCP"	pointer
,	O
MRCP	int
,	O
STR1	int
,	O
0	int
,	O
"(mail recipient)"	pointer
}	O
,	O
{	O
"ALLO"	pointer
,	O
ALLO	int
,	O
ARGS	int
,	O
1	int
,	O
"allocate storage (vacuously)"	pointer
}	O
,	O
{	O
"REST"	pointer
,	O
REST	int
,	O
ARGS	int
,	O
1	int
,	O
"<sp> offset (restart command)"	pointer
}	O
,	O
{	O
"RNFR"	pointer
,	O
RNFR	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"RNTO"	pointer
,	O
RNTO	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"ABOR"	pointer
,	O
ABOR	int
,	O
ARGS	int
,	O
1	int
,	O
"(abort operation)"	pointer
}	O
,	O
{	O
"DELE"	pointer
,	O
DELE	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"CWD"	pointer
,	O
CWD	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> directory-name ]"	pointer
}	O
,	O
{	O
"XCWD"	pointer
,	O
CWD	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> directory-name ]"	pointer
}	O
,	O
{	O
"LIST"	pointer
,	O
LIST	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> path-name ]"	pointer
}	O
,	O
{	O
"NLST"	pointer
,	O
NLST	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> path-name ]"	pointer
}	O
,	O
{	O
"SITE"	pointer
,	O
SITE	int
,	O
SITECMD	int
,	O
1	int
,	O
"site-cmd [ <sp> arguments ]"	pointer
}	O
,	O
{	O
"SYST"	pointer
,	O
SYST	int
,	O
ARGS	int
,	O
1	int
,	O
"(get type of operating system)"	pointer
}	O
,	O
{	O
"STAT"	pointer
,	O
STAT	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> path-name ]"	pointer
}	O
,	O
{	O
"HELP"	pointer
,	O
HELP	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> <string> ]"	pointer
}	O
,	O
{	O
"NOOP"	pointer
,	O
NOOP	int
,	O
ARGS	int
,	O
1	int
,	O
""	pointer
}	O
,	O
{	O
"MKD"	pointer
,	O
MKD	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
"XMKD"	pointer
,	O
MKD	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
"RMD"	pointer
,	O
RMD	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
"XRMD"	pointer
,	O
RMD	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
"PWD"	pointer
,	O
PWD	int
,	O
ARGS	int
,	O
1	int
,	O
"(return current directory)"	pointer
}	O
,	O
{	O
"XPWD"	pointer
,	O
PWD	int
,	O
ARGS	int
,	O
1	int
,	O
"(return current directory)"	pointer
}	O
,	O
{	O
"CDUP"	pointer
,	O
CDUP	int
,	O
ARGS	int
,	O
1	int
,	O
"(change to parent directory)"	pointer
}	O
,	O
{	O
"XCUP"	pointer
,	O
CDUP	int
,	O
ARGS	int
,	O
1	int
,	O
"(change to parent directory)"	pointer
}	O
,	O
{	O
"STOU"	pointer
,	O
STOU	int
,	O
STR1	int
,	O
1	int
,	O
"<sp> file-name"	pointer
}	O
,	O
{	O
"SIZE"	pointer
,	O
SIZE	int
,	O
OSTR	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
"MDTM"	pointer
,	O
MDTM	int
,	O
OSTR	int
,	O
1	int
,	O
"<sp> path-name"	pointer
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
struct	O
tab	struct
sitetab	array
[	O
]	O
=	O
{	O
{	O
"UMASK"	pointer
,	O
UMASK	int
,	O
ARGS	int
,	O
1	int
,	O
"[ <sp> umask ]"	pointer
}	O
,	O
{	O
"IDLE"	pointer
,	O
IDLE	int
,	O
ARGS	int
,	O
1	int
,	O
"[ <sp> maximum-idle-time ]"	pointer
}	O
,	O
{	O
"CHMOD"	pointer
,	O
CHMOD	int
,	O
NSTR	int
,	O
1	int
,	O
"<sp> mode <sp> file-name"	pointer
}	O
,	O
{	O
"HELP"	pointer
,	O
HELP	int
,	O
OSTR	int
,	O
1	int
,	O
"[ <sp> <string> ]"	pointer
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
struct	O
tab	struct
*	O
lookup	function
(	O
struct	O
tab	struct
*	O
p	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
for	O
(	O
;	O
p	pointer
->	O
name	pointer
!=	O
NULL	O
;	O
p	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
cmd	pointer
,	O
p	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
(	O
p	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
char	O
*	O
telnet_fgets	function
(	O
char	O
*	O
s	pointer
,	O
int	O
n	int
,	O
FILE	struct
*	O
iop	pointer
)	O
{	O
int	O
c	int
;	O
register	O
char	O
*	O
cs	short
;	O
cs	short
=	O
s	pointer
;	O
for	O
(	O
c	int
=	O
0	int
;	O
tmpline	array
[	O
c	int
]	O
!=	O
'\0'	O
&&	O
--	O
n	int
>	O
0	int
;	O
++	O
c	int
)	O
{	O
*	O
cs	short
++	O
=	O
tmpline	array
[	O
c	int
]	O
;	O
if	O
(	O
tmpline	array
[	O
c	int
]	O
==	O
'\n'	O
)	O
{	O
*	O
cs	short
++	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"command: %s"	pointer
,	O
s	pointer
)	O
;	O
tmpline	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
s	pointer
)	O
;	O
}	O
if	O
(	O
c	int
==	O
0	int
)	O
tmpline	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
iop	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
&=	O
0377	int
;	O
if	O
(	O
c	int
==	O
IAC	int
)	O
{	O
if	O
(	O
(	O
c	int
=	O
getc	function
(	O
iop	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
c	int
&=	O
0377	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
WILL	int
:	O
case	O
WONT	int
:	O
c	int
=	O
getc	function
(	O
iop	pointer
)	O
;	O
printf	function
(	O
"%c%c%c"	pointer
,	O
IAC	int
,	O
DONT	int
,	O
0377	int
&	O
c	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
continue	O
;	O
case	O
DO	int
:	O
case	O
DONT	int
:	O
c	int
=	O
getc	function
(	O
iop	pointer
)	O
;	O
printf	function
(	O
"%c%c%c"	pointer
,	O
IAC	int
,	O
WONT	int
,	O
0377	int
&	O
c	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
continue	O
;	O
case	O
IAC	int
:	O
break	O
;	O
default	O
:	O
continue	O
;	O
}	O
}	O
}	O
*	O
cs	short
++	O
=	O
c	int
;	O
if	O
(	O
--	O
n	int
<=	O
0	int
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
cs	short
==	O
s	pointer
)	O
return	O
(	O
NULL	O
)	O
;	O
*	O
cs	short
++	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
{	O
if	O
(	O
!	O
cred	struct
.	O
guest	int
&&	O
strncasecmp	function
(	O
"pass "	pointer
,	O
s	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"command: %.5s ???"	pointer
,	O
s	pointer
)	O
;	O
}	O
else	O
{	O
register	O
char	O
*	O
cp	pointer
;	O
register	O
int	O
len	int
;	O
len	int
=	O
strlen	function
(	O
s	pointer
)	O
;	O
cp	pointer
=	O
s	pointer
+	O
len	int
-	O
1	int
;	O
while	O
(	O
cp	pointer
>=	O
s	pointer
&&	O
(	O
*	O
cp	pointer
==	O
'\n'	O
||	O
*	O
cp	pointer
==	O
'\r'	O
)	O
)	O
{	O
--	O
cp	pointer
;	O
--	O
len	int
;	O
}	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"command: %.*s"	pointer
,	O
len	int
,	O
s	pointer
)	O
;	O
}	O
}	O
return	O
(	O
s	pointer
)	O
;	O
}	O
void	O
toolong	function
(	O
int	O
signo	int
)	O
{	O
(	O
void	O
)	O
signo	int
;	O
reply	function
(	O
421	int
,	O
"Timeout (%d seconds): closing control connection."	pointer
,	O
timeout	int
)	O
;	O
if	O
(	O
logging	int
)	O
syslog	function
(	O
LOG_INFO	int
,	O
"User %s timed out after %d seconds"	pointer
,	O
(	O
cred	struct
.	O
name	pointer
?	O
cred	struct
.	O
name	pointer
:	O
"unknown"	pointer
)	O
,	O
timeout	int
)	O
;	O
dologout	function
(	O
1	int
)	O
;	O
}	O
static	O
int	O
yylex	function
(	O
void	O
)	O
{	O
static	O
int	O
cpos	int
,	O
state	pointer
;	O
char	O
*	O
cp	pointer
,	O
*	O
cp2	pointer
;	O
struct	O
tab	struct
*	O
p	pointer
;	O
int	O
n	int
;	O
char	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
CMD	int
:	O
signal	function
(	O
SIGALRM	int
,	O
toolong	function
)	O
;	O
alarm	function
(	O
(	O
unsigned	O
)	O
timeout	int
)	O
;	O
if	O
(	O
telnet_fgets	function
(	O
cbuf	array
,	O
sizeof	O
(	O
cbuf	array
)	O
-	O
1	int
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
{	O
reply	function
(	O
221	int
,	O
"You could at least say goodbye."	pointer
)	O
;	O
dologout	function
(	O
0	int
)	O
;	O
}	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
(	O
cp	pointer
=	O
strchr	function
(	O
cbuf	array
,	O
'\r'	O
)	O
)	O
)	O
{	O
*	O
cp	pointer
++	O
=	O
'\n'	O
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
(	O
cp	pointer
=	O
strpbrk	function
(	O
cbuf	array
,	O
" \n"	pointer
)	O
)	O
)	O
cpos	int
=	O
cp	pointer
-	O
cbuf	array
;	O
if	O
(	O
cpos	int
==	O
0	int
)	O
cpos	int
=	O
4	int
;	O
c	int
=	O
cbuf	array
[	O
cpos	int
]	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\0'	O
;	O
upper	function
(	O
cbuf	array
)	O
;	O
p	pointer
=	O
lookup	function
(	O
cmdtab	array
,	O
cbuf	array
)	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
c	int
;	O
if	O
(	O
p	pointer
!=	O
0	int
)	O
{	O
if	O
(	O
p	pointer
->	O
implemented	short
==	O
0	int
)	O
{	O
nack	function
(	O
p	pointer
->	O
name	pointer
)	O
;	O
longjmp	function
(	O
errcatch	array
,	O
0	int
)	O
;	O
}	O
state	pointer
=	O
p	pointer
->	O
state	pointer
;	O
yylval	union
.	O
s	pointer
=	O
(	O
char	O
*	O
)	O
p	pointer
->	O
name	pointer
;	O
return	O
(	O
p	pointer
->	O
token	short
)	O
;	O
}	O
break	O
;	O
case	O
SITECMD	int
:	O
if	O
(	O
cbuf	array
[	O
cpos	int
]	O
==	O
' '	O
)	O
{	O
cpos	int
++	O
;	O
return	O
(	O
SP	int
)	O
;	O
}	O
cp	pointer
=	O
&	O
cbuf	array
[	O
cpos	int
]	O
;	O
if	O
(	O
(	O
cp2	pointer
=	O
strpbrk	function
(	O
cp	pointer
,	O
" \n"	pointer
)	O
)	O
)	O
cpos	int
=	O
cp2	pointer
-	O
cbuf	array
;	O
c	int
=	O
cbuf	array
[	O
cpos	int
]	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\0'	O
;	O
upper	function
(	O
cp	pointer
)	O
;	O
p	pointer
=	O
lookup	function
(	O
sitetab	array
,	O
cp	pointer
)	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
c	int
;	O
if	O
(	O
p	pointer
!=	O
0	int
)	O
{	O
if	O
(	O
p	pointer
->	O
implemented	short
==	O
0	int
)	O
{	O
state	pointer
=	O
CMD	int
;	O
nack	function
(	O
p	pointer
->	O
name	pointer
)	O
;	O
longjmp	function
(	O
errcatch	array
,	O
0	int
)	O
;	O
}	O
state	pointer
=	O
p	pointer
->	O
state	pointer
;	O
yylval	union
.	O
s	pointer
=	O
(	O
char	O
*	O
)	O
p	pointer
->	O
name	pointer
;	O
return	O
(	O
p	pointer
->	O
token	short
)	O
;	O
}	O
state	pointer
=	O
CMD	int
;	O
break	O
;	O
case	O
OSTR	int
:	O
if	O
(	O
cbuf	array
[	O
cpos	int
]	O
==	O
'\n'	O
)	O
{	O
state	pointer
=	O
CMD	int
;	O
return	O
(	O
CRLF	int
)	O
;	O
}	O
case	O
STR1	int
:	O
case	O
ZSTR1	int
:	O
dostr1	O
:	O
if	O
(	O
cbuf	array
[	O
cpos	int
]	O
==	O
' '	O
)	O
{	O
cpos	int
++	O
;	O
if	O
(	O
state	pointer
==	O
OSTR	int
)	O
state	pointer
=	O
STR2	int
;	O
else	O
++	O
state	pointer
;	O
return	O
(	O
SP	int
)	O
;	O
}	O
break	O
;	O
case	O
ZSTR2	int
:	O
if	O
(	O
cbuf	array
[	O
cpos	int
]	O
==	O
'\n'	O
)	O
{	O
state	pointer
=	O
CMD	int
;	O
return	O
(	O
CRLF	int
)	O
;	O
}	O
case	O
STR2	int
:	O
cp	pointer
=	O
&	O
cbuf	array
[	O
cpos	int
]	O
;	O
n	int
=	O
strlen	function
(	O
cp	pointer
)	O
;	O
cpos	int
+=	O
n	int
-	O
1	int
;	O
if	O
(	O
n	int
>	O
1	int
&&	O
cbuf	array
[	O
cpos	int
]	O
==	O
'\n'	O
)	O
{	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\0'	O
;	O
yylval	union
.	O
s	pointer
=	O
copy	function
(	O
cp	pointer
)	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\n'	O
;	O
state	pointer
=	O
ARGS	int
;	O
return	O
(	O
STRING	int
)	O
;	O
}	O
break	O
;	O
case	O
NSTR	int
:	O
if	O
(	O
cbuf	array
[	O
cpos	int
]	O
==	O
' '	O
)	O
{	O
cpos	int
++	O
;	O
return	O
(	O
SP	int
)	O
;	O
}	O
if	O
(	O
isdigit	function
(	O
cbuf	array
[	O
cpos	int
]	O
)	O
)	O
{	O
cp	pointer
=	O
&	O
cbuf	array
[	O
cpos	int
]	O
;	O
while	O
(	O
isdigit	function
(	O
cbuf	array
[	O
++	O
cpos	int
]	O
)	O
)	O
;	O
c	int
=	O
cbuf	array
[	O
cpos	int
]	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\0'	O
;	O
yylval	union
.	O
i	int
=	O
atoi	function
(	O
cp	pointer
)	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
c	int
;	O
state	pointer
=	O
STR1	int
;	O
return	O
(	O
NUMBER	int
)	O
;	O
}	O
state	pointer
=	O
STR1	int
;	O
goto	O
dostr1	O
;	O
case	O
ARGS	int
:	O
if	O
(	O
isdigit	function
(	O
cbuf	array
[	O
cpos	int
]	O
)	O
)	O
{	O
cp	pointer
=	O
&	O
cbuf	array
[	O
cpos	int
]	O
;	O
while	O
(	O
isdigit	function
(	O
cbuf	array
[	O
++	O
cpos	int
]	O
)	O
)	O
;	O
c	int
=	O
cbuf	array
[	O
cpos	int
]	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
'\0'	O
;	O
yylval	union
.	O
i	int
=	O
atoi	function
(	O
cp	pointer
)	O
;	O
cbuf	array
[	O
cpos	int
]	O
=	O
c	int
;	O
return	O
(	O
NUMBER	int
)	O
;	O
}	O
switch	O
(	O
cbuf	array
[	O
cpos	int
++	O
]	O
)	O
{	O
case	O
'\n'	O
:	O
state	pointer
=	O
CMD	int
;	O
return	O
(	O
CRLF	int
)	O
;	O
case	O
' '	O
:	O
return	O
(	O
SP	int
)	O
;	O
case	O
','	O
:	O
return	O
(	O
COMMA	int
)	O
;	O
case	O
'A'	O
:	O
case	O
'a'	O
:	O
return	O
(	O
A	int
)	O
;	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
return	O
(	O
B	int
)	O
;	O
case	O
'C'	O
:	O
case	O
'c'	O
:	O
return	O
(	O
C	int
)	O
;	O
case	O
'E'	O
:	O
case	O
'e'	O
:	O
return	O
(	O
E	int
)	O
;	O
case	O
'F'	O
:	O
case	O
'f'	O
:	O
return	O
(	O
F	int
)	O
;	O
case	O
'I'	O
:	O
case	O
'i'	O
:	O
return	O
(	O
I	int
)	O
;	O
case	O
'L'	O
:	O
case	O
'l'	O
:	O
return	O
(	O
L	int
)	O
;	O
case	O
'N'	O
:	O
case	O
'n'	O
:	O
return	O
(	O
N	int
)	O
;	O
case	O
'P'	O
:	O
case	O
'p'	O
:	O
return	O
(	O
P	int
)	O
;	O
case	O
'R'	O
:	O
case	O
'r'	O
:	O
return	O
(	O
R	int
)	O
;	O
case	O
'S'	O
:	O
case	O
's'	O
:	O
return	O
(	O
S	int
)	O
;	O
case	O
'T'	O
:	O
case	O
't'	O
:	O
return	O
(	O
T	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
fatal	function
(	O
"Unknown state in scanner."	pointer
)	O
;	O
}	O
yyerror	function
(	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
state	pointer
=	O
CMD	int
;	O
longjmp	function
(	O
errcatch	array
,	O
0	int
)	O
;	O
}	O
}	O
void	O
upper	function
(	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
islower	function
(	O
*	O
s	pointer
)	O
)	O
*	O
s	pointer
=	O
toupper	function
(	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
;	O
}	O
}	O
static	O
char	O
*	O
copy	function
(	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
malloc	function
(	O
(	O
unsigned	O
)	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
fatal	function
(	O
"Ran out of memory."	pointer
)	O
;	O
strcpy	function
(	O
p	pointer
,	O
s	pointer
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
help	pointer
(	O
struct	O
tab	struct
*	O
ctab	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
struct	O
tab	struct
*	O
c	int
;	O
int	O
width	int
,	O
NCMDS	int
;	O
const	O
char	O
*	O
help_type	pointer
;	O
if	O
(	O
ctab	pointer
==	O
sitetab	array
)	O
help_type	pointer
=	O
"SITE "	pointer
;	O
else	O
help_type	pointer
=	O
""	pointer
;	O
width	int
=	O
0	int
,	O
NCMDS	int
=	O
0	int
;	O
for	O
(	O
c	int
=	O
ctab	pointer
;	O
c	int
->	O
name	pointer
!=	O
NULL	O
;	O
c	int
++	O
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
c	int
->	O
name	pointer
)	O
;	O
if	O
(	O
len	int
>	O
width	int
)	O
width	int
=	O
len	int
;	O
NCMDS	int
++	O
;	O
}	O
width	int
=	O
(	O
width	int
+	O
8	int
)	O
&	O
~	O
7	int
;	O
if	O
(	O
s	pointer
==	O
0	int
)	O
{	O
int	O
i	int
,	O
j	int
,	O
w	int
;	O
int	O
columns	int
,	O
lines	int
;	O
lreply	function
(	O
214	int
,	O
"The following %scommands are recognized %s."	pointer
,	O
help_type	pointer
,	O
"(* =>'s unimplemented)"	pointer
)	O
;	O
columns	int
=	O
76	int
/	O
width	int
;	O
if	O
(	O
columns	int
==	O
0	int
)	O
columns	int
=	O
1	int
;	O
lines	int
=	O
(	O
NCMDS	int
+	O
columns	int
-	O
1	int
)	O
/	O
columns	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lines	int
;	O
i	int
++	O
)	O
{	O
printf	function
(	O
"   "	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
columns	int
;	O
j	int
++	O
)	O
{	O
c	int
=	O
ctab	pointer
+	O
j	int
*	O
lines	int
+	O
i	int
;	O
printf	function
(	O
"%s%c"	pointer
,	O
c	int
->	O
name	pointer
,	O
c	int
->	O
implemented	short
?	O
' '	O
:	O
'*'	O
)	O
;	O
if	O
(	O
c	int
+	O
lines	int
>=	O
&	O
ctab	pointer
[	O
NCMDS	int
]	O
)	O
break	O
;	O
w	int
=	O
strlen	function
(	O
c	int
->	O
name	pointer
)	O
+	O
1	int
;	O
while	O
(	O
w	int
<	O
width	int
)	O
{	O
putchar	function
(	O
' '	O
)	O
;	O
w	int
++	O
;	O
}	O
}	O
printf	function
(	O
"\r\n"	pointer
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
reply	function
(	O
214	int
,	O
"Direct comments to ftp-bugs@%s."	pointer
,	O
hostname	pointer
)	O
;	O
return	O
;	O
}	O
upper	function
(	O
s	pointer
)	O
;	O
c	int
=	O
lookup	function
(	O
ctab	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
c	int
==	O
(	O
struct	O
tab	struct
*	O
)	O
0	int
)	O
{	O
reply	function
(	O
502	int
,	O
"Unknown command %s."	pointer
,	O
s	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
c	int
->	O
implemented	short
)	O
reply	function
(	O
214	int
,	O
"Syntax: %s%s %s"	pointer
,	O
help_type	pointer
,	O
c	int
->	O
name	pointer
,	O
c	int
->	O
help	pointer
)	O
;	O
else	O
reply	function
(	O
214	int
,	O
"%s%-*s\t%s; unimplemented."	pointer
,	O
help_type	pointer
,	O
width	int
,	O
c	int
->	O
name	pointer
,	O
c	int
->	O
help	pointer
)	O
;	O
}	O
static	O
void	O
sizecmd	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
TYPE_L	int
:	O
case	O
TYPE_I	int
:	O
{	O
struct	O
stat	struct
stbuf	struct
;	O
if	O
(	O
stat	struct
(	O
filename	pointer
,	O
&	O
stbuf	struct
)	O
<	O
0	int
||	O
!	O
S_ISREG	O
(	O
stbuf	struct
.	O
st_mode	int
)	O
)	O
reply	function
(	O
550	int
,	O
"%s: not a plain file."	pointer
,	O
filename	pointer
)	O
;	O
else	O
reply	function
(	O
213	int
,	O
(	O
sizeof	O
(	O
stbuf	struct
.	O
st_size	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
?	O
"%llu"	pointer
:	O
"%lu"	pointer
)	O
,	O
stbuf	struct
.	O
st_size	long
)	O
;	O
break	O
;	O
}	O
case	O
TYPE_A	int
:	O
{	O
FILE	struct
*	O
fin	pointer
;	O
int	O
c	int
;	O
off_t	long
count	long
;	O
struct	O
stat	struct
stbuf	struct
;	O
fin	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fin	pointer
==	O
NULL	O
)	O
{	O
perror_reply	function
(	O
550	int
,	O
filename	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
fin	pointer
)	O
,	O
&	O
stbuf	struct
)	O
<	O
0	int
||	O
!	O
S_ISREG	O
(	O
stbuf	struct
.	O
st_mode	int
)	O
)	O
{	O
reply	function
(	O
550	int
,	O
"%s: not a plain file."	pointer
,	O
filename	pointer
)	O
;	O
fclose	function
(	O
fin	pointer
)	O
;	O
return	O
;	O
}	O
count	long
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
fin	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
count	long
++	O
;	O
count	long
++	O
;	O
}	O
fclose	function
(	O
fin	pointer
)	O
;	O
reply	function
(	O
213	int
,	O
sizeof	O
(	O
count	long
)	O
>	O
sizeof	O
(	O
long	O
)	O
?	O
"%lld"	pointer
:	O
"%ld"	pointer
,	O
count	long
)	O
;	O
break	O
;	O
}	O
default	O
:	O
reply	function
(	O
504	int
,	O
"SIZE not implemented for Type %c."	pointer
,	O
"?AEIL"	pointer
[	O
type	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
yyerror	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
cp	pointer
;	O
(	O
void	O
)	O
s	pointer
;	O
cp	pointer
=	O
strchr	function
(	O
cbuf	array
,	O
'\n'	O
)	O
;	O
if	O
(	O
cp	pointer
!=	O
NULL	O
)	O
*	O
cp	pointer
=	O
'\0'	O
;	O
reply	function
(	O
500	int
,	O
"'%s': command not understood."	pointer
,	O
cbuf	array
)	O
;	O
}	O
