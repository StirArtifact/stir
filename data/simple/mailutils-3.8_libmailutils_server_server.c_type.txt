struct	O
_mu_connection	struct
{	O
struct	O
_mu_connection	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
int	O
fd	int
;	O
mu_conn_loop_fp	pointer
f_loop	pointer
;	O
mu_conn_free_fp	pointer
f_free	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
_mu_server	struct
{	O
int	O
nfd	int
;	O
fd_set	struct
fdset	struct
;	O
int	O
flags	int
;	O
struct	O
timeval	struct
timeout	long
;	O
struct	O
_mu_connection	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
mu_server_idle_fp	pointer
f_idle	pointer
;	O
mu_server_free_fp	pointer
f_free	pointer
;	O
void	O
*	O
server_data	pointer
;	O
}	O
;	O
void	O
recompute_nfd	function
(	O
mu_server_t	pointer
srv	pointer
)	O
{	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
int	O
nfd	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
srv	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
p	pointer
->	O
fd	int
>	O
nfd	int
)	O
nfd	int
=	O
p	pointer
->	O
fd	int
;	O
srv	pointer
->	O
nfd	int
=	O
nfd	int
+	O
1	int
;	O
}	O
void	O
destroy_connection	function
(	O
mu_server_t	pointer
srv	pointer
,	O
struct	O
_mu_connection	struct
*	O
conn	pointer
)	O
{	O
if	O
(	O
conn	pointer
->	O
f_free	pointer
)	O
conn	pointer
->	O
f_free	pointer
(	O
conn	pointer
->	O
data	pointer
,	O
srv	pointer
->	O
server_data	pointer
)	O
;	O
free	function
(	O
conn	pointer
)	O
;	O
}	O
void	O
remove_connection	function
(	O
mu_server_t	pointer
srv	pointer
,	O
struct	O
_mu_connection	struct
*	O
conn	pointer
)	O
{	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
close	function
(	O
conn	pointer
->	O
fd	int
)	O
;	O
FD_CLR	O
(	O
conn	pointer
->	O
fd	int
,	O
&	O
srv	pointer
->	O
fdset	struct
)	O
;	O
p	pointer
=	O
conn	pointer
->	O
prev	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
next	pointer
=	O
conn	pointer
->	O
next	pointer
;	O
else	O
srv	pointer
->	O
head	pointer
=	O
conn	pointer
->	O
next	pointer
;	O
p	pointer
=	O
conn	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
conn	pointer
->	O
prev	pointer
;	O
else	O
srv	pointer
->	O
tail	pointer
=	O
conn	pointer
->	O
prev	pointer
;	O
if	O
(	O
conn	pointer
->	O
fd	int
==	O
srv	pointer
->	O
nfd	int
-	O
1	int
)	O
recompute_nfd	function
(	O
srv	pointer
)	O
;	O
destroy_connection	function
(	O
srv	pointer
,	O
conn	pointer
)	O
;	O
}	O
int	O
connection_loop	function
(	O
mu_server_t	pointer
srv	pointer
,	O
fd_set	struct
*	O
fdset	struct
)	O
{	O
struct	O
_mu_connection	struct
*	O
conn	pointer
;	O
for	O
(	O
conn	pointer
=	O
srv	pointer
->	O
head	pointer
;	O
conn	pointer
;	O
)	O
{	O
struct	O
_mu_connection	struct
*	O
next	pointer
=	O
conn	pointer
->	O
next	pointer
;	O
if	O
(	O
FD_ISSET	O
(	O
conn	pointer
->	O
fd	int
,	O
fdset	struct
)	O
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
conn	pointer
->	O
f_loop	pointer
(	O
conn	pointer
->	O
fd	int
,	O
conn	pointer
->	O
data	pointer
,	O
srv	pointer
->	O
server_data	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_SERVER_CLOSE_CONN	int
:	O
default	O
:	O
remove_connection	function
(	O
srv	pointer
,	O
conn	pointer
)	O
;	O
break	O
;	O
case	O
MU_SERVER_SHUTDOWN	int
:	O
return	O
1	int
;	O
}	O
}	O
conn	pointer
=	O
next	pointer
;	O
}	O
return	O
0	int
;	O
}	O
void	O
make_fdset	function
(	O
mu_server_t	pointer
srv	pointer
)	O
{	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
int	O
nfd	int
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
srv	pointer
->	O
fdset	struct
)	O
;	O
for	O
(	O
p	pointer
=	O
srv	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
FD_SET	O
(	O
p	pointer
->	O
fd	int
,	O
&	O
srv	pointer
->	O
fdset	struct
)	O
;	O
if	O
(	O
p	pointer
->	O
fd	int
>	O
nfd	int
)	O
nfd	int
=	O
p	pointer
->	O
fd	int
;	O
}	O
srv	pointer
->	O
nfd	int
=	O
nfd	int
+	O
1	int
;	O
}	O
int	O
mu_server_run	function
(	O
mu_server_t	pointer
srv	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
srv	pointer
->	O
head	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
make_fdset	function
(	O
srv	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
rc	int
;	O
fd_set	struct
rdset	struct
;	O
struct	O
timeval	struct
*	O
to	pointer
;	O
rdset	struct
=	O
srv	pointer
->	O
fdset	struct
;	O
to	pointer
=	O
(	O
srv	pointer
->	O
flags	int
&	O
MU_SERVER_TIMEOUT	int
)	O
?	O
&	O
srv	pointer
->	O
timeout	long
:	O
NULL	O
;	O
rc	int
=	O
select	function
(	O
srv	pointer
->	O
nfd	int
,	O
&	O
rdset	struct
,	O
NULL	O
,	O
NULL	O
,	O
to	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
srv	pointer
->	O
f_idle	pointer
&&	O
srv	pointer
->	O
f_idle	pointer
(	O
srv	pointer
->	O
server_data	pointer
)	O
)	O
break	O
;	O
continue	O
;	O
}	O
if	O
(	O
rc	int
<	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
connection_loop	function
(	O
srv	pointer
,	O
&	O
rdset	struct
)	O
)	O
{	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
break	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_server_create	function
(	O
mu_server_t	pointer
*	O
psrv	pointer
)	O
{	O
mu_server_t	pointer
srv	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
srv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
psrv	pointer
=	O
srv	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_server_destroy	function
(	O
mu_server_t	pointer
*	O
psrv	pointer
)	O
{	O
mu_server_t	pointer
srv	pointer
;	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
psrv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
=	O
*	O
psrv	pointer
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
0	int
;	O
for	O
(	O
p	pointer
=	O
srv	pointer
->	O
head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
_mu_connection	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
destroy_connection	function
(	O
srv	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
if	O
(	O
srv	pointer
->	O
f_free	pointer
)	O
srv	pointer
->	O
f_free	pointer
(	O
srv	pointer
->	O
server_data	pointer
)	O
;	O
free	function
(	O
srv	pointer
)	O
;	O
*	O
psrv	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_server_count	function
(	O
mu_server_t	pointer
srv	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
for	O
(	O
p	pointer
=	O
srv	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
n	long
++	O
;	O
*	O
pcount	pointer
=	O
n	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_server_set_idle	function
(	O
mu_server_t	pointer
srv	pointer
,	O
mu_server_idle_fp	pointer
fp	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
f_idle	pointer
=	O
fp	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_server_set_data	function
(	O
mu_server_t	pointer
srv	pointer
,	O
void	O
*	O
data	pointer
,	O
mu_server_free_fp	pointer
fp	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
srv	pointer
->	O
server_data	pointer
=	O
data	pointer
;	O
srv	pointer
->	O
f_free	pointer
=	O
fp	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_server_set_timeout	function
(	O
mu_server_t	pointer
srv	pointer
,	O
struct	O
timeval	struct
*	O
to	pointer
)	O
{	O
if	O
(	O
!	O
srv	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
to	pointer
)	O
srv	pointer
->	O
flags	int
&=	O
~	O
MU_SERVER_TIMEOUT	int
;	O
else	O
{	O
srv	pointer
->	O
timeout	long
=	O
*	O
to	pointer
;	O
srv	pointer
->	O
flags	int
|=	O
MU_SERVER_TIMEOUT	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_server_add_connection	function
(	O
mu_server_t	pointer
srv	pointer
,	O
int	O
fd	int
,	O
void	O
*	O
data	pointer
,	O
mu_conn_loop_fp	pointer
loop	pointer
,	O
mu_conn_free_fp	pointer
free	function
)	O
{	O
struct	O
_mu_connection	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
srv	pointer
||	O
!	O
loop	pointer
)	O
return	O
EINVAL	int
;	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
->	O
fd	int
=	O
fd	int
;	O
p	pointer
->	O
f_loop	pointer
=	O
loop	pointer
;	O
p	pointer
->	O
f_free	pointer
=	O
free	function
;	O
p	pointer
->	O
data	pointer
=	O
data	pointer
;	O
p	pointer
->	O
next	pointer
=	O
NULL	O
;	O
p	pointer
->	O
prev	pointer
=	O
srv	pointer
->	O
tail	pointer
;	O
if	O
(	O
srv	pointer
->	O
tail	pointer
)	O
srv	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
p	pointer
;	O
else	O
srv	pointer
->	O
head	pointer
=	O
p	pointer
;	O
srv	pointer
->	O
tail	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
