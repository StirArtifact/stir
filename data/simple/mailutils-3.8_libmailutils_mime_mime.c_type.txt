static	O
int	O
_mime_is_multipart_digest	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
if	O
(	O
mime	pointer
->	O
content_type	pointer
)	O
return	O
mu_c_strncasecmp	function
(	O
CT_MULTIPART_DIGEST	pointer
,	O
mime	pointer
->	O
content_type	pointer
,	O
CT_MULTIPART_DIGEST_LEN	O
)	O
==	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mime_append_part	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
offset	long
,	O
size_t	long
len	int
,	O
size_t	long
lines	long
)	O
{	O
struct	O
_mime_part	struct
*	O
mime_part	pointer
,	O
*	O
*	O
part_arr	pointer
;	O
int	O
ret	int
;	O
size_t	long
size	long
;	O
mu_header_t	pointer
hdr	pointer
;	O
if	O
(	O
(	O
mime_part	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mime_part	pointer
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
>=	O
mime	pointer
->	O
tparts	long
)	O
{	O
if	O
(	O
(	O
part_arr	pointer
=	O
realloc	function
(	O
mime	pointer
->	O
mtp_parts	pointer
,	O
(	O
mime	pointer
->	O
tparts	long
+	O
5	int
)	O
*	O
sizeof	O
(	O
mime_part	pointer
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
mime_part	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
mime	pointer
->	O
mtp_parts	pointer
=	O
part_arr	pointer
;	O
mime	pointer
->	O
tparts	long
+=	O
5	int
;	O
}	O
mime	pointer
->	O
mtp_parts	pointer
[	O
mime	pointer
->	O
nmtp_parts	long
++	O
]	O
=	O
mime_part	pointer
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_message_create	function
(	O
&	O
mime_part	pointer
->	O
msg	pointer
,	O
mime_part	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_header_create	function
(	O
&	O
hdr	pointer
,	O
mime	pointer
->	O
header_buf	pointer
,	O
mime	pointer
->	O
header_length	long
)	O
)	O
!=	O
0	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
mime_part	pointer
->	O
msg	pointer
,	O
mime_part	pointer
)	O
;	O
free	function
(	O
mime_part	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
mu_message_set_header	function
(	O
mime_part	pointer
->	O
msg	pointer
,	O
hdr	pointer
,	O
mime_part	pointer
)	O
;	O
}	O
else	O
{	O
free	function
(	O
mime_part	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
mime	pointer
->	O
header_length	long
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
mu_header_get_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
NULL	O
,	O
0	int
,	O
&	O
size	long
)	O
)	O
!=	O
0	int
||	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
_mime_is_multipart_digest	function
(	O
mime	pointer
)	O
)	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
"message/rfc822"	pointer
,	O
0	int
)	O
;	O
else	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
"text/plain"	pointer
,	O
0	int
)	O
;	O
}	O
mime_part	pointer
->	O
len	int
=	O
len	int
;	O
mime_part	pointer
->	O
lines	long
=	O
lines	long
;	O
mime_part	pointer
->	O
offset	long
=	O
offset	long
;	O
}	O
else	O
{	O
mu_message_ref	function
(	O
msg	pointer
)	O
;	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
mime_part	pointer
->	O
len	int
)	O
;	O
mu_message_lines	function
(	O
msg	pointer
,	O
&	O
mime_part	pointer
->	O
lines	long
)	O
;	O
if	O
(	O
mime	pointer
->	O
stream	pointer
&&	O
mime	pointer
->	O
nmtp_parts	long
>	O
1	int
)	O
mime_part	pointer
->	O
offset	long
=	O
mime	pointer
->	O
mtp_parts	pointer
[	O
mime	pointer
->	O
nmtp_parts	long
-	O
2	int
]	O
->	O
len	int
;	O
mime_part	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
}	O
mime_part	pointer
->	O
mime	pointer
=	O
mime	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_mime_munge_content_header	function
(	O
char	O
*	O
field_body	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
e	int
,	O
*	O
str	pointer
=	O
field_body	pointer
;	O
int	O
quoted	int
=	O
0	int
;	O
mu_str_stripws	function
(	O
field_body	pointer
)	O
;	O
if	O
(	O
(	O
e	int
=	O
strchr	function
(	O
str	pointer
,	O
';'	O
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
*	O
e	int
==	O
';'	O
)	O
{	O
p	pointer
=	O
e	int
;	O
e	int
++	O
;	O
while	O
(	O
*	O
e	int
&&	O
mu_isspace	O
(	O
*	O
e	int
)	O
)	O
e	int
++	O
;	O
memmove	function
(	O
p	pointer
+	O
1	int
,	O
e	int
,	O
strlen	function
(	O
e	int
)	O
+	O
1	int
)	O
;	O
e	int
=	O
p	pointer
+	O
1	int
;	O
while	O
(	O
*	O
e	int
&&	O
*	O
e	int
!=	O
'='	O
)	O
e	int
++	O
;	O
e	int
=	O
p	pointer
=	O
e	int
+	O
1	int
;	O
while	O
(	O
*	O
e	int
&&	O
(	O
quoted	int
||	O
(	O
!	O
_ISSPECIAL	O
(	O
*	O
e	int
)	O
&&	O
!	O
mu_isspace	O
(	O
*	O
e	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
e	int
==	O
'\\'	O
)	O
{	O
memmove	function
(	O
e	int
,	O
e	int
+	O
1	int
,	O
strlen	function
(	O
e	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
e	int
==	O
'\"'	O
)	O
quoted	int
=	O
~	O
quoted	int
;	O
e	int
++	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
_mime_get_param	function
(	O
char	O
*	O
field_body	pointer
,	O
const	O
char	O
*	O
param	pointer
,	O
int	O
*	O
len	int
)	O
{	O
char	O
*	O
str	pointer
,	O
*	O
p	pointer
,	O
*	O
v	union
,	O
*	O
e	int
;	O
int	O
quoted	int
=	O
0	int
,	O
was_quoted	int
;	O
if	O
(	O
len	int
==	O
NULL	O
||	O
(	O
str	pointer
=	O
field_body	pointer
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
';'	O
)	O
;	O
while	O
(	O
p	pointer
)	O
{	O
p	pointer
++	O
;	O
if	O
(	O
(	O
v	union
=	O
strchr	function
(	O
p	pointer
,	O
'='	O
)	O
)	O
==	O
NULL	O
)	O
break	O
;	O
*	O
len	int
=	O
0	int
;	O
v	union
=	O
e	int
=	O
v	union
+	O
1	int
;	O
was_quoted	int
=	O
0	int
;	O
while	O
(	O
*	O
e	int
&&	O
(	O
quoted	int
||	O
(	O
!	O
_ISSPECIAL	O
(	O
*	O
e	int
)	O
&&	O
!	O
mu_isspace	O
(	O
*	O
e	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
e	int
==	O
'\"'	O
)	O
quoted	int
=	O
~	O
quoted	int
,	O
was_quoted	int
=	O
1	int
;	O
else	O
(	O
*	O
len	int
)	O
++	O
;	O
e	int
++	O
;	O
}	O
if	O
(	O
mu_c_strncasecmp	function
(	O
p	pointer
,	O
param	pointer
,	O
strlen	function
(	O
param	pointer
)	O
)	O
)	O
{	O
p	pointer
=	O
strchr	function
(	O
e	int
,	O
';'	O
)	O
;	O
continue	O
;	O
}	O
else	O
return	O
was_quoted	int
?	O
v	union
+	O
1	int
:	O
v	union
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
_mime_setup_buffers	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
if	O
(	O
mime	pointer
->	O
cur_buf	pointer
==	O
NULL	O
&&	O
(	O
mime	pointer
->	O
cur_buf	pointer
=	O
malloc	function
(	O
mime	pointer
->	O
buf_size	long
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
mime	pointer
->	O
cur_line	pointer
==	O
NULL	O
&&	O
(	O
mime	pointer
->	O
cur_line	pointer
=	O
calloc	function
(	O
mime	pointer
->	O
line_size	long
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
{	O
free	function
(	O
mime	pointer
->	O
cur_buf	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
_mime_append_header_line	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
if	O
(	O
mime	pointer
->	O
header_length	long
+	O
mime	pointer
->	O
line_ndx	long
>	O
mime	pointer
->	O
header_buf_size	long
)	O
{	O
char	O
*	O
nhb	pointer
;	O
if	O
(	O
(	O
nhb	pointer
=	O
realloc	function
(	O
mime	pointer
->	O
header_buf	pointer
,	O
mime	pointer
->	O
header_length	long
+	O
mime	pointer
->	O
line_ndx	long
+	O
128	int
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
mime	pointer
->	O
header_buf	pointer
=	O
nhb	pointer
;	O
mime	pointer
->	O
header_buf_size	long
=	O
mime	pointer
->	O
header_length	long
+	O
mime	pointer
->	O
line_ndx	long
+	O
128	int
;	O
}	O
memcpy	function
(	O
mime	pointer
->	O
header_buf	pointer
+	O
mime	pointer
->	O
header_length	long
,	O
mime	pointer
->	O
cur_line	pointer
,	O
mime	pointer
->	O
line_ndx	long
)	O
;	O
mime	pointer
->	O
header_length	long
+=	O
mime	pointer
->	O
line_ndx	long
;	O
}	O
static	O
int	O
_mime_parse_mpart_message	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
char	O
*	O
cp	pointer
;	O
size_t	long
blength	long
,	O
mb_length	long
,	O
mb_offset	long
,	O
mb_lines	long
;	O
int	O
ret	int
;	O
size_t	long
nbytes	long
;	O
if	O
(	O
!	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_PARSER_ACTIVE	int
)	O
)	O
{	O
char	O
*	O
boundary	pointer
;	O
int	O
len	int
;	O
if	O
(	O
(	O
ret	int
=	O
_mime_setup_buffers	function
(	O
mime	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
(	O
boundary	pointer
=	O
_mime_get_param	function
(	O
mime	pointer
->	O
content_type	pointer
,	O
"boundary"	pointer
,	O
&	O
len	int
)	O
)	O
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
mime	pointer
->	O
boundary	pointer
=	O
calloc	function
(	O
1	int
,	O
len	int
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
strncpy	function
(	O
mime	pointer
->	O
boundary	pointer
,	O
boundary	pointer
,	O
len	int
)	O
;	O
mime	pointer
->	O
cur_offset	long
=	O
0	int
;	O
mime	pointer
->	O
line_ndx	long
=	O
0	int
;	O
mime	pointer
->	O
parser_state	int
=	O
MIME_STATE_SCAN_BOUNDARY	int
;	O
mime	pointer
->	O
flags	int
|=	O
MIME_PARSER_ACTIVE	int
;	O
}	O
mb_length	long
=	O
mime	pointer
->	O
body_length	long
;	O
mb_offset	long
=	O
mime	pointer
->	O
body_offset	long
;	O
mb_lines	long
=	O
mime	pointer
->	O
body_lines	long
;	O
blength	long
=	O
strlen	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
;	O
mu_stream_seek	function
(	O
mime	pointer
->	O
stream	pointer
,	O
mime	pointer
->	O
cur_offset	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
mu_stream_read	function
(	O
mime	pointer
->	O
stream	pointer
,	O
mime	pointer
->	O
cur_buf	pointer
,	O
mime	pointer
->	O
buf_size	long
,	O
&	O
nbytes	long
)	O
)	O
==	O
0	int
&&	O
nbytes	long
)	O
{	O
cp	pointer
=	O
mime	pointer
->	O
cur_buf	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
nbytes	long
)	O
mime	pointer
->	O
cur_line	pointer
[	O
mime	pointer
->	O
line_ndx	long
]	O
=	O
*	O
cp	pointer
;	O
if	O
(	O
mime	pointer
->	O
parser_state	int
==	O
MIME_STATE_SCAN_BOUNDARY	int
&&	O
(	O
nbytes	long
==	O
0	int
||	O
*	O
cp	pointer
==	O
'\n'	O
)	O
)	O
{	O
char	O
*	O
cp2	pointer
=	O
mime	pointer
->	O
cur_line	pointer
[	O
0	int
]	O
==	O
'\n'	O
?	O
mime	pointer
->	O
cur_line	pointer
+	O
1	int
:	O
mime	pointer
->	O
cur_line	pointer
;	O
if	O
(	O
mime	pointer
->	O
line_ndx	long
>=	O
blength	long
&&	O
(	O
(	O
memcmp	function
(	O
cp2	pointer
,	O
"--"	pointer
,	O
2	int
)	O
==	O
0	int
&&	O
memcmp	function
(	O
cp2	pointer
+	O
2	int
,	O
mime	pointer
->	O
boundary	pointer
,	O
blength	long
)	O
==	O
0	int
)	O
||	O
memcmp	function
(	O
cp2	pointer
,	O
mime	pointer
->	O
boundary	pointer
,	O
blength	long
)	O
==	O
0	int
)	O
)	O
{	O
mime	pointer
->	O
parser_state	int
=	O
MIME_STATE_HEADERS	int
;	O
mime	pointer
->	O
flags	int
&=	O
~	O
MIME_PARSER_HAVE_CR	int
;	O
mb_length	long
=	O
mime	pointer
->	O
cur_offset	long
-	O
mb_offset	long
-	O
mime	pointer
->	O
line_ndx	long
;	O
if	O
(	O
mime	pointer
->	O
header_length	long
)	O
{	O
if	O
(	O
mb_lines	long
)	O
mb_lines	long
--	O
;	O
_mime_append_part	function
(	O
mime	pointer
,	O
NULL	O
,	O
mb_offset	long
,	O
mb_length	long
,	O
mb_lines	long
)	O
;	O
}	O
if	O
(	O
(	O
&	O
mime	pointer
->	O
cur_line	pointer
[	O
mime	pointer
->	O
line_ndx	long
]	O
-	O
cp2	pointer
-	O
1	int
>	O
blength	long
&&	O
memcmp	function
(	O
cp2	pointer
+	O
blength	long
+	O
2	int
,	O
"--"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
||	O
(	O
&	O
mime	pointer
->	O
cur_line	pointer
[	O
mime	pointer
->	O
line_ndx	long
]	O
-	O
cp2	pointer
-	O
1	int
==	O
blength	long
&&	O
memcmp	function
(	O
cp2	pointer
+	O
blength	long
,	O
"--"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
)	O
{	O
mime	pointer
->	O
parser_state	int
=	O
MIME_STATE_BEGIN_LINE	int
;	O
mime	pointer
->	O
header_length	long
=	O
0	int
;	O
}	O
else	O
mime	pointer
->	O
line_ndx	long
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
nbytes	long
)	O
{	O
if	O
(	O
mime	pointer
->	O
header_length	long
)	O
mb_lines	long
++	O
;	O
mime	pointer
->	O
line_ndx	long
=	O
0	int
;	O
mime	pointer
->	O
cur_line	pointer
[	O
0	int
]	O
=	O
*	O
cp	pointer
;	O
}	O
}	O
if	O
(	O
nbytes	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
*	O
cp	pointer
==	O
'\n'	O
)	O
{	O
switch	O
(	O
mime	pointer
->	O
parser_state	int
)	O
{	O
case	O
MIME_STATE_BEGIN_LINE	int
:	O
mime	pointer
->	O
cur_line	pointer
[	O
0	int
]	O
=	O
*	O
cp	pointer
;	O
mime	pointer
->	O
line_ndx	long
=	O
0	int
;	O
mime	pointer
->	O
parser_state	int
=	O
MIME_STATE_SCAN_BOUNDARY	int
;	O
break	O
;	O
case	O
MIME_STATE_SCAN_BOUNDARY	int
:	O
break	O
;	O
case	O
MIME_STATE_HEADERS	int
:	O
mime	pointer
->	O
line_ndx	long
++	O
;	O
_mime_append_header_line	function
(	O
mime	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
line_ndx	long
==	O
1	int
||	O
mime	pointer
->	O
cur_line	pointer
[	O
0	int
]	O
==	O
'\r'	O
)	O
{	O
mime	pointer
->	O
parser_state	int
=	O
MIME_STATE_SCAN_BOUNDARY	int
;	O
mb_offset	long
=	O
mime	pointer
->	O
cur_offset	long
+	O
1	int
;	O
mb_lines	long
=	O
0	int
;	O
}	O
mime	pointer
->	O
line_ndx	long
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
mime	pointer
->	O
line_ndx	long
++	O
;	O
if	O
(	O
mime	pointer
->	O
line_ndx	long
>=	O
mime	pointer
->	O
line_size	long
)	O
{	O
size_t	long
newsize	long
=	O
mime	pointer
->	O
line_size	long
+	O
MIME_MAX_HDR_LEN	int
;	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
mime	pointer
->	O
cur_line	pointer
,	O
newsize	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
ret	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
mime	pointer
->	O
cur_line	pointer
=	O
p	pointer
;	O
mime	pointer
->	O
line_size	long
=	O
newsize	long
;	O
}	O
mime	pointer
->	O
cur_offset	long
++	O
;	O
nbytes	long
--	O
;	O
cp	pointer
++	O
;	O
}	O
}	O
mime	pointer
->	O
body_lines	long
=	O
mb_lines	long
;	O
mime	pointer
->	O
body_length	long
=	O
mb_length	long
;	O
mime	pointer
->	O
body_offset	long
=	O
mb_offset	long
;	O
if	O
(	O
ret	int
!=	O
EAGAIN	int
)	O
{	O
if	O
(	O
mime	pointer
->	O
header_length	long
)	O
_mime_append_part	function
(	O
mime	pointer
,	O
NULL	O
,	O
mb_offset	long
,	O
mb_length	long
,	O
mb_lines	long
)	O
;	O
mime	pointer
->	O
flags	int
&=	O
~	O
MIME_PARSER_ACTIVE	int
;	O
mime	pointer
->	O
body_offset	long
=	O
mime	pointer
->	O
body_length	long
=	O
mime	pointer
->	O
header_length	long
=	O
mime	pointer
->	O
body_lines	long
=	O
0	int
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
_mimepart_body_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mime_part	struct
*	O
mime_part	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
mime_part	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
mime_part	pointer
->	O
len	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mimepart_body_lines	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
struct	O
_mime_part	struct
*	O
mime_part	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
mime_part	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plines	pointer
)	O
*	O
plines	pointer
=	O
mime_part	pointer
->	O
lines	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
retain_charset	function
(	O
char	O
const	O
*	O
name	pointer
,	O
void	O
*	O
value	pointer
MU_ARG_UNUSED	O
,	O
void	O
*	O
data	pointer
MU_ARG_UNUSED	O
)	O
{	O
return	O
strcmp	function
(	O
name	pointer
,	O
"charset"	pointer
)	O
!=	O
0	int
;	O
}	O
static	O
int	O
_mime_set_content_type	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
const	O
char	O
*	O
content_type	pointer
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
size_t	long
size	long
;	O
int	O
ret	int
;	O
if	O
(	O
mime	pointer
->	O
hdrs	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
>	O
1	int
)	O
{	O
char	O
*	O
cstr	pointer
;	O
if	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_ADDED_MULTIPART_CT	int
)	O
return	O
0	int
;	O
if	O
(	O
mime	pointer
->	O
flags	int
&	O
MU_MIME_MULTIPART_MIXED	int
)	O
content_type	pointer
=	O
"multipart/mixed; boundary="	pointer
;	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mime	pointer
->	O
nmtp_parts	long
;	O
i	long
++	O
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
val	array
;	O
int	O
rc	int
;	O
mu_message_get_header	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
i	long
]	O
->	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_remove	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_DISPOSITION	pointer
,	O
1	int
)	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
val	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_content_type_t	pointer
ct	pointer
;	O
rc	int
=	O
mu_content_type_parse	function
(	O
val	array
,	O
NULL	O
,	O
&	O
ct	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
type	int
;	O
mu_assoc_mark	function
(	O
ct	pointer
->	O
param	pointer
,	O
retain_charset	function
,	O
NULL	O
)	O
;	O
mu_assoc_sweep	function
(	O
ct	pointer
->	O
param	pointer
)	O
;	O
rc	int
=	O
mu_asprintf	function
(	O
&	O
type	int
,	O
"%s/%s"	pointer
,	O
ct	pointer
->	O
type	int
,	O
ct	pointer
->	O
subtype	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_mime_header_set	function
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
type	int
,	O
ct	pointer
->	O
param	pointer
)	O
;	O
free	function
(	O
type	int
)	O
;	O
}	O
mu_content_type_destroy	function
(	O
&	O
ct	pointer
)	O
;	O
}	O
}	O
}	O
content_type	pointer
=	O
"multipart/alternative; boundary="	pointer
;	O
}	O
if	O
(	O
mime	pointer
->	O
boundary	pointer
==	O
NULL	O
)	O
{	O
char	O
boundary	pointer
[	O
128	int
]	O
;	O
snprintf	function
(	O
boundary	pointer
,	O
sizeof	O
boundary	pointer
,	O
"%ld-%ld=:%ld"	pointer
,	O
(	O
long	O
)	O
random	function
(	O
)	O
,	O
(	O
long	O
)	O
time	struct
(	O
0	int
)	O
,	O
(	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
if	O
(	O
(	O
mime	pointer
->	O
boundary	pointer
=	O
strdup	function
(	O
boundary	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
}	O
size	long
=	O
strlen	function
(	O
content_type	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
+	O
1	int
;	O
cstr	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
cstr	pointer
)	O
return	O
ENOMEM	int
;	O
strcpy	function
(	O
cstr	pointer
,	O
content_type	pointer
)	O
;	O
strcat	function
(	O
cstr	pointer
,	O
"\""	pointer
)	O
;	O
strcat	function
(	O
cstr	pointer
,	O
mime	pointer
->	O
boundary	pointer
)	O
;	O
strcat	function
(	O
cstr	pointer
,	O
"\""	pointer
)	O
;	O
mime	pointer
->	O
flags	int
|=	O
MIME_ADDED_MULTIPART_CT	int
;	O
ret	int
=	O
mu_header_set_value	function
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
cstr	pointer
,	O
1	int
)	O
;	O
free	function
(	O
cstr	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
mime	pointer
->	O
flags	int
&	O
(	O
MIME_ADDED_CT	int
|	O
MIME_ADDED_MULTIPART_CT	int
)	O
)	O
==	O
MIME_ADDED_CT	int
)	O
return	O
0	int
;	O
mime	pointer
->	O
flags	int
&=	O
~	O
MIME_ADDED_MULTIPART_CT	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
)	O
mu_message_get_header	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
0	int
]	O
->	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
hdr	pointer
==	O
NULL	O
||	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
content_type	pointer
)	O
)	O
content_type	pointer
=	O
"text/plain; charset=us-ascii"	pointer
;	O
ret	int
=	O
mu_header_set_value	function
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
content_type	pointer
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
if	O
(	O
hdr	pointer
)	O
{	O
const	O
char	O
*	O
content_te	pointer
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
&	O
content_te	pointer
)	O
==	O
0	int
)	O
ret	int
=	O
mu_header_set_value	function
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	pointer
,	O
content_te	pointer
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_DESCRIPTION	pointer
,	O
&	O
content_te	pointer
)	O
==	O
0	int
)	O
ret	int
=	O
mu_header_set_value	function
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_DESCRIPTION	pointer
,	O
content_te	pointer
,	O
1	int
)	O
;	O
}	O
}	O
mime	pointer
->	O
flags	int
|=	O
MIME_ADDED_CT	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
_mime_part_size	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
size_t	long
total	long
;	O
int	O
ret	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
0	int
)	O
{	O
*	O
psize	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
_mime_set_content_type	function
(	O
mime	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
1	int
)	O
{	O
ret	int
=	O
mu_message_size	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
0	int
]	O
->	O
msg	pointer
,	O
&	O
total	long
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
size	long
,	O
boundary_len	long
;	O
boundary_len	long
=	O
strlen	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
;	O
total	long
=	O
boundary_len	long
+	O
3	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mime	pointer
->	O
nmtp_parts	long
;	O
i	long
++	O
)	O
{	O
ret	int
=	O
mu_message_size	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
i	long
]	O
->	O
msg	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
ret	int
)	O
break	O
;	O
total	long
+=	O
size	long
+	O
boundary_len	long
+	O
4	int
;	O
}	O
total	long
+=	O
2	int
;	O
}	O
*	O
psize	pointer
=	O
total	long
;	O
return	O
ret	int
;	O
}	O
struct	O
_mime_body_stream	struct
{	O
struct	O
_mu_stream	struct
stream	pointer
;	O
mu_mime_t	pointer
mime	pointer
;	O
}	O
;	O
static	O
int	O
_mime_body_stream_size	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mime_body_stream	struct
*	O
mstr	pointer
=	O
(	O
struct	O
_mime_body_stream	struct
*	O
)	O
stream	pointer
;	O
mu_mime_t	pointer
mime	pointer
=	O
mstr	pointer
->	O
mime	pointer
;	O
size_t	long
sz	pointer
;	O
int	O
rc	int
=	O
_mime_part_size	function
(	O
mime	pointer
,	O
&	O
sz	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
psize	pointer
=	O
sz	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
mime_reset_state	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
mime	pointer
->	O
cur_offset	long
=	O
0	int
;	O
mime	pointer
->	O
cur_part	long
=	O
0	int
;	O
mime	pointer
->	O
part_offset	long
=	O
0	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
>	O
1	int
)	O
mime	pointer
->	O
flags	int
|=	O
MIME_INSERT_BOUNDARY	int
;	O
}	O
static	O
int	O
_mime_body_stream_seek	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mime_body_stream	struct
*	O
mstr	pointer
=	O
(	O
struct	O
_mime_body_stream	struct
*	O
)	O
stream	pointer
;	O
mu_mime_t	pointer
mime	pointer
=	O
mstr	pointer
->	O
mime	pointer
;	O
if	O
(	O
off	long
==	O
0	int
)	O
mime_reset_state	function
(	O
mime	pointer
)	O
;	O
if	O
(	O
off	long
!=	O
mime	pointer
->	O
cur_offset	long
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
nullstr	pointer
;	O
if	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_SEEK_ACTIVE	int
)	O
return	O
ESPIPE	int
;	O
mime	pointer
->	O
flags	int
|=	O
MIME_SEEK_ACTIVE	int
;	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
nullstr	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
total	long
;	O
rc	int
=	O
mu_stream_copy	function
(	O
nullstr	pointer
,	O
stream	pointer
,	O
off	long
,	O
&	O
total	long
)	O
;	O
mu_stream_destroy	function
(	O
&	O
nullstr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
total	long
!=	O
off	long
)	O
rc	int
=	O
ESPIPE	int
;	O
}	O
mime	pointer
->	O
flags	int
&=	O
~	O
MIME_SEEK_ACTIVE	int
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
presult	pointer
=	O
off	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mime_body_stream_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
nbytes	long
)	O
{	O
struct	O
_mime_body_stream	struct
*	O
mstr	pointer
=	O
(	O
struct	O
_mime_body_stream	struct
*	O
)	O
stream	pointer
;	O
mu_mime_t	pointer
mime	pointer
=	O
mstr	pointer
->	O
mime	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
size_t	long
total	long
=	O
0	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
0	int
)	O
{	O
*	O
nbytes	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
_mime_set_content_type	function
(	O
mime	pointer
)	O
)	O
==	O
0	int
)	O
{	O
do	O
{	O
size_t	long
part_nbytes	long
=	O
0	int
;	O
if	O
(	O
buflen	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
>	O
1	int
)	O
{	O
size_t	long
len	int
;	O
if	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_INSERT_BOUNDARY	int
)	O
{	O
if	O
(	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_ADDING_BOUNDARY	int
)	O
==	O
0	int
)	O
{	O
mime	pointer
->	O
boundary_len	long
=	O
strlen	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
;	O
mime	pointer
->	O
preamble	long
=	O
2	int
;	O
if	O
(	O
mime	pointer
->	O
cur_part	long
==	O
mime	pointer
->	O
nmtp_parts	long
)	O
mime	pointer
->	O
postamble	long
=	O
2	int
;	O
mime	pointer
->	O
flags	int
|=	O
MIME_ADDING_BOUNDARY	int
;	O
}	O
while	O
(	O
mime	pointer
->	O
preamble	long
)	O
{	O
mime	pointer
->	O
preamble	long
--	O
;	O
ADD_CHAR	O
(	O
buf	pointer
,	O
'-'	O
,	O
mime	pointer
->	O
cur_offset	long
,	O
buflen	long
,	O
total	long
,	O
nbytes	long
)	O
;	O
}	O
len	int
=	O
strlen	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
-	O
mime	pointer
->	O
boundary_len	long
;	O
while	O
(	O
mime	pointer
->	O
boundary_len	long
)	O
{	O
mime	pointer
->	O
boundary_len	long
--	O
;	O
ADD_CHAR	O
(	O
buf	pointer
,	O
mime	pointer
->	O
boundary	pointer
[	O
len	int
++	O
]	O
,	O
mime	pointer
->	O
cur_offset	long
,	O
buflen	long
,	O
total	long
,	O
nbytes	long
)	O
;	O
}	O
while	O
(	O
mime	pointer
->	O
postamble	long
)	O
{	O
mime	pointer
->	O
postamble	long
--	O
;	O
ADD_CHAR	O
(	O
buf	pointer
,	O
'-'	O
,	O
mime	pointer
->	O
cur_offset	long
,	O
buflen	long
,	O
total	long
,	O
nbytes	long
)	O
;	O
}	O
mime	pointer
->	O
flags	int
&=	O
~	O
(	O
MIME_INSERT_BOUNDARY	int
|	O
MIME_ADDING_BOUNDARY	int
)	O
;	O
mime	pointer
->	O
part_offset	long
=	O
0	int
;	O
ADD_CHAR	O
(	O
buf	pointer
,	O
'\n'	O
,	O
mime	pointer
->	O
cur_offset	long
,	O
buflen	long
,	O
total	long
,	O
nbytes	long
)	O
;	O
}	O
if	O
(	O
!	O
mime	pointer
->	O
part_stream	pointer
)	O
{	O
if	O
(	O
mime	pointer
->	O
cur_part	long
>=	O
mime	pointer
->	O
nmtp_parts	long
)	O
{	O
*	O
nbytes	long
=	O
total	long
;	O
return	O
0	int
;	O
}	O
ret	int
=	O
mu_message_get_streamref	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
mime	pointer
->	O
cur_part	long
]	O
->	O
msg	pointer
,	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
mime	pointer
->	O
part_stream	pointer
)	O
{	O
mu_body_t	pointer
part_body	pointer
;	O
if	O
(	O
mime	pointer
->	O
cur_part	long
>=	O
mime	pointer
->	O
nmtp_parts	long
)	O
{	O
*	O
nbytes	long
=	O
total	long
;	O
return	O
0	int
;	O
}	O
mu_message_get_body	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
mime	pointer
->	O
cur_part	long
]	O
->	O
msg	pointer
,	O
&	O
part_body	pointer
)	O
;	O
ret	int
=	O
mu_body_get_streamref	function
(	O
part_body	pointer
,	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
}	O
if	O
(	O
ret	int
)	O
break	O
;	O
ret	int
=	O
mu_stream_seek	function
(	O
mime	pointer
->	O
part_stream	pointer
,	O
mime	pointer
->	O
part_offset	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
mu_stream_destroy	function
(	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
break	O
;	O
}	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
ret	int
=	O
mu_stream_read	function
(	O
mime	pointer
->	O
part_stream	pointer
,	O
buf	pointer
,	O
buflen	long
,	O
&	O
part_nbytes	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
part_nbytes	long
)	O
{	O
mime	pointer
->	O
part_offset	long
+=	O
part_nbytes	long
;	O
mime	pointer
->	O
cur_offset	long
+=	O
part_nbytes	long
;	O
total	long
+=	O
part_nbytes	long
;	O
buflen	long
-=	O
part_nbytes	long
;	O
buf	pointer
+=	O
part_nbytes	long
;	O
}	O
else	O
{	O
mu_stream_destroy	function
(	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
mime	pointer
->	O
flags	int
|=	O
MIME_INSERT_BOUNDARY	int
;	O
mime	pointer
->	O
cur_part	long
++	O
;	O
ADD_CHAR	O
(	O
buf	pointer
,	O
'\n'	O
,	O
mime	pointer
->	O
cur_offset	long
,	O
buflen	long
,	O
total	long
,	O
nbytes	long
)	O
;	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
ret	int
==	O
0	int
&&	O
mime	pointer
->	O
cur_part	long
<=	O
mime	pointer
->	O
nmtp_parts	long
)	O
;	O
}	O
if	O
(	O
ret	int
)	O
mu_stream_destroy	function
(	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
*	O
nbytes	long
=	O
total	long
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
_mime_body_stream_ioctl	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
_mime_body_stream	struct
*	O
mstr	pointer
=	O
(	O
struct	O
_mime_body_stream	struct
*	O
)	O
stream	pointer
;	O
mu_mime_t	pointer
mime	pointer
=	O
mstr	pointer
->	O
mime	pointer
;	O
mu_stream_t	pointer
msg_stream	pointer
;	O
int	O
rc	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
0	int
||	O
mime	pointer
->	O
cur_offset	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_message_get_streamref	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
mime	pointer
->	O
cur_part	long
]	O
->	O
msg	pointer
,	O
&	O
msg_stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
msg_stream	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
msg_stream	pointer
)	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
ENOSYS	int
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
break	O
;	O
default	O
:	O
rc	int
=	O
ENOSYS	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
create_mime_body_stream	function
(	O
mu_stream_t	pointer
*	O
pstr	pointer
,	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
struct	O
_mime_body_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mime_body_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
ENOMEM	int
;	O
sp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_mime_body_stream_read	function
;	O
sp	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
_mime_body_stream_seek	function
;	O
sp	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_mime_body_stream_ioctl	function
;	O
sp	pointer
->	O
stream	pointer
.	O
size	long
=	O
_mime_body_stream_size	function
;	O
sp	pointer
->	O
mime	pointer
=	O
mime	pointer
;	O
mime_reset_state	function
(	O
mime	pointer
)	O
;	O
*	O
pstr	pointer
=	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mime_body_size	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
mu_mime_t	pointer
mime	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
return	O
_mime_part_size	function
(	O
mime	pointer
,	O
psize	pointer
)	O
;	O
}	O
static	O
int	O
_mime_body_lines	function
(	O
mu_body_t	pointer
body	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_body_get_owner	function
(	O
body	pointer
)	O
;	O
mu_mime_t	pointer
mime	pointer
=	O
mu_message_get_owner	function
(	O
msg	pointer
)	O
;	O
int	O
i	long
,	O
ret	int
;	O
size_t	long
total	long
=	O
0	int
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
0	int
)	O
{	O
*	O
plines	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
_mime_set_content_type	function
(	O
mime	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mime	pointer
->	O
nmtp_parts	long
;	O
i	long
++	O
)	O
{	O
size_t	long
lines	long
;	O
mu_message_lines	function
(	O
mime	pointer
->	O
mtp_parts	pointer
[	O
i	long
]	O
->	O
msg	pointer
,	O
&	O
lines	long
)	O
;	O
total	long
+=	O
lines	long
;	O
if	O
(	O
mime	pointer
->	O
nmtp_parts	long
>	O
1	int
)	O
total	long
++	O
;	O
}	O
*	O
plines	pointer
=	O
total	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_mime_create	function
(	O
mu_mime_t	pointer
*	O
pmime	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
int	O
flags	int
)	O
{	O
mu_mime_t	pointer
mime	pointer
=	O
NULL	O
;	O
int	O
ret	int
=	O
0	int
;	O
size_t	long
size	long
;	O
mu_body_t	pointer
body	pointer
;	O
if	O
(	O
pmime	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
flags	int
&	O
MIME_MULTIPART_FLAGS	O
)	O
{	O
case	O
MIME_MULTIPART_FLAGS	O
:	O
return	O
EINVAL	int
;	O
case	O
0	int
:	O
flags	int
|=	O
MU_MIME_MULTIPART_MIXED	int
;	O
}	O
*	O
pmime	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
mime	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mime	pointer
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
msg	pointer
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
mime	pointer
->	O
hdrs	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_header_get_value	O
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
NULL	O
,	O
0	int
,	O
&	O
size	long
)	O
)	O
==	O
0	int
&&	O
size	long
)	O
{	O
if	O
(	O
(	O
mime	pointer
->	O
content_type	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
ret	int
=	O
ENOMEM	int
;	O
else	O
if	O
(	O
(	O
ret	int
=	O
mu_header_get_value	O
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
mime	pointer
->	O
content_type	pointer
,	O
size	long
+	O
1	int
,	O
0	int
)	O
)	O
==	O
0	int
)	O
_mime_munge_content_header	function
(	O
mime	pointer
->	O
content_type	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ret	int
==	O
MU_ERR_NOENT	O
)	O
{	O
ret	int
=	O
0	int
;	O
if	O
(	O
(	O
mime	pointer
->	O
content_type	pointer
=	O
strdup	function
(	O
"text/plain; charset=us-ascii"	pointer
)	O
)	O
==	O
NULL	O
)	O
ret	int
=	O
ENOMEM	int
;	O
}	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mime	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
mime	pointer
->	O
buf_size	long
=	O
MIME_DFLT_BUF_SIZE	int
;	O
mime	pointer
->	O
line_size	long
=	O
MIME_MAX_HDR_LEN	int
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
mime	pointer
->	O
stream	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
mime	pointer
->	O
flags	int
|=	O
MIME_NEW_MESSAGE	int
;	O
}	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
if	O
(	O
mime	pointer
->	O
content_type	pointer
)	O
free	function
(	O
mime	pointer
->	O
content_type	pointer
)	O
;	O
free	function
(	O
mime	pointer
)	O
;	O
}	O
else	O
{	O
mime	pointer
->	O
flags	int
|=	O
(	O
flags	int
&	O
MIME_FLAG_MASK	int
)	O
;	O
mime	pointer
->	O
ref_count	int
=	O
1	int
;	O
*	O
pmime	pointer
=	O
mime	pointer
;	O
}	O
return	O
ret	int
;	O
}	O
void	O
mu_mime_ref	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
mime	pointer
->	O
ref_count	int
++	O
;	O
}	O
static	O
void	O
_mu_mime_free	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
struct	O
_mime_part	struct
*	O
mime_part	pointer
;	O
int	O
i	long
;	O
if	O
(	O
mime	pointer
->	O
mtp_parts	pointer
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mime	pointer
->	O
nmtp_parts	long
;	O
i	long
++	O
)	O
{	O
mime_part	pointer
=	O
mime	pointer
->	O
mtp_parts	pointer
[	O
i	long
]	O
;	O
mu_message_unref	function
(	O
mime_part	pointer
->	O
msg	pointer
)	O
;	O
free	function
(	O
mime_part	pointer
)	O
;	O
}	O
free	function
(	O
mime	pointer
->	O
mtp_parts	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
mime	pointer
->	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mime	pointer
->	O
part_stream	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
msg	pointer
&&	O
mime	pointer
->	O
flags	int
&	O
MIME_NEW_MESSAGE	int
)	O
mu_message_destroy	function
(	O
&	O
mime	pointer
->	O
msg	pointer
,	O
mime	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
content_type	pointer
)	O
free	function
(	O
mime	pointer
->	O
content_type	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
cur_buf	pointer
)	O
free	function
(	O
mime	pointer
->	O
cur_buf	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
cur_line	pointer
)	O
free	function
(	O
mime	pointer
->	O
cur_line	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
boundary	pointer
)	O
free	function
(	O
mime	pointer
->	O
boundary	pointer
)	O
;	O
if	O
(	O
mime	pointer
->	O
header_buf	pointer
)	O
free	function
(	O
mime	pointer
->	O
header_buf	pointer
)	O
;	O
free	function
(	O
mime	pointer
)	O
;	O
}	O
void	O
mu_mime_unref	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
if	O
(	O
--	O
mime	pointer
->	O
ref_count	int
==	O
0	int
)	O
_mu_mime_free	function
(	O
mime	pointer
)	O
;	O
}	O
void	O
mu_mime_destroy	function
(	O
mu_mime_t	pointer
*	O
pmime	pointer
)	O
{	O
if	O
(	O
pmime	pointer
&&	O
*	O
pmime	pointer
)	O
{	O
mu_mime_unref	function
(	O
*	O
pmime	pointer
)	O
;	O
*	O
pmime	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_mime_get_part	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
size_t	long
part	long
,	O
mu_message_t	pointer
*	O
msg	pointer
)	O
{	O
size_t	long
nmtp_parts	long
;	O
int	O
ret	int
=	O
0	int
,	O
flags	int
=	O
0	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
struct	O
_mime_part	struct
*	O
mime_part	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
mu_mime_get_num_parts	function
(	O
mime	pointer
,	O
&	O
nmtp_parts	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
part	long
<	O
1	int
||	O
part	long
>	O
nmtp_parts	long
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
nmtp_parts	long
==	O
1	int
&&	O
mime	pointer
->	O
mtp_parts	pointer
==	O
NULL	O
)	O
*	O
msg	pointer
=	O
mime	pointer
->	O
msg	pointer
;	O
else	O
{	O
mime_part	pointer
=	O
mime	pointer
->	O
mtp_parts	pointer
[	O
part	long
-	O
1	int
]	O
;	O
if	O
(	O
mime	pointer
->	O
stream	pointer
&&	O
!	O
mime_part	pointer
->	O
body_created	int
&&	O
(	O
ret	int
=	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
mime_part	pointer
->	O
msg	pointer
)	O
)	O
==	O
0	int
)	O
{	O
mu_body_set_size	function
(	O
body	pointer
,	O
_mimepart_body_size	function
,	O
mime_part	pointer
->	O
msg	pointer
)	O
;	O
mu_body_set_lines	function
(	O
body	pointer
,	O
_mimepart_body_lines	function
,	O
mime_part	pointer
->	O
msg	pointer
)	O
;	O
mu_stream_get_flags	function
(	O
mime	pointer
->	O
stream	pointer
,	O
&	O
flags	int
)	O
;	O
ret	int
=	O
mu_streamref_create_abridged	function
(	O
&	O
stream	pointer
,	O
mime	pointer
->	O
stream	pointer
,	O
mime_part	pointer
->	O
offset	long
,	O
mime_part	pointer
->	O
offset	long
+	O
mime_part	pointer
->	O
len	int
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mu_stream_set_flags	function
(	O
stream	pointer
,	O
MU_STREAM_READ	int
|	O
(	O
flags	int
&	O
(	O
MU_STREAM_SEEK	int
|	O
MU_STREAM_NONBLOCK	int
)	O
)	O
)	O
;	O
mu_body_set_stream	function
(	O
body	pointer
,	O
stream	pointer
,	O
mime_part	pointer
->	O
msg	pointer
)	O
;	O
mu_message_set_body	function
(	O
mime_part	pointer
->	O
msg	pointer
,	O
body	pointer
,	O
mime_part	pointer
)	O
;	O
mime_part	pointer
->	O
body_created	int
=	O
1	int
;	O
}	O
}	O
*	O
msg	pointer
=	O
mime_part	pointer
->	O
msg	pointer
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
int	O
mu_mime_get_num_parts	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
size_t	long
*	O
nmtp_parts	long
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
if	O
(	O
(	O
mime	pointer
->	O
nmtp_parts	long
==	O
0	int
&&	O
!	O
mime	pointer
->	O
boundary	pointer
)	O
||	O
mime	pointer
->	O
flags	int
&	O
MIME_PARSER_ACTIVE	int
)	O
{	O
if	O
(	O
mu_mime_is_multipart	function
(	O
mime	pointer
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
_mime_parse_mpart_message	function
(	O
mime	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
else	O
{	O
*	O
nmtp_parts	long
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
*	O
nmtp_parts	long
=	O
mime	pointer
->	O
nmtp_parts	long
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
mu_mime_add_part	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
mime	pointer
==	O
NULL	O
||	O
msg	pointer
==	O
NULL	O
||	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_NEW_MESSAGE	int
)	O
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
ret	int
=	O
_mime_append_part	function
(	O
mime	pointer
,	O
msg	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
==	O
0	int
)	O
ret	int
=	O
_mime_set_content_type	function
(	O
mime	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
mu_mime_get_message	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
*	O
msg	pointer
)	O
{	O
mu_stream_t	pointer
body_stream	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
if	O
(	O
mime	pointer
==	O
NULL	O
||	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mime	pointer
->	O
msg	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
mime	pointer
->	O
flags	int
&	O
MIME_NEW_MESSAGE	int
)	O
==	O
0	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
ret	int
=	O
mu_message_create	function
(	O
&	O
mime	pointer
->	O
msg	pointer
,	O
mime	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_header_create	function
(	O
&	O
mime	pointer
->	O
hdrs	pointer
,	O
NULL	O
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
mu_message_set_header	function
(	O
mime	pointer
->	O
msg	pointer
,	O
mime	pointer
->	O
hdrs	pointer
,	O
mime	pointer
)	O
;	O
mu_header_set_value	function
(	O
mime	pointer
->	O
hdrs	pointer
,	O
MU_HEADER_MIME_VERSION	pointer
,	O
"1.0"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
_mime_set_content_type	function
(	O
mime	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
mu_body_create	function
(	O
&	O
body	pointer
,	O
mime	pointer
->	O
msg	pointer
)	O
)	O
==	O
0	int
)	O
{	O
mu_message_set_body	function
(	O
mime	pointer
->	O
msg	pointer
,	O
body	pointer
,	O
mime	pointer
)	O
;	O
mu_body_set_size	function
(	O
body	pointer
,	O
_mime_body_size	function
,	O
mime	pointer
->	O
msg	pointer
)	O
;	O
mu_body_set_lines	function
(	O
body	pointer
,	O
_mime_body_lines	function
,	O
mime	pointer
->	O
msg	pointer
)	O
;	O
ret	int
=	O
create_mime_body_stream	function
(	O
&	O
body_stream	pointer
,	O
mime	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mu_body_set_stream	function
(	O
body	pointer
,	O
body_stream	pointer
,	O
mime	pointer
->	O
msg	pointer
)	O
;	O
mime	pointer
->	O
msg	pointer
->	O
mime	pointer
=	O
mime	pointer
;	O
mu_message_ref	function
(	O
mime	pointer
->	O
msg	pointer
)	O
;	O
*	O
msg	pointer
=	O
mime	pointer
->	O
msg	pointer
;	O
return	O
0	int
;	O
}	O
}	O
}	O
}	O
mu_message_destroy	function
(	O
&	O
mime	pointer
->	O
msg	pointer
,	O
mime	pointer
)	O
;	O
mime	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mu_message_ref	function
(	O
mime	pointer
->	O
msg	pointer
)	O
;	O
*	O
msg	pointer
=	O
mime	pointer
->	O
msg	pointer
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
mu_mime_to_message	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
int	O
rc	int
=	O
mu_mime_get_message	function
(	O
mime	pointer
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_message_unref	function
(	O
msg	pointer
)	O
;	O
mime	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
mu_mime_ref	function
(	O
mime	pointer
)	O
;	O
*	O
pmsg	pointer
=	O
msg	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_is_multipart	function
(	O
mu_mime_t	pointer
mime	pointer
)	O
{	O
if	O
(	O
mime	pointer
->	O
content_type	pointer
)	O
return	O
(	O
mu_c_strncasecmp	function
(	O
"multipart"	pointer
,	O
mime	pointer
->	O
content_type	pointer
,	O
strlen	function
(	O
"multipart"	pointer
)	O
)	O
?	O
0	int
:	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
