static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: qam_verify.c,v 1.1 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
int	O
CDB___qam_vrfy_meta	function
(	O
dbp	pointer
,	O
vdp	pointer
,	O
meta	pointer
,	O
pgno	int
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
flags	int
;	O
{	O
VRFY_PAGEINFO	struct
*	O
pip	pointer
;	O
int	O
isbad	int
,	O
ret	int
,	O
t_ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_getpageinfo	function
(	O
vdp	pointer
,	O
pgno	int
,	O
&	O
pip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
isbad	int
=	O
0	int
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
pip	pointer
,	O
VRFY_INCOMPLETE	int
)	O
)	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue databases must be one-per-file."	pointer
)	O
)	O
;	O
if	O
(	O
meta	pointer
->	O
start	int
!=	O
1	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue start offset of %lu"	pointer
,	O
meta	pointer
->	O
start	int
)	O
)	O
;	O
isbad	int
=	O
1	int
;	O
}	O
if	O
(	O
meta	pointer
->	O
cur_recno	int
<	O
meta	pointer
->	O
first_recno	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Wrongly ordered first/current recnos, %lu/%lu"	pointer
,	O
meta	pointer
->	O
first_recno	int
,	O
meta	pointer
->	O
cur_recno	int
)	O
)	O
;	O
isbad	int
=	O
1	int
;	O
}	O
if	O
(	O
vdp	pointer
->	O
last_pgno	int
>	O
0	int
&&	O
(	O
1	int
+	O
(	O
(	O
meta	pointer
->	O
cur_recno	int
-	O
meta	pointer
->	O
start	int
)	O
/	O
meta	pointer
->	O
rec_page	int
)	O
)	O
!=	O
vdp	pointer
->	O
last_pgno	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Incorrect last page number in queue database"	pointer
)	O
)	O
;	O
isbad	int
=	O
1	int
;	O
}	O
if	O
(	O
ALIGN	O
(	O
meta	pointer
->	O
re_len	int
+	O
sizeof	O
(	O
QAMDATA	struct
)	O
-	O
1	int
,	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
*	O
meta	pointer
->	O
rec_page	int
+	O
sizeof	O
(	O
QPAGE	struct
)	O
>	O
dbp	pointer
->	O
pgsize	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue record length %lu impossibly high for page size and records per page"	pointer
,	O
meta	pointer
->	O
re_len	int
)	O
)	O
;	O
ret	int
=	O
DB_VERIFY_FATAL	O
;	O
goto	O
err	pointer
;	O
}	O
else	O
{	O
vdp	pointer
->	O
re_len	int
=	O
meta	pointer
->	O
re_len	int
;	O
vdp	pointer
->	O
rec_page	int
=	O
meta	pointer
->	O
rec_page	int
;	O
}	O
err	pointer
:	O
if	O
(	O
(	O
t_ret	int
=	O
CDB___db_vrfy_putpageinfo	function
(	O
vdp	pointer
,	O
pip	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
==	O
0	int
&&	O
isbad	int
==	O
1	int
?	O
DB_VERIFY_BAD	O
:	O
ret	int
)	O
;	O
}	O
int	O
CDB___qam_vrfy_data	function
(	O
dbp	pointer
,	O
vdp	pointer
,	O
h	pointer
,	O
pgno	int
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
QPAGE	struct
*	O
h	pointer
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
flags	int
;	O
{	O
DB	struct
fakedb	struct
;	O
struct	O
__queue	struct
fakeq	struct
;	O
QAMDATA	struct
*	O
qp	pointer
;	O
db_recno_t	int
i	int
;	O
u_int8_t	char
qflags	char
;	O
fakedb	struct
.	O
q_internal	pointer
=	O
&	O
fakeq	struct
;	O
fakeq	struct
.	O
re_len	int
=	O
vdp	pointer
->	O
re_len	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
vdp	pointer
->	O
rec_page	int
;	O
i	int
++	O
)	O
{	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
&	O
fakedb	struct
,	O
h	pointer
,	O
i	int
)	O
;	O
if	O
(	O
(	O
u_int8_t	char
*	O
)	O
qp	pointer
>=	O
(	O
u_int8_t	char
*	O
)	O
h	pointer
+	O
dbp	pointer
->	O
pgsize	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue record %lu extends past end of page %lu"	pointer
,	O
i	int
,	O
pgno	int
)	O
)	O
;	O
return	O
(	O
DB_VERIFY_BAD	O
)	O
;	O
}	O
qflags	char
=	O
qp	pointer
->	O
flags	int
;	O
qflags	char
&=	O
!	O
(	O
QAM_VALID	int
|	O
QAM_SET	int
)	O
;	O
if	O
(	O
qflags	char
!=	O
0	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue record %lu on page %lu has bad flags"	pointer
,	O
i	int
,	O
pgno	int
)	O
)	O
;	O
return	O
(	O
DB_VERIFY_BAD	O
)	O
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___qam_vrfy_structure	function
(	O
dbp	pointer
,	O
vdp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
VRFY_PAGEINFO	struct
*	O
pip	pointer
;	O
db_pgno_t	int
i	int
;	O
int	O
ret	int
,	O
isbad	int
;	O
isbad	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_getpageinfo	function
(	O
vdp	pointer
,	O
PGNO_BASE_MD	int
,	O
&	O
pip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
pip	pointer
->	O
type	enum
!=	O
P_QAMMETA	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue database has no meta page"	pointer
)	O
)	O
;	O
isbad	int
=	O
1	int
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_pgset_inc	function
(	O
vdp	pointer
->	O
pgset	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
vdp	pointer
->	O
last_pgno	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_putpageinfo	function
(	O
vdp	pointer
,	O
pip	pointer
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
CDB___db_vrfy_getpageinfo	function
(	O
vdp	pointer
,	O
i	int
,	O
&	O
pip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
pip	pointer
,	O
VRFY_IS_ALLZEROES	int
)	O
&&	O
pip	pointer
->	O
type	enum
!=	O
P_QAMDATA	int
)	O
{	O
EPRINT	O
(	O
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Queue database page %lu of incorrect type %lu"	pointer
,	O
i	int
,	O
pip	pointer
->	O
type	enum
)	O
)	O
;	O
isbad	int
=	O
1	int
;	O
goto	O
err	pointer
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_pgset_inc	function
(	O
vdp	pointer
->	O
pgset	pointer
,	O
i	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
err	pointer
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_putpageinfo	function
(	O
vdp	pointer
,	O
pip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
isbad	int
==	O
1	int
?	O
DB_VERIFY_BAD	O
:	O
0	int
)	O
;	O
}	O
