PSTR	pointer
vrgszMathFuncs	array
[	O
]	O
=	O
{	O
"acos"	pointer
,	O
"asin"	pointer
,	O
"atan"	pointer
,	O
"atan2"	pointer
,	O
"ceil"	pointer
,	O
"cos"	pointer
,	O
"cosh"	pointer
,	O
"exp"	pointer
,	O
"fabs"	pointer
,	O
"floor"	pointer
,	O
"fmax"	pointer
,	O
"fmin"	pointer
,	O
"fmod"	pointer
,	O
"log"	pointer
,	O
"log10"	pointer
,	O
"pow"	pointer
,	O
"sin"	pointer
,	O
"sinh"	pointer
,	O
"sqrt"	pointer
,	O
"tan"	pointer
,	O
"tanh"	pointer
,	O
"CDFNormal"	pointer
,	O
"erfc"	pointer
,	O
"lnDFNormal"	pointer
,	O
"lnGamma"	pointer
,	O
"piecewise"	pointer
,	O
"and"	pointer
,	O
"leq"	pointer
,	O
"lt"	pointer
,	O
"BetaRandom"	pointer
,	O
"BinomialBetaRandom"	pointer
,	O
"BinomialRandom"	pointer
,	O
"CauchyRandom"	pointer
,	O
"Chi2Random"	pointer
,	O
"ExpRandom"	pointer
,	O
"GammaRandom"	pointer
,	O
"GetSeed"	pointer
,	O
"GGammaRandom"	pointer
,	O
"InvGGammaRandom"	pointer
,	O
"LogNormalRandom"	pointer
,	O
"LogUniformRandom"	pointer
,	O
"NormalRandom"	pointer
,	O
"PiecewiseRandom"	pointer
,	O
"PoissonRandom"	pointer
,	O
"SetSeed"	pointer
,	O
"StudentTRandom"	pointer
,	O
"TruncInvGGammaRandom"	pointer
,	O
"TruncLogNormalRandom"	pointer
,	O
"TruncNormalRandom"	pointer
,	O
"UniformRandom"	pointer
,	O
""	pointer
}	O
;	O
char	O
vszHasInitializer	array
[	O
]	O
=	O
"0.0; /* Redefined later */"	pointer
;	O
BOOL	int
IsMathFunc	function
(	O
PSTR	pointer
sz	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
vrgszMathFuncs	array
[	O
i	int
]	O
&&	O
strcmp	function
(	O
vrgszMathFuncs	array
[	O
i	int
]	O
,	O
sz	pointer
)	O
)	O
i	int
++	O
;	O
return	O
(	O
*	O
vrgszMathFuncs	array
[	O
i	int
]	O
)	O
;	O
}	O
BOOL	int
IsDelayFunc	function
(	O
BOOL	int
*	O
bDelays	int
,	O
PSTR	pointer
sz	pointer
)	O
{	O
BOOL	int
bIsDelay	int
;	O
bIsDelay	int
=	O
(	O
!	O
strcmp	function
(	O
"CalcDelay"	pointer
,	O
sz	pointer
)	O
)	O
;	O
if	O
(	O
bIsDelay	int
&&	O
!	O
(	O
*	O
bDelays	int
)	O
)	O
*	O
bDelays	int
=	O
TRUE	int
;	O
return	O
(	O
bIsDelay	int
)	O
;	O
}	O
BOOL	int
VerifyEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szEqn	pointer
)	O
{	O
INPUTBUF	struct
ibDummy	struct
;	O
PSTRLEX	array
szLex	pointer
;	O
int	O
iType	int
,	O
fContext	int
;	O
BOOL	int
bReturn	int
=	O
TRUE	int
;	O
BOOL	int
bOK	int
=	O
TRUE	int
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
MakeStringBuffer	function
(	O
pibIn	pointer
,	O
&	O
ibDummy	struct
,	O
szEqn	pointer
)	O
;	O
while	O
(	O
!	O
EOB	O
(	O
&	O
ibDummy	struct
)	O
)	O
{	O
NextLex	function
(	O
&	O
ibDummy	struct
,	O
szLex	pointer
,	O
&	O
iType	int
)	O
;	O
switch	O
(	O
iType	int
)	O
{	O
case	O
LX_IDENTIFIER	int
:	O
if	O
(	O
(	O
iType	int
=	O
GetKeywordCode	function
(	O
szLex	pointer
,	O
&	O
fContext	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
bOK	int
=	O
(	O
iType	int
==	O
KM_DXDT	int
&&	O
(	O
fContext	int
&	O
pinfo	pointer
->	O
wContext	int
)	O
)	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
GetFnType	function
(	O
szLex	pointer
)	O
)	O
{	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
(	O
bOK	int
=	O
(	O
GetVarType	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szLex	pointer
)	O
||	O
IsMathFunc	function
(	O
szLex	pointer
)	O
||	O
IsDelayFunc	function
(	O
&	O
(	O
pinfo	pointer
->	O
bDelays	int
)	O
,	O
szLex	pointer
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_DYNAMICS	int
||	O
pinfo	pointer
->	O
wContext	int
==	O
CN_SCALE	int
||	O
pinfo	pointer
->	O
wContext	int
==	O
CN_CALCOUTPUTS	int
)	O
&&	O
!	O
(	O
strcmp	function
(	O
szLex	pointer
,	O
VSZ_TIME	pointer
)	O
&&	O
strcmp	function
(	O
szLex	pointer
,	O
VSZ_TIME_SBML	pointer
)	O
)	O
)	O
)	O
)	O
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_UNDEFINED	O
|	O
RE_FATAL	int
,	O
szLex	pointer
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
case	O
LX_EQNPUNCT	int
:	O
if	O
(	O
(	O
szLex	pointer
[	O
0	int
]	O
==	O
'!'	O
||	O
szLex	pointer
[	O
0	int
]	O
==	O
'='	O
)	O
&&	O
strlen	function
(	O
szLex	pointer
)	O
==	O
1	int
)	O
{	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_UNEXPECTED	int
,	O
szLex	pointer
,	O
".. in equation"	pointer
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
}	O
break	O
;	O
case	O
LX_PUNCT	int
:	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_UNEXPECTED	int
,	O
szLex	pointer
,	O
".. in equation"	pointer
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
LX_INTEGER	int
:	O
case	O
LX_FLOAT	int
:	O
break	O
;	O
default	O
:	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_UNEXPECTED	int
,	O
szLex	pointer
,	O
".. in equation"	pointer
)	O
;	O
bOK	int
=	O
FALSE	int
;	O
break	O
;	O
}	O
bReturn	int
=	O
(	O
bReturn	int
&&	O
bOK	int
)	O
;	O
}	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
void	O
AddEquation	function
(	O
PVMMAPSTRCT	pointer
*	O
ppvm	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
PVMMAPSTRCT	pointer
pvmNew	pointer
;	O
if	O
(	O
!	O
ppvm	pointer
||	O
!	O
szName	pointer
)	O
return	O
;	O
if	O
(	O
(	O
pvmNew	pointer
=	O
(	O
PVMMAPSTRCT	pointer
)	O
malloc	function
(	O
sizeof	O
(	O
VMMAPSTRCT	struct
)	O
)	O
)	O
)	O
{	O
pvmNew	pointer
->	O
szName	pointer
=	O
CopyString	function
(	O
szName	pointer
)	O
;	O
pvmNew	pointer
->	O
szEqn	pointer
=	O
CopyString	function
(	O
szEqn	pointer
)	O
;	O
pvmNew	pointer
->	O
hType	long
=	O
hType	long
;	O
pvmNew	pointer
->	O
pvmNextVar	pointer
=	O
*	O
ppvm	pointer
;	O
*	O
ppvm	pointer
=	O
pvmNew	pointer
;	O
}	O
else	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
szName	pointer
,	O
"* .. creating new equation in AddEquation"	pointer
)	O
;	O
}	O
PSTR	pointer
CopyString	function
(	O
PSTR	pointer
szOrg	pointer
)	O
{	O
PSTR	pointer
szBuf	pointer
;	O
if	O
(	O
szOrg	pointer
)	O
{	O
if	O
(	O
(	O
szBuf	pointer
=	O
(	O
PSTR	pointer
)	O
malloc	function
(	O
strlen	function
(	O
szOrg	pointer
)	O
+	O
1	int
)	O
)	O
)	O
return	O
(	O
strcpy	function
(	O
(	O
PSTR	pointer
)	O
szBuf	pointer
,	O
szOrg	pointer
)	O
)	O
;	O
else	O
ReportError	function
(	O
NULL	O
,	O
RE_OUTOFMEM	int
|	O
RE_FATAL	int
,	O
szOrg	pointer
,	O
"* .. defining equation in CopyString"	pointer
)	O
;	O
}	O
return	O
(	O
NULL	O
)	O
;	O
}	O
void	O
SetEquation	function
(	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
szEqn	pointer
)	O
{	O
if	O
(	O
!	O
pvm	pointer
||	O
!	O
szEqn	pointer
)	O
return	O
;	O
if	O
(	O
pvm	pointer
->	O
szEqn	pointer
)	O
free	function
(	O
pvm	pointer
->	O
szEqn	pointer
)	O
;	O
pvm	pointer
->	O
szEqn	pointer
=	O
CopyString	function
(	O
szEqn	pointer
)	O
;	O
}	O
void	O
SetVarType	function
(	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
szName	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
while	O
(	O
pvm	pointer
&&	O
strcmp	function
(	O
szName	pointer
,	O
pvm	pointer
->	O
szName	pointer
)	O
)	O
pvm	pointer
=	O
pvm	pointer
->	O
pvmNextVar	pointer
;	O
if	O
(	O
pvm	pointer
)	O
pvm	pointer
->	O
hType	long
=	O
hType	long
;	O
}	O
PVMMAPSTRCT	pointer
GetVarPTR	function
(	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
szName	pointer
)	O
{	O
while	O
(	O
pvm	pointer
&&	O
strcmp	function
(	O
szName	pointer
,	O
pvm	pointer
->	O
szName	pointer
)	O
)	O
pvm	pointer
=	O
pvm	pointer
->	O
pvmNextVar	pointer
;	O
return	O
(	O
pvm	pointer
)	O
;	O
}	O
int	O
GetVarType	function
(	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
szName	pointer
)	O
{	O
pvm	pointer
=	O
GetVarPTR	function
(	O
pvm	pointer
,	O
szName	pointer
)	O
;	O
return	O
(	O
TYPE	O
(	O
pvm	pointer
)	O
)	O
;	O
}	O
HANDLE	long
CalculateVarHandle	function
(	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
sz	pointer
)	O
{	O
PVMMAPSTRCT	pointer
pvmVar	pointer
;	O
int	O
cSameType	int
=	O
0	int
;	O
pvm	pointer
=	O
pvmVar	pointer
=	O
GetVarPTR	function
(	O
pvm	pointer
,	O
sz	pointer
)	O
;	O
if	O
(	O
pvm	pointer
)	O
pvm	pointer
=	O
pvm	pointer
->	O
pvmNextVar	pointer
;	O
while	O
(	O
pvm	pointer
&&	O
pvm	pointer
->	O
hType	long
==	O
pvmVar	pointer
->	O
hType	long
)	O
{	O
cSameType	int
++	O
;	O
pvm	pointer
=	O
pvm	pointer
->	O
pvmNextVar	pointer
;	O
}	O
return	O
(	O
(	O
HANDLE	long
)	O
(	O
pvmVar	pointer
?	O
pvmVar	pointer
->	O
hType	long
|	O
(	O
HANDLE	long
)	O
cSameType	int
:	O
0	int
)	O
)	O
;	O
}	O
void	O
DefineGlobalVar	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PVMMAPSTRCT	pointer
pvm	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
switch	O
(	O
hType	long
)	O
{	O
case	O
ID_NULL	int
:	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_PARM	int
)	O
;	O
break	O
;	O
case	O
ID_INPUT	int
:	O
case	O
ID_OUTPUT	int
:	O
case	O
ID_STATE	int
:	O
assert	O
(	O
pvm	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
!	O
pvm	pointer
->	O
szEqn	pointer
)	O
{	O
if	O
(	O
hType	long
==	O
ID_INPUT	int
)	O
{	O
PIFN	pointer
pifn	pointer
=	O
(	O
PIFN	pointer
)	O
malloc	function
(	O
sizeof	O
(	O
IFN	struct
)	O
)	O
;	O
if	O
(	O
GetInputFn	function
(	O
pibIn	pointer
,	O
szEqn	pointer
,	O
pifn	pointer
)	O
)	O
pvm	pointer
->	O
szEqn	pointer
=	O
(	O
PSTR	pointer
)	O
pifn	pointer
;	O
else	O
pvm	pointer
->	O
szEqn	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
pvm	pointer
->	O
szEqn	pointer
=	O
vszHasInitializer	array
;	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hType	long
)	O
;	O
}	O
break	O
;	O
}	O
case	O
ID_PARM	int
:	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADCONTEXT	O
,	O
szName	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
void	O
DefineDynamicsEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALDYN	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmDynEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
switch	O
(	O
hType	long
)	O
{	O
case	O
ID_NULL	int
:	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
case	O
ID_LOCALDYN	int
:	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmDynEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_FUNCTION	int
:	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_DERIV	int
:	O
case	O
ID_STATE	int
:	O
case	O
ID_OUTPUT	int
:	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmDynEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
break	O
;	O
case	O
ID_INPUT	int
:	O
case	O
ID_PARM	int
:	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"  Inputs and parameters cannot be assigned in Dynamics\n"	pointer
)	O
;	O
break	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineScaleEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALSCALE	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
pibIn	pointer
->	O
iLineNum	int
-	O
pibIn	pointer
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmScaleEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALSCALE	int
)	O
||	O
!	O
GetVarPTR	function
(	O
pinfo	pointer
->	O
pvmScaleEqns	pointer
,	O
szName	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmScaleEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineCalcOutEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALCALCOUT	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
pibIn	pointer
->	O
iLineNum	int
-	O
pibIn	pointer
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmCalcOutEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmCalcOutEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineJacobEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
pibIn	pointer
->	O
iLineNum	int
-	O
pibIn	pointer
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmJacobEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	function
(	O
pinfo	pointer
->	O
pvmJacobEqns	pointer
,	O
szName	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmJacobEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineEventEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
pibIn	pointer
->	O
iLineNum	int
-	O
pibIn	pointer
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmEventEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	function
(	O
pinfo	pointer
->	O
pvmEventEqns	pointer
,	O
szName	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmEventEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineRootEqn	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
HANDLE	long
hType	long
)	O
{	O
HANDLE	long
hNewType	long
=	O
(	O
hType	long
?	O
hType	long
:	O
ID_LOCALJACOB	int
)	O
;	O
PINPUTINFO	pointer
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
if	O
(	O
pibIn	pointer
->	O
iLineNum	int
-	O
pibIn	pointer
->	O
iLNPrev	int
-	O
1	int
)	O
hNewType	long
|=	O
ID_SPACEFLAG	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
szName	pointer
,	O
"Inline"	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmRootEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_INLINE	int
)	O
;	O
else	O
{	O
if	O
(	O
!	O
hType	long
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
hNewType	long
)	O
;	O
if	O
(	O
(	O
hType	long
&	O
ID_LOCALJACOB	int
)	O
||	O
!	O
GetVarPTR	function
(	O
pinfo	pointer
->	O
pvmRootEqns	pointer
,	O
szName	pointer
)	O
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmRootEqns	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hNewType	long
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"* Ignoring"	pointer
)	O
;	O
}	O
pibIn	pointer
->	O
iLNPrev	int
=	O
pibIn	pointer
->	O
iLineNum	int
;	O
}	O
void	O
DefineVariable	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
PSTR	pointer
szEqn	pointer
,	O
int	O
iKWCode	int
)	O
{	O
PVMMAPSTRCT	pointer
pvm	pointer
;	O
HANDLE	long
hGloVarType	long
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
assert	O
(	O
pinfo	pointer
->	O
wContext	int
!=	O
CN_END	int
)	O
;	O
if	O
(	O
!	O
szName	pointer
||	O
!	O
szEqn	pointer
)	O
return	O
;	O
pvm	pointer
=	O
GetVarPTR	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
)	O
;	O
hGloVarType	long
=	O
TYPE	O
(	O
pvm	pointer
)	O
;	O
if	O
(	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_DYNAMICS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_SCALE	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_JACOB	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_EVENTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_ROOTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
)	O
)	O
||	O
(	O
(	O
pinfo	pointer
->	O
wContext	int
==	O
CN_CALCOUTPUTS	int
)	O
&&	O
(	O
(	O
hGloVarType	long
==	O
ID_LOCALDYN	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALSCALE	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALEVENT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALROOT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALJACOB	int
)	O
)	O
)	O
)	O
{	O
pvm	pointer
=	O
NULL	O
;	O
hGloVarType	long
=	O
TYPE	O
(	O
pvm	pointer
)	O
;	O
}	O
if	O
(	O
(	O
iKWCode	int
!=	O
KM_INLINE	int
)	O
&&	O
(	O
hGloVarType	long
!=	O
ID_INPUT	int
||	O
pinfo	pointer
->	O
wContext	int
!=	O
CN_GLOBAL	int
)	O
&&	O
!	O
VerifyEqn	function
(	O
pibIn	pointer
,	O
szEqn	pointer
)	O
)	O
return	O
;	O
switch	O
(	O
pinfo	pointer
->	O
wContext	int
)	O
{	O
case	O
CN_GLOBAL	int
:	O
DefineGlobalVar	function
(	O
pibIn	pointer
,	O
pvm	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_DYNAMICS	int
:	O
if	O
(	O
iKWCode	int
==	O
KM_DXDT	int
)	O
DefineDynamicsEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_DERIV	int
)	O
;	O
else	O
if	O
(	O
iKWCode	int
==	O
KM_FUNCTION	int
)	O
DefineDynamicsEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
ID_FUNCTION	int
)	O
;	O
else	O
DefineDynamicsEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
if	O
(	O
hGloVarType	long
==	O
ID_STATE	int
&&	O
iKWCode	int
!=	O
KM_DXDT	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_REDEF	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"Non-standard assignment in Dynamics section. "	pointer
"Potential state discontinuity.\n"	pointer
)	O
;	O
break	O
;	O
case	O
CN_JACOB	int
:	O
DefineJacobEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_EVENTS	int
:	O
DefineEventEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_ROOTS	int
:	O
DefineRootEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_SCALE	int
:	O
DefineScaleEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
break	O
;	O
case	O
CN_CALCOUTPUTS	int
:	O
if	O
(	O
(	O
hGloVarType	long
==	O
ID_OUTPUT	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_NULL	int
)	O
||	O
(	O
hGloVarType	long
==	O
ID_LOCALCALCOUT	int
)	O
||	O
(	O
iKWCode	int
==	O
KM_INLINE	int
)	O
)	O
DefineCalcOutEqn	function
(	O
pibIn	pointer
,	O
szName	pointer
,	O
szEqn	pointer
,	O
hGloVarType	long
)	O
;	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_BADCONTEXT	O
|	O
RE_FATAL	int
,	O
szName	pointer
,	O
"Only outputs and local variables can be "	pointer
"defined in CalcOutputs{} section."	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
DeclareModelVar	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
PSTR	pointer
szName	pointer
,	O
int	O
iKWCode	int
)	O
{	O
HANDLE	long
hType	long
;	O
PINPUTINFO	pointer
pinfo	pointer
;	O
pinfo	pointer
=	O
(	O
PINPUTINFO	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
;	O
assert	O
(	O
iKWCode	int
==	O
KM_STATES	int
||	O
iKWCode	int
==	O
KM_INPUTS	int
||	O
iKWCode	int
==	O
KM_OUTPUTS	int
||	O
iKWCode	int
==	O
KM_COMPARTMENTS	int
)	O
;	O
iKWCode	int
=	O
(	O
(	O
iKWCode	int
==	O
KM_STATES	int
?	O
ID_STATE	int
:	O
(	O
iKWCode	int
==	O
KM_INPUTS	int
?	O
ID_INPUT	int
:	O
(	O
iKWCode	int
==	O
KM_OUTPUTS	int
?	O
ID_OUTPUT	int
:	O
ID_COMPARTMENT	int
)	O
)	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
hType	long
=	O
GetVarType	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
)	O
)	O
)	O
{	O
if	O
(	O
iKWCode	int
==	O
ID_COMPARTMENT	int
)	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmCpts	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
(	O
HANDLE	long
)	O
iKWCode	int
)	O
;	O
else	O
AddEquation	function
(	O
&	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
NULL	O
,	O
(	O
HANDLE	long
)	O
iKWCode	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
hType	long
==	O
iKWCode	int
)	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPDECL	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
NULL	O
)	O
;	O
else	O
{	O
if	O
(	O
hType	long
==	O
ID_PARM	int
)	O
{	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPDECL	O
|	O
RE_WARNING	int
,	O
szName	pointer
,	O
"Model variable initialized before declaration"	pointer
)	O
;	O
SetVarType	function
(	O
pinfo	pointer
->	O
pvmGloVars	pointer
,	O
szName	pointer
,	O
iKWCode	int
)	O
;	O
}	O
else	O
ReportError	function
(	O
pibIn	pointer
,	O
RE_DUPDECL	O
|	O
RE_FATAL	int
,	O
szName	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
}	O
