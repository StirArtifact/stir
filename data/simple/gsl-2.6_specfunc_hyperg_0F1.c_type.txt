static	O
int	O
hyperg_0F1_bessel_I	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
>	O
GSL_LOG_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
if	O
(	O
nu	double
<	O
0.0	int
)	O
{	O
const	O
double	O
anu	double
=	O
-	O
nu	double
;	O
const	O
double	O
s	int
=	O
2.0	int
/	O
M_PI	int
*	O
sin	function
(	O
anu	double
*	O
M_PI	int
)	O
;	O
const	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
I	struct
;	O
gsl_sf_result	struct
K	struct
;	O
int	O
stat_I	int
=	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
anu	double
,	O
x	double
,	O
&	O
I	struct
)	O
;	O
int	O
stat_K	int
=	O
gsl_sf_bessel_Knu_scaled_e	function
(	O
anu	double
,	O
x	double
,	O
&	O
K	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
*	O
I	struct
.	O
val	double
+	O
s	int
*	O
(	O
K	struct
.	O
val	double
/	O
ex	double
)	O
;	O
result	pointer
->	O
err	double
=	O
ex	double
*	O
I	struct
.	O
err	double
+	O
fabs	function
(	O
s	int
*	O
K	struct
.	O
err	double
/	O
ex	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
s	int
*	O
(	O
K	struct
.	O
val	double
/	O
ex	double
)	O
)	O
*	O
GSL_DBL_EPSILON	int
*	O
anu	double
*	O
M_PI	int
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_K	int
,	O
stat_I	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
I	struct
;	O
int	O
stat_I	int
=	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
I	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
*	O
I	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
ex	double
*	O
I	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_I	int
;	O
}	O
}	O
static	O
int	O
hyperg_0F1_bessel_J	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
nu	double
<	O
0.0	int
)	O
{	O
const	O
double	O
anu	double
=	O
-	O
nu	double
;	O
const	O
double	O
s	int
=	O
sin	function
(	O
anu	double
*	O
M_PI	int
)	O
;	O
const	O
double	O
c	double
=	O
cos	function
(	O
anu	double
*	O
M_PI	int
)	O
;	O
gsl_sf_result	struct
J	struct
;	O
gsl_sf_result	struct
Y	struct
;	O
int	O
stat_J	int
=	O
gsl_sf_bessel_Jnu_e	function
(	O
anu	double
,	O
x	double
,	O
&	O
J	struct
)	O
;	O
int	O
stat_Y	int
=	O
gsl_sf_bessel_Ynu_e	function
(	O
anu	double
,	O
x	double
,	O
&	O
Y	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
*	O
J	struct
.	O
val	double
-	O
s	int
*	O
Y	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
c	double
*	O
J	struct
.	O
err	double
)	O
+	O
fabs	function
(	O
s	int
*	O
Y	struct
.	O
err	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
anu	double
*	O
M_PI	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
J	struct
.	O
val	double
+	O
Y	struct
.	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_Y	int
,	O
stat_J	int
)	O
;	O
}	O
else	O
{	O
return	O
gsl_sf_bessel_Jnu_e	function
(	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_hyperg_0F1_e	function
(	O
double	O
c	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
rintc	double
=	O
floor	function
(	O
c	double
+	O
0.5	int
)	O
;	O
const	O
int	O
c_neg_integer	int
=	O
(	O
c	double
<	O
0.0	int
&&	O
fabs	function
(	O
c	double
-	O
rintc	double
)	O
<	O
locEPS	O
)	O
;	O
if	O
(	O
c	double
==	O
0.0	int
||	O
c_neg_integer	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
gsl_sf_result	struct
Jcm1	struct
;	O
gsl_sf_result	struct
lg_c	struct
;	O
double	O
sgn	pointer
;	O
int	O
stat_g	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
c	double
,	O
&	O
lg_c	struct
,	O
&	O
sgn	pointer
)	O
;	O
int	O
stat_J	int
=	O
hyperg_0F1_bessel_J	function
(	O
c	double
-	O
1.0	int
,	O
2.0	int
*	O
sqrt	function
(	O
-	O
x	double
)	O
,	O
&	O
Jcm1	struct
)	O
;	O
if	O
(	O
stat_g	int
!=	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_g	int
;	O
}	O
else	O
if	O
(	O
Jcm1	struct
.	O
val	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_J	int
;	O
}	O
else	O
{	O
const	O
double	O
tl	double
=	O
log	function
(	O
-	O
x	double
)	O
*	O
0.5	int
*	O
(	O
1.0	int
-	O
c	double
)	O
;	O
double	O
ln_pre_val	double
=	O
lg_c	struct
.	O
val	double
+	O
tl	double
;	O
double	O
ln_pre_err	double
=	O
lg_c	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
tl	double
)	O
;	O
return	O
gsl_sf_exp_mult_err_e	function
(	O
ln_pre_val	double
,	O
ln_pre_err	double
,	O
sgn	pointer
*	O
Jcm1	struct
.	O
val	double
,	O
Jcm1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
Icm1	struct
;	O
gsl_sf_result	struct
lg_c	struct
;	O
double	O
sgn	pointer
;	O
int	O
stat_g	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
c	double
,	O
&	O
lg_c	struct
,	O
&	O
sgn	pointer
)	O
;	O
int	O
stat_I	int
=	O
hyperg_0F1_bessel_I	function
(	O
c	double
-	O
1.0	int
,	O
2.0	int
*	O
sqrt	function
(	O
x	double
)	O
,	O
&	O
Icm1	struct
)	O
;	O
if	O
(	O
stat_g	int
!=	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_g	int
;	O
}	O
else	O
if	O
(	O
Icm1	struct
.	O
val	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_I	int
;	O
}	O
else	O
{	O
const	O
double	O
tl	double
=	O
log	function
(	O
x	double
)	O
*	O
0.5	int
*	O
(	O
1.0	int
-	O
c	double
)	O
;	O
const	O
double	O
ln_pre_val	double
=	O
lg_c	struct
.	O
val	double
+	O
tl	double
;	O
const	O
double	O
ln_pre_err	double
=	O
lg_c	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
tl	double
)	O
;	O
return	O
gsl_sf_exp_mult_err_e	function
(	O
ln_pre_val	double
,	O
ln_pre_err	double
,	O
sgn	pointer
*	O
Icm1	struct
.	O
val	double
,	O
Icm1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
}	O
}	O
}	O
double	O
gsl_sf_hyperg_0F1	function
(	O
const	O
double	O
c	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hyperg_0F1_e	function
(	O
c	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
