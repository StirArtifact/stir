static	O
int	O
multivar_vcov	function
(	O
const	O
double	O
data	pointer
[	O
]	O
,	O
size_t	long
d	long
,	O
size_t	long
tda	long
,	O
size_t	long
n	int
,	O
double	O
vcov	array
[	O
]	O
,	O
size_t	long
tda2	long
)	O
;	O
int	O
gsl_ran_multivariate_gaussian	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
gsl_vector	struct
*	O
mu	double
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
gsl_vector	struct
*	O
result	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
L	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
L	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
mu	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of mean vector with variance-covariance matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
result	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of result vector"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
gsl_vector_set	function
(	O
result	pointer
,	O
i	long
,	O
gsl_ran_ugaussian	function
(	O
r	pointer
)	O
)	O
;	O
gsl_blas_dtrmv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
L	pointer
,	O
result	pointer
)	O
;	O
gsl_vector_add	function
(	O
result	pointer
,	O
mu	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_log_pdf	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
mu	double
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
double	O
*	O
result	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
L	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
L	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
mu	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of mean vector with variance-covariance matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of quantile vector"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"incompatible dimension of work vector"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
double	O
quadForm	double
;	O
double	O
logSqrtDetSigma	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
double	O
mui	double
=	O
gsl_vector_get	function
(	O
mu	double
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
work	pointer
,	O
i	long
,	O
xi	double
-	O
mui	double
)	O
;	O
}	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
L	pointer
,	O
work	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
work	pointer
,	O
work	pointer
,	O
&	O
quadForm	double
)	O
;	O
logSqrtDetSigma	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
{	O
double	O
Lii	double
=	O
gsl_matrix_get	function
(	O
L	pointer
,	O
i	long
,	O
i	long
)	O
;	O
logSqrtDetSigma	double
+=	O
log	function
(	O
Lii	double
)	O
;	O
}	O
*	O
result	pointer
=	O
-	O
0.5	int
*	O
quadForm	double
-	O
logSqrtDetSigma	double
-	O
0.5	int
*	O
M	int
*	O
log	function
(	O
2.0	int
*	O
M_PI	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_pdf	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
mu	double
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
double	O
*	O
result	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
double	O
logpdf	double
;	O
int	O
status	int
=	O
gsl_ran_multivariate_gaussian_log_pdf	function
(	O
x	double
,	O
mu	double
,	O
L	pointer
,	O
&	O
logpdf	double
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
result	pointer
=	O
exp	function
(	O
logpdf	double
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_ran_multivariate_gaussian_mean	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
mu_hat	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
X	pointer
->	O
size2	long
;	O
if	O
(	O
N	int
!=	O
mu_hat	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"mu_hat vector has wrong size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
gsl_vector_const_view	struct
c	pointer
=	O
gsl_matrix_const_column	function
(	O
X	pointer
,	O
j	long
)	O
;	O
double	O
mean	double
=	O
gsl_stats_mean	function
(	O
c	pointer
.	O
vector	struct
.	O
data	pointer
,	O
c	pointer
.	O
vector	struct
.	O
stride	long
,	O
M	int
)	O
;	O
gsl_vector_set	function
(	O
mu_hat	pointer
,	O
j	long
,	O
mean	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_ran_multivariate_gaussian_vcov	function
(	O
const	O
gsl_matrix	struct
*	O
X	pointer
,	O
gsl_matrix	struct
*	O
sigma_hat	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
X	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
X	pointer
->	O
size2	long
;	O
if	O
(	O
sigma_hat	pointer
->	O
size1	long
!=	O
sigma_hat	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"sigma_hat must be a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
sigma_hat	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"sigma_hat does not match X matrix dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
return	O
multivar_vcov	function
(	O
X	pointer
->	O
data	pointer
,	O
N	int
,	O
X	pointer
->	O
tda	long
,	O
M	int
,	O
sigma_hat	pointer
->	O
data	pointer
,	O
sigma_hat	pointer
->	O
tda	long
)	O
;	O
}	O
}	O
static	O
int	O
multivar_vcov	function
(	O
const	O
double	O
data	pointer
[	O
]	O
,	O
size_t	long
d	long
,	O
size_t	long
tda	long
,	O
size_t	long
n	int
,	O
double	O
vcov	array
[	O
]	O
,	O
size_t	long
tda2	long
)	O
{	O
size_t	long
j1	function
=	O
0	int
,	O
j2	long
=	O
0	int
;	O
for	O
(	O
j1	function
=	O
0	int
;	O
j1	function
<	O
d	long
;	O
++	O
j1	function
)	O
{	O
vcov	array
[	O
j1	function
*	O
tda2	long
+	O
j1	function
]	O
=	O
gsl_stats_variance	function
(	O
&	O
(	O
data	pointer
[	O
j1	function
]	O
)	O
,	O
tda	long
,	O
n	int
)	O
;	O
for	O
(	O
j2	long
=	O
j1	function
+	O
1	int
;	O
j2	long
<	O
d	long
;	O
++	O
j2	long
)	O
{	O
vcov	array
[	O
j1	function
*	O
tda2	long
+	O
j2	long
]	O
=	O
gsl_stats_covariance	function
(	O
&	O
(	O
data	pointer
[	O
j1	function
]	O
)	O
,	O
tda	long
,	O
&	O
(	O
data	pointer
[	O
j2	long
]	O
)	O
,	O
tda	long
,	O
n	int
)	O
;	O
vcov	array
[	O
j2	long
*	O
tda2	long
+	O
j1	function
]	O
=	O
vcov	array
[	O
j1	function
*	O
tda2	long
+	O
j2	long
]	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
